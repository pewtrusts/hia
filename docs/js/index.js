!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=10)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(3);function a(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}var o=function(){function t(e,n){var r=this;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),"string"!=typeof e)throw'First parameter must be a string referencing the CSS-like selector of the element to be created \n                    ("div#divID.divClass").';this.selector=e,this.model=n.model,this.parent=n.parent,this.app=n.app,this.renderToSelector=n.renderToSelector,this.container=i.DOMHelpers.q(this.renderToSelector),this.children=n.children,this.rerender=n.rerenderOnDataMismatch&&n.model.isMismatched,this.data=n.data,this.createComponent=n.createComponent||null,this.el=this.prerender(arguments),this.isReady=new Promise(function(t,e){r.resolve=t,r.reject=e}).then(function(){r.children.forEach(function(t){t.container=i.DOMHelpers.q(t.renderToSelector),t.container.appendChild(t.el),t.resolve(!0)})}),!this.prerendered&&this.container&&(this.container.appendChild(this.el),this.resolve(!0))}return r(t,[{key:"addChildren",value:function(t){var e,n;(e=this.children).push.apply(e,a(t)),(n=this.app.views).push.apply(n,a(t))}},{key:"prerender",value:function(){var t=i.DOMHelpers.q(this.selector);return t&&!this.rerender?(this.prerendered=!0,t):t?(t.innerHTML="",t):i.DOMHelpers.c(this.selector)}},{key:"init",value:function(){}}]),t}();e.default=o},function(t,e,n){var r=n(7);const i=[];t.exports={logSubs:function(){console.log(i)},setSubs:function(t){t.forEach(function(t){var e=t[0],n=t[1];i.push(r.subscribe(e,n))})},cancelSub:function(t,e){console.log("pubsub",i);var n=r.subscribe(t,e),a=i.indexOf(n);if(console.log("pubsub",n),-1===a)throw"Subscription does not exist.";r.unsubscribe(n),i.splice(a,1)}}},function(t,e,n){const r=n(7),i={};function a(){console.log(i)}Array.prototype.compare=Array.prototype.compare||function(t){if(this.length!=t.length)return!1;if(0===this.length&&0===t.length)return!0;console.log("in compare"),console.log(this);for(var e=0;e<t.length;e++)if(this[e]!==t[e])return!1;return!0},e.stateModule={logState:a,getState:function(t){return void 0!==i[t]?i[t][0]:void 0},getPreviousState:function(t){return void 0!==i[t]&&void 0!==i[t][1]?i[t][1]:void 0},setState:function(t,e,n){if(n=n||{},void 0===i[t])i[t]=[e],r.publish(t,e),a();else{var o=!0;o="string"==typeof e||"number"==typeof e?i[t][0]!==e:!Array.isArray(e)||!Array.isArray(i[t][0])||!e.compare(i[t][0]),n.forceChange&&(o=!0),o&&(i[t].unshift(e),r.publish(t,e),a(),i[t].length>2&&(i[t].length=2))}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GTMPush=function(t){var e=window.dataLayer||null;e&&e.push({event:"Interactive Click",eventData:t})},e.publishWindowResize=function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:350;window.addEventListener("resize",function(){e||(e=setTimeout(function(){t.setState("resize",[document.documentElement.clientWidth,document.documentElement.clientHeight]),e=null},n))},!1)};e.FadeInText=(HTMLElement.prototype.fadeOutContent=function(){this.classList.add("no-opacity")},void(HTMLElement.prototype.fadeInContent=function(t,e){var n=this,r=e||0;return e&&(this.style.transition="opacity "+e+"s ease-in-out"),new Promise(function(e){var i=window.getComputedStyle(n).getPropertyValue("transition-duration")||r,a=1e3*parseFloat(i);n.fadeOutContent(),setTimeout(function(){n.innerHTML=t,n.classList.remove("no-opacity"),e(!0)},a)})})),e.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ \/]/g,"-").replace(/['"”’“‘,.!?;()&:]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},String.prototype.doCamelCase=function(){return this.replace(/(?:^\w|[A-Z]|\b\w)/g,function(t,e){return 0==e?t.toLowerCase():t.toUpperCase()}).replace(/\s+/g,"")},String.prototype.trunc=String.prototype.trunc||function(t,e){if(this.length<=t)return this;var n=this.substr(0,t-1);return(e?n.substr(0,n.lastIndexOf(" ")):n)+"..."},void(String.prototype.hashCode=function(){var t,e=0;if(0===this.length)return e;for(t=0;t<this.length;t++)e=(e<<5)-e+this.charCodeAt(t),e|=0;return e})),e.DOMHelpers={c:function(t){if(-1!==t.indexOf(".")||-1!==t.indexOf("#")){var e=t.match(/\.([^#.]*)/g)||[],n=t.match(/#([^.]*)/),r=t.match(/^([^.#]+)/),i=document.createElement(r[0]);return e.forEach(function(t){i.classList.add(t.replace(".",""))}),null!==n&&i.setAttribute("id",n[1]),i}return document.createElement(t)},q:function(t){return document.querySelector(t)},qa:function(t){return document.querySelectorAll(t)}}},function(t,e,n){"use strict";n.r(e);var r=n(9);
/**!
* tippy.js v4.3.1
* (c) 2017-2019 atomiks
* MIT License
*/function i(){return(i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}var a="undefined"!=typeof window&&"undefined"!=typeof document,o=a?navigator.userAgent:"",s=/MSIE |Trident\//.test(o),u=/UCBrowser\//.test(o),c=a&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,l={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:0,distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",triggerTarget:null,updateDuration:0,wait:null,zIndex:9999},f=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],p=a?Element.prototype:{},d=p.matches||p.matchesSelector||p.webkitMatchesSelector||p.mozMatchesSelector||p.msMatchesSelector;function h(t){return[].slice.call(t)}function L(t,e){return v(t,function(t){return d.call(t,e)})}function v(t,e){for(;t;){if(e(t))return t;t=t.parentElement}return null}var y={passive:!0},m=4,g="x-placement",b="x-out-of-boundaries",_="tippy-iOS",w="tippy-active",x="tippy-popper",k="tippy-tooltip",O="tippy-content",E="tippy-backdrop",S="tippy-arrow",M="tippy-roundarrow",C=".".concat(x),A=".".concat(k),j=".".concat(O),P=".".concat(E),T=".".concat(S),D=".".concat(M),I=!1;function R(){I||(I=!0,c&&document.body.classList.add(_),window.performance&&document.addEventListener("mousemove",H))}var N=0;function H(){var t=performance.now();t-N<20&&(I=!1,document.removeEventListener("mousemove",H),c||document.body.classList.remove(_)),N=t}function W(){var t=document.activeElement;t&&t.blur&&t._tippy&&t.blur()}var B=Object.keys(l);function Z(t,e){return{}.hasOwnProperty.call(t,e)}function F(t,e,n){if(Array.isArray(t)){var r=t[e];return null==r?n:r}return t}function q(t,e){var n;return function(){var r=this,i=arguments;clearTimeout(n),n=setTimeout(function(){return t.apply(r,i)},e)}}function z(t,e){return t&&t.modifiers&&t.modifiers[e]}function U(t,e){return t.indexOf(e)>-1}function V(t){return t instanceof Element}function Y(t){return!(!t||!Z(t,"isVirtual"))||V(t)}function G(t,e){return"function"==typeof t?t.apply(null,e):t}function X(t,e){t.filter(function(t){return"flip"===t.name})[0].enabled=e}function $(){return document.createElement("div")}function K(t,e){t.forEach(function(t){t&&(t.style.transitionDuration="".concat(e,"ms"))})}function J(t,e){t.forEach(function(t){t&&t.setAttribute("data-state",e)})}function Q(t,e){var n=i({},e,{content:G(e.content,[t])},e.ignoreAttributes?{}:function(t){return B.reduce(function(e,n){var r=(t.getAttribute("data-tippy-".concat(n))||"").trim();if(!r)return e;if("content"===n)e[n]=r;else try{e[n]=JSON.parse(r)}catch(t){e[n]=r}return e},{})}(t));return(n.arrow||u)&&(n.animateFill=!1),n}function tt(t,e){Object.keys(t).forEach(function(t){if(!Z(e,t))throw new Error("[tippy]: `".concat(t,"` is not a valid option"))})}function et(t,e){t.innerHTML=V(e)?e.innerHTML:e}function nt(t,e){if(V(e.content))et(t,""),t.appendChild(e.content);else if("function"!=typeof e.content){t[e.allowHTML?"innerHTML":"textContent"]=e.content}}function rt(t){return{tooltip:t.querySelector(A),backdrop:t.querySelector(P),content:t.querySelector(j),arrow:t.querySelector(T)||t.querySelector(D)}}function it(t){t.setAttribute("data-inertia","")}function at(t){var e=$();return"round"===t?(e.className=M,et(e,'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>')):e.className=S,e}function ot(){var t=$();return t.className=E,t.setAttribute("data-state","hidden"),t}function st(t,e){t.setAttribute("tabindex","-1"),e.setAttribute("data-interactive","")}function ut(t,e,n){var r=u&&void 0!==document.body.style.webkitTransition?"webkitTransitionEnd":"transitionend";t[e+"EventListener"](r,n)}function ct(t){var e=t.getAttribute(g);return e?e.split("-")[0]:""}function lt(t,e,n){n.split(" ").forEach(function(n){t.classList[e](n+"-theme")})}function ft(t,e){var n=$();n.className=x,n.id="tippy-".concat(t),n.style.zIndex=""+e.zIndex,e.role&&n.setAttribute("role",e.role);var r=$();r.className=k,r.style.maxWidth=e.maxWidth+("number"==typeof e.maxWidth?"px":""),r.setAttribute("data-size",e.size),r.setAttribute("data-animation",e.animation),r.setAttribute("data-state","hidden"),lt(r,"add",e.theme);var i=$();return i.className=O,i.setAttribute("data-state","hidden"),e.interactive&&st(n,r),e.arrow&&r.appendChild(at(e.arrowType)),e.animateFill&&(r.appendChild(ot()),r.setAttribute("data-animatefill","")),e.inertia&&it(r),nt(i,e),r.appendChild(i),n.appendChild(r),n}function pt(t,e,n){var r=rt(t),i=r.tooltip,a=r.content,o=r.backdrop,s=r.arrow;t.style.zIndex=""+n.zIndex,i.setAttribute("data-size",n.size),i.setAttribute("data-animation",n.animation),i.style.maxWidth=n.maxWidth+("number"==typeof n.maxWidth?"px":""),n.role?t.setAttribute("role",n.role):t.removeAttribute("role"),e.content!==n.content&&nt(a,n),!e.animateFill&&n.animateFill?(i.appendChild(ot()),i.setAttribute("data-animatefill","")):e.animateFill&&!n.animateFill&&(i.removeChild(o),i.removeAttribute("data-animatefill")),!e.arrow&&n.arrow?i.appendChild(at(n.arrowType)):e.arrow&&!n.arrow&&i.removeChild(s),e.arrow&&n.arrow&&e.arrowType!==n.arrowType&&i.replaceChild(at(n.arrowType),s),!e.interactive&&n.interactive?st(t,i):e.interactive&&!n.interactive&&function(t,e){t.removeAttribute("tabindex"),e.removeAttribute("data-interactive")}(t,i),!e.inertia&&n.inertia?it(i):e.inertia&&!n.inertia&&function(t){t.removeAttribute("data-inertia")}(i),e.theme!==n.theme&&(lt(i,"remove",e.theme),lt(i,"add",n.theme))}var dt=1;function ht(t,e){var n,a,o,u,c,p=Q(t,e);if(!p.multiple&&t._tippy)return null;var _,x,k,O,E,S,M=!1,A=!1,j=!1,P=[],T=p.interactiveDebounce>0?q(yt,p.interactiveDebounce):yt,D=dt++,R=ft(D,p),N=rt(R),H={id:D,reference:t,popper:R,popperChildren:N,popperInstance:null,props:p,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:Mt,set:Ct,setContent:function(t){Ct({content:t})},show:At,hide:jt,enable:function(){H.state.isEnabled=!0},disable:function(){H.state.isEnabled=!1},destroy:function(e){if(H.state.isDestroyed)return;H.state.isMounted&&jt(0);st(),delete t._tippy;var n=H.props.target;n&&e&&V(t)&&h(t.querySelectorAll(n)).forEach(function(t){t._tippy&&t._tippy.destroy()});H.popperInstance&&H.popperInstance.destroy();H.state.isDestroyed=!0}};return t._tippy=H,R._tippy=H,ot(),p.lazy||kt(),p.showOnInit&&Ot(),!p.a11y||p.target||(!V(S=Y())||d.call(S,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")&&!S.hasAttribute("disabled"))||Y().setAttribute("tabindex","0"),R.addEventListener("mouseenter",function(t){H.props.interactive&&H.state.isVisible&&"mouseenter"===n&&Ot(t,!0)}),R.addEventListener("mouseleave",function(){H.props.interactive&&"mouseenter"===n&&document.addEventListener("mousemove",T)}),H;function W(){document.removeEventListener("mousemove",Lt)}function B(){document.body.removeEventListener("mouseleave",Et),document.removeEventListener("mousemove",T)}function Y(){return H.props.triggerTarget||t}function $(){document.addEventListener("click",St,!0)}function et(){return[H.popperChildren.tooltip,H.popperChildren.backdrop,H.popperChildren.content]}function nt(){return H.props.followCursor&&!I&&"focus"!==n}function it(t,e){var n=H.popperChildren.tooltip;function r(t){t.target===n&&(ut(n,"remove",r),e())}if(0===t)return e();ut(n,"remove",O),ut(n,"add",r),O=r}function at(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];Y().addEventListener(t,e,n),P.push({eventType:t,handler:e,options:n})}function ot(){H.props.touchHold&&!H.props.target&&(at("touchstart",vt,y),at("touchend",mt,y)),H.props.trigger.trim().split(" ").forEach(function(t){if("manual"!==t)if(H.props.target)switch(t){case"mouseenter":at("mouseover",bt),at("mouseout",_t);break;case"focus":at("focusin",bt),at("focusout",_t);break;case"click":at(t,bt)}else switch(at(t,vt),t){case"mouseenter":at("mouseleave",mt);break;case"focus":at(s?"focusout":"blur",gt)}})}function st(){P.forEach(function(t){var e=t.eventType,n=t.handler,r=t.options;Y().removeEventListener(e,n,r)}),P=[]}function lt(t){return H.props.arrow?E[t]+("round"===H.props.arrowType?18:16):E[t]}function Lt(e){var n=a=e,r=n.clientX,o=n.clientY;if(E){var s=t.getBoundingClientRect(),u=H.props.followCursor,c="horizontal"===u,l="vertical"===u,f=ct(R),p=U(["top","bottom"],f),d=U(["left","right"],f),h=i({},E);p&&(h.left=lt("left"),h.right=lt("right")),d&&(h.top=lt("top"),h.bottom=lt("bottom"));var L=p?Math.max(h.left,r):r,y=d?Math.max(h.top,o):o;p&&L>h.right&&(L=Math.min(r,window.innerWidth-h.right)),d&&y>h.bottom&&(y=Math.min(o,window.innerHeight-h.bottom)),!v(e.target,function(e){return e===t})&&H.props.interactive||(H.popperInstance.reference=i({},H.popperInstance.reference,{getBoundingClientRect:function(){return{width:0,height:0,top:c?s.top:y,bottom:c?s.bottom:y,left:l?s.left:L,right:l?s.right:L}},clientWidth:0,clientHeight:0}),H.popperInstance.scheduleUpdate()),"initial"===u&&H.state.isVisible&&W()}}function vt(t){H.state.isEnabled&&!wt(t)&&(H.state.isVisible||(n=t.type,t instanceof MouseEvent&&(a=t)),"click"===t.type&&!1!==H.props.hideOnClick&&H.state.isVisible?Et():Ot(t))}function yt(e){var n=L(e.target,C)===R,r=v(e.target,function(e){return e===t});n||r||function(t,e,n,r){if(!t)return!0;var i=n.clientX,a=n.clientY,o=r.interactiveBorder,s=r.distance,u=e.top-a>("top"===t?o+s:o),c=a-e.bottom>("bottom"===t?o+s:o),l=e.left-i>("left"===t?o+s:o),f=i-e.right>("right"===t?o+s:o);return u||c||l||f}(ct(R),R.getBoundingClientRect(),e,H.props)&&(B(),Et())}function mt(t){if(!wt(t))return H.props.interactive?(document.body.addEventListener("mouseleave",Et),void document.addEventListener("mousemove",T)):void Et()}function gt(t){t.target===Y()&&(H.props.interactive&&t.relatedTarget&&R.contains(t.relatedTarget)||Et())}function bt(t){L(t.target,H.props.target)&&Ot(t)}function _t(t){L(t.target,H.props.target)&&Et()}function wt(t){var e="ontouchstart"in window,n=U(t.type,"touch"),r=H.props.touchHold;return e&&I&&r&&!n||I&&!r&&n}function xt(){!j&&k&&(j=!0,function(t){t.offsetHeight}(R),k())}function kt(){var e=H.props.popperOptions,n=H.popperChildren,a=n.tooltip,o=n.arrow,s=z(e,"preventOverflow");function u(t){H.props.flip&&!H.props.flipOnUpdate&&(t.flipped&&(H.popperInstance.options.placement=t.placement),X(H.popperInstance.modifiers,!1)),a.setAttribute(g,t.placement),!1!==t.attributes[b]?a.setAttribute(b,""):a.removeAttribute(b),x&&x!==t.placement&&A&&(a.style.transition="none",requestAnimationFrame(function(){a.style.transition=""})),x=t.placement,A=H.state.isVisible;var e=ct(R),n=a.style;n.top=n.bottom=n.left=n.right="",n[e]=-(H.props.distance-10)+"px";var r=s&&void 0!==s.padding?s.padding:m,o="number"==typeof r,u=i({top:o?r:r.top,bottom:o?r:r.bottom,left:o?r:r.left,right:o?r:r.right},!o&&r);u[e]=o?r+H.props.distance:(r[e]||0)+H.props.distance,H.popperInstance.modifiers.filter(function(t){return"preventOverflow"===t.name})[0].padding=u,E=u}var c=i({eventsEnabled:!1,placement:H.props.placement},e,{modifiers:i({},e?e.modifiers:{},{preventOverflow:i({boundariesElement:H.props.boundary,padding:m},s),arrow:i({element:o,enabled:!!o},z(e,"arrow")),flip:i({enabled:H.props.flip,padding:H.props.distance+m,behavior:H.props.flipBehavior},z(e,"flip")),offset:i({offset:H.props.offset},z(e,"offset"))}),onCreate:function(t){xt(),u(t),e&&e.onCreate&&e.onCreate(t)},onUpdate:function(t){xt(),u(t),e&&e.onUpdate&&e.onUpdate(t)}});H.popperInstance=new r.a(t,R,c)}function Ot(t,n){if(Mt(),!H.state.isVisible){if(H.props.target)return function(t){if(t){var n=L(t.target,H.props.target);n&&!n._tippy&&ht(n,i({},H.props,{content:G(e.content,[n]),appendTo:e.appendTo,target:"",showOnInit:!0}))}}(t);if(M=!0,t&&!n&&H.props.onTrigger(H,t),H.props.wait)return H.props.wait(H,t);nt()&&!H.state.isMounted&&(H.popperInstance||kt(),document.addEventListener("mousemove",Lt)),$();var r=F(H.props.delay,0,l.delay);r?o=setTimeout(function(){At()},r):At()}}function Et(){if(Mt(),!H.state.isVisible)return W();M=!1;var t=F(H.props.delay,1,l.delay);t?u=setTimeout(function(){H.state.isVisible&&jt()},t):c=requestAnimationFrame(function(){jt()})}function St(t){if(!H.props.interactive||!R.contains(t.target)){if(Y().contains(t.target)){if(I)return;if(H.state.isVisible&&U(H.props.trigger,"click"))return}!0===H.props.hideOnClick&&(Mt(),jt())}}function Mt(){clearTimeout(o),clearTimeout(u),cancelAnimationFrame(c)}function Ct(e){tt(e=e||{},l),st();var n=H.props,r=Q(t,i({},H.props,e,{ignoreAttributes:!0}));r.ignoreAttributes=Z(e,"ignoreAttributes")?e.ignoreAttributes||!1:n.ignoreAttributes,H.props=r,ot(),B(),T=q(yt,e.interactiveDebounce||0),pt(R,n,r),H.popperChildren=rt(R),H.popperInstance&&(f.some(function(t){return Z(e,t)&&e[t]!==n[t]})?(H.popperInstance.destroy(),kt(),H.state.isVisible&&H.popperInstance.enableEventListeners(),H.props.followCursor&&a&&Lt(a)):H.popperInstance.update())}function At(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:F(H.props.duration,0,l.duration[1]);if(!H.state.isDestroyed&&H.state.isEnabled&&(!I||H.props.touch)&&!Y().hasAttribute("disabled")&&!1!==H.props.onShow(H)){$(),R.style.visibility="visible",H.state.isVisible=!0,H.props.interactive&&Y().classList.add(w);var n=et();K(n.concat(R),0),k=function(){H.state.isVisible&&(nt()||H.popperInstance.update(),H.popperChildren.backdrop&&(H.popperChildren.content.style.transitionDelay=Math.round(e/12)+"ms"),H.props.sticky&&(K([R],s?0:H.props.updateDuration),function t(){H.popperInstance.scheduleUpdate(),H.state.isMounted?requestAnimationFrame(t):K([R],0)}()),K([R],H.props.updateDuration),K(n,e),J(n,"visible"),function(t,e){it(t,e)}(e,function(){H.props.aria&&Y().setAttribute("aria-".concat(H.props.aria),R.id),H.props.onShown(H),H.state.isShown=!0}))},function(){j=!1;var e=!(nt()||"initial"===H.props.followCursor&&I);H.popperInstance?(nt()||(H.popperInstance.scheduleUpdate(),e&&H.popperInstance.enableEventListeners()),X(H.popperInstance.modifiers,H.props.flip)):(kt(),e&&H.popperInstance.enableEventListeners()),H.popperInstance.reference=t;var n=H.popperChildren.arrow;nt()?(n&&(n.style.margin="0"),a&&Lt(a)):n&&(n.style.margin=""),I&&a&&"initial"===H.props.followCursor&&(Lt(a),n&&(n.style.margin="0"));var r=H.props.appendTo;(_="parent"===r?t.parentNode:G(r,[t])).contains(R)||(_.appendChild(R),H.props.onMount(H),H.state.isMounted=!0)}()}}function jt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:F(H.props.duration,1,l.duration[1]);if(!H.state.isDestroyed&&H.state.isEnabled&&!1!==H.props.onHide(H)){document.removeEventListener("click",St,!0),R.style.visibility="hidden",H.state.isVisible=!1,H.state.isShown=!1,A=!1,H.props.interactive&&Y().classList.remove(w);var e=et();K(e,t),J(e,"hidden"),function(t,e){it(t,function(){!H.state.isVisible&&_&&_.contains(R)&&e()})}(t,function(){M||W(),H.props.aria&&Y().removeAttribute("aria-".concat(H.props.aria)),H.popperInstance.disableEventListeners(),H.popperInstance.options.placement=H.props.placement,_.removeChild(R),H.props.onHidden(H),H.state.isMounted=!1})}}}var Lt=!1;function vt(t,e){tt(e||{},l),Lt||(document.addEventListener("touchstart",R,y),window.addEventListener("blur",W),Lt=!0);var n,r=i({},l,e);n=t,"[object Object]"!=={}.toString.call(n)||n.addEventListener||function(t){var e={isVirtual:!0,attributes:t.attributes||{},contains:function(){},setAttribute:function(e,n){t.attributes[e]=n},getAttribute:function(e){return t.attributes[e]},removeAttribute:function(e){delete t.attributes[e]},hasAttribute:function(e){return e in t.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(e){t.classList.classNames[e]=!0},remove:function(e){delete t.classList.classNames[e]},contains:function(e){return e in t.classList.classNames}}};for(var n in e)t[n]=e[n]}(t);var a=function(t){if(Y(t))return[t];if(t instanceof NodeList)return h(t);if(Array.isArray(t))return t;try{return h(document.querySelectorAll(t))}catch(t){return[]}}(t).reduce(function(t,e){var n=e&&ht(e,r);return n&&t.push(n),t},[]);return Y(t)?a[0]:a}vt.version="4.3.1",vt.defaults=l,vt.setDefaults=function(t){Object.keys(t).forEach(function(e){l[e]=t[e]})},vt.hideAll=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.exclude,n=t.duration;h(document.querySelectorAll(C)).forEach(function(t){var r,i=t._tippy;if(i){var a=!1;e&&(a=(r=e)._tippy&&!d.call(r,C)?i.reference===e:t===e.popper),a||i.hide(n)}})},vt.group=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.delay,r=void 0===n?t[0].props.delay:n,a=e.duration,o=void 0===a?0:a,s=!1;function u(t){s=t,p()}function c(e){e._originalProps.onShow(e),t.forEach(function(t){t.set({duration:o}),t.state.isVisible&&t.hide()}),u(!0)}function l(t){t._originalProps.onHide(t),u(!1)}function f(t){t._originalProps.onShown(t),t.set({duration:t._originalProps.duration})}function p(){t.forEach(function(t){t.set({onShow:c,onShown:f,onHide:l,delay:s?[0,Array.isArray(r)?r[1]:r]:r,duration:s?o:t._originalProps.duration})})}t.forEach(function(t){t._originalProps?t.set(t._originalProps):t._originalProps=i({},t.props)}),p()},a&&setTimeout(function(){h(document.querySelectorAll("[data-tippy]")).forEach(function(t){var e=t.getAttribute("data-tippy");e&&vt(t,{content:e})})}),function(t){if(a){var e=document.createElement("style");e.type="text/css",e.textContent=t,e.setAttribute("data-tippy-stylesheet","");var n=document.head,r=n.firstChild;r?n.insertBefore(e,r):n.appendChild(e)}}('.tippy-iOS{cursor:pointer!important;-webkit-tap-highlight-color:transparent}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px) rotateX(0);transform:perspective(700px) translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(60deg);transform:perspective(700px) translateY(0) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px) rotateX(0);transform:perspective(700px) translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(-60deg);transform:perspective(700px) translateY(0) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px) rotateY(0);transform:perspective(700px) translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(-60deg);transform:perspective(700px) translateX(0) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px) rotateY(0);transform:perspective(700px) translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(60deg);transform:perspective(700px) translateX(0) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=visible]{opacity:1}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}'),e.default=vt},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){(function(t){!function(n,r){"use strict";var i={};n.PubSub=i;var a=n.define;!function(t){var e={},n=-1;function r(t){var e;for(e in t)if(t.hasOwnProperty(e))return!0;return!1}function i(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function a(t,e,n){t(e,n)}function o(t,n,r,o){var s,u=e[n],c=o?a:i;if(e.hasOwnProperty(n))for(s in u)u.hasOwnProperty(s)&&c(u[s],t,r)}function s(t,n,i,a){var s=function(t,e,n){return function(){var r=String(t),i=r.lastIndexOf(".");for(o(t,t,e,n);-1!==i;)r=r.substr(0,i),i=r.lastIndexOf("."),o(t,r,e,n)}}(t="symbol"==typeof t?t.toString():t,n,a),u=function(t){var n=String(t),i=Boolean(e.hasOwnProperty(n)&&r(e[n])),a=n.lastIndexOf(".");for(;!i&&-1!==a;)n=n.substr(0,a),a=n.lastIndexOf("."),i=Boolean(e.hasOwnProperty(n)&&r(e[n]));return i}(t);return!!u&&(!0===i?s():setTimeout(s,0),!0)}t.publish=function(e,n){return s(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return s(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,r){if("function"!=typeof r)return!1;t="symbol"==typeof t?t.toString():t,e.hasOwnProperty(t)||(e[t]={});var i="uid_"+String(++n);return e[t][i]=r,i},t.subscribeOnce=function(e,n){var r=t.subscribe(e,function(){t.unsubscribe(r),n.apply(this,arguments)});return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)e.hasOwnProperty(n)&&0===n.indexOf(t)&&delete e[n]},t.unsubscribe=function(n){var r,i,a,o="string"==typeof n&&(e.hasOwnProperty(n)||function(t){var n;for(n in e)if(e.hasOwnProperty(n)&&0===n.indexOf(t))return!0;return!1}(n)),s=!o&&"string"==typeof n,u="function"==typeof n,c=!1;if(!o){for(r in e)if(e.hasOwnProperty(r)){if(i=e[r],s&&i[n]){delete i[n],c=n;break}if(u)for(a in i)i.hasOwnProperty(a)&&i[a]===n&&(delete i[a],c=!0)}return c}t.clearSubscriptions(n)}}(i),"function"==typeof a&&a.amd?a(function(){return i}):(void 0!==t&&t.exports&&(e=t.exports=i),e.PubSub=i,t.exports=e=i)}("object"==typeof window&&window||this)}).call(this,n(6)(t))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=u(n(0)),a=u(n(18)),o=n(2),s=n(3);function u(t){return t&&t.__esModule?t:{default:t}}var c=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),r(e,[{key:"prerender",value:function(){var t=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.prerendered&&!this.rerender)return t;var n=document.createElement("nav");if(n.setAttribute("aria-label","In-page"),n.setAttribute("aria-controls","map-view bar-view waffle-view"),n.classList.add(a.default.menuList),this.sections=this.model.fields.filter(function(t){return!t.isSecondaryOnly}),this.sections.forEach(function(t){var e=document.createElement("div");e.classList.add(a.default.navItemWrapper);var r=document.createElement("a");r.classList.add(a.default.navLink),r.href="#"+t.key,r.innerHTML="<span>"+t.heading+" <span>"+t.text+"</span></span>",r.setAttribute("data-section",t.key),e.appendChild(r),n.appendChild(e)}),this.sections.length%2==1){var r=document.createElement("div");r.classList.add(a.default.navLink,a.default.placeholderMenuItem),r.setAttribute("disabled","disabled"),n.appendChild(r)}return t.appendChild(n),t}},{key:"init",value:function(){console.log("init menu");var t=this;this.el.querySelectorAll("a").forEach(function(e){console.log(e),e.addEventListener("click",function(e){e.preventDefault(),t.clickHandler.call(this,t)}),e.addEventListener("keyup",function(e){13===e.keyCode&&(e.preventDefault(),t.clickHandler.call(this,t))})})}},{key:"clickHandler",value:function(t){console.log("menu click",this,t),console.log(t),console.log("click",t.name),(0,s.GTMPush)("HIA|Navigate|"+t.name+"|"+this.dataset.section),o.stateModule.setState("view",this.dataset.section)}}]),e}();e.default=c},function(t,e,n){"use strict";(function(t){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.15.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],i=0,a=0;a<r.length;a+=1)if(n&&navigator.userAgent.indexOf(r[a])>=0){i=1;break}var o=n&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},i))}};function s(t){return t&&"[object Function]"==={}.toString.call(t)}function u(t,e){if(1!==t.nodeType)return[];var n=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?n[e]:n}function c(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function l(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=u(t),n=e.overflow,r=e.overflowX,i=e.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?t:l(c(t))}var f=n&&!(!window.MSInputMethodContext||!document.documentMode),p=n&&/MSIE 10/.test(navigator.userAgent);function d(t){return 11===t?f:10===t?p:f||p}function h(t){if(!t)return document.documentElement;for(var e=d(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===u(n,"position")?h(n):n:t?t.ownerDocument.documentElement:document.documentElement}function L(t){return null!==t.parentNode?L(t.parentNode):t}function v(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?t:e,i=n?e:t,a=document.createRange();a.setStart(r,0),a.setEnd(i,0);var o,s,u=a.commonAncestorContainer;if(t!==u&&e!==u||r.contains(i))return"BODY"===(s=(o=u).nodeName)||"HTML"!==s&&h(o.firstElementChild)!==o?h(u):u;var c=L(t);return c.host?v(c.host,e):v(t,L(e).host)}function y(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var r=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||r)[e]}return t[e]}function m(t,e){var n="x"===e?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+r+"Width"],10)}function g(t,e,n,r){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],d(10)?parseInt(n["offset"+t])+parseInt(r["margin"+("Height"===t?"Top":"Left")])+parseInt(r["margin"+("Height"===t?"Bottom":"Right")]):0)}function b(t){var e=t.body,n=t.documentElement,r=d(10)&&getComputedStyle(n);return{height:g("Height",e,n,r),width:g("Width",e,n,r)}}var _=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},w=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),x=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},k=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function O(t){return k({},t,{right:t.left+t.width,bottom:t.top+t.height})}function E(t){var e={};try{if(d(10)){e=t.getBoundingClientRect();var n=y(t,"top"),r=y(t,"left");e.top+=n,e.left+=r,e.bottom+=n,e.right+=r}else e=t.getBoundingClientRect()}catch(t){}var i={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},a="HTML"===t.nodeName?b(t.ownerDocument):{},o=a.width||t.clientWidth||i.right-i.left,s=a.height||t.clientHeight||i.bottom-i.top,c=t.offsetWidth-o,l=t.offsetHeight-s;if(c||l){var f=u(t);c-=m(f,"x"),l-=m(f,"y"),i.width-=c,i.height-=l}return O(i)}function S(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=d(10),i="HTML"===e.nodeName,a=E(t),o=E(e),s=l(t),c=u(e),f=parseFloat(c.borderTopWidth,10),p=parseFloat(c.borderLeftWidth,10);n&&i&&(o.top=Math.max(o.top,0),o.left=Math.max(o.left,0));var h=O({top:a.top-o.top-f,left:a.left-o.left-p,width:a.width,height:a.height});if(h.marginTop=0,h.marginLeft=0,!r&&i){var L=parseFloat(c.marginTop,10),v=parseFloat(c.marginLeft,10);h.top-=f-L,h.bottom-=f-L,h.left-=p-v,h.right-=p-v,h.marginTop=L,h.marginLeft=v}return(r&&!n?e.contains(s):e===s&&"BODY"!==s.nodeName)&&(h=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=y(e,"top"),i=y(e,"left"),a=n?-1:1;return t.top+=r*a,t.bottom+=r*a,t.left+=i*a,t.right+=i*a,t}(h,e)),h}function M(t){if(!t||!t.parentElement||d())return document.documentElement;for(var e=t.parentElement;e&&"none"===u(e,"transform");)e=e.parentElement;return e||document.documentElement}function C(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a={top:0,left:0},o=i?M(t):v(t,e);if("viewport"===r)a=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,r=S(t,n),i=Math.max(n.clientWidth,window.innerWidth||0),a=Math.max(n.clientHeight,window.innerHeight||0),o=e?0:y(n),s=e?0:y(n,"left");return O({top:o-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:a})}(o,i);else{var s=void 0;"scrollParent"===r?"BODY"===(s=l(c(e))).nodeName&&(s=t.ownerDocument.documentElement):s="window"===r?t.ownerDocument.documentElement:r;var f=S(s,o,i);if("HTML"!==s.nodeName||function t(e){var n=e.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===u(e,"position"))return!0;var r=c(e);return!!r&&t(r)}(o))a=f;else{var p=b(t.ownerDocument),d=p.height,h=p.width;a.top+=f.top-f.marginTop,a.bottom=d+f.top,a.left+=f.left-f.marginLeft,a.right=h+f.left}}var L="number"==typeof(n=n||0);return a.left+=L?n:n.left||0,a.top+=L?n:n.top||0,a.right-=L?n:n.right||0,a.bottom-=L?n:n.bottom||0,a}function A(t,e,n,r,i){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var o=C(n,r,a,i),s={top:{width:o.width,height:e.top-o.top},right:{width:o.right-e.right,height:o.height},bottom:{width:o.width,height:o.bottom-e.bottom},left:{width:e.left-o.left,height:o.height}},u=Object.keys(s).map(function(t){return k({key:t},s[t],{area:(e=s[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),c=u.filter(function(t){var e=t.width,r=t.height;return e>=n.clientWidth&&r>=n.clientHeight}),l=c.length>0?c[0].key:u[0].key,f=t.split("-")[1];return l+(f?"-"+f:"")}function j(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return S(n,r?M(e):v(e,n),r)}function P(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),r=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+r,height:t.offsetHeight+n}}function T(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function D(t,e,n){n=n.split("-")[0];var r=P(t),i={width:r.width,height:r.height},a=-1!==["right","left"].indexOf(n),o=a?"top":"left",s=a?"left":"top",u=a?"height":"width",c=a?"width":"height";return i[o]=e[o]+e[u]/2-r[u]/2,i[s]=n===s?e[s]-r[c]:e[T(s)],i}function I(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function R(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var r=I(t,function(t){return t[e]===n});return t.indexOf(r)}(t,"name",n))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&s(n)&&(e.offsets.popper=O(e.offsets.popper),e.offsets.reference=O(e.offsets.reference),e=n(e,t))}),e}function N(t,e){return t.some(function(t){var n=t.name;return t.enabled&&n===e})}function H(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),r=0;r<e.length;r++){var i=e[r],a=i?""+i+n:t;if(void 0!==document.body.style[a])return a}return null}function W(t){var e=t.ownerDocument;return e?e.defaultView:window}function B(t,e,n,r){n.updateBound=r,W(t).addEventListener("resize",n.updateBound,{passive:!0});var i=l(t);return function t(e,n,r,i){var a="BODY"===e.nodeName,o=a?e.ownerDocument.defaultView:e;o.addEventListener(n,r,{passive:!0}),a||t(l(o.parentNode),n,r,i),i.push(o)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function Z(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,W(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function F(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function q(t,e){Object.keys(e).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&F(e[n])&&(r="px"),t.style[n]=e[n]+r})}var z=n&&/Firefox/i.test(navigator.userAgent);function U(t,e,n){var r=I(t,function(t){return t.name===e}),i=!!r&&t.some(function(t){return t.name===n&&t.enabled&&t.order<r.order});if(!i){var a="`"+e+"`",o="`"+n+"`";console.warn(o+" modifier is required by "+a+" modifier in order to work, be sure to include it before "+a+"!")}return i}var V=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Y=V.slice(3);function G(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Y.indexOf(t),r=Y.slice(n+1).concat(Y.slice(0,n));return e?r.reverse():r}var X={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function $(t,e,n,r){var i=[0,0],a=-1!==["right","left"].indexOf(r),o=t.split(/(\+|\-)/).map(function(t){return t.trim()}),s=o.indexOf(I(o,function(t){return-1!==t.search(/,|\s/)}));o[s]&&-1===o[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,c=-1!==s?[o.slice(0,s).concat([o[s].split(u)[0]]),[o[s].split(u)[1]].concat(o.slice(s+1))]:[o];return(c=c.map(function(t,r){var i=(1===r?!a:a)?"height":"width",o=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,o=!0,t):o?(t[t.length-1]+=e,o=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,r){var i=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),a=+i[1],o=i[2];if(!a)return t;if(0===o.indexOf("%")){var s=void 0;switch(o){case"%p":s=n;break;case"%":case"%r":default:s=r}return O(s)[e]/100*a}if("vh"===o||"vw"===o)return("vh"===o?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*a;return a}(t,i,e,n)})})).forEach(function(t,e){t.forEach(function(n,r){F(n)&&(i[e]+=n*("-"===t[r-1]?-1:1))})}),i}var K={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],r=e.split("-")[1];if(r){var i=t.offsets,a=i.reference,o=i.popper,s=-1!==["bottom","top"].indexOf(n),u=s?"left":"top",c=s?"width":"height",l={start:x({},u,a[u]),end:x({},u,a[u]+a[c]-o[c])};t.offsets.popper=k({},o,l[r])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,r=t.placement,i=t.offsets,a=i.popper,o=i.reference,s=r.split("-")[0],u=void 0;return u=F(+n)?[+n,0]:$(n,a,o,s),"left"===s?(a.top+=u[0],a.left-=u[1]):"right"===s?(a.top+=u[0],a.left+=u[1]):"top"===s?(a.left+=u[0],a.top-=u[1]):"bottom"===s&&(a.left+=u[0],a.top+=u[1]),t.popper=a,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||h(t.instance.popper);t.instance.reference===n&&(n=h(n));var r=H("transform"),i=t.instance.popper.style,a=i.top,o=i.left,s=i[r];i.top="",i.left="",i[r]="";var u=C(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);i.top=a,i.left=o,i[r]=s,e.boundaries=u;var c=e.priority,l=t.offsets.popper,f={primary:function(t){var n=l[t];return l[t]<u[t]&&!e.escapeWithReference&&(n=Math.max(l[t],u[t])),x({},t,n)},secondary:function(t){var n="right"===t?"left":"top",r=l[n];return l[t]>u[t]&&!e.escapeWithReference&&(r=Math.min(l[n],u[t]-("right"===t?l.width:l.height))),x({},n,r)}};return c.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";l=k({},l,f[e](t))}),t.offsets.popper=l,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,r=e.reference,i=t.placement.split("-")[0],a=Math.floor,o=-1!==["top","bottom"].indexOf(i),s=o?"right":"bottom",u=o?"left":"top",c=o?"width":"height";return n[s]<a(r[u])&&(t.offsets.popper[u]=a(r[u])-n[c]),n[u]>a(r[s])&&(t.offsets.popper[u]=a(r[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!U(t.instance.modifiers,"arrow","keepTogether"))return t;var r=e.element;if("string"==typeof r){if(!(r=t.instance.popper.querySelector(r)))return t}else if(!t.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var i=t.placement.split("-")[0],a=t.offsets,o=a.popper,s=a.reference,c=-1!==["left","right"].indexOf(i),l=c?"height":"width",f=c?"Top":"Left",p=f.toLowerCase(),d=c?"left":"top",h=c?"bottom":"right",L=P(r)[l];s[h]-L<o[p]&&(t.offsets.popper[p]-=o[p]-(s[h]-L)),s[p]+L>o[h]&&(t.offsets.popper[p]+=s[p]+L-o[h]),t.offsets.popper=O(t.offsets.popper);var v=s[p]+s[l]/2-L/2,y=u(t.instance.popper),m=parseFloat(y["margin"+f],10),g=parseFloat(y["border"+f+"Width"],10),b=v-t.offsets.popper[p]-m-g;return b=Math.max(Math.min(o[l]-L,b),0),t.arrowElement=r,t.offsets.arrow=(x(n={},p,Math.round(b)),x(n,d,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(N(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=C(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),r=t.placement.split("-")[0],i=T(r),a=t.placement.split("-")[1]||"",o=[];switch(e.behavior){case X.FLIP:o=[r,i];break;case X.CLOCKWISE:o=G(r);break;case X.COUNTERCLOCKWISE:o=G(r,!0);break;default:o=e.behavior}return o.forEach(function(s,u){if(r!==s||o.length===u+1)return t;r=t.placement.split("-")[0],i=T(r);var c=t.offsets.popper,l=t.offsets.reference,f=Math.floor,p="left"===r&&f(c.right)>f(l.left)||"right"===r&&f(c.left)<f(l.right)||"top"===r&&f(c.bottom)>f(l.top)||"bottom"===r&&f(c.top)<f(l.bottom),d=f(c.left)<f(n.left),h=f(c.right)>f(n.right),L=f(c.top)<f(n.top),v=f(c.bottom)>f(n.bottom),y="left"===r&&d||"right"===r&&h||"top"===r&&L||"bottom"===r&&v,m=-1!==["top","bottom"].indexOf(r),g=!!e.flipVariations&&(m&&"start"===a&&d||m&&"end"===a&&h||!m&&"start"===a&&L||!m&&"end"===a&&v),b=!!e.flipVariationsByContent&&(m&&"start"===a&&h||m&&"end"===a&&d||!m&&"start"===a&&v||!m&&"end"===a&&L),_=g||b;(p||y||_)&&(t.flipped=!0,(p||y)&&(r=o[u+1]),_&&(a=function(t){return"end"===t?"start":"start"===t?"end":t}(a)),t.placement=r+(a?"-"+a:""),t.offsets.popper=k({},t.offsets.popper,D(t.instance.popper,t.offsets.reference,t.placement)),t=R(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],r=t.offsets,i=r.popper,a=r.reference,o=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[o?"left":"top"]=a[n]-(s?i[o?"width":"height"]:0),t.placement=T(e),t.offsets.popper=O(i),t}},hide:{order:800,enabled:!0,fn:function(t){if(!U(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=I(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,r=e.y,i=t.offsets.popper,a=I(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var o=void 0!==a?a:e.gpuAcceleration,s=h(t.instance.popper),u=E(s),c={position:i.position},l=function(t,e){var n=t.offsets,r=n.popper,i=n.reference,a=Math.round,o=Math.floor,s=function(t){return t},u=a(i.width),c=a(r.width),l=-1!==["left","right"].indexOf(t.placement),f=-1!==t.placement.indexOf("-"),p=e?l||f||u%2==c%2?a:o:s,d=e?a:s;return{left:p(u%2==1&&c%2==1&&!f&&e?r.left-1:r.left),top:d(r.top),bottom:d(r.bottom),right:p(r.right)}}(t,window.devicePixelRatio<2||!z),f="bottom"===n?"top":"bottom",p="right"===r?"left":"right",d=H("transform"),L=void 0,v=void 0;if(v="bottom"===f?"HTML"===s.nodeName?-s.clientHeight+l.bottom:-u.height+l.bottom:l.top,L="right"===p?"HTML"===s.nodeName?-s.clientWidth+l.right:-u.width+l.right:l.left,o&&d)c[d]="translate3d("+L+"px, "+v+"px, 0)",c[f]=0,c[p]=0,c.willChange="transform";else{var y="bottom"===f?-1:1,m="right"===p?-1:1;c[f]=v*y,c[p]=L*m,c.willChange=f+", "+p}var g={"x-placement":t.placement};return t.attributes=k({},g,t.attributes),t.styles=k({},c,t.styles),t.arrowStyles=k({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return q(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&q(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,r,i){var a=j(i,e,t,n.positionFixed),o=A(n.placement,a,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",o),q(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},J=function(){function t(e,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};_(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=o(this.update.bind(this)),this.options=k({},t.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(k({},t.Defaults.modifiers,i.modifiers)).forEach(function(e){r.options.modifiers[e]=k({},t.Defaults.modifiers[e]||{},i.modifiers?i.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return k({name:t},r.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&s(t.onLoad)&&t.onLoad(r.reference,r.popper,r.options,t,r.state)}),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return w(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=j(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=A(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=D(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=R(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,N(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=B(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return Z.call(this)}}]),t}();J.Utils=("undefined"!=typeof window?window:t).PopperUtils,J.placements=V,J.Defaults=K,e.a=J}).call(this,n(5))},function(t,e,n){"use strict";n(3);var r,i=n(11),a=(r=i)&&r.__esModule?r:{default:r};n(45),n(46);var o=new a.default("#pew-app",{needsRouter:!1});console.log("preview"),window.IS_PRERENDERING?(console.log("init app prerender"),o.prerender()):(o.init(),console.log("init app init"))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=v(n(12)),a=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(47)),o=v(n(13)),s=n(2),u=v(n(1)),c=v(n(14)),l=v(n(15)),f=v(n(16)),p=v(n(19)),d=v(n(39)),h=v(n(41)),L=v(n(43));function v(t){return t&&t.__esModule?t:{default:t}}var y={fields:c.default,stateAbbreviations:l.default,nestBy:{}};function m(){return new Promise(function(t,e){i.default.parse("http://www.pewtrusts.org/api/hipmapapi/getdownload?resourceTypes=HIA%20reports&sortBy=relevance&sortOrder=asc&loadAllPages=true&pageId={d9dc47f1-2c76-444a-b4e3-b60d29bb3237}",{beforeFirstChunk:function(t){return t.replace(/.*/,function(t){return function(t){return t.split(",").map(function(t){return t.replace("/Geographic Scope","").replace("/"," or ").replace("HIA ","").replace("-"," ").doCamelCase()}).join(",")}(t)})},complete:function(e){e.data.forEach(function(t,e){t.id=e}),t(e.data)},download:!0,error:function(t,n){e({error:t,file:n})},header:!0,skipEmptyLines:!0,transform:function(t,e){var n=y.fields.find(function(t){return t.key===e});return n&&n.splitToArray?(t=t.replace(/([a-z]),([A-Z])/g,"$1|$2")).split("|"):t}})})}var g=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,L.default),r(e,[{key:"prerender",value:function(){var t=this;m.call(this).then(function(e){y.data=e,t.model=y,t.el.setAttribute("data-data-hash",JSON.stringify(e).hashCode()),t.nestData(),t.pushViews(),Promise.all(t.views.map(function(t){return t.isReady})).then(function(){t.onViewsReady(),document.dispatchEvent(new Event("all-views-ready"))})})}},{key:"onViewsReady",value:function(){var t=document.querySelector(".js-dropdown").offsetHeight+document.querySelector(".js-legend").offsetHeight;document.querySelector(".js-instruct-heading").style.height=t+"px"}},{key:"init",value:function(){var t=this;console.log("init App!"),this.views.length=0,console.log(this.views),function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),this.bodyEventListenerBind=this.bodyEventListenerHandler.bind(this),u.default.setSubs([["selectPrimaryGroup",this.bodyEventListenerBind]]),m.call(this).then(function(e){y.data=e,t.model=y,t.el.dataset.dataHash!=JSON.stringify(e).hashCode()&&(t.el.setAttribute("data-data-mismatch",!0),t.model.isMismatched=!0),t.nestData(),t.pushViews(),t.views.forEach(function(e){console.log("about to init:",e),e.init(t)})}),console.log(y)}},{key:"pushViews",value:function(){this.views.push(this.createComponent(f.default,"div#menu-view"),this.createComponent(p.default,"div#section-view"),this.createComponent(d.default,"div#details-view"),this.createComponent(h.default,"div#mask-view"))}},{key:"nestData",value:function(){var t=this,e=this.model.fields.filter(function(t){return!0===t.splitToArray}).map(function(t){return t.key}),n=this.model.fields.filter(function(t){return!0!==t.splitToArray}).map(function(t){return t.key});function r(t,e){return a.nest().key(function(e){return e[t]}).entries(e).sort(function(t,e){return t.values.length>=e.values.length?-1:1})}console.log(this.model.data),n.forEach(function(e){t.model.nestBy[e]=r(e,t.model.data)}),e.forEach(function(e){var n=[];t.model.data.forEach(function(t){t[e].forEach(function(r){var i=o.default.cloneDeep(t);i[e]=r,n.push(i)})}),t.model.nestBy[e]=r(e,n)})}},{key:"cleanKey",value:function(t){return console.log(t),void 0===t?"null":""===(t="string"==typeof t?t:t[0])?"none":(t=t.toLowerCase().replace(/['"”’“‘,.!?;()&:\/]/g,"").doCamelCase(),console.log(t),t)}},{key:"bodyEventListenerHandler",value:function(t,e){var n=this.bodyClickClear;null!==e?document.body.addEventListener("click",n):document.body.removeEventListener("click",n)}},{key:"bodyClickClear",value:function(){document.body.UIControlIsOpen||s.stateModule.getState("showAllDetails")||(console.log("bodyclick"),s.stateModule.setState("selectPrimaryGroup",null))}}]),e}();e.default=g},function(t,e,n){var r,i,a;
/* @license
Papa Parse
v4.6.3
https://github.com/mholt/PapaParse
License: MIT
*/Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),i=[],void 0===(a="function"==typeof(r=function(){"use strict";var t,e,n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:{},r=!n.document&&!!n.postMessage,i=r&&/(\?|&)papaworker(=|&|$)/.test(n.location.search),a=!1,o={},s=0,u={parse:function(e,r){var i=(r=r||{}).dynamicTyping||!1;if(x(i)&&(r.dynamicTypingFunction=i,i={}),r.dynamicTyping=i,r.transform=!!x(r.transform)&&r.transform,r.worker&&u.WORKERS_SUPPORTED){var c=function(){if(!u.WORKERS_SUPPORTED)return!1;if(!a&&null===u.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var e=u.SCRIPT_PATH||t;e+=(-1!==e.indexOf("?")?"&":"?")+"papaworker";var r=new n.Worker(e);return r.onmessage=m,r.id=s++,o[r.id]=r}();return c.userStep=r.step,c.userChunk=r.chunk,c.userComplete=r.complete,c.userError=r.error,r.step=x(r.step),r.chunk=x(r.chunk),r.complete=x(r.complete),r.error=x(r.error),delete r.worker,void c.postMessage({input:e,config:r,workerId:c.id})}var l=null;return u.NODE_STREAM_INPUT,"string"==typeof e?l=r.download?new f(r):new d(r):!0===e.readable&&x(e.read)&&x(e.on)?l=new h(r):(n.File&&e instanceof File||e instanceof Object)&&(l=new p(r)),l.stream(e)},unparse:function(t,e){var n=!1,r=!0,i=",",a="\r\n",o='"',s=!1;"object"==typeof e&&("string"!=typeof e.delimiter||u.BAD_DELIMITERS.filter(function(t){return-1!==e.delimiter.indexOf(t)}).length||(i=e.delimiter),("boolean"==typeof e.quotes||Array.isArray(e.quotes))&&(n=e.quotes),"boolean"!=typeof e.skipEmptyLines&&"string"!=typeof e.skipEmptyLines||(s=e.skipEmptyLines),"string"==typeof e.newline&&(a=e.newline),"string"==typeof e.quoteChar&&(o=e.quoteChar),"boolean"==typeof e.header&&(r=e.header));var c=new RegExp(v(o),"g");if("string"==typeof t&&(t=JSON.parse(t)),Array.isArray(t)){if(!t.length||Array.isArray(t[0]))return f(null,t,s);if("object"==typeof t[0])return f(l(t[0]),t,s)}else if("object"==typeof t)return"string"==typeof t.data&&(t.data=JSON.parse(t.data)),Array.isArray(t.data)&&(t.fields||(t.fields=t.meta&&t.meta.fields),t.fields||(t.fields=Array.isArray(t.data[0])?t.fields:l(t.data[0])),Array.isArray(t.data[0])||"object"==typeof t.data[0]||(t.data=[t.data])),f(t.fields||[],t.data||[],s);throw"exception: Unable to serialize unrecognized input";function l(t){if("object"!=typeof t)return[];var e=[];for(var n in t)e.push(n);return e}function f(t,e,n){var o="";"string"==typeof t&&(t=JSON.parse(t)),"string"==typeof e&&(e=JSON.parse(e));var s=Array.isArray(t)&&0<t.length,u=!Array.isArray(e[0]);if(s&&r){for(var c=0;c<t.length;c++)0<c&&(o+=i),o+=p(t[c],c);0<e.length&&(o+=a)}for(var l=0;l<e.length;l++){var f=s?t.length:e[l].length,d=!1,h=s?0===Object.keys(e[l]).length:0===e[l].length;if(n&&!s&&(d="greedy"===n?""===e[l].join("").trim():1===e[l].length&&0===e[l][0].length),"greedy"===n&&s){for(var L=[],v=0;v<f;v++){var y=u?t[v]:v;L.push(e[l][y])}d=""===L.join("").trim()}if(!d){for(var m=0;m<f;m++){0<m&&!h&&(o+=i);var g=s&&u?t[m]:m;o+=p(e[l][g],m)}l<e.length-1&&(!n||0<f&&!h)&&(o+=a)}}return o}function p(t,e){if(null==t)return"";if(t.constructor===Date)return JSON.stringify(t).slice(1,25);t=t.toString().replace(c,o+o);var r="boolean"==typeof n&&n||Array.isArray(n)&&n[e]||function(t,e){for(var n=0;n<e.length;n++)if(-1<t.indexOf(e[n]))return!0;return!1}(t,u.BAD_DELIMITERS)||-1<t.indexOf(i)||" "===t.charAt(0)||" "===t.charAt(t.length-1);return r?o+t+o:t}}};if(u.RECORD_SEP=String.fromCharCode(30),u.UNIT_SEP=String.fromCharCode(31),u.BYTE_ORDER_MARK="\ufeff",u.BAD_DELIMITERS=["\r","\n",'"',u.BYTE_ORDER_MARK],u.WORKERS_SUPPORTED=!r&&!!n.Worker,u.SCRIPT_PATH=null,u.NODE_STREAM_INPUT=1,u.LocalChunkSize=10485760,u.RemoteChunkSize=5242880,u.DefaultDelimiter=",",u.Parser=y,u.ParserHandle=L,u.NetworkStreamer=f,u.FileStreamer=p,u.StringStreamer=d,u.ReadableStreamStreamer=h,n.jQuery){var c=n.jQuery;c.fn.parse=function(t){var e=t.config||{},r=[];return this.each(function(t){if("INPUT"!==c(this).prop("tagName").toUpperCase()||"file"!==c(this).attr("type").toLowerCase()||!n.FileReader||!this.files||0===this.files.length)return!0;for(var i=0;i<this.files.length;i++)r.push({file:this.files[i],inputElem:this,instanceConfig:c.extend({},e)})}),i(),this;function i(){if(0!==r.length){var e,n,i,o=r[0];if(x(t.before)){var s=t.before(o.file,o.inputElem);if("object"==typeof s){if("abort"===s.action)return e=o.file,n=o.inputElem,i=s.reason,void(x(t.error)&&t.error({name:"AbortError"},e,n,i));if("skip"===s.action)return void a();"object"==typeof s.config&&(o.instanceConfig=c.extend(o.instanceConfig,s.config))}else if("skip"===s)return void a()}var l=o.instanceConfig.complete;o.instanceConfig.complete=function(t){x(l)&&l(t,o.file,o.inputElem),a()},u.parse(o.file,o.instanceConfig)}else x(t.complete)&&t.complete()}function a(){r.splice(0,1),i()}}}function l(t){this._handle=null,this._finished=!1,this._completed=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(t){var e=_(t);e.chunkSize=parseInt(e.chunkSize),t.step||t.chunk||(e.chunkSize=null),this._handle=new L(e),(this._handle.streamer=this)._config=e}.call(this,t),this.parseChunk=function(t,e){if(this.isFirstChunk&&x(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(t);void 0!==r&&(t=r)}this.isFirstChunk=!1;var a=this._partialLine+t;this._partialLine="";var o=this._handle.parse(a,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=o.meta.cursor;this._finished||(this._partialLine=a.substring(s-this._baseIndex),this._baseIndex=s),o&&o.data&&(this._rowCount+=o.data.length);var c=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(i)n.postMessage({results:o,workerId:u.WORKER_ID,finished:c});else if(x(this._config.chunk)&&!e){if(this._config.chunk(o,this._handle),this._handle.paused()||this._handle.aborted())return;o=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(o.data),this._completeResults.errors=this._completeResults.errors.concat(o.errors),this._completeResults.meta=o.meta),this._completed||!c||!x(this._config.complete)||o&&o.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),c||o&&o.meta.paused||this._nextChunk(),o}},this._sendError=function(t){x(this._config.error)?this._config.error(t):i&&this._config.error&&n.postMessage({workerId:u.WORKER_ID,error:t,finished:!1})}}function f(t){var e;(t=t||{}).chunkSize||(t.chunkSize=u.RemoteChunkSize),l.call(this,t),this._nextChunk=r?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(t){this._input=t,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(e=new XMLHttpRequest,this._config.withCredentials&&(e.withCredentials=this._config.withCredentials),r||(e.onload=w(this._chunkLoaded,this),e.onerror=w(this._chunkError,this)),e.open("GET",this._input,!r),this._config.downloadRequestHeaders){var t=this._config.downloadRequestHeaders;for(var n in t)e.setRequestHeader(n,t[n])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;e.setRequestHeader("Range","bytes="+this._start+"-"+i),e.setRequestHeader("If-None-Match","webkit-no-cache")}try{e.send()}catch(t){this._chunkError(t.message)}r&&0===e.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){var t;4===e.readyState&&(e.status<200||400<=e.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>(null===(t=e.getResponseHeader("Content-Range"))?-1:parseInt(t.substr(t.lastIndexOf("/")+1))),this.parseChunk(e.responseText)))},this._chunkError=function(t){var n=e.statusText||t;this._sendError(new Error(n))}}function p(t){var e,n;(t=t||{}).chunkSize||(t.chunkSize=u.LocalChunkSize),l.call(this,t);var r="undefined"!=typeof FileReader;this.stream=function(t){this._input=t,n=t.slice||t.webkitSlice||t.mozSlice,r?((e=new FileReader).onload=w(this._chunkLoaded,this),e.onerror=w(this._chunkError,this)):e=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var t=this._input;if(this._config.chunkSize){var i=Math.min(this._start+this._config.chunkSize,this._input.size);t=n.call(t,this._start,i)}var a=e.readAsText(t,this._config.encoding);r||this._chunkLoaded({target:{result:a}})},this._chunkLoaded=function(t){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(t.target.result)},this._chunkError=function(){this._sendError(e.error)}}function d(t){var e;l.call(this,t=t||{}),this.stream=function(t){return e=t,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var t=this._config.chunkSize,n=t?e.substr(0,t):e;return e=t?e.substr(t):"",this._finished=!e,this.parseChunk(n)}}}function h(t){l.call(this,t=t||{});var e=[],n=!0,r=!1;this.pause=function(){l.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){l.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(t){this._input=t,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){r&&1===e.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),e.length?this.parseChunk(e.shift()):n=!0},this._streamData=w(function(t){try{e.push("string"==typeof t?t:t.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(e.shift()))}catch(t){this._streamError(t)}},this),this._streamError=w(function(t){this._streamCleanUp(),this._sendError(t)},this),this._streamEnd=w(function(){this._streamCleanUp(),r=!0,this._streamData("")},this),this._streamCleanUp=w(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function L(t){var e,n,r,i=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,a=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,o=this,s=0,c=0,l=!1,f=!1,p=[],d={data:[],errors:[],meta:{}};if(x(t.step)){var h=t.step;t.step=function(e){if(d=e,g())m();else{if(m(),0===d.data.length)return;s+=e.data.length,t.preview&&s>t.preview?n.abort():h(d,o)}}}function L(e){return"greedy"===t.skipEmptyLines?""===e.join("").trim():1===e.length&&0===e[0].length}function m(){if(d&&r&&(w("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+u.DefaultDelimiter+"'"),r=!1),t.skipEmptyLines)for(var e=0;e<d.data.length;e++)L(d.data[e])&&d.data.splice(e--,1);return g()&&function(){if(d){for(var e=0;g()&&e<d.data.length;e++)for(var n=0;n<d.data[e].length;n++){var r=d.data[e][n];t.trimHeaders&&(r=r.trim()),p.push(r)}d.data.splice(0,1)}}(),function(){if(!d||!t.header&&!t.dynamicTyping&&!t.transform)return d;for(var e=0;e<d.data.length;e++){var n,r=t.header?{}:[];for(n=0;n<d.data[e].length;n++){var i=n,a=d.data[e][n];t.header&&(i=n>=p.length?"__parsed_extra":p[n]),t.transform&&(a=t.transform(a,i)),a=b(i,a),"__parsed_extra"===i?(r[i]=r[i]||[],r[i].push(a)):r[i]=a}d.data[e]=r,t.header&&(n>p.length?w("FieldMismatch","TooManyFields","Too many fields: expected "+p.length+" fields but parsed "+n,c+e):n<p.length&&w("FieldMismatch","TooFewFields","Too few fields: expected "+p.length+" fields but parsed "+n,c+e))}return t.header&&d.meta&&(d.meta.fields=p),c+=d.data.length,d}()}function g(){return t.header&&0===p.length}function b(e,n){return r=e,t.dynamicTypingFunction&&void 0===t.dynamicTyping[r]&&(t.dynamicTyping[r]=t.dynamicTypingFunction(r)),!0===(t.dynamicTyping[r]||t.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(i.test(n)?parseFloat(n):a.test(n)?new Date(n):""===n?null:n):n;var r}function w(t,e,n,r){d.errors.push({type:t,code:e,message:n,row:r})}this.parse=function(i,a,o){var s=t.quoteChar||'"';if(t.newline||(t.newline=function(t,e){t=t.substr(0,1048576);var n=new RegExp(v(e)+"([^]*?)"+v(e),"gm"),r=(t=t.replace(n,"")).split("\r"),i=t.split("\n"),a=1<i.length&&i[0].length<r[0].length;if(1===r.length||a)return"\n";for(var o=0,s=0;s<r.length;s++)"\n"===r[s][0]&&o++;return o>=r.length/2?"\r\n":"\r"}(i,s)),r=!1,t.delimiter)x(t.delimiter)&&(t.delimiter=t.delimiter(i),d.meta.delimiter=t.delimiter);else{var c=function(e,n,r,i){for(var a,o,s,c=[",","\t","|",";",u.RECORD_SEP,u.UNIT_SEP],l=0;l<c.length;l++){var f=c[l],p=0,d=0,h=0;s=void 0;for(var v=new y({comments:i,delimiter:f,newline:n,preview:10}).parse(e),m=0;m<v.data.length;m++)if(r&&L(v.data[m]))h++;else{var g=v.data[m].length;d+=g,void 0!==s?1<g&&(p+=Math.abs(g-s),s=g):s=0}0<v.data.length&&(d/=v.data.length-h),(void 0===o||o<p)&&1.99<d&&(o=p,a=f)}return{successful:!!(t.delimiter=a),bestDelimiter:a}}(i,t.newline,t.skipEmptyLines,t.comments);c.successful?t.delimiter=c.bestDelimiter:(r=!0,t.delimiter=u.DefaultDelimiter),d.meta.delimiter=t.delimiter}var f=_(t);return t.preview&&t.header&&f.preview++,e=i,n=new y(f),d=n.parse(e,a,o),m(),l?{meta:{paused:!0}}:d||{meta:{paused:!1}}},this.paused=function(){return l},this.pause=function(){l=!0,n.abort(),e=e.substr(n.getCharIndex())},this.resume=function(){l=!1,o.streamer.parseChunk(e,!0)},this.aborted=function(){return f},this.abort=function(){f=!0,n.abort(),d.meta.aborted=!0,x(t.complete)&&t.complete(d),e=""}}function v(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function y(t){var e,n=(t=t||{}).delimiter,r=t.newline,i=t.comments,a=t.step,o=t.preview,s=t.fastMode,c=e=void 0===t.quoteChar?'"':t.quoteChar;if(void 0!==t.escapeChar&&(c=t.escapeChar),("string"!=typeof n||-1<u.BAD_DELIMITERS.indexOf(n))&&(n=","),i===n)throw"Comment character same as delimiter";!0===i?i="#":("string"!=typeof i||-1<u.BAD_DELIMITERS.indexOf(i))&&(i=!1),"\n"!==r&&"\r"!==r&&"\r\n"!==r&&(r="\n");var l=0,f=!1;this.parse=function(t,u,p){if("string"!=typeof t)throw"Input must be a string";var d=t.length,h=n.length,L=r.length,y=i.length,m=x(a),g=[],b=[],_=[],w=l=0;if(!t)return R();if(s||!1!==s&&-1===t.indexOf(e)){for(var k=t.split(r),O=0;O<k.length;O++){if(_=k[O],l+=_.length,O!==k.length-1)l+=r.length;else if(p)return R();if(!i||_.substr(0,y)!==i){if(m){if(g=[],P(_.split(n)),N(),f)return R()}else P(_.split(n));if(o&&o<=O)return g=g.slice(0,o),R(!0)}}return R()}for(var E,S=t.indexOf(n,l),M=t.indexOf(r,l),C=new RegExp(v(c)+v(e),"g");;)if(t[l]!==e)if(i&&0===_.length&&t.substr(l,y)===i){if(-1===M)return R();l=M+L,M=t.indexOf(r,l),S=t.indexOf(n,l)}else if(-1!==S&&(S<M||-1===M))_.push(t.substring(l,S)),l=S+h,S=t.indexOf(n,l);else{if(-1===M)break;if(_.push(t.substring(l,M)),I(M+L),m&&(N(),f))return R();if(o&&g.length>=o)return R(!0)}else for(E=l,l++;;){if(-1===(E=t.indexOf(e,E+1)))return p||b.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:g.length,index:l}),D();if(E===d-1)return D(t.substring(l,E).replace(C,e));if(e!==c||t[E+1]!==c){if(e===c||0===E||t[E-1]!==c){var A=T(-1===M?S:Math.min(S,M));if(t[E+1+A]===n){_.push(t.substring(l,E).replace(C,e)),l=E+1+A+h,S=t.indexOf(n,l),M=t.indexOf(r,l);break}var j=T(M);if(t.substr(E+1+j,L)===r){if(_.push(t.substring(l,E).replace(C,e)),I(E+1+j+L),S=t.indexOf(n,l),m&&(N(),f))return R();if(o&&g.length>=o)return R(!0);break}b.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:g.length,index:l}),E++}}else E++}return D();function P(t){g.push(t),w=l}function T(e){var n=0;if(-1!==e){var r=t.substring(E+1,e);r&&""===r.trim()&&(n=r.length)}return n}function D(e){return p||(void 0===e&&(e=t.substr(l)),_.push(e),l=d,P(_),m&&N()),R()}function I(e){l=e,P(_),_=[],M=t.indexOf(r,l)}function R(t){return{data:g,errors:b,meta:{delimiter:n,linebreak:r,aborted:f,truncated:!!t,cursor:w+(u||0)}}}function N(){a(R()),g=[],b=[]}},this.abort=function(){f=!0},this.getCharIndex=function(){return l}}function m(t){var e=t.data,n=o[e.workerId],r=!1;if(e.error)n.userError(e.error,e.file);else if(e.results&&e.results.data){var i={abort:function(){r=!0,g(e.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:b,resume:b};if(x(n.userStep)){for(var a=0;a<e.results.data.length&&(n.userStep({data:[e.results.data[a]],errors:e.results.errors,meta:e.results.meta},i),!r);a++);delete e.results}else x(n.userChunk)&&(n.userChunk(e.results,i,e.file),delete e.results)}e.finished&&!r&&g(e.workerId,e.results)}function g(t,e){var n=o[t];x(n.userComplete)&&n.userComplete(e),n.terminate(),delete o[t]}function b(){throw"Not implemented."}function _(t){if("object"!=typeof t||null===t)return t;var e=Array.isArray(t)?[]:{};for(var n in t)e[n]=_(t[n]);return e}function w(t,e){return function(){t.apply(e,arguments)}}function x(t){return"function"==typeof t}return i?n.onmessage=function(t){var e=t.data;if(void 0===u.WORKER_ID&&e&&(u.WORKER_ID=e.workerId),"string"==typeof e.input)n.postMessage({workerId:u.WORKER_ID,results:u.parse(e.input,e.config),finished:!0});else if(n.File&&e.input instanceof File||e.input instanceof Object){var r=u.parse(e.input,e.config);r&&n.postMessage({workerId:u.WORKER_ID,results:r,finished:!0})}}:u.WORKERS_SUPPORTED&&(e=document.getElementsByTagName("script"),t=e.length?e[e.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",function(){a=!0},!0):a=!0),(f.prototype=Object.create(l.prototype)).constructor=f,(p.prototype=Object.create(l.prototype)).constructor=p,(d.prototype=Object.create(d.prototype)).constructor=d,(h.prototype=Object.create(l.prototype)).constructor=h,u})?r.apply(e,i):r)||(t.exports=a)},function(t,e,n){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var a,o=200,s="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",u="Expected a function",c="__lodash_hash_undefined__",l=500,f="__lodash_placeholder__",p=1,d=2,h=4,L=1,v=2,y=1,m=2,g=4,b=8,_=16,w=32,x=64,k=128,O=256,E=512,S=30,M="...",C=800,A=16,j=1,P=2,T=1/0,D=9007199254740991,I=1.7976931348623157e308,R=NaN,N=4294967295,H=N-1,W=N>>>1,B=[["ary",k],["bind",y],["bindKey",m],["curry",b],["curryRight",_],["flip",E],["partial",w],["partialRight",x],["rearg",O]],Z="[object Arguments]",F="[object Array]",q="[object AsyncFunction]",z="[object Boolean]",U="[object Date]",V="[object DOMException]",Y="[object Error]",G="[object Function]",X="[object GeneratorFunction]",$="[object Map]",K="[object Number]",J="[object Null]",Q="[object Object]",tt="[object Proxy]",et="[object RegExp]",nt="[object Set]",rt="[object String]",it="[object Symbol]",at="[object Undefined]",ot="[object WeakMap]",st="[object WeakSet]",ut="[object ArrayBuffer]",ct="[object DataView]",lt="[object Float32Array]",ft="[object Float64Array]",pt="[object Int8Array]",dt="[object Int16Array]",ht="[object Int32Array]",Lt="[object Uint8Array]",vt="[object Uint8ClampedArray]",yt="[object Uint16Array]",mt="[object Uint32Array]",gt=/\b__p \+= '';/g,bt=/\b(__p \+=) '' \+/g,_t=/(__e\(.*?\)|\b__t\)) \+\n'';/g,wt=/&(?:amp|lt|gt|quot|#39);/g,xt=/[&<>"']/g,kt=RegExp(wt.source),Ot=RegExp(xt.source),Et=/<%-([\s\S]+?)%>/g,St=/<%([\s\S]+?)%>/g,Mt=/<%=([\s\S]+?)%>/g,Ct=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,At=/^\w*$/,jt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Pt=/[\\^$.*+?()[\]{}|]/g,Tt=RegExp(Pt.source),Dt=/^\s+|\s+$/g,It=/^\s+/,Rt=/\s+$/,Nt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Ht=/\{\n\/\* \[wrapped with (.+)\] \*/,Wt=/,? & /,Bt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Zt=/\\(\\)?/g,Ft=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,qt=/\w*$/,zt=/^[-+]0x[0-9a-f]+$/i,Ut=/^0b[01]+$/i,Vt=/^\[object .+?Constructor\]$/,Yt=/^0o[0-7]+$/i,Gt=/^(?:0|[1-9]\d*)$/,Xt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,$t=/($^)/,Kt=/['\n\r\u2028\u2029\\]/g,Jt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Qt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",te="[\\ud800-\\udfff]",ee="["+Qt+"]",ne="["+Jt+"]",re="\\d+",ie="[\\u2700-\\u27bf]",ae="[a-z\\xdf-\\xf6\\xf8-\\xff]",oe="[^\\ud800-\\udfff"+Qt+re+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",se="\\ud83c[\\udffb-\\udfff]",ue="[^\\ud800-\\udfff]",ce="(?:\\ud83c[\\udde6-\\uddff]){2}",le="[\\ud800-\\udbff][\\udc00-\\udfff]",fe="[A-Z\\xc0-\\xd6\\xd8-\\xde]",pe="(?:"+ae+"|"+oe+")",de="(?:"+fe+"|"+oe+")",he="(?:"+ne+"|"+se+")"+"?",Le="[\\ufe0e\\ufe0f]?"+he+("(?:\\u200d(?:"+[ue,ce,le].join("|")+")[\\ufe0e\\ufe0f]?"+he+")*"),ve="(?:"+[ie,ce,le].join("|")+")"+Le,ye="(?:"+[ue+ne+"?",ne,ce,le,te].join("|")+")",me=RegExp("['’]","g"),ge=RegExp(ne,"g"),be=RegExp(se+"(?="+se+")|"+ye+Le,"g"),_e=RegExp([fe+"?"+ae+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[ee,fe,"$"].join("|")+")",de+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[ee,fe+pe,"$"].join("|")+")",fe+"?"+pe+"+(?:['’](?:d|ll|m|re|s|t|ve))?",fe+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",re,ve].join("|"),"g"),we=RegExp("[\\u200d\\ud800-\\udfff"+Jt+"\\ufe0e\\ufe0f]"),xe=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,ke=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Oe=-1,Ee={};Ee[lt]=Ee[ft]=Ee[pt]=Ee[dt]=Ee[ht]=Ee[Lt]=Ee[vt]=Ee[yt]=Ee[mt]=!0,Ee[Z]=Ee[F]=Ee[ut]=Ee[z]=Ee[ct]=Ee[U]=Ee[Y]=Ee[G]=Ee[$]=Ee[K]=Ee[Q]=Ee[et]=Ee[nt]=Ee[rt]=Ee[ot]=!1;var Se={};Se[Z]=Se[F]=Se[ut]=Se[ct]=Se[z]=Se[U]=Se[lt]=Se[ft]=Se[pt]=Se[dt]=Se[ht]=Se[$]=Se[K]=Se[Q]=Se[et]=Se[nt]=Se[rt]=Se[it]=Se[Lt]=Se[vt]=Se[yt]=Se[mt]=!0,Se[Y]=Se[G]=Se[ot]=!1;var Me={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ce=parseFloat,Ae=parseInt,je="object"==typeof t&&t&&t.Object===Object&&t,Pe="object"==typeof self&&self&&self.Object===Object&&self,Te=je||Pe||Function("return this")(),De=e&&!e.nodeType&&e,Ie=De&&"object"==typeof r&&r&&!r.nodeType&&r,Re=Ie&&Ie.exports===De,Ne=Re&&je.process,He=function(){try{var t=Ie&&Ie.require&&Ie.require("util").types;return t||Ne&&Ne.binding&&Ne.binding("util")}catch(t){}}(),We=He&&He.isArrayBuffer,Be=He&&He.isDate,Ze=He&&He.isMap,Fe=He&&He.isRegExp,qe=He&&He.isSet,ze=He&&He.isTypedArray;function Ue(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Ve(t,e,n,r){for(var i=-1,a=null==t?0:t.length;++i<a;){var o=t[i];e(r,o,n(o),t)}return r}function Ye(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Ge(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function Xe(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function $e(t,e){for(var n=-1,r=null==t?0:t.length,i=0,a=[];++n<r;){var o=t[n];e(o,n,t)&&(a[i++]=o)}return a}function Ke(t,e){return!!(null==t?0:t.length)&&un(t,e,0)>-1}function Je(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function Qe(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function tn(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function en(t,e,n,r){var i=-1,a=null==t?0:t.length;for(r&&a&&(n=t[++i]);++i<a;)n=e(n,t[i],i,t);return n}function nn(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function rn(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var an=pn("length");function on(t,e,n){var r;return n(t,function(t,n,i){if(e(t,n,i))return r=n,!1}),r}function sn(t,e,n,r){for(var i=t.length,a=n+(r?1:-1);r?a--:++a<i;)if(e(t[a],a,t))return a;return-1}function un(t,e,n){return e==e?function(t,e,n){var r=n-1,i=t.length;for(;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):sn(t,ln,n)}function cn(t,e,n,r){for(var i=n-1,a=t.length;++i<a;)if(r(t[i],e))return i;return-1}function ln(t){return t!=t}function fn(t,e){var n=null==t?0:t.length;return n?Ln(t,e)/n:R}function pn(t){return function(e){return null==e?a:e[t]}}function dn(t){return function(e){return null==t?a:t[e]}}function hn(t,e,n,r,i){return i(t,function(t,i,a){n=r?(r=!1,t):e(n,t,i,a)}),n}function Ln(t,e){for(var n,r=-1,i=t.length;++r<i;){var o=e(t[r]);o!==a&&(n=n===a?o:n+o)}return n}function vn(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function yn(t){return function(e){return t(e)}}function mn(t,e){return Qe(e,function(e){return t[e]})}function gn(t,e){return t.has(e)}function bn(t,e){for(var n=-1,r=t.length;++n<r&&un(e,t[n],0)>-1;);return n}function _n(t,e){for(var n=t.length;n--&&un(e,t[n],0)>-1;);return n}var wn=dn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),xn=dn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function kn(t){return"\\"+Me[t]}function On(t){return we.test(t)}function En(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function Sn(t,e){return function(n){return t(e(n))}}function Mn(t,e){for(var n=-1,r=t.length,i=0,a=[];++n<r;){var o=t[n];o!==e&&o!==f||(t[n]=f,a[i++]=n)}return a}function Cn(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function An(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=[t,t]}),n}function jn(t){return On(t)?function(t){var e=be.lastIndex=0;for(;be.test(t);)++e;return e}(t):an(t)}function Pn(t){return On(t)?function(t){return t.match(be)||[]}(t):function(t){return t.split("")}(t)}var Tn=dn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Dn=function t(e){var n,r=(e=null==e?Te:Dn.defaults(Te.Object(),e,Dn.pick(Te,ke))).Array,i=e.Date,Jt=e.Error,Qt=e.Function,te=e.Math,ee=e.Object,ne=e.RegExp,re=e.String,ie=e.TypeError,ae=r.prototype,oe=Qt.prototype,se=ee.prototype,ue=e["__core-js_shared__"],ce=oe.toString,le=se.hasOwnProperty,fe=0,pe=(n=/[^.]+$/.exec(ue&&ue.keys&&ue.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",de=se.toString,he=ce.call(ee),Le=Te._,ve=ne("^"+ce.call(le).replace(Pt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ye=Re?e.Buffer:a,be=e.Symbol,we=e.Uint8Array,Me=ye?ye.allocUnsafe:a,je=Sn(ee.getPrototypeOf,ee),Pe=ee.create,De=se.propertyIsEnumerable,Ie=ae.splice,Ne=be?be.isConcatSpreadable:a,He=be?be.iterator:a,an=be?be.toStringTag:a,dn=function(){try{var t=Ha(ee,"defineProperty");return t({},"",{}),t}catch(t){}}(),In=e.clearTimeout!==Te.clearTimeout&&e.clearTimeout,Rn=i&&i.now!==Te.Date.now&&i.now,Nn=e.setTimeout!==Te.setTimeout&&e.setTimeout,Hn=te.ceil,Wn=te.floor,Bn=ee.getOwnPropertySymbols,Zn=ye?ye.isBuffer:a,Fn=e.isFinite,qn=ae.join,zn=Sn(ee.keys,ee),Un=te.max,Vn=te.min,Yn=i.now,Gn=e.parseInt,Xn=te.random,$n=ae.reverse,Kn=Ha(e,"DataView"),Jn=Ha(e,"Map"),Qn=Ha(e,"Promise"),tr=Ha(e,"Set"),er=Ha(e,"WeakMap"),nr=Ha(ee,"create"),rr=er&&new er,ir={},ar=lo(Kn),or=lo(Jn),sr=lo(Qn),ur=lo(tr),cr=lo(er),lr=be?be.prototype:a,fr=lr?lr.valueOf:a,pr=lr?lr.toString:a;function dr(t){if(Ms(t)&&!ys(t)&&!(t instanceof yr)){if(t instanceof vr)return t;if(le.call(t,"__wrapped__"))return fo(t)}return new vr(t)}var hr=function(){function t(){}return function(e){if(!Ss(e))return{};if(Pe)return Pe(e);t.prototype=e;var n=new t;return t.prototype=a,n}}();function Lr(){}function vr(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=a}function yr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=N,this.__views__=[]}function mr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function gr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function br(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function _r(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new br;++e<n;)this.add(t[e])}function wr(t){var e=this.__data__=new gr(t);this.size=e.size}function xr(t,e){var n=ys(t),r=!n&&vs(t),i=!n&&!r&&_s(t),a=!n&&!r&&!i&&Rs(t),o=n||r||i||a,s=o?vn(t.length,re):[],u=s.length;for(var c in t)!e&&!le.call(t,c)||o&&("length"==c||i&&("offset"==c||"parent"==c)||a&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Ua(c,u))||s.push(c);return s}function kr(t){var e=t.length;return e?t[_i(0,e-1)]:a}function Or(t,e){return so(na(t),Dr(e,0,t.length))}function Er(t){return so(na(t))}function Sr(t,e,n){(n===a||ds(t[e],n))&&(n!==a||e in t)||Pr(t,e,n)}function Mr(t,e,n){var r=t[e];le.call(t,e)&&ds(r,n)&&(n!==a||e in t)||Pr(t,e,n)}function Cr(t,e){for(var n=t.length;n--;)if(ds(t[n][0],e))return n;return-1}function Ar(t,e,n,r){return Wr(t,function(t,i,a){e(r,t,n(t),a)}),r}function jr(t,e){return t&&ra(e,iu(e),t)}function Pr(t,e,n){"__proto__"==e&&dn?dn(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function Tr(t,e){for(var n=-1,i=e.length,o=r(i),s=null==t;++n<i;)o[n]=s?a:Qs(t,e[n]);return o}function Dr(t,e,n){return t==t&&(n!==a&&(t=t<=n?t:n),e!==a&&(t=t>=e?t:e)),t}function Ir(t,e,n,r,i,o){var s,u=e&p,c=e&d,l=e&h;if(n&&(s=i?n(t,r,i,o):n(t)),s!==a)return s;if(!Ss(t))return t;var f=ys(t);if(f){if(s=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&le.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!u)return na(t,s)}else{var L=Za(t),v=L==G||L==X;if(_s(t))return $i(t,u);if(L==Q||L==Z||v&&!i){if(s=c||v?{}:qa(t),!u)return c?function(t,e){return ra(t,Ba(t),e)}(t,function(t,e){return t&&ra(e,au(e),t)}(s,t)):function(t,e){return ra(t,Wa(t),e)}(t,jr(s,t))}else{if(!Se[L])return i?t:{};s=function(t,e,n){var r,i,a,o=t.constructor;switch(e){case ut:return Ki(t);case z:case U:return new o(+t);case ct:return function(t,e){var n=e?Ki(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case lt:case ft:case pt:case dt:case ht:case Lt:case vt:case yt:case mt:return Ji(t,n);case $:return new o;case K:case rt:return new o(t);case et:return(a=new(i=t).constructor(i.source,qt.exec(i))).lastIndex=i.lastIndex,a;case nt:return new o;case it:return r=t,fr?ee(fr.call(r)):{}}}(t,L,u)}}o||(o=new wr);var y=o.get(t);if(y)return y;if(o.set(t,s),Ts(t))return t.forEach(function(r){s.add(Ir(r,e,n,r,t,o))}),s;if(Cs(t))return t.forEach(function(r,i){s.set(i,Ir(r,e,n,i,t,o))}),s;var m=f?a:(l?c?ja:Aa:c?au:iu)(t);return Ye(m||t,function(r,i){m&&(r=t[i=r]),Mr(s,i,Ir(r,e,n,i,t,o))}),s}function Rr(t,e,n){var r=n.length;if(null==t)return!r;for(t=ee(t);r--;){var i=n[r],o=e[i],s=t[i];if(s===a&&!(i in t)||!o(s))return!1}return!0}function Nr(t,e,n){if("function"!=typeof t)throw new ie(u);return ro(function(){t.apply(a,n)},e)}function Hr(t,e,n,r){var i=-1,a=Ke,s=!0,u=t.length,c=[],l=e.length;if(!u)return c;n&&(e=Qe(e,yn(n))),r?(a=Je,s=!1):e.length>=o&&(a=gn,s=!1,e=new _r(e));t:for(;++i<u;){var f=t[i],p=null==n?f:n(f);if(f=r||0!==f?f:0,s&&p==p){for(var d=l;d--;)if(e[d]===p)continue t;c.push(f)}else a(e,p,r)||c.push(f)}return c}dr.templateSettings={escape:Et,evaluate:St,interpolate:Mt,variable:"",imports:{_:dr}},dr.prototype=Lr.prototype,dr.prototype.constructor=dr,vr.prototype=hr(Lr.prototype),vr.prototype.constructor=vr,yr.prototype=hr(Lr.prototype),yr.prototype.constructor=yr,mr.prototype.clear=function(){this.__data__=nr?nr(null):{},this.size=0},mr.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},mr.prototype.get=function(t){var e=this.__data__;if(nr){var n=e[t];return n===c?a:n}return le.call(e,t)?e[t]:a},mr.prototype.has=function(t){var e=this.__data__;return nr?e[t]!==a:le.call(e,t)},mr.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=nr&&e===a?c:e,this},gr.prototype.clear=function(){this.__data__=[],this.size=0},gr.prototype.delete=function(t){var e=this.__data__,n=Cr(e,t);return!(n<0||(n==e.length-1?e.pop():Ie.call(e,n,1),--this.size,0))},gr.prototype.get=function(t){var e=this.__data__,n=Cr(e,t);return n<0?a:e[n][1]},gr.prototype.has=function(t){return Cr(this.__data__,t)>-1},gr.prototype.set=function(t,e){var n=this.__data__,r=Cr(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},br.prototype.clear=function(){this.size=0,this.__data__={hash:new mr,map:new(Jn||gr),string:new mr}},br.prototype.delete=function(t){var e=Ra(this,t).delete(t);return this.size-=e?1:0,e},br.prototype.get=function(t){return Ra(this,t).get(t)},br.prototype.has=function(t){return Ra(this,t).has(t)},br.prototype.set=function(t,e){var n=Ra(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},_r.prototype.add=_r.prototype.push=function(t){return this.__data__.set(t,c),this},_r.prototype.has=function(t){return this.__data__.has(t)},wr.prototype.clear=function(){this.__data__=new gr,this.size=0},wr.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},wr.prototype.get=function(t){return this.__data__.get(t)},wr.prototype.has=function(t){return this.__data__.has(t)},wr.prototype.set=function(t,e){var n=this.__data__;if(n instanceof gr){var r=n.__data__;if(!Jn||r.length<o-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new br(r)}return n.set(t,e),this.size=n.size,this};var Wr=oa(Yr),Br=oa(Gr,!0);function Zr(t,e){var n=!0;return Wr(t,function(t,r,i){return n=!!e(t,r,i)}),n}function Fr(t,e,n){for(var r=-1,i=t.length;++r<i;){var o=t[r],s=e(o);if(null!=s&&(u===a?s==s&&!Is(s):n(s,u)))var u=s,c=o}return c}function qr(t,e){var n=[];return Wr(t,function(t,r,i){e(t,r,i)&&n.push(t)}),n}function zr(t,e,n,r,i){var a=-1,o=t.length;for(n||(n=za),i||(i=[]);++a<o;){var s=t[a];e>0&&n(s)?e>1?zr(s,e-1,n,r,i):tn(i,s):r||(i[i.length]=s)}return i}var Ur=sa(),Vr=sa(!0);function Yr(t,e){return t&&Ur(t,e,iu)}function Gr(t,e){return t&&Vr(t,e,iu)}function Xr(t,e){return $e(e,function(e){return ks(t[e])})}function $r(t,e){for(var n=0,r=(e=Vi(e,t)).length;null!=t&&n<r;)t=t[co(e[n++])];return n&&n==r?t:a}function Kr(t,e,n){var r=e(t);return ys(t)?r:tn(r,n(t))}function Jr(t){return null==t?t===a?at:J:an&&an in ee(t)?function(t){var e=le.call(t,an),n=t[an];try{t[an]=a;var r=!0}catch(t){}var i=de.call(t);return r&&(e?t[an]=n:delete t[an]),i}(t):function(t){return de.call(t)}(t)}function Qr(t,e){return t>e}function ti(t,e){return null!=t&&le.call(t,e)}function ei(t,e){return null!=t&&e in ee(t)}function ni(t,e,n){for(var i=n?Je:Ke,o=t[0].length,s=t.length,u=s,c=r(s),l=1/0,f=[];u--;){var p=t[u];u&&e&&(p=Qe(p,yn(e))),l=Vn(p.length,l),c[u]=!n&&(e||o>=120&&p.length>=120)?new _r(u&&p):a}p=t[0];var d=-1,h=c[0];t:for(;++d<o&&f.length<l;){var L=p[d],v=e?e(L):L;if(L=n||0!==L?L:0,!(h?gn(h,v):i(f,v,n))){for(u=s;--u;){var y=c[u];if(!(y?gn(y,v):i(t[u],v,n)))continue t}h&&h.push(v),f.push(L)}}return f}function ri(t,e,n){var r=null==(t=to(t,e=Vi(e,t)))?t:t[co(xo(e))];return null==r?a:Ue(r,t,n)}function ii(t){return Ms(t)&&Jr(t)==Z}function ai(t,e,n,r,i){return t===e||(null==t||null==e||!Ms(t)&&!Ms(e)?t!=t&&e!=e:function(t,e,n,r,i,o){var s=ys(t),u=ys(e),c=s?F:Za(t),l=u?F:Za(e),f=(c=c==Z?Q:c)==Q,p=(l=l==Z?Q:l)==Q,d=c==l;if(d&&_s(t)){if(!_s(e))return!1;s=!0,f=!1}if(d&&!f)return o||(o=new wr),s||Rs(t)?Ma(t,e,n,r,i,o):function(t,e,n,r,i,a,o){switch(n){case ct:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case ut:return!(t.byteLength!=e.byteLength||!a(new we(t),new we(e)));case z:case U:case K:return ds(+t,+e);case Y:return t.name==e.name&&t.message==e.message;case et:case rt:return t==e+"";case $:var s=En;case nt:var u=r&L;if(s||(s=Cn),t.size!=e.size&&!u)return!1;var c=o.get(t);if(c)return c==e;r|=v,o.set(t,e);var l=Ma(s(t),s(e),r,i,a,o);return o.delete(t),l;case it:if(fr)return fr.call(t)==fr.call(e)}return!1}(t,e,c,n,r,i,o);if(!(n&L)){var h=f&&le.call(t,"__wrapped__"),y=p&&le.call(e,"__wrapped__");if(h||y){var m=h?t.value():t,g=y?e.value():e;return o||(o=new wr),i(m,g,n,r,o)}}return!!d&&(o||(o=new wr),function(t,e,n,r,i,o){var s=n&L,u=Aa(t),c=u.length,l=Aa(e).length;if(c!=l&&!s)return!1;for(var f=c;f--;){var p=u[f];if(!(s?p in e:le.call(e,p)))return!1}var d=o.get(t);if(d&&o.get(e))return d==e;var h=!0;o.set(t,e),o.set(e,t);for(var v=s;++f<c;){p=u[f];var y=t[p],m=e[p];if(r)var g=s?r(m,y,p,e,t,o):r(y,m,p,t,e,o);if(!(g===a?y===m||i(y,m,n,r,o):g)){h=!1;break}v||(v="constructor"==p)}if(h&&!v){var b=t.constructor,_=e.constructor;b!=_&&"constructor"in t&&"constructor"in e&&!("function"==typeof b&&b instanceof b&&"function"==typeof _&&_ instanceof _)&&(h=!1)}return o.delete(t),o.delete(e),h}(t,e,n,r,i,o))}(t,e,n,r,ai,i))}function oi(t,e,n,r){var i=n.length,o=i,s=!r;if(null==t)return!o;for(t=ee(t);i--;){var u=n[i];if(s&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++i<o;){var c=(u=n[i])[0],l=t[c],f=u[1];if(s&&u[2]){if(l===a&&!(c in t))return!1}else{var p=new wr;if(r)var d=r(l,f,c,t,e,p);if(!(d===a?ai(f,l,L|v,r,p):d))return!1}}return!0}function si(t){return!(!Ss(t)||(e=t,pe&&pe in e))&&(ks(t)?ve:Vt).test(lo(t));var e}function ui(t){return"function"==typeof t?t:null==t?Au:"object"==typeof t?ys(t)?hi(t[0],t[1]):di(t):Wu(t)}function ci(t){if(!$a(t))return zn(t);var e=[];for(var n in ee(t))le.call(t,n)&&"constructor"!=n&&e.push(n);return e}function li(t){if(!Ss(t))return function(t){var e=[];if(null!=t)for(var n in ee(t))e.push(n);return e}(t);var e=$a(t),n=[];for(var r in t)("constructor"!=r||!e&&le.call(t,r))&&n.push(r);return n}function fi(t,e){return t<e}function pi(t,e){var n=-1,i=gs(t)?r(t.length):[];return Wr(t,function(t,r,a){i[++n]=e(t,r,a)}),i}function di(t){var e=Na(t);return 1==e.length&&e[0][2]?Ja(e[0][0],e[0][1]):function(n){return n===t||oi(n,t,e)}}function hi(t,e){return Ya(t)&&Ka(e)?Ja(co(t),e):function(n){var r=Qs(n,t);return r===a&&r===e?tu(n,t):ai(e,r,L|v)}}function Li(t,e,n,r,i){t!==e&&Ur(e,function(o,s){if(Ss(o))i||(i=new wr),function(t,e,n,r,i,o,s){var u=eo(t,n),c=eo(e,n),l=s.get(c);if(l)Sr(t,n,l);else{var f=o?o(u,c,n+"",t,e,s):a,p=f===a;if(p){var d=ys(c),h=!d&&_s(c),L=!d&&!h&&Rs(c);f=c,d||h||L?ys(u)?f=u:bs(u)?f=na(u):h?(p=!1,f=$i(c,!0)):L?(p=!1,f=Ji(c,!0)):f=[]:js(c)||vs(c)?(f=u,vs(u)?f=zs(u):Ss(u)&&!ks(u)||(f=qa(c))):p=!1}p&&(s.set(c,f),i(f,c,r,o,s),s.delete(c)),Sr(t,n,f)}}(t,e,s,n,Li,r,i);else{var u=r?r(eo(t,s),o,s+"",t,e,i):a;u===a&&(u=o),Sr(t,s,u)}},au)}function vi(t,e){var n=t.length;if(n)return Ua(e+=e<0?n:0,n)?t[e]:a}function yi(t,e,n){var r=-1;return e=Qe(e.length?e:[Au],yn(Ia())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(pi(t,function(t,n,i){return{criteria:Qe(e,function(e){return e(t)}),index:++r,value:t}}),function(t,e){return function(t,e,n){for(var r=-1,i=t.criteria,a=e.criteria,o=i.length,s=n.length;++r<o;){var u=Qi(i[r],a[r]);if(u){if(r>=s)return u;var c=n[r];return u*("desc"==c?-1:1)}}return t.index-e.index}(t,e,n)})}function mi(t,e,n){for(var r=-1,i=e.length,a={};++r<i;){var o=e[r],s=$r(t,o);n(s,o)&&Ei(a,Vi(o,t),s)}return a}function gi(t,e,n,r){var i=r?cn:un,a=-1,o=e.length,s=t;for(t===e&&(e=na(e)),n&&(s=Qe(t,yn(n)));++a<o;)for(var u=0,c=e[a],l=n?n(c):c;(u=i(s,l,u,r))>-1;)s!==t&&Ie.call(s,u,1),Ie.call(t,u,1);return t}function bi(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==a){var a=i;Ua(i)?Ie.call(t,i,1):Hi(t,i)}}return t}function _i(t,e){return t+Wn(Xn()*(e-t+1))}function wi(t,e){var n="";if(!t||e<1||e>D)return n;do{e%2&&(n+=t),(e=Wn(e/2))&&(t+=t)}while(e);return n}function xi(t,e){return io(Qa(t,e,Au),t+"")}function ki(t){return kr(du(t))}function Oi(t,e){var n=du(t);return so(n,Dr(e,0,n.length))}function Ei(t,e,n,r){if(!Ss(t))return t;for(var i=-1,o=(e=Vi(e,t)).length,s=o-1,u=t;null!=u&&++i<o;){var c=co(e[i]),l=n;if(i!=s){var f=u[c];(l=r?r(f,c,u):a)===a&&(l=Ss(f)?f:Ua(e[i+1])?[]:{})}Mr(u,c,l),u=u[c]}return t}var Si=rr?function(t,e){return rr.set(t,e),t}:Au,Mi=dn?function(t,e){return dn(t,"toString",{configurable:!0,enumerable:!1,value:Su(e),writable:!0})}:Au;function Ci(t){return so(du(t))}function Ai(t,e,n){var i=-1,a=t.length;e<0&&(e=-e>a?0:a+e),(n=n>a?a:n)<0&&(n+=a),a=e>n?0:n-e>>>0,e>>>=0;for(var o=r(a);++i<a;)o[i]=t[i+e];return o}function ji(t,e){var n;return Wr(t,function(t,r,i){return!(n=e(t,r,i))}),!!n}function Pi(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=W){for(;r<i;){var a=r+i>>>1,o=t[a];null!==o&&!Is(o)&&(n?o<=e:o<e)?r=a+1:i=a}return i}return Ti(t,e,Au,n)}function Ti(t,e,n,r){e=n(e);for(var i=0,o=null==t?0:t.length,s=e!=e,u=null===e,c=Is(e),l=e===a;i<o;){var f=Wn((i+o)/2),p=n(t[f]),d=p!==a,h=null===p,L=p==p,v=Is(p);if(s)var y=r||L;else y=l?L&&(r||d):u?L&&d&&(r||!h):c?L&&d&&!h&&(r||!v):!h&&!v&&(r?p<=e:p<e);y?i=f+1:o=f}return Vn(o,H)}function Di(t,e){for(var n=-1,r=t.length,i=0,a=[];++n<r;){var o=t[n],s=e?e(o):o;if(!n||!ds(s,u)){var u=s;a[i++]=0===o?0:o}}return a}function Ii(t){return"number"==typeof t?t:Is(t)?R:+t}function Ri(t){if("string"==typeof t)return t;if(ys(t))return Qe(t,Ri)+"";if(Is(t))return pr?pr.call(t):"";var e=t+"";return"0"==e&&1/t==-T?"-0":e}function Ni(t,e,n){var r=-1,i=Ke,a=t.length,s=!0,u=[],c=u;if(n)s=!1,i=Je;else if(a>=o){var l=e?null:wa(t);if(l)return Cn(l);s=!1,i=gn,c=new _r}else c=e?[]:u;t:for(;++r<a;){var f=t[r],p=e?e(f):f;if(f=n||0!==f?f:0,s&&p==p){for(var d=c.length;d--;)if(c[d]===p)continue t;e&&c.push(p),u.push(f)}else i(c,p,n)||(c!==u&&c.push(p),u.push(f))}return u}function Hi(t,e){return null==(t=to(t,e=Vi(e,t)))||delete t[co(xo(e))]}function Wi(t,e,n,r){return Ei(t,e,n($r(t,e)),r)}function Bi(t,e,n,r){for(var i=t.length,a=r?i:-1;(r?a--:++a<i)&&e(t[a],a,t););return n?Ai(t,r?0:a,r?a+1:i):Ai(t,r?a+1:0,r?i:a)}function Zi(t,e){var n=t;return n instanceof yr&&(n=n.value()),en(e,function(t,e){return e.func.apply(e.thisArg,tn([t],e.args))},n)}function Fi(t,e,n){var i=t.length;if(i<2)return i?Ni(t[0]):[];for(var a=-1,o=r(i);++a<i;)for(var s=t[a],u=-1;++u<i;)u!=a&&(o[a]=Hr(o[a]||s,t[u],e,n));return Ni(zr(o,1),e,n)}function qi(t,e,n){for(var r=-1,i=t.length,o=e.length,s={};++r<i;){var u=r<o?e[r]:a;n(s,t[r],u)}return s}function zi(t){return bs(t)?t:[]}function Ui(t){return"function"==typeof t?t:Au}function Vi(t,e){return ys(t)?t:Ya(t,e)?[t]:uo(Us(t))}var Yi=xi;function Gi(t,e,n){var r=t.length;return n=n===a?r:n,!e&&n>=r?t:Ai(t,e,n)}var Xi=In||function(t){return Te.clearTimeout(t)};function $i(t,e){if(e)return t.slice();var n=t.length,r=Me?Me(n):new t.constructor(n);return t.copy(r),r}function Ki(t){var e=new t.constructor(t.byteLength);return new we(e).set(new we(t)),e}function Ji(t,e){var n=e?Ki(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Qi(t,e){if(t!==e){var n=t!==a,r=null===t,i=t==t,o=Is(t),s=e!==a,u=null===e,c=e==e,l=Is(e);if(!u&&!l&&!o&&t>e||o&&s&&c&&!u&&!l||r&&s&&c||!n&&c||!i)return 1;if(!r&&!o&&!l&&t<e||l&&n&&i&&!r&&!o||u&&n&&i||!s&&i||!c)return-1}return 0}function ta(t,e,n,i){for(var a=-1,o=t.length,s=n.length,u=-1,c=e.length,l=Un(o-s,0),f=r(c+l),p=!i;++u<c;)f[u]=e[u];for(;++a<s;)(p||a<o)&&(f[n[a]]=t[a]);for(;l--;)f[u++]=t[a++];return f}function ea(t,e,n,i){for(var a=-1,o=t.length,s=-1,u=n.length,c=-1,l=e.length,f=Un(o-u,0),p=r(f+l),d=!i;++a<f;)p[a]=t[a];for(var h=a;++c<l;)p[h+c]=e[c];for(;++s<u;)(d||a<o)&&(p[h+n[s]]=t[a++]);return p}function na(t,e){var n=-1,i=t.length;for(e||(e=r(i));++n<i;)e[n]=t[n];return e}function ra(t,e,n,r){var i=!n;n||(n={});for(var o=-1,s=e.length;++o<s;){var u=e[o],c=r?r(n[u],t[u],u,n,t):a;c===a&&(c=t[u]),i?Pr(n,u,c):Mr(n,u,c)}return n}function ia(t,e){return function(n,r){var i=ys(n)?Ve:Ar,a=e?e():{};return i(n,t,Ia(r,2),a)}}function aa(t){return xi(function(e,n){var r=-1,i=n.length,o=i>1?n[i-1]:a,s=i>2?n[2]:a;for(o=t.length>3&&"function"==typeof o?(i--,o):a,s&&Va(n[0],n[1],s)&&(o=i<3?a:o,i=1),e=ee(e);++r<i;){var u=n[r];u&&t(e,u,r,o)}return e})}function oa(t,e){return function(n,r){if(null==n)return n;if(!gs(n))return t(n,r);for(var i=n.length,a=e?i:-1,o=ee(n);(e?a--:++a<i)&&!1!==r(o[a],a,o););return n}}function sa(t){return function(e,n,r){for(var i=-1,a=ee(e),o=r(e),s=o.length;s--;){var u=o[t?s:++i];if(!1===n(a[u],u,a))break}return e}}function ua(t){return function(e){var n=On(e=Us(e))?Pn(e):a,r=n?n[0]:e.charAt(0),i=n?Gi(n,1).join(""):e.slice(1);return r[t]()+i}}function ca(t){return function(e){return en(ku(vu(e).replace(me,"")),t,"")}}function la(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=hr(t.prototype),r=t.apply(n,e);return Ss(r)?r:n}}function fa(t){return function(e,n,r){var i=ee(e);if(!gs(e)){var o=Ia(n,3);e=iu(e),n=function(t){return o(i[t],t,i)}}var s=t(e,n,r);return s>-1?i[o?e[s]:s]:a}}function pa(t){return Ca(function(e){var n=e.length,r=n,i=vr.prototype.thru;for(t&&e.reverse();r--;){var o=e[r];if("function"!=typeof o)throw new ie(u);if(i&&!s&&"wrapper"==Ta(o))var s=new vr([],!0)}for(r=s?r:n;++r<n;){var c=Ta(o=e[r]),l="wrapper"==c?Pa(o):a;s=l&&Ga(l[0])&&l[1]==(k|b|w|O)&&!l[4].length&&1==l[9]?s[Ta(l[0])].apply(s,l[3]):1==o.length&&Ga(o)?s[c]():s.thru(o)}return function(){var t=arguments,r=t[0];if(s&&1==t.length&&ys(r))return s.plant(r).value();for(var i=0,a=n?e[i].apply(this,t):r;++i<n;)a=e[i].call(this,a);return a}})}function da(t,e,n,i,o,s,u,c,l,f){var p=e&k,d=e&y,h=e&m,L=e&(b|_),v=e&E,g=h?a:la(t);return function y(){for(var m=arguments.length,b=r(m),_=m;_--;)b[_]=arguments[_];if(L)var w=Da(y),x=function(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}(b,w);if(i&&(b=ta(b,i,o,L)),s&&(b=ea(b,s,u,L)),m-=x,L&&m<f){var k=Mn(b,w);return ba(t,e,da,y.placeholder,n,b,k,c,l,f-m)}var O=d?n:this,E=h?O[t]:t;return m=b.length,c?b=function(t,e){for(var n=t.length,r=Vn(e.length,n),i=na(t);r--;){var o=e[r];t[r]=Ua(o,n)?i[o]:a}return t}(b,c):v&&m>1&&b.reverse(),p&&l<m&&(b.length=l),this&&this!==Te&&this instanceof y&&(E=g||la(E)),E.apply(O,b)}}function ha(t,e){return function(n,r){return function(t,e,n,r){return Yr(t,function(t,i,a){e(r,n(t),i,a)}),r}(n,t,e(r),{})}}function La(t,e){return function(n,r){var i;if(n===a&&r===a)return e;if(n!==a&&(i=n),r!==a){if(i===a)return r;"string"==typeof n||"string"==typeof r?(n=Ri(n),r=Ri(r)):(n=Ii(n),r=Ii(r)),i=t(n,r)}return i}}function va(t){return Ca(function(e){return e=Qe(e,yn(Ia())),xi(function(n){var r=this;return t(e,function(t){return Ue(t,r,n)})})})}function ya(t,e){var n=(e=e===a?" ":Ri(e)).length;if(n<2)return n?wi(e,t):e;var r=wi(e,Hn(t/jn(e)));return On(e)?Gi(Pn(r),0,t).join(""):r.slice(0,t)}function ma(t){return function(e,n,i){return i&&"number"!=typeof i&&Va(e,n,i)&&(n=i=a),e=Bs(e),n===a?(n=e,e=0):n=Bs(n),function(t,e,n,i){for(var a=-1,o=Un(Hn((e-t)/(n||1)),0),s=r(o);o--;)s[i?o:++a]=t,t+=n;return s}(e,n,i=i===a?e<n?1:-1:Bs(i),t)}}function ga(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=qs(e),n=qs(n)),t(e,n)}}function ba(t,e,n,r,i,o,s,u,c,l){var f=e&b;e|=f?w:x,(e&=~(f?x:w))&g||(e&=~(y|m));var p=[t,e,i,f?o:a,f?s:a,f?a:o,f?a:s,u,c,l],d=n.apply(a,p);return Ga(t)&&no(d,p),d.placeholder=r,ao(d,t,e)}function _a(t){var e=te[t];return function(t,n){if(t=qs(t),n=null==n?0:Vn(Zs(n),292)){var r=(Us(t)+"e").split("e");return+((r=(Us(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var wa=tr&&1/Cn(new tr([,-0]))[1]==T?function(t){return new tr(t)}:Iu;function xa(t){return function(e){var n=Za(e);return n==$?En(e):n==nt?An(e):function(t,e){return Qe(e,function(e){return[e,t[e]]})}(e,t(e))}}function ka(t,e,n,i,o,s,c,l){var p=e&m;if(!p&&"function"!=typeof t)throw new ie(u);var d=i?i.length:0;if(d||(e&=~(w|x),i=o=a),c=c===a?c:Un(Zs(c),0),l=l===a?l:Zs(l),d-=o?o.length:0,e&x){var h=i,L=o;i=o=a}var v=p?a:Pa(t),E=[t,e,n,i,o,h,L,s,c,l];if(v&&function(t,e){var n=t[1],r=e[1],i=n|r,a=i<(y|m|k),o=r==k&&n==b||r==k&&n==O&&t[7].length<=e[8]||r==(k|O)&&e[7].length<=e[8]&&n==b;if(!a&&!o)return t;r&y&&(t[2]=e[2],i|=n&y?0:g);var s=e[3];if(s){var u=t[3];t[3]=u?ta(u,s,e[4]):s,t[4]=u?Mn(t[3],f):e[4]}(s=e[5])&&(u=t[5],t[5]=u?ea(u,s,e[6]):s,t[6]=u?Mn(t[5],f):e[6]),(s=e[7])&&(t[7]=s),r&k&&(t[8]=null==t[8]?e[8]:Vn(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i}(E,v),t=E[0],e=E[1],n=E[2],i=E[3],o=E[4],!(l=E[9]=E[9]===a?p?0:t.length:Un(E[9]-d,0))&&e&(b|_)&&(e&=~(b|_)),e&&e!=y)S=e==b||e==_?function(t,e,n){var i=la(t);return function o(){for(var s=arguments.length,u=r(s),c=s,l=Da(o);c--;)u[c]=arguments[c];var f=s<3&&u[0]!==l&&u[s-1]!==l?[]:Mn(u,l);return(s-=f.length)<n?ba(t,e,da,o.placeholder,a,u,f,a,a,n-s):Ue(this&&this!==Te&&this instanceof o?i:t,this,u)}}(t,e,l):e!=w&&e!=(y|w)||o.length?da.apply(a,E):function(t,e,n,i){var a=e&y,o=la(t);return function e(){for(var s=-1,u=arguments.length,c=-1,l=i.length,f=r(l+u),p=this&&this!==Te&&this instanceof e?o:t;++c<l;)f[c]=i[c];for(;u--;)f[c++]=arguments[++s];return Ue(p,a?n:this,f)}}(t,e,n,i);else var S=function(t,e,n){var r=e&y,i=la(t);return function e(){return(this&&this!==Te&&this instanceof e?i:t).apply(r?n:this,arguments)}}(t,e,n);return ao((v?Si:no)(S,E),t,e)}function Oa(t,e,n,r){return t===a||ds(t,se[n])&&!le.call(r,n)?e:t}function Ea(t,e,n,r,i,o){return Ss(t)&&Ss(e)&&(o.set(e,t),Li(t,e,a,Ea,o),o.delete(e)),t}function Sa(t){return js(t)?a:t}function Ma(t,e,n,r,i,o){var s=n&L,u=t.length,c=e.length;if(u!=c&&!(s&&c>u))return!1;var l=o.get(t);if(l&&o.get(e))return l==e;var f=-1,p=!0,d=n&v?new _r:a;for(o.set(t,e),o.set(e,t);++f<u;){var h=t[f],y=e[f];if(r)var m=s?r(y,h,f,e,t,o):r(h,y,f,t,e,o);if(m!==a){if(m)continue;p=!1;break}if(d){if(!rn(e,function(t,e){if(!gn(d,e)&&(h===t||i(h,t,n,r,o)))return d.push(e)})){p=!1;break}}else if(h!==y&&!i(h,y,n,r,o)){p=!1;break}}return o.delete(t),o.delete(e),p}function Ca(t){return io(Qa(t,a,mo),t+"")}function Aa(t){return Kr(t,iu,Wa)}function ja(t){return Kr(t,au,Ba)}var Pa=rr?function(t){return rr.get(t)}:Iu;function Ta(t){for(var e=t.name+"",n=ir[e],r=le.call(ir,e)?n.length:0;r--;){var i=n[r],a=i.func;if(null==a||a==t)return i.name}return e}function Da(t){return(le.call(dr,"placeholder")?dr:t).placeholder}function Ia(){var t=dr.iteratee||ju;return t=t===ju?ui:t,arguments.length?t(arguments[0],arguments[1]):t}function Ra(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function Na(t){for(var e=iu(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Ka(i)]}return e}function Ha(t,e){var n=function(t,e){return null==t?a:t[e]}(t,e);return si(n)?n:a}var Wa=Bn?function(t){return null==t?[]:(t=ee(t),$e(Bn(t),function(e){return De.call(t,e)}))}:Fu,Ba=Bn?function(t){for(var e=[];t;)tn(e,Wa(t)),t=je(t);return e}:Fu,Za=Jr;function Fa(t,e,n){for(var r=-1,i=(e=Vi(e,t)).length,a=!1;++r<i;){var o=co(e[r]);if(!(a=null!=t&&n(t,o)))break;t=t[o]}return a||++r!=i?a:!!(i=null==t?0:t.length)&&Es(i)&&Ua(o,i)&&(ys(t)||vs(t))}function qa(t){return"function"!=typeof t.constructor||$a(t)?{}:hr(je(t))}function za(t){return ys(t)||vs(t)||!!(Ne&&t&&t[Ne])}function Ua(t,e){var n=typeof t;return!!(e=null==e?D:e)&&("number"==n||"symbol"!=n&&Gt.test(t))&&t>-1&&t%1==0&&t<e}function Va(t,e,n){if(!Ss(n))return!1;var r=typeof e;return!!("number"==r?gs(n)&&Ua(e,n.length):"string"==r&&e in n)&&ds(n[e],t)}function Ya(t,e){if(ys(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Is(t))||At.test(t)||!Ct.test(t)||null!=e&&t in ee(e)}function Ga(t){var e=Ta(t),n=dr[e];if("function"!=typeof n||!(e in yr.prototype))return!1;if(t===n)return!0;var r=Pa(n);return!!r&&t===r[0]}(Kn&&Za(new Kn(new ArrayBuffer(1)))!=ct||Jn&&Za(new Jn)!=$||Qn&&"[object Promise]"!=Za(Qn.resolve())||tr&&Za(new tr)!=nt||er&&Za(new er)!=ot)&&(Za=function(t){var e=Jr(t),n=e==Q?t.constructor:a,r=n?lo(n):"";if(r)switch(r){case ar:return ct;case or:return $;case sr:return"[object Promise]";case ur:return nt;case cr:return ot}return e});var Xa=ue?ks:qu;function $a(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||se)}function Ka(t){return t==t&&!Ss(t)}function Ja(t,e){return function(n){return null!=n&&n[t]===e&&(e!==a||t in ee(n))}}function Qa(t,e,n){return e=Un(e===a?t.length-1:e,0),function(){for(var i=arguments,a=-1,o=Un(i.length-e,0),s=r(o);++a<o;)s[a]=i[e+a];a=-1;for(var u=r(e+1);++a<e;)u[a]=i[a];return u[e]=n(s),Ue(t,this,u)}}function to(t,e){return e.length<2?t:$r(t,Ai(e,0,-1))}function eo(t,e){if("__proto__"!=e)return t[e]}var no=oo(Si),ro=Nn||function(t,e){return Te.setTimeout(t,e)},io=oo(Mi);function ao(t,e,n){var r=e+"";return io(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Nt,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return Ye(B,function(n){var r="_."+n[0];e&n[1]&&!Ke(t,r)&&t.push(r)}),t.sort()}(function(t){var e=t.match(Ht);return e?e[1].split(Wt):[]}(r),n)))}function oo(t){var e=0,n=0;return function(){var r=Yn(),i=A-(r-n);if(n=r,i>0){if(++e>=C)return arguments[0]}else e=0;return t.apply(a,arguments)}}function so(t,e){var n=-1,r=t.length,i=r-1;for(e=e===a?r:e;++n<e;){var o=_i(n,i),s=t[o];t[o]=t[n],t[n]=s}return t.length=e,t}var uo=function(t){var e=ss(t,function(t){return n.size===l&&n.clear(),t}),n=e.cache;return e}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(jt,function(t,n,r,i){e.push(r?i.replace(Zt,"$1"):n||t)}),e});function co(t){if("string"==typeof t||Is(t))return t;var e=t+"";return"0"==e&&1/t==-T?"-0":e}function lo(t){if(null!=t){try{return ce.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function fo(t){if(t instanceof yr)return t.clone();var e=new vr(t.__wrapped__,t.__chain__);return e.__actions__=na(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var po=xi(function(t,e){return bs(t)?Hr(t,zr(e,1,bs,!0)):[]}),ho=xi(function(t,e){var n=xo(e);return bs(n)&&(n=a),bs(t)?Hr(t,zr(e,1,bs,!0),Ia(n,2)):[]}),Lo=xi(function(t,e){var n=xo(e);return bs(n)&&(n=a),bs(t)?Hr(t,zr(e,1,bs,!0),a,n):[]});function vo(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Zs(n);return i<0&&(i=Un(r+i,0)),sn(t,Ia(e,3),i)}function yo(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return n!==a&&(i=Zs(n),i=n<0?Un(r+i,0):Vn(i,r-1)),sn(t,Ia(e,3),i,!0)}function mo(t){return null!=t&&t.length?zr(t,1):[]}function go(t){return t&&t.length?t[0]:a}var bo=xi(function(t){var e=Qe(t,zi);return e.length&&e[0]===t[0]?ni(e):[]}),_o=xi(function(t){var e=xo(t),n=Qe(t,zi);return e===xo(n)?e=a:n.pop(),n.length&&n[0]===t[0]?ni(n,Ia(e,2)):[]}),wo=xi(function(t){var e=xo(t),n=Qe(t,zi);return(e="function"==typeof e?e:a)&&n.pop(),n.length&&n[0]===t[0]?ni(n,a,e):[]});function xo(t){var e=null==t?0:t.length;return e?t[e-1]:a}var ko=xi(Oo);function Oo(t,e){return t&&t.length&&e&&e.length?gi(t,e):t}var Eo=Ca(function(t,e){var n=null==t?0:t.length,r=Tr(t,e);return bi(t,Qe(e,function(t){return Ua(t,n)?+t:t}).sort(Qi)),r});function So(t){return null==t?t:$n.call(t)}var Mo=xi(function(t){return Ni(zr(t,1,bs,!0))}),Co=xi(function(t){var e=xo(t);return bs(e)&&(e=a),Ni(zr(t,1,bs,!0),Ia(e,2))}),Ao=xi(function(t){var e=xo(t);return e="function"==typeof e?e:a,Ni(zr(t,1,bs,!0),a,e)});function jo(t){if(!t||!t.length)return[];var e=0;return t=$e(t,function(t){if(bs(t))return e=Un(t.length,e),!0}),vn(e,function(e){return Qe(t,pn(e))})}function Po(t,e){if(!t||!t.length)return[];var n=jo(t);return null==e?n:Qe(n,function(t){return Ue(e,a,t)})}var To=xi(function(t,e){return bs(t)?Hr(t,e):[]}),Do=xi(function(t){return Fi($e(t,bs))}),Io=xi(function(t){var e=xo(t);return bs(e)&&(e=a),Fi($e(t,bs),Ia(e,2))}),Ro=xi(function(t){var e=xo(t);return e="function"==typeof e?e:a,Fi($e(t,bs),a,e)}),No=xi(jo);var Ho=xi(function(t){var e=t.length,n=e>1?t[e-1]:a;return n="function"==typeof n?(t.pop(),n):a,Po(t,n)});function Wo(t){var e=dr(t);return e.__chain__=!0,e}function Bo(t,e){return e(t)}var Zo=Ca(function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,i=function(e){return Tr(e,t)};return!(e>1||this.__actions__.length)&&r instanceof yr&&Ua(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:Bo,args:[i],thisArg:a}),new vr(r,this.__chain__).thru(function(t){return e&&!t.length&&t.push(a),t})):this.thru(i)});var Fo=ia(function(t,e,n){le.call(t,n)?++t[n]:Pr(t,n,1)});var qo=fa(vo),zo=fa(yo);function Uo(t,e){return(ys(t)?Ye:Wr)(t,Ia(e,3))}function Vo(t,e){return(ys(t)?Ge:Br)(t,Ia(e,3))}var Yo=ia(function(t,e,n){le.call(t,n)?t[n].push(e):Pr(t,n,[e])});var Go=xi(function(t,e,n){var i=-1,a="function"==typeof e,o=gs(t)?r(t.length):[];return Wr(t,function(t){o[++i]=a?Ue(e,t,n):ri(t,e,n)}),o}),Xo=ia(function(t,e,n){Pr(t,n,e)});function $o(t,e){return(ys(t)?Qe:pi)(t,Ia(e,3))}var Ko=ia(function(t,e,n){t[n?0:1].push(e)},function(){return[[],[]]});var Jo=xi(function(t,e){if(null==t)return[];var n=e.length;return n>1&&Va(t,e[0],e[1])?e=[]:n>2&&Va(e[0],e[1],e[2])&&(e=[e[0]]),yi(t,zr(e,1),[])}),Qo=Rn||function(){return Te.Date.now()};function ts(t,e,n){return e=n?a:e,e=t&&null==e?t.length:e,ka(t,k,a,a,a,a,e)}function es(t,e){var n;if("function"!=typeof e)throw new ie(u);return t=Zs(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=a),n}}var ns=xi(function(t,e,n){var r=y;if(n.length){var i=Mn(n,Da(ns));r|=w}return ka(t,r,e,n,i)}),rs=xi(function(t,e,n){var r=y|m;if(n.length){var i=Mn(n,Da(rs));r|=w}return ka(e,r,t,n,i)});function is(t,e,n){var r,i,o,s,c,l,f=0,p=!1,d=!1,h=!0;if("function"!=typeof t)throw new ie(u);function L(e){var n=r,o=i;return r=i=a,f=e,s=t.apply(o,n)}function v(t){var n=t-l;return l===a||n>=e||n<0||d&&t-f>=o}function y(){var t=Qo();if(v(t))return m(t);c=ro(y,function(t){var n=e-(t-l);return d?Vn(n,o-(t-f)):n}(t))}function m(t){return c=a,h&&r?L(t):(r=i=a,s)}function g(){var t=Qo(),n=v(t);if(r=arguments,i=this,l=t,n){if(c===a)return function(t){return f=t,c=ro(y,e),p?L(t):s}(l);if(d)return c=ro(y,e),L(l)}return c===a&&(c=ro(y,e)),s}return e=qs(e)||0,Ss(n)&&(p=!!n.leading,o=(d="maxWait"in n)?Un(qs(n.maxWait)||0,e):o,h="trailing"in n?!!n.trailing:h),g.cancel=function(){c!==a&&Xi(c),f=0,r=l=i=c=a},g.flush=function(){return c===a?s:m(Qo())},g}var as=xi(function(t,e){return Nr(t,1,e)}),os=xi(function(t,e,n){return Nr(t,qs(e)||0,n)});function ss(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new ie(u);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],a=n.cache;if(a.has(i))return a.get(i);var o=t.apply(this,r);return n.cache=a.set(i,o)||a,o};return n.cache=new(ss.Cache||br),n}function us(t){if("function"!=typeof t)throw new ie(u);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}ss.Cache=br;var cs=Yi(function(t,e){var n=(e=1==e.length&&ys(e[0])?Qe(e[0],yn(Ia())):Qe(zr(e,1),yn(Ia()))).length;return xi(function(r){for(var i=-1,a=Vn(r.length,n);++i<a;)r[i]=e[i].call(this,r[i]);return Ue(t,this,r)})}),ls=xi(function(t,e){var n=Mn(e,Da(ls));return ka(t,w,a,e,n)}),fs=xi(function(t,e){var n=Mn(e,Da(fs));return ka(t,x,a,e,n)}),ps=Ca(function(t,e){return ka(t,O,a,a,a,e)});function ds(t,e){return t===e||t!=t&&e!=e}var hs=ga(Qr),Ls=ga(function(t,e){return t>=e}),vs=ii(function(){return arguments}())?ii:function(t){return Ms(t)&&le.call(t,"callee")&&!De.call(t,"callee")},ys=r.isArray,ms=We?yn(We):function(t){return Ms(t)&&Jr(t)==ut};function gs(t){return null!=t&&Es(t.length)&&!ks(t)}function bs(t){return Ms(t)&&gs(t)}var _s=Zn||qu,ws=Be?yn(Be):function(t){return Ms(t)&&Jr(t)==U};function xs(t){if(!Ms(t))return!1;var e=Jr(t);return e==Y||e==V||"string"==typeof t.message&&"string"==typeof t.name&&!js(t)}function ks(t){if(!Ss(t))return!1;var e=Jr(t);return e==G||e==X||e==q||e==tt}function Os(t){return"number"==typeof t&&t==Zs(t)}function Es(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=D}function Ss(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Ms(t){return null!=t&&"object"==typeof t}var Cs=Ze?yn(Ze):function(t){return Ms(t)&&Za(t)==$};function As(t){return"number"==typeof t||Ms(t)&&Jr(t)==K}function js(t){if(!Ms(t)||Jr(t)!=Q)return!1;var e=je(t);if(null===e)return!0;var n=le.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&ce.call(n)==he}var Ps=Fe?yn(Fe):function(t){return Ms(t)&&Jr(t)==et};var Ts=qe?yn(qe):function(t){return Ms(t)&&Za(t)==nt};function Ds(t){return"string"==typeof t||!ys(t)&&Ms(t)&&Jr(t)==rt}function Is(t){return"symbol"==typeof t||Ms(t)&&Jr(t)==it}var Rs=ze?yn(ze):function(t){return Ms(t)&&Es(t.length)&&!!Ee[Jr(t)]};var Ns=ga(fi),Hs=ga(function(t,e){return t<=e});function Ws(t){if(!t)return[];if(gs(t))return Ds(t)?Pn(t):na(t);if(He&&t[He])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[He]());var e=Za(t);return(e==$?En:e==nt?Cn:du)(t)}function Bs(t){return t?(t=qs(t))===T||t===-T?(t<0?-1:1)*I:t==t?t:0:0===t?t:0}function Zs(t){var e=Bs(t),n=e%1;return e==e?n?e-n:e:0}function Fs(t){return t?Dr(Zs(t),0,N):0}function qs(t){if("number"==typeof t)return t;if(Is(t))return R;if(Ss(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Ss(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(Dt,"");var n=Ut.test(t);return n||Yt.test(t)?Ae(t.slice(2),n?2:8):zt.test(t)?R:+t}function zs(t){return ra(t,au(t))}function Us(t){return null==t?"":Ri(t)}var Vs=aa(function(t,e){if($a(e)||gs(e))ra(e,iu(e),t);else for(var n in e)le.call(e,n)&&Mr(t,n,e[n])}),Ys=aa(function(t,e){ra(e,au(e),t)}),Gs=aa(function(t,e,n,r){ra(e,au(e),t,r)}),Xs=aa(function(t,e,n,r){ra(e,iu(e),t,r)}),$s=Ca(Tr);var Ks=xi(function(t,e){t=ee(t);var n=-1,r=e.length,i=r>2?e[2]:a;for(i&&Va(e[0],e[1],i)&&(r=1);++n<r;)for(var o=e[n],s=au(o),u=-1,c=s.length;++u<c;){var l=s[u],f=t[l];(f===a||ds(f,se[l])&&!le.call(t,l))&&(t[l]=o[l])}return t}),Js=xi(function(t){return t.push(a,Ea),Ue(su,a,t)});function Qs(t,e,n){var r=null==t?a:$r(t,e);return r===a?n:r}function tu(t,e){return null!=t&&Fa(t,e,ei)}var eu=ha(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=de.call(e)),t[e]=n},Su(Au)),nu=ha(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=de.call(e)),le.call(t,e)?t[e].push(n):t[e]=[n]},Ia),ru=xi(ri);function iu(t){return gs(t)?xr(t):ci(t)}function au(t){return gs(t)?xr(t,!0):li(t)}var ou=aa(function(t,e,n){Li(t,e,n)}),su=aa(function(t,e,n,r){Li(t,e,n,r)}),uu=Ca(function(t,e){var n={};if(null==t)return n;var r=!1;e=Qe(e,function(e){return e=Vi(e,t),r||(r=e.length>1),e}),ra(t,ja(t),n),r&&(n=Ir(n,p|d|h,Sa));for(var i=e.length;i--;)Hi(n,e[i]);return n});var cu=Ca(function(t,e){return null==t?{}:function(t,e){return mi(t,e,function(e,n){return tu(t,n)})}(t,e)});function lu(t,e){if(null==t)return{};var n=Qe(ja(t),function(t){return[t]});return e=Ia(e),mi(t,n,function(t,n){return e(t,n[0])})}var fu=xa(iu),pu=xa(au);function du(t){return null==t?[]:mn(t,iu(t))}var hu=ca(function(t,e,n){return e=e.toLowerCase(),t+(n?Lu(e):e)});function Lu(t){return xu(Us(t).toLowerCase())}function vu(t){return(t=Us(t))&&t.replace(Xt,wn).replace(ge,"")}var yu=ca(function(t,e,n){return t+(n?"-":"")+e.toLowerCase()}),mu=ca(function(t,e,n){return t+(n?" ":"")+e.toLowerCase()}),gu=ua("toLowerCase");var bu=ca(function(t,e,n){return t+(n?"_":"")+e.toLowerCase()});var _u=ca(function(t,e,n){return t+(n?" ":"")+xu(e)});var wu=ca(function(t,e,n){return t+(n?" ":"")+e.toUpperCase()}),xu=ua("toUpperCase");function ku(t,e,n){return t=Us(t),(e=n?a:e)===a?function(t){return xe.test(t)}(t)?function(t){return t.match(_e)||[]}(t):function(t){return t.match(Bt)||[]}(t):t.match(e)||[]}var Ou=xi(function(t,e){try{return Ue(t,a,e)}catch(t){return xs(t)?t:new Jt(t)}}),Eu=Ca(function(t,e){return Ye(e,function(e){e=co(e),Pr(t,e,ns(t[e],t))}),t});function Su(t){return function(){return t}}var Mu=pa(),Cu=pa(!0);function Au(t){return t}function ju(t){return ui("function"==typeof t?t:Ir(t,p))}var Pu=xi(function(t,e){return function(n){return ri(n,t,e)}}),Tu=xi(function(t,e){return function(n){return ri(t,n,e)}});function Du(t,e,n){var r=iu(e),i=Xr(e,r);null!=n||Ss(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=Xr(e,iu(e)));var a=!(Ss(n)&&"chain"in n&&!n.chain),o=ks(t);return Ye(i,function(n){var r=e[n];t[n]=r,o&&(t.prototype[n]=function(){var e=this.__chain__;if(a||e){var n=t(this.__wrapped__);return(n.__actions__=na(this.__actions__)).push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,tn([this.value()],arguments))})}),t}function Iu(){}var Ru=va(Qe),Nu=va(Xe),Hu=va(rn);function Wu(t){return Ya(t)?pn(co(t)):function(t){return function(e){return $r(e,t)}}(t)}var Bu=ma(),Zu=ma(!0);function Fu(){return[]}function qu(){return!1}var zu=La(function(t,e){return t+e},0),Uu=_a("ceil"),Vu=La(function(t,e){return t/e},1),Yu=_a("floor");var Gu,Xu=La(function(t,e){return t*e},1),$u=_a("round"),Ku=La(function(t,e){return t-e},0);return dr.after=function(t,e){if("function"!=typeof e)throw new ie(u);return t=Zs(t),function(){if(--t<1)return e.apply(this,arguments)}},dr.ary=ts,dr.assign=Vs,dr.assignIn=Ys,dr.assignInWith=Gs,dr.assignWith=Xs,dr.at=$s,dr.before=es,dr.bind=ns,dr.bindAll=Eu,dr.bindKey=rs,dr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return ys(t)?t:[t]},dr.chain=Wo,dr.chunk=function(t,e,n){e=(n?Va(t,e,n):e===a)?1:Un(Zs(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var o=0,s=0,u=r(Hn(i/e));o<i;)u[s++]=Ai(t,o,o+=e);return u},dr.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var a=t[e];a&&(i[r++]=a)}return i},dr.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return tn(ys(n)?na(n):[n],zr(e,1))},dr.cond=function(t){var e=null==t?0:t.length,n=Ia();return t=e?Qe(t,function(t){if("function"!=typeof t[1])throw new ie(u);return[n(t[0]),t[1]]}):[],xi(function(n){for(var r=-1;++r<e;){var i=t[r];if(Ue(i[0],this,n))return Ue(i[1],this,n)}})},dr.conforms=function(t){return function(t){var e=iu(t);return function(n){return Rr(n,t,e)}}(Ir(t,p))},dr.constant=Su,dr.countBy=Fo,dr.create=function(t,e){var n=hr(t);return null==e?n:jr(n,e)},dr.curry=function t(e,n,r){var i=ka(e,b,a,a,a,a,a,n=r?a:n);return i.placeholder=t.placeholder,i},dr.curryRight=function t(e,n,r){var i=ka(e,_,a,a,a,a,a,n=r?a:n);return i.placeholder=t.placeholder,i},dr.debounce=is,dr.defaults=Ks,dr.defaultsDeep=Js,dr.defer=as,dr.delay=os,dr.difference=po,dr.differenceBy=ho,dr.differenceWith=Lo,dr.drop=function(t,e,n){var r=null==t?0:t.length;return r?Ai(t,(e=n||e===a?1:Zs(e))<0?0:e,r):[]},dr.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?Ai(t,0,(e=r-(e=n||e===a?1:Zs(e)))<0?0:e):[]},dr.dropRightWhile=function(t,e){return t&&t.length?Bi(t,Ia(e,3),!0,!0):[]},dr.dropWhile=function(t,e){return t&&t.length?Bi(t,Ia(e,3),!0):[]},dr.fill=function(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&Va(t,e,n)&&(n=0,r=i),function(t,e,n,r){var i=t.length;for((n=Zs(n))<0&&(n=-n>i?0:i+n),(r=r===a||r>i?i:Zs(r))<0&&(r+=i),r=n>r?0:Fs(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},dr.filter=function(t,e){return(ys(t)?$e:qr)(t,Ia(e,3))},dr.flatMap=function(t,e){return zr($o(t,e),1)},dr.flatMapDeep=function(t,e){return zr($o(t,e),T)},dr.flatMapDepth=function(t,e,n){return n=n===a?1:Zs(n),zr($o(t,e),n)},dr.flatten=mo,dr.flattenDeep=function(t){return null!=t&&t.length?zr(t,T):[]},dr.flattenDepth=function(t,e){return null!=t&&t.length?zr(t,e=e===a?1:Zs(e)):[]},dr.flip=function(t){return ka(t,E)},dr.flow=Mu,dr.flowRight=Cu,dr.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},dr.functions=function(t){return null==t?[]:Xr(t,iu(t))},dr.functionsIn=function(t){return null==t?[]:Xr(t,au(t))},dr.groupBy=Yo,dr.initial=function(t){return null!=t&&t.length?Ai(t,0,-1):[]},dr.intersection=bo,dr.intersectionBy=_o,dr.intersectionWith=wo,dr.invert=eu,dr.invertBy=nu,dr.invokeMap=Go,dr.iteratee=ju,dr.keyBy=Xo,dr.keys=iu,dr.keysIn=au,dr.map=$o,dr.mapKeys=function(t,e){var n={};return e=Ia(e,3),Yr(t,function(t,r,i){Pr(n,e(t,r,i),t)}),n},dr.mapValues=function(t,e){var n={};return e=Ia(e,3),Yr(t,function(t,r,i){Pr(n,r,e(t,r,i))}),n},dr.matches=function(t){return di(Ir(t,p))},dr.matchesProperty=function(t,e){return hi(t,Ir(e,p))},dr.memoize=ss,dr.merge=ou,dr.mergeWith=su,dr.method=Pu,dr.methodOf=Tu,dr.mixin=Du,dr.negate=us,dr.nthArg=function(t){return t=Zs(t),xi(function(e){return vi(e,t)})},dr.omit=uu,dr.omitBy=function(t,e){return lu(t,us(Ia(e)))},dr.once=function(t){return es(2,t)},dr.orderBy=function(t,e,n,r){return null==t?[]:(ys(e)||(e=null==e?[]:[e]),ys(n=r?a:n)||(n=null==n?[]:[n]),yi(t,e,n))},dr.over=Ru,dr.overArgs=cs,dr.overEvery=Nu,dr.overSome=Hu,dr.partial=ls,dr.partialRight=fs,dr.partition=Ko,dr.pick=cu,dr.pickBy=lu,dr.property=Wu,dr.propertyOf=function(t){return function(e){return null==t?a:$r(t,e)}},dr.pull=ko,dr.pullAll=Oo,dr.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?gi(t,e,Ia(n,2)):t},dr.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?gi(t,e,a,n):t},dr.pullAt=Eo,dr.range=Bu,dr.rangeRight=Zu,dr.rearg=ps,dr.reject=function(t,e){return(ys(t)?$e:qr)(t,us(Ia(e,3)))},dr.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],a=t.length;for(e=Ia(e,3);++r<a;){var o=t[r];e(o,r,t)&&(n.push(o),i.push(r))}return bi(t,i),n},dr.rest=function(t,e){if("function"!=typeof t)throw new ie(u);return xi(t,e=e===a?e:Zs(e))},dr.reverse=So,dr.sampleSize=function(t,e,n){return e=(n?Va(t,e,n):e===a)?1:Zs(e),(ys(t)?Or:Oi)(t,e)},dr.set=function(t,e,n){return null==t?t:Ei(t,e,n)},dr.setWith=function(t,e,n,r){return r="function"==typeof r?r:a,null==t?t:Ei(t,e,n,r)},dr.shuffle=function(t){return(ys(t)?Er:Ci)(t)},dr.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&Va(t,e,n)?(e=0,n=r):(e=null==e?0:Zs(e),n=n===a?r:Zs(n)),Ai(t,e,n)):[]},dr.sortBy=Jo,dr.sortedUniq=function(t){return t&&t.length?Di(t):[]},dr.sortedUniqBy=function(t,e){return t&&t.length?Di(t,Ia(e,2)):[]},dr.split=function(t,e,n){return n&&"number"!=typeof n&&Va(t,e,n)&&(e=n=a),(n=n===a?N:n>>>0)?(t=Us(t))&&("string"==typeof e||null!=e&&!Ps(e))&&!(e=Ri(e))&&On(t)?Gi(Pn(t),0,n):t.split(e,n):[]},dr.spread=function(t,e){if("function"!=typeof t)throw new ie(u);return e=null==e?0:Un(Zs(e),0),xi(function(n){var r=n[e],i=Gi(n,0,e);return r&&tn(i,r),Ue(t,this,i)})},dr.tail=function(t){var e=null==t?0:t.length;return e?Ai(t,1,e):[]},dr.take=function(t,e,n){return t&&t.length?Ai(t,0,(e=n||e===a?1:Zs(e))<0?0:e):[]},dr.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?Ai(t,(e=r-(e=n||e===a?1:Zs(e)))<0?0:e,r):[]},dr.takeRightWhile=function(t,e){return t&&t.length?Bi(t,Ia(e,3),!1,!0):[]},dr.takeWhile=function(t,e){return t&&t.length?Bi(t,Ia(e,3)):[]},dr.tap=function(t,e){return e(t),t},dr.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new ie(u);return Ss(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),is(t,e,{leading:r,maxWait:e,trailing:i})},dr.thru=Bo,dr.toArray=Ws,dr.toPairs=fu,dr.toPairsIn=pu,dr.toPath=function(t){return ys(t)?Qe(t,co):Is(t)?[t]:na(uo(Us(t)))},dr.toPlainObject=zs,dr.transform=function(t,e,n){var r=ys(t),i=r||_s(t)||Rs(t);if(e=Ia(e,4),null==n){var a=t&&t.constructor;n=i?r?new a:[]:Ss(t)&&ks(a)?hr(je(t)):{}}return(i?Ye:Yr)(t,function(t,r,i){return e(n,t,r,i)}),n},dr.unary=function(t){return ts(t,1)},dr.union=Mo,dr.unionBy=Co,dr.unionWith=Ao,dr.uniq=function(t){return t&&t.length?Ni(t):[]},dr.uniqBy=function(t,e){return t&&t.length?Ni(t,Ia(e,2)):[]},dr.uniqWith=function(t,e){return e="function"==typeof e?e:a,t&&t.length?Ni(t,a,e):[]},dr.unset=function(t,e){return null==t||Hi(t,e)},dr.unzip=jo,dr.unzipWith=Po,dr.update=function(t,e,n){return null==t?t:Wi(t,e,Ui(n))},dr.updateWith=function(t,e,n,r){return r="function"==typeof r?r:a,null==t?t:Wi(t,e,Ui(n),r)},dr.values=du,dr.valuesIn=function(t){return null==t?[]:mn(t,au(t))},dr.without=To,dr.words=ku,dr.wrap=function(t,e){return ls(Ui(e),t)},dr.xor=Do,dr.xorBy=Io,dr.xorWith=Ro,dr.zip=No,dr.zipObject=function(t,e){return qi(t||[],e||[],Mr)},dr.zipObjectDeep=function(t,e){return qi(t||[],e||[],Ei)},dr.zipWith=Ho,dr.entries=fu,dr.entriesIn=pu,dr.extend=Ys,dr.extendWith=Gs,Du(dr,dr),dr.add=zu,dr.attempt=Ou,dr.camelCase=hu,dr.capitalize=Lu,dr.ceil=Uu,dr.clamp=function(t,e,n){return n===a&&(n=e,e=a),n!==a&&(n=(n=qs(n))==n?n:0),e!==a&&(e=(e=qs(e))==e?e:0),Dr(qs(t),e,n)},dr.clone=function(t){return Ir(t,h)},dr.cloneDeep=function(t){return Ir(t,p|h)},dr.cloneDeepWith=function(t,e){return Ir(t,p|h,e="function"==typeof e?e:a)},dr.cloneWith=function(t,e){return Ir(t,h,e="function"==typeof e?e:a)},dr.conformsTo=function(t,e){return null==e||Rr(t,e,iu(e))},dr.deburr=vu,dr.defaultTo=function(t,e){return null==t||t!=t?e:t},dr.divide=Vu,dr.endsWith=function(t,e,n){t=Us(t),e=Ri(e);var r=t.length,i=n=n===a?r:Dr(Zs(n),0,r);return(n-=e.length)>=0&&t.slice(n,i)==e},dr.eq=ds,dr.escape=function(t){return(t=Us(t))&&Ot.test(t)?t.replace(xt,xn):t},dr.escapeRegExp=function(t){return(t=Us(t))&&Tt.test(t)?t.replace(Pt,"\\$&"):t},dr.every=function(t,e,n){var r=ys(t)?Xe:Zr;return n&&Va(t,e,n)&&(e=a),r(t,Ia(e,3))},dr.find=qo,dr.findIndex=vo,dr.findKey=function(t,e){return on(t,Ia(e,3),Yr)},dr.findLast=zo,dr.findLastIndex=yo,dr.findLastKey=function(t,e){return on(t,Ia(e,3),Gr)},dr.floor=Yu,dr.forEach=Uo,dr.forEachRight=Vo,dr.forIn=function(t,e){return null==t?t:Ur(t,Ia(e,3),au)},dr.forInRight=function(t,e){return null==t?t:Vr(t,Ia(e,3),au)},dr.forOwn=function(t,e){return t&&Yr(t,Ia(e,3))},dr.forOwnRight=function(t,e){return t&&Gr(t,Ia(e,3))},dr.get=Qs,dr.gt=hs,dr.gte=Ls,dr.has=function(t,e){return null!=t&&Fa(t,e,ti)},dr.hasIn=tu,dr.head=go,dr.identity=Au,dr.includes=function(t,e,n,r){t=gs(t)?t:du(t),n=n&&!r?Zs(n):0;var i=t.length;return n<0&&(n=Un(i+n,0)),Ds(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&un(t,e,n)>-1},dr.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Zs(n);return i<0&&(i=Un(r+i,0)),un(t,e,i)},dr.inRange=function(t,e,n){return e=Bs(e),n===a?(n=e,e=0):n=Bs(n),function(t,e,n){return t>=Vn(e,n)&&t<Un(e,n)}(t=qs(t),e,n)},dr.invoke=ru,dr.isArguments=vs,dr.isArray=ys,dr.isArrayBuffer=ms,dr.isArrayLike=gs,dr.isArrayLikeObject=bs,dr.isBoolean=function(t){return!0===t||!1===t||Ms(t)&&Jr(t)==z},dr.isBuffer=_s,dr.isDate=ws,dr.isElement=function(t){return Ms(t)&&1===t.nodeType&&!js(t)},dr.isEmpty=function(t){if(null==t)return!0;if(gs(t)&&(ys(t)||"string"==typeof t||"function"==typeof t.splice||_s(t)||Rs(t)||vs(t)))return!t.length;var e=Za(t);if(e==$||e==nt)return!t.size;if($a(t))return!ci(t).length;for(var n in t)if(le.call(t,n))return!1;return!0},dr.isEqual=function(t,e){return ai(t,e)},dr.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:a)?n(t,e):a;return r===a?ai(t,e,a,n):!!r},dr.isError=xs,dr.isFinite=function(t){return"number"==typeof t&&Fn(t)},dr.isFunction=ks,dr.isInteger=Os,dr.isLength=Es,dr.isMap=Cs,dr.isMatch=function(t,e){return t===e||oi(t,e,Na(e))},dr.isMatchWith=function(t,e,n){return n="function"==typeof n?n:a,oi(t,e,Na(e),n)},dr.isNaN=function(t){return As(t)&&t!=+t},dr.isNative=function(t){if(Xa(t))throw new Jt(s);return si(t)},dr.isNil=function(t){return null==t},dr.isNull=function(t){return null===t},dr.isNumber=As,dr.isObject=Ss,dr.isObjectLike=Ms,dr.isPlainObject=js,dr.isRegExp=Ps,dr.isSafeInteger=function(t){return Os(t)&&t>=-D&&t<=D},dr.isSet=Ts,dr.isString=Ds,dr.isSymbol=Is,dr.isTypedArray=Rs,dr.isUndefined=function(t){return t===a},dr.isWeakMap=function(t){return Ms(t)&&Za(t)==ot},dr.isWeakSet=function(t){return Ms(t)&&Jr(t)==st},dr.join=function(t,e){return null==t?"":qn.call(t,e)},dr.kebabCase=yu,dr.last=xo,dr.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return n!==a&&(i=(i=Zs(n))<0?Un(r+i,0):Vn(i,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):sn(t,ln,i,!0)},dr.lowerCase=mu,dr.lowerFirst=gu,dr.lt=Ns,dr.lte=Hs,dr.max=function(t){return t&&t.length?Fr(t,Au,Qr):a},dr.maxBy=function(t,e){return t&&t.length?Fr(t,Ia(e,2),Qr):a},dr.mean=function(t){return fn(t,Au)},dr.meanBy=function(t,e){return fn(t,Ia(e,2))},dr.min=function(t){return t&&t.length?Fr(t,Au,fi):a},dr.minBy=function(t,e){return t&&t.length?Fr(t,Ia(e,2),fi):a},dr.stubArray=Fu,dr.stubFalse=qu,dr.stubObject=function(){return{}},dr.stubString=function(){return""},dr.stubTrue=function(){return!0},dr.multiply=Xu,dr.nth=function(t,e){return t&&t.length?vi(t,Zs(e)):a},dr.noConflict=function(){return Te._===this&&(Te._=Le),this},dr.noop=Iu,dr.now=Qo,dr.pad=function(t,e,n){t=Us(t);var r=(e=Zs(e))?jn(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return ya(Wn(i),n)+t+ya(Hn(i),n)},dr.padEnd=function(t,e,n){t=Us(t);var r=(e=Zs(e))?jn(t):0;return e&&r<e?t+ya(e-r,n):t},dr.padStart=function(t,e,n){t=Us(t);var r=(e=Zs(e))?jn(t):0;return e&&r<e?ya(e-r,n)+t:t},dr.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),Gn(Us(t).replace(It,""),e||0)},dr.random=function(t,e,n){if(n&&"boolean"!=typeof n&&Va(t,e,n)&&(e=n=a),n===a&&("boolean"==typeof e?(n=e,e=a):"boolean"==typeof t&&(n=t,t=a)),t===a&&e===a?(t=0,e=1):(t=Bs(t),e===a?(e=t,t=0):e=Bs(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=Xn();return Vn(t+i*(e-t+Ce("1e-"+((i+"").length-1))),e)}return _i(t,e)},dr.reduce=function(t,e,n){var r=ys(t)?en:hn,i=arguments.length<3;return r(t,Ia(e,4),n,i,Wr)},dr.reduceRight=function(t,e,n){var r=ys(t)?nn:hn,i=arguments.length<3;return r(t,Ia(e,4),n,i,Br)},dr.repeat=function(t,e,n){return e=(n?Va(t,e,n):e===a)?1:Zs(e),wi(Us(t),e)},dr.replace=function(){var t=arguments,e=Us(t[0]);return t.length<3?e:e.replace(t[1],t[2])},dr.result=function(t,e,n){var r=-1,i=(e=Vi(e,t)).length;for(i||(i=1,t=a);++r<i;){var o=null==t?a:t[co(e[r])];o===a&&(r=i,o=n),t=ks(o)?o.call(t):o}return t},dr.round=$u,dr.runInContext=t,dr.sample=function(t){return(ys(t)?kr:ki)(t)},dr.size=function(t){if(null==t)return 0;if(gs(t))return Ds(t)?jn(t):t.length;var e=Za(t);return e==$||e==nt?t.size:ci(t).length},dr.snakeCase=bu,dr.some=function(t,e,n){var r=ys(t)?rn:ji;return n&&Va(t,e,n)&&(e=a),r(t,Ia(e,3))},dr.sortedIndex=function(t,e){return Pi(t,e)},dr.sortedIndexBy=function(t,e,n){return Ti(t,e,Ia(n,2))},dr.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=Pi(t,e);if(r<n&&ds(t[r],e))return r}return-1},dr.sortedLastIndex=function(t,e){return Pi(t,e,!0)},dr.sortedLastIndexBy=function(t,e,n){return Ti(t,e,Ia(n,2),!0)},dr.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var n=Pi(t,e,!0)-1;if(ds(t[n],e))return n}return-1},dr.startCase=_u,dr.startsWith=function(t,e,n){return t=Us(t),n=null==n?0:Dr(Zs(n),0,t.length),e=Ri(e),t.slice(n,n+e.length)==e},dr.subtract=Ku,dr.sum=function(t){return t&&t.length?Ln(t,Au):0},dr.sumBy=function(t,e){return t&&t.length?Ln(t,Ia(e,2)):0},dr.template=function(t,e,n){var r=dr.templateSettings;n&&Va(t,e,n)&&(e=a),t=Us(t),e=Gs({},e,r,Oa);var i,o,s=Gs({},e.imports,r.imports,Oa),u=iu(s),c=mn(s,u),l=0,f=e.interpolate||$t,p="__p += '",d=ne((e.escape||$t).source+"|"+f.source+"|"+(f===Mt?Ft:$t).source+"|"+(e.evaluate||$t).source+"|$","g"),h="//# sourceURL="+("sourceURL"in e?e.sourceURL:"lodash.templateSources["+ ++Oe+"]")+"\n";t.replace(d,function(e,n,r,a,s,u){return r||(r=a),p+=t.slice(l,u).replace(Kt,kn),n&&(i=!0,p+="' +\n__e("+n+") +\n'"),s&&(o=!0,p+="';\n"+s+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=u+e.length,e}),p+="';\n";var L=e.variable;L||(p="with (obj) {\n"+p+"\n}\n"),p=(o?p.replace(gt,""):p).replace(bt,"$1").replace(_t,"$1;"),p="function("+(L||"obj")+") {\n"+(L?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var v=Ou(function(){return Qt(u,h+"return "+p).apply(a,c)});if(v.source=p,xs(v))throw v;return v},dr.times=function(t,e){if((t=Zs(t))<1||t>D)return[];var n=N,r=Vn(t,N);e=Ia(e),t-=N;for(var i=vn(r,e);++n<t;)e(n);return i},dr.toFinite=Bs,dr.toInteger=Zs,dr.toLength=Fs,dr.toLower=function(t){return Us(t).toLowerCase()},dr.toNumber=qs,dr.toSafeInteger=function(t){return t?Dr(Zs(t),-D,D):0===t?t:0},dr.toString=Us,dr.toUpper=function(t){return Us(t).toUpperCase()},dr.trim=function(t,e,n){if((t=Us(t))&&(n||e===a))return t.replace(Dt,"");if(!t||!(e=Ri(e)))return t;var r=Pn(t),i=Pn(e);return Gi(r,bn(r,i),_n(r,i)+1).join("")},dr.trimEnd=function(t,e,n){if((t=Us(t))&&(n||e===a))return t.replace(Rt,"");if(!t||!(e=Ri(e)))return t;var r=Pn(t);return Gi(r,0,_n(r,Pn(e))+1).join("")},dr.trimStart=function(t,e,n){if((t=Us(t))&&(n||e===a))return t.replace(It,"");if(!t||!(e=Ri(e)))return t;var r=Pn(t);return Gi(r,bn(r,Pn(e))).join("")},dr.truncate=function(t,e){var n=S,r=M;if(Ss(e)){var i="separator"in e?e.separator:i;n="length"in e?Zs(e.length):n,r="omission"in e?Ri(e.omission):r}var o=(t=Us(t)).length;if(On(t)){var s=Pn(t);o=s.length}if(n>=o)return t;var u=n-jn(r);if(u<1)return r;var c=s?Gi(s,0,u).join(""):t.slice(0,u);if(i===a)return c+r;if(s&&(u+=c.length-u),Ps(i)){if(t.slice(u).search(i)){var l,f=c;for(i.global||(i=ne(i.source,Us(qt.exec(i))+"g")),i.lastIndex=0;l=i.exec(f);)var p=l.index;c=c.slice(0,p===a?u:p)}}else if(t.indexOf(Ri(i),u)!=u){var d=c.lastIndexOf(i);d>-1&&(c=c.slice(0,d))}return c+r},dr.unescape=function(t){return(t=Us(t))&&kt.test(t)?t.replace(wt,Tn):t},dr.uniqueId=function(t){var e=++fe;return Us(t)+e},dr.upperCase=wu,dr.upperFirst=xu,dr.each=Uo,dr.eachRight=Vo,dr.first=go,Du(dr,(Gu={},Yr(dr,function(t,e){le.call(dr.prototype,e)||(Gu[e]=t)}),Gu),{chain:!1}),dr.VERSION="4.17.11",Ye(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){dr[t].placeholder=dr}),Ye(["drop","take"],function(t,e){yr.prototype[t]=function(n){n=n===a?1:Un(Zs(n),0);var r=this.__filtered__&&!e?new yr(this):this.clone();return r.__filtered__?r.__takeCount__=Vn(n,r.__takeCount__):r.__views__.push({size:Vn(n,N),type:t+(r.__dir__<0?"Right":"")}),r},yr.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}}),Ye(["filter","map","takeWhile"],function(t,e){var n=e+1,r=n==j||3==n;yr.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Ia(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}}),Ye(["head","last"],function(t,e){var n="take"+(e?"Right":"");yr.prototype[t]=function(){return this[n](1).value()[0]}}),Ye(["initial","tail"],function(t,e){var n="drop"+(e?"":"Right");yr.prototype[t]=function(){return this.__filtered__?new yr(this):this[n](1)}}),yr.prototype.compact=function(){return this.filter(Au)},yr.prototype.find=function(t){return this.filter(t).head()},yr.prototype.findLast=function(t){return this.reverse().find(t)},yr.prototype.invokeMap=xi(function(t,e){return"function"==typeof t?new yr(this):this.map(function(n){return ri(n,t,e)})}),yr.prototype.reject=function(t){return this.filter(us(Ia(t)))},yr.prototype.slice=function(t,e){t=Zs(t);var n=this;return n.__filtered__&&(t>0||e<0)?new yr(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==a&&(n=(e=Zs(e))<0?n.dropRight(-e):n.take(e-t)),n)},yr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},yr.prototype.toArray=function(){return this.take(N)},Yr(yr.prototype,function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),i=dr[r?"take"+("last"==e?"Right":""):e],o=r||/^find/.test(e);i&&(dr.prototype[e]=function(){var e=this.__wrapped__,s=r?[1]:arguments,u=e instanceof yr,c=s[0],l=u||ys(e),f=function(t){var e=i.apply(dr,tn([t],s));return r&&p?e[0]:e};l&&n&&"function"==typeof c&&1!=c.length&&(u=l=!1);var p=this.__chain__,d=!!this.__actions__.length,h=o&&!p,L=u&&!d;if(!o&&l){e=L?e:new yr(this);var v=t.apply(e,s);return v.__actions__.push({func:Bo,args:[f],thisArg:a}),new vr(v,p)}return h&&L?t.apply(this,s):(v=this.thru(f),h?r?v.value()[0]:v.value():v)})}),Ye(["pop","push","shift","sort","splice","unshift"],function(t){var e=ae[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);dr.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(ys(i)?i:[],t)}return this[n](function(n){return e.apply(ys(n)?n:[],t)})}}),Yr(yr.prototype,function(t,e){var n=dr[e];if(n){var r=n.name+"";(ir[r]||(ir[r]=[])).push({name:e,func:n})}}),ir[da(a,m).name]=[{name:"wrapper",func:a}],yr.prototype.clone=function(){var t=new yr(this.__wrapped__);return t.__actions__=na(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=na(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=na(this.__views__),t},yr.prototype.reverse=function(){if(this.__filtered__){var t=new yr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},yr.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=ys(t),r=e<0,i=n?t.length:0,a=function(t,e,n){for(var r=-1,i=n.length;++r<i;){var a=n[r],o=a.size;switch(a.type){case"drop":t+=o;break;case"dropRight":e-=o;break;case"take":e=Vn(e,t+o);break;case"takeRight":t=Un(t,e-o)}}return{start:t,end:e}}(0,i,this.__views__),o=a.start,s=a.end,u=s-o,c=r?s:o-1,l=this.__iteratees__,f=l.length,p=0,d=Vn(u,this.__takeCount__);if(!n||!r&&i==u&&d==u)return Zi(t,this.__actions__);var h=[];t:for(;u--&&p<d;){for(var L=-1,v=t[c+=e];++L<f;){var y=l[L],m=y.iteratee,g=y.type,b=m(v);if(g==P)v=b;else if(!b){if(g==j)continue t;break t}}h[p++]=v}return h},dr.prototype.at=Zo,dr.prototype.chain=function(){return Wo(this)},dr.prototype.commit=function(){return new vr(this.value(),this.__chain__)},dr.prototype.next=function(){this.__values__===a&&(this.__values__=Ws(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?a:this.__values__[this.__index__++]}},dr.prototype.plant=function(t){for(var e,n=this;n instanceof Lr;){var r=fo(n);r.__index__=0,r.__values__=a,e?i.__wrapped__=r:e=r;var i=r;n=n.__wrapped__}return i.__wrapped__=t,e},dr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof yr){var e=t;return this.__actions__.length&&(e=new yr(this)),(e=e.reverse()).__actions__.push({func:Bo,args:[So],thisArg:a}),new vr(e,this.__chain__)}return this.thru(So)},dr.prototype.toJSON=dr.prototype.valueOf=dr.prototype.value=function(){return Zi(this.__wrapped__,this.__actions__)},dr.prototype.first=dr.prototype.head,He&&(dr.prototype[He]=function(){return this}),dr}();Te._=Dn,(i=function(){return Dn}.call(e,n,e,r))===a||(r.exports=i)}).call(this)}).call(this,n(5),n(6)(t))},function(t){t.exports=[{key:"stateOrTerritory",heading:"States and territories",text:"Where have HIAs been done in the United States?",instruct:"Select a state or territory to drill down",secondaryDimensions:["decisionMakingLevels","organizationTypes","communityTypes","fundingSource"]},{key:"sectors",heading:"Sectors",text:"In what sectors have HIAs been conducted?",instruct:"Select a sector to drill down",splitToArray:!0,secondaryDimensions:["decisionMakingLevels","organizationTypes","communityTypes","fundingSource"]},{key:"driversOfHealth",heading:"Drivers of health",text:"What drivers of health have been addressed by HIAs?",instruct:"Select a driver to drill down",splitToArray:!0,secondaryDimensions:["decisionMakingLevels","organizationTypes","communityTypes","fundingSource"]},{key:"affectedPopulations",heading:"Affected populations",text:"Which populations are affected by the projects being assessed (COPY NOT REVIEWED)?",instruct:"Select a population type to drill down",splitToArray:!0,secondaryDimensions:["researchMethods","decisionMakingLevels","organizationTypes","communityTypes","fundingSource"]},{key:"researchMethods",heading:"Research methods",text:"How has research on HIAs been conducted (COPY NOT REVIEWED)?",instruct:"Select a research method to drill down",splitToArray:!0,secondaryDimensions:["decisionMakingLevels","organizationTypes","communityTypes"]},{key:"decisionMakingLevels",heading:"Decision-making levels",text:"At what level are decisions about the projects being made (COPY NOT REVIEWED)?",instruct:"Select a decision-making level to drill down",splitToArray:!0,secondaryDimensions:["organizationTypes","communityTypes"]},{key:"organizationTypes",heading:"Organization types",text:"",instruct:"",splitToArray:!0,secondaryDimensions:[],isSecondaryOnly:!0},{key:"communityTypes",heading:"Community types",text:"",instruct:"",splitToArray:!0,secondaryDimensions:[],isSecondaryOnly:!0},{key:"fundingSource",heading:"Funding source",text:"",instruct:"",splitToArray:!0,secondaryDimensions:[],isSecondaryOnly:!0}]},function(t){t.exports={Alabama:"AL",Alaska:"AK",Arizona:"AZ",Arkansas:"AR",California:"CA",Colorado:"CO",Connecticut:"CT",Delaware:"DE","District of Columbia":"DC",Florida:"FL",Georgia:"GA",Hawaii:"HI",Idaho:"ID",Illinois:"IL",Indiana:"IN",Iowa:"IA",Kansas:"KS",Kentucky:"KY",Louisiana:"LA",Maine:"ME",Maryland:"MD",Massachusetts:"MA",Michigan:"MI",Minnesota:"MN",Mississippi:"MS",Missouri:"MO",Montana:"MT",Nebraska:"NE",Nevada:"NV","New Hampshire":"NH","New Jersey":"NJ","New Mexico":"NM","New York":"NY","North Carolina":"NC","North Dakota":"ND",Ohio:"OH",Oklahoma:"OK",Oregon:"OR",Pennsylvania:"PA","Rhode Island":"RI","South Carolina":"SC","South Dakota":"SD",Tennessee:"TN",Texas:"TX",Utah:"UT",Vermont:"VT",Virginia:"VA",Washington:"WA","West Virginia":"WV",Wisconsin:"WI",Wyoming:"WY","Puerto Rico":"PR","Republic of Palau":"PW"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},a=l(n(0)),o=l(n(17)),s=n(2),u=l(n(1)),c=l(n(8));function l(t){return t&&t.__esModule?t:{default:t}}function f(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var h=function(t){function e(){return f(this,e),p(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return d(e,a.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.name="MenuView",this.menu=this.createComponent(L,"div#menu-main"),this.addChildren([this.menu]),this.prerendered&&!this.rerender)return t;t.classList.add(o.default.menuView),t.classList.add("menu-view");var n=document.createElement("h2");return n.textContent="Explore Health Impact Assessments",t.appendChild(n),t}},{key:"init",value:function(){console.log("init menu-view"),u.default.setSubs([["isSelected",this.hideSection.bind(this)]])}},{key:"hideSection",value:function(){this.el.style.display="none"}}]),e}();e.default=h;var L=function(t){function e(){return f(this,e),p(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return d(e,c.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.name="MainMenu",this.prerendered&&this.rerender,t}},{key:"clickHandler",value:function(t){i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"clickHandler",this).call(this,t),s.stateModule.setState("isSelected",!0)}}]),e}()},function(t,e,n){t.exports={menuView:"src-views-menu-view--menuView"}},function(t,e,n){t.exports={menuList:"src-components-menu--menuList",navItemWrapper:"src-components-menu--navItemWrapper",navLink:"src-components-menu--navLink",active:"src-components-menu--active",placeholderMenuItem:"src-components-menu--placeholderMenuItem"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},a=p(n(0)),o=p(n(1)),s=p(n(20)),u=p(n(21)),c=p(n(25)),l=p(n(29)),f=p(n(8));function p(t){return t&&t.__esModule?t:{default:t}}function d(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function L(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var v=function(t){function e(){return d(this,e),h(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return L(e,a.default),r(e,[{key:"prerender",value:function(){var t=this,n=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.name="SectionView",this.barViews=this.model.fields.filter(function(t){return!t.isSecondaryOnly&&"stateOrTerritory"!==t.key}).map(function(e){return t.createComponent(c.default,"section#bar-view-"+e.key,{data:{primary:e.key}})}),this.addChildren([this.createComponent(y,"div#top-menu"),this.createComponent(u.default,"section#map-view")].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(this.barViews),[this.createComponent(l.default,"section#waffle-view")])),this.prerendered&&!this.rerender?n:(n.classList.add("section-view",s.default.sectionView),n)}},{key:"init",value:function(){console.log("init section-view");var t=this.showSection.bind(this);o.default.setSubs([["isSelected",t],["selectHIA",this.blurSection.bind(this)]])}},{key:"blurSection",value:function(t,e){e?this.el.classList.add(s.default.isBlurred):this.el.classList.remove(s.default.isBlurred)}},{key:"showSection",value:function(){this.el.style.display="block"}}]),e}();e.default=v;var y=function(t){function e(){return d(this,e),h(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return L(e,f.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.name="TopMenu",this.prerendered&&this.rerender,t}},{key:"init",value:function(){i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),console.log("init topmenu-view"),o.default.setSubs([["view",this.indicateActiveSection.bind(this)]])}},{key:"indicateActiveSection",value:function(t,e){this.el.querySelectorAll("a").forEach(function(t){t.classList.remove(s.default.active)}),this.el.querySelector('a[data-section="'+e+'"').classList.add(s.default.active)}}]),e}()},function(t,e,n){t.exports={sectionView:"src-views-section-view--sectionView",active:"src-views-section-view--active",isBlurred:"src-views-section-view--isBlurred"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=p(n(0)),a=p(n(22)),o=p(n(23)),s=p(n(24)),u=p(n(4)),c=p(n(1)),l=n(2),f=n(3);function p(t){return t&&t.__esModule?t:{default:t}}var d=["#5AC7BE","#296EC3"],h=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),r(e,[{key:"prerender",value:function(){var t=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.name="MapView",console.log(this.model.data),this.valuesArray=this.model.nestBy.stateOrTerritory.map(function(t){return t.values.length}),console.log(this.model.nestBy.stateOrTerritory),this.getMaxCount(),this.prerendered&&!this.rerender)return t;var n=document.createElement("h2");n.textContent=this.model.fields.find(function(t){return"stateOrTerritory"===t.key}).text,n.classList.add("section-title");var r=this.prerenderMap(),i=this.prerenderLegend();return t.appendChild(n),t.appendChild(r),t.appendChild(i),t}},{key:"prerenderMap",value:function(){var t=this,e=document.createElement("div");return e.classList.add(o.default.mapContainer,"js-map-container"),e.innerHTML=a.default,this.colorScale=s.default.scale(d).domain([1,Math.log(this.maxLegend)]),this.model.nestBy.stateOrTerritory.forEach(function(n){var r=e.querySelector(".state-"+t.model.stateAbbreviations[n.key]),i=e.querySelector(".state-box-"+t.model.stateAbbreviations[n.key]);if(null!==n.key){if(r){r.classList.add("is-not-null");var a=r.querySelector(".state__label");r.querySelector(".state__path").style.fill=t.colorScale(Math.log(n.values.length)),a&&(a.style.fontWeight="bold",a.style.fill="#fff")}if(i){i.classList.add("is-not-null");var o=i.querySelector("rect");o.style.fill=t.colorScale(Math.log(n.values.length)),o.style.stroke=t.colorScale(Math.log(n.values.length)),i.querySelector(".state-box__label").style.fill="#fff"}}}),e}},{key:"prerenderLegend",value:function(){var t=this,e=document.createElement("div");e.textContent="Number of health impact assessments",e.classList.add(o.default.legendContainer);var n=document.createElement("div");n.classList.add(o.default.legendWrapper);var r=document.createElement("div");return r.style.background="linear-gradient(to right, "+d.join(","),r.classList.add(o.default.gradient),n.appendChild(r),[1,Math.floor(this.maxLegend/10),this.maxLegend].forEach(function(e,r){var i=document.createElement("div");i.classList.add(o.default.tick),i.textContent=e,i.style.left=0===r?0:1===r?Math.log(e)/Math.log(t.maxLegend)*100+"%":"100%",n.appendChild(i)}),e.appendChild(n),e}},{key:"getMaxCount",value:function(){this.maxCount=Math.max.apply(Math,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(this.valuesArray)),this.maxLegend=this.maxCount<100?100:this.maxCount}},{key:"toggleActive",value:function(t,e){"stateOrTerritory"===e?this.el.classList.add(o.default.active):this.el.classList.remove(o.default.active)}},{key:"init",value:function(){var t=this;console.log("init map-view"),c.default.setSubs([["hoverPrimaryGroup",this.highlightState.bind(this)],["unHoverPrimaryGroup",this.highlightState.bind(this)],["view",this.toggleActive.bind(this)]]),this.setTippys(),this.mapContainer=this.mapContainer||document.querySelector(".js-map-container"),this.model.nestBy.stateOrTerritory.forEach(function(e){var n=t.mapContainer.querySelector(".state-"+t.model.stateAbbreviations[e.key]),r=t.mapContainer.querySelector(".state-box-"+t.model.stateAbbreviations[e.key]);"null"!==e.key&&(n&&(n.addEventListener("click",function(n){t.stateClickHandler.call(t,e,n)}),n.addEventListener("mouseenter",function(){l.stateModule.setState("hoverPrimaryGroup",e.key,{forceChange:!0})}),n.addEventListener("mouseleave",function(){l.stateModule.setState("unHoverPrimaryGroup",e.key,{forceChange:!0})})),r&&(r.addEventListener("click",function(n){t.stateClickHandler.call(t,e,n)}),r.addEventListener("mouseenter",function(){l.stateModule.setState("hoverPrimaryGroup",e.key,{forceChange:!0})}),r.addEventListener("mouseleave",function(){l.stateModule.setState("unHoverPrimaryGroup",e.key,{forceChange:!0})})))})}},{key:"highlightState",value:function(t,e){var n=this.model.stateAbbreviations[e],r=document.querySelector(".state-"+n),i=document.querySelector(".state-box-"+n);"hoverPrimaryGroup"===t&&(r&&r.classList.add(o.default.hover),i&&i.classList.add(o.default.hover)),"unHoverPrimaryGroup"===t&&(r&&r.classList.remove(o.default.hover),i&&i.classList.remove(o.default.hover))}},{key:"stateClickHandler",value:function(t,e){e.stopPropagation(),l.stateModule.setState("selectPrimaryGroup.map",t.key),(0,f.GTMPush)("HIA|Select|State|"+t.key)}},{key:"setTippys",value:function(){var t=this;function e(t,e){(0,u.default)(t,{content:"<strong>"+e.values.length+" HIA"+(e.values.length>1?"s":"")+"</strong><br />Click for details",followCursor:!0})}this.mapContainer=this.mapContainer||document.querySelector(".js-map-container"),this.model.nestBy.stateOrTerritory.forEach(function(n){var r=t.mapContainer.querySelector(".state-"+t.model.stateAbbreviations[n.key]),i=t.mapContainer.querySelector(".state-box-"+t.model.stateAbbreviations[n.key]);"null"!==n.key&&(r&&e(r,n),i&&e(i,n))})}},{key:"clickHandler",value:function(){}}]),e}();e.default=h},function(t,e){t.exports='<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 689 402">\n   <style>\n    .state .state__label {\n        fill: black; font-size: 12px; text-anchor: middle; dominant-baseline: middle; cursor: pointer;\n    }\n    .state__label.invert {\n        fill: black; font-size: 12px; text-anchor: middle; dominant-baseline: middle; cursor: pointer;\n    }\n    .state__path, .state-box__background {\n        cursor: pointer;\n        transition: fill 0.25s ease-in-out 0s, stroke 0.25s ease-in-out 0s;\n        fill: url(#diagonalHatch);\n        stroke: #fff;\n        stroke-width: 1px;\n    }\n    .state-box__background {\n        width: 40px;\n        height: 22px;\n        fill: url(#diagonalHatch);\n        stroke: #ccc;\n        stroke-width: 1px;\n\n    }\n    .state-boxes text {\n        fill: #000; text-anchor: middle; font-size: 12px; cursor: pointer;\n    }\n   </style>\n   <pattern id="diagonalHatch" patternUnits="userSpaceOnUse" width="8" height="8">\n     <rect width="8" height="8" fill="#fff"></rect>\n     <path d="M-1,1 l4,-4\n              M0,8 l8,-8\n              M7,9 l4,-4" \n           style="stroke:#ccc; stroke-width:2" />\n   </pattern>\n    <g class="states">\n        <g class="state state-AL">\n            <path class="state__path" d="M469.539581155115,307.43638535113575L458.3337592977518,308.84547414207526L436.7456916701916,310.8736750684903L436.9753779232502,313.4694986369897L439.87343865043954,315.3498047407599L439.0396248346941,321.28751765744227L435.8824832556217,321.8038010938718L433.35110320059516,318.93362956770966L433.62272227508436,316.7720870622848L431.3287395971389,316.5698617008617L431.2493355006898,321.08965416402873L427.5805227691946,320.91428485408267L426.9880514688757,313.5190167454715L425.2109923930087,302.5631223002806L424.8529112009691,292.4328950124649L425.364062129561,287.705513414585L425.1746631754037,274.4436791719054L425.8591772146341,261.492664650008L425.65890070186924,253.86178424466812L424.6781143724146,252.4290033119513L455.4651381802454,249.6298844825282L459.01850251888993,262.09487938090086L462.8776314997724,276.8224408019717L465.45998366452403,283.8630309126188L466.93475700409806,285.0475180323113L468.3400061189456,289.42661148181895L466.71778986836273,290.89016909947173L466.5818705572519,297.5152686570608L467.56245674082925,298.19829753985L467.92229866182436,305.23796372429615Z"></path><text class="state__label" x="444.0257271064124" y="283.6736965790596" dx="0" dy="0">AL</text>\n        </g>\n        <g class="state state-AR">\n            <path class="state__path" d="M405.2880522881341,238.97179793183244L406.2502123662711,240.66001375053145L402.99384825557223,242.94307963496954L403.18099583693805,245.87687823653982L401.1126925587114,246.96208607067064L401.7458776893622,250.26557671921728L400.67302147696785,253.75348528415356L399.4115916197063,254.22769057754704L400.3553944808231,255.60270763526268L398.2658261941231,256.68225205309136L396.3214326198597,260.37360155490137L396.90683319036214,263.0434218772572L392.3619109618259,267.18919332888714L390.5317274157884,273.8781870191144L389.3269933409196,276.00383107780647L390.7469821825823,278.0753897548605L391.4094934385846,282.40678160099804L390.62774850308745,284.3512658263196L377.8628743473558,284.8516954753989L355.4055136456463,285.3733469506998L355.2434874502442,277.52748107679173L350.8642963405402,277.2924047936147L349.9731190766749,276.276061320813L349.7327189628065,261.3605352814673L350.1115998744506,258.1780502805202L349.9544037238157,248.6482517387767L349.0477101931497,245.24600398566764L347.60618896632604,233.9016439341682L371.5913698500137,233.29302765300338L399.7597902980994,231.91772672676746L401.12455061266047,233.50546335691L400.4254423084616,235.85848004788903L397.68058938192206,239.52805117965244Z"></path><text class="state__label" x="373.9346665313804" y="256.97999431669894" dx="0" dy="0">AR</text>\n        </g>\n        <g class="state state-DC">\n            <path class="state__path" d="M545.6086370144726,178.3679589097543L544.001042881731,176.58356419154757L546.538670975497,176.80006750811742Z"></path>\n        </g>\n        <g class="state state-FL">\n            <path class="state__path" d="M439.0396248346941,321.28751765744227L439.87343865043954,315.3498047407599L436.9753779232502,313.4694986369897L436.7456916701916,310.8736750684903L458.3337592977518,308.84547414207526L469.539581155115,307.43638535113575L471.8332341372674,311.4608087551739L504.946824509511,309.2432091791128L505.81880139863677,312.06615568349946L507.90858911036196,310.64197390069336L506.80071505526223,306.2584327537842L507.5462145961701,305.1103483436732L514.5131529522257,305.7314826625709L515.9389563040182,311.9782658672504L518.5928177549699,317.15057403818275L518.970163276578,319.56390827870433L523.9589643832091,327.5437701932184L530.2846039831314,334.7253054452681L531.4645495123655,341.93247279346417L539.2023763003025,354.0764745381752L541.4382633347086,358.77809676899324L542.2877066544117,363.78835348489565L542.2185468137016,369.1071873014666L543.075444675541,374.1846822581656L540.8459251817945,378.3520255323307L540.5823023190012,382.65903006511644L535.605520993347,385.2079182204871L530.7631610962081,385.58603488532356L530.0725811371157,381.2019439426693L526.9467273935531,376.8002362133404L524.3351847950955,375.625675599784L522.0563524269323,376.6048376119404L520.9087998463651,375.43733211307045L517.9845214269393,368.8503720387384L515.0391962780816,368.497158159852L515.3537495757168,364.10497889602175L514.0151632374166,361.5349972166789L513.9320809581711,364.23531426771285L512.5779300001801,364.82833546521505L507.1439454788724,356.9916664894189L504.9362571918724,354.8509471524494L508.5198957286261,349.98637294882803L506.5501525161119,349.47625814879467L504.53268111435796,351.97917630247923L502.89798143478305,350.46611558908575L502.602671151668,344.96188283415336L503.8825192503346,340.6586196132882L502.45618143581515,333.87490469201373L500.65550181589407,331.02983923284665L497.4946262840785,331.7850552646342L494.60423714951787,327.65110264809294L492.1560936475775,326.7085330201851L491.85448604881435,324.4445807880753L488.71445315804044,321.6803736148628L483.7754318041134,319.13839138365137L478.9247962052918,320.8568418689186L479.60989673740914,322.67846676860495L477.3090546700248,322.72162811394185L471.7365562169589,326.31972653299204L467.6689407219281,327.1031325995675L466.86925217712746,324.1009303564371L459.0703298320292,320.03754953060593L454.3339697437457,318.5498739694456L449.75796548627625,318.5348544359804ZM526.1158911635566,393.6258257268101L528.5572843539356,393.48606942194994L523.4825494069677,395.75400192808286Z"></path><text class="state__label" x="506.05225480846894" y="337.6942602272381" dx="1%" dy="0">FL</text>\n        </g>\n        <g class="state state-GA">\n            <path class="state__path" d="M514.5131529522257,305.7314826625709L507.5462145961701,305.1103483436732L506.80071505526223,306.2584327537842L507.90858911036196,310.64197390069336L505.81880139863677,312.06615568349946L504.946824509511,309.2432091791128L471.8332341372674,311.4608087551739L469.539581155115,307.43638535113575L467.92229866182436,305.23796372429615L467.56245674082925,298.19829753985L466.5818705572519,297.5152686570608L466.71778986836273,290.89016909947173L468.3400061189456,289.42661148181895L466.93475700409806,285.0475180323113L465.45998366452403,283.8630309126188L462.8776314997724,276.8224408019717L459.01850251888993,262.09487938090086L455.4651381802454,249.6298844825282L470.8093845622693,247.75883898726732L484.8388602569904,245.7754656759003L482.718581426687,249.34729668282125L482.918918497249,250.84245476728313L487.185227626161,253.3877910048908L488.8871250064999,253.07242024823307L491.28423450269236,257.7057421061569L493.3830263140487,260.13359192621226L496.67082881613567,261.5853999092306L498.889758098386,264.70877283747365L502.6889776752656,266.4715238553483L505.10777300894625,270.75747387837833L508.4035799198758,271.9389141706365L510.6909087756811,278.0786220084726L513.0624083389478,278.9113419968069L514.8452127142561,281.67637490052584L515.3143149688367,284.64713247932076L518.129450314385,285.32106822630794L519.0854824912842,285.64833095525285L516.4099425431983,288.71912640759126L516.1173379188675,292.6082125577383L513.9946313465689,299.41894294813204Z"></path><text class="state__label" x="485.77113881735016" y="280.992320946301" dx="0" dy="0">GA</text>\n        </g>\n        <g class="state state-HI">\n            <path class="state__path" d="M159.64116889705974,346.25012904774076L160.62846947385924,346.33741170980034L160.59449832761086,350.00436683481155L159.59350266314064,351.24399949349487L156.62929728840746,350.8240955250675L154.67547147933897,348.53972885646476L157.66513073256235,346.23071295452695ZM178.3784834291585,354.80955195811305L179.37320577357744,353.7199769504836L181.34134421304734,357.32133459459607L183.8110467233396,360.37790403241365L179.3507925684004,359.4248253413112L177.86117126388385,359.88782733047054L174.90672903961172,355.808944772924ZM189.26646810348637,360.857476071002L197.2050436019123,362.26542669083625L194.22784062922628,363.51934944085946L188.27182310732988,362.65535872812467ZM193.23497393282784,365.31947334034163L195.7190761735409,366.25794015935776L193.23497960228607,367.7464226380065ZM198.19987288213738,363.907246539678L199.69263177201097,365.70494018123975L202.670993077342,364.91551726320307L207.14959709991746,367.17093133952477L206.65977766158122,369.05227891830486L201.19307122877828,370.2437494223067L200.68941716182962,367.2687452241542L197.70625628406023,366.1776980093538ZM209.6717420723976,375.2302481965654L212.6700926329354,377.0185875893588L216.66500850841962,378.2493730809267L219.17470783485294,380.5855448227252L219.19075526748514,382.782887581552L223.20701045448132,385.49912026400057L221.72919005317917,388.10304448692983L217.2391891686145,389.47166251464705L213.25002005719352,391.53930925603083L211.76484144526796,394.6128428636929L208.24962037766093,392.3498007209069L208.23107784971907,387.9498626500115L206.20981811636713,381.9906347230986L209.1912883875409,379.15372679740295L208.1798147229922,375.7856861350302Z"></path><text class="state__label invert" x="203.2497970323911" y="375.9466278402094" dx="-2%" dy="2%">HI</text>\n        </g>\n        <g class="state state-IL">\n            <path class="state__path" d="M422.9068910338359,210.7853756903114L421.80153956122035,212.47330396559198L422.905117673439,215.7326165132041L418.42549738233157,217.0547600184666L419.2002362286074,221.53946781464902L417.9888902762969,222.11389276201476L413.2303143309193,220.0857620558404L410.5365618738655,223.3119586509323L411.42207584460544,223.96547825959544L407.021188965205,220.9286957944405L407.66577324591145,218.1743748386906L406.2961787494827,216.4356452766616L406.0955842043795,213.50049439396173L400.97461630671705,211.28881071755575L400.8885627301508,209.9398012313119L397.4826089045023,208.31952355795227L395.6213140454263,204.76698757163877L397.81196801319186,200.25365087645298L398.0187697914492,196.97490969626256L393.8520107660444,195.55234280875084L392.7096176928328,196.9718570539294L391.3823853236089,195.13561848977258L391.2139877938452,192.11938888493L383.13314423618374,184.66172494768034L381.7301659523487,180.5920465963493L381.5152930418698,176.0683360116925L382.2635976345812,174.998581424113L382.89366321032117,171.54831131446952L385.24096766129713,170.7148905844938L385.50277544092336,168.07724834046257L387.02358470196646,166.80480693377478L386.8633709680988,163.7920728700459L385.2119357989801,162.44780056079844L385.45321057380426,159.49466809217563L389.733329359885,158.5477316753428L393.15152979208676,156.44216925580167L394.8709265452678,152.4436628499068L394.6225976618975,148.40679323413724L391.8089951166794,146.98760808799727L389.2520662431379,143.08615870393885L407.4235733545877,142.0548064961505L419.77619515509593,141.06048177013986L419.72390969527464,144.96329483083525L421.4739383356226,147.11907759454562L423.5127667319936,152.43272382906298L426.6474612968206,187.55758506578502L425.7372309520973,191.06996943004674L427.5617868965134,193.22242038475895L427.9024524661794,197.0234297344033L425.35645822859055,200.7602572920008L423.73223235132946,205.84796904323457L422.60767352200025,207.21974522091114Z"></path><text class="state__label" x="407.2649484306247" y="178.6362444457285" dx="0" dy="0">IL</text>\n        </g>\n        <g class="state state-KS">\n            <path class="state__path" d="M347.49821155898474,226.50915114727025L314.46606888089326,226.49880920177645L290.64330011701963,225.7998605206916L260.98534808704886,224.4699546982356L263.8340467564621,179.72164919624367L289.8796263095148,181.05896212558446L309.130197775641,181.635902357001L339.221444999238,181.83852989055754L340.84268714043276,183.6530078593794L343.2505787902849,183.31086723477938L341.2927340677892,188.81503718017188L343.74442711511796,191.25362554188837L344.58439777306194,193.7080159300192L347.0337206733973,194.70855872860795Z"></path><text class="state__label" x="304.1792056461141" y="203.98267813251772" dx="0" dy="0">KS</text>\n        </g>\n        <g class="state state-KY">\n            <path class="state__path" d="M475.38067410404227,223.06869469831815L468.31172056510434,224.12861719736975L456.15142963588164,225.08871949144316L449.47662643799373,225.90186451434306L442.314918485392,226.08394691723663L426.4563478739825,227.95880824175686L423.87804745673367,227.3793357032514L424.5291305383877,230.11681979800687L408.5805282749143,231.33999607033866L408.86749051804406,229.407563953627L410.9860797980357,229.57632083184637L411.42207584460544,223.96547825959544L410.5365618738655,223.3119586509323L413.2303143309193,220.0857620558404L417.9888902762969,222.11389276201476L419.2002362286074,221.53946781464902L418.42549738233157,217.0547600184666L422.905117673439,215.7326165132041L421.80153956122035,212.47330396559198L422.9068910338359,210.7853756903114L424.00179418509026,209.01711212673456L428.19347311922127,209.5305627626667L427.627596252646,207.82455188628433L434.04519071954047,209.95312212079546L434.29231986347634,208.1726985338047L437.05473334633984,206.7095602449408L437.5966887189215,208.0149074373677L440.4265037189445,207.255448630057L440.53465212058813,204.20780787743138L443.99204951583937,205.61288111089254L446.86310278891204,205.31122999815204L447.6596736091706,201.1476568095435L451.7550003123313,197.0991220051195L451.03997918730136,194.3788118311162L453.9263541755917,194.45354455174163L458.22312882407357,192.5137168047322L457.6629215739107,187.77659554382024L462.12898962412737,187.47924908325763L464.6460458052368,191.2539343967902L471.77227519661653,192.26788865527726L477.5607372323677,192.3768754881596L480.14492879568866,190.1752554210575L480.92246290717605,192.79637646883168L484.0614725234275,194.52258576574604L484.553583765147,197.98637672134612L486.36170050821033,201.90506113694698L488.9080408030831,205.07271773351988L492.9010821422444,206.57570214121574L489.3638405359185,211.1127251662906L485.1371741150117,213.96442586395165L483.9760891293523,217.73916695712876L481.540808625724,218.47610304359318L481.35119564308536,220.18694885636535ZM407.740658634188,231.39803197604317L406.9007453949256,231.45543345926808L407.740658634188,231.39803197604317Z"></path><text class="state__label" x="454.83129816908286" y="211.67725348236203" dx="0" dy="0">KY</text>\n        </g>\n        <g class="state state-LA">\n            <path class="state__path" d="M359.17365208069947,334.45618510115884L357.76785869785886,333.1479817641853L360.4232854946498,329.1454942790761L360.23172716041273,321.18114906523806L361.9684416653749,318.0585999932113L362.273645037372,312.36223503680304L360.43098691992316,310.74876118001805L359.9050490523273,307.59898237456076L358.54436354788083,306.99830176104086L358.46101872931723,303.3616991760995L355.7177688648659,300.49381905920126L355.4055136456463,285.3733469506998L377.8628743473558,284.8516954753989L390.62774850308745,284.3512658263196L392.034021611142,285.9449633203807L390.91772613053195,290.0475309095101L393.12392571529267,289.85383010068944L391.4612140869447,292.00203188036136L394.22815406300043,293.9182647594737L391.2880134005472,297.3213832598669L393.0880325556194,297.62458545783187L391.010861179793,300.6628156837189L389.261223300601,301.4627130299201L388.5818474587435,305.9295190214345L387.25241109003787,306.30951420179684L387.43470460030284,310.17816166299696L386.198082501317,312.68767130379905L388.9779696544648,314.1382242692961L410.1687402796679,312.84792442249005L409.01610575771,316.00973135830304L409.7149075934748,319.7609803905501L411.13759084579186,320.6161965045044L412.29873455998757,324.3333702388997L413.70145693177926,324.79157680122154L409.3162830923706,327.6904264329676L413.0886642924156,329.25791864027343L412.96643027038357,327.4492764113661L417.22265819162027,329.2874418889831L415.5587272128511,331.7737965776916L412.30091907052264,331.2062020885975L412.0782590750389,334.7732551536764L421.1091370653504,338.401766218167L419.49967922071176,341.7531953817296L415.12880622655996,338.90638741954575L410.4360397686183,337.87911783757494L410.27282311997175,335.36530526482034L407.99148155714255,335.747954957075L408.2192537105576,339.36156229392043L406.4777297885335,341.1255057069877L404.49071763271576,338.88133091151633L400.79711567589675,338.93967410274786L400.0040352733714,341.2701360269248L397.7606993299628,342.5758987936196L396.7484562097661,340.97604563880327L391.1039609514012,339.0592423171248L392.8986566605138,338.0242100815362L391.89210947673723,336.34050168898966L388.6414811410982,335.7884699729241L387.12221958400244,332.78405825534173L384.78234551695886,331.7852857205029L380.2700113981823,333.631674861083L381.71740736640044,335.30680422229534L378.5334335277007,336.2226895382512L372.9780894024227,335.24352483162164L367.39747844293197,333.05762218448626L363.7305939585989,333.16106251688143ZM417.5448986225089,327.3682061201319L416.1265590103952,326.75741319927624L417.82051729223184,324.8192232044037ZM385.00440284076205,336.82139880096526L382.1864664404651,335.52374315459946L383.52368768660386,334.5211081018956L386.33384599935323,335.6585288151018Z"></path><text class="state__label" x="381.94716516794426" y="313.6435020069327" dx="-1%" dy="0">LA</text>\n        </g>\n        <g class="state state-ME">\n            <path class="state__path" d="M598.8084111997666,100.6807043589854L594.689725681645,97.20448201491445L591.2351766891082,84.37967768936119L588.6361535606836,76.1695161167703L586.1371672315179,69.73941267244834L588.9576248805174,70.20315792413066L588.9381690634078,65.8824375880555L591.6512638420461,61.79196074911897L592.1507916489915,59.44953137391633L591.0608681966269,56.89563100881196L590.9851526320705,52.51277715230617L592.1615128918118,51.28750810904421L591.7408116038679,47.08483971466319L595.9537396758844,34.15152132090702L597.8337466334459,34.17608727268089L598.5564076741803,36.65636345480334L600.2279701080347,37.22868521003397L606.0622476980857,32.80094720402349L611.3894945965407,35.44101679968469L617.3829462231413,55.04280538793489L620.6267199030093,55.52787798091197L622.4704620079019,60.233832063843465L624.027248469347,61.4837706232787L625.9962287067394,60.29158678999352L629.4082475948676,64.92221151711726L627.0847548605318,68.7926035049934L621.6421502264996,71.54395438400081L620.2839889745586,74.84441143665242L619.3523901858204,73.06383963036615L617.7099439603078,74.13538546307711L619.607880988955,75.21361781267785L616.4241865845318,77.7339058251298L612.5468294458616,75.25758507275066L610.8743106655493,76.24162866558879L611.334748281982,81.86669453930813L608.0685003181077,84.2087356239391L607.8614370249186,86.24143461386154L605.024934569065,88.77370012172037L602.4441187490222,88.02092251652789L601.1714052849159,89.11490735918994L601.9983101574055,92.08621396654382L600.3928845840677,93.43433377920155L600.6141377998952,95.67145717382346Z"></path><text class="state__label" x="604.4211873724557" y="63.845526110686464" dx="0" dy="0">ME</text>\n        </g>\n        <g class="state state-MI">\n            <path class="state__path" d="M403.76729054518444,59.34019481396422L406.5443300511329,58.33905960560651L404.2367972710321,60.79168643200137L399.45536281609714,63.89096844064636L398.98124850431986,62.280186237394446ZM438.3831186589899,90.73531054398586L439.3945455170953,93.15728072206161L437.9406150554799,93.4759378419202ZM418.6901687044628,102.588022463269L417.1294431449986,101.85514202609261L417.5879449017303,98.57205177245203L415.36904603444265,98.76500865619767L415.6876662548153,93.837993029637L412.2644047129893,92.78604212783114L412.1079553575188,90.90465771015408L407.953918071396,89.74244126284782L404.63770569727365,89.76210091446615L401.9636982565878,88.46293213374986L391.16718742350884,86.27684706392267L390.2979307149712,84.04869074630255L388.05204806732144,83.16110186039612L392.304739986997,81.09279693381643L393.9978326951647,79.09729155701814L398.302548193227,78.17756544762972L407.455590945027,69.71348166387816L410.932593775098,68.09346272879986L414.25187223422085,68.90882371792054L409.4610564235701,72.14313947813821L407.57608533579935,75.75434854192008L407.43201029877036,78.51879841177049L409.4391628871267,76.31183504340072L413.07234541329836,76.24434724812897L416.10788647425346,77.63332909072676L418.6477370563752,81.50232843872004L422.6213721668169,80.89681468725973L426.0117733868772,81.83105514977376L430.7910729658787,78.35010244007185L437.634536611058,77.2997375104843L442.89526731935587,75.2795388256335L442.2627374309303,79.30300964682635L447.48703104369446,79.95021374373869L449.13779329146877,78.40432823637957L451.74097536695325,78.63480579253587L451.1001434011058,82.35605403500938L455.1757133477561,85.32727767819517L450.1725997141124,86.82717692038102L447.0342057165567,85.38618732744726L447.0330341370974,88.47514467538497L443.8321181121593,86.4767559083474L439.2912750382027,85.57037996327347L437.307092885491,87.68821561740162L430.7707978206129,88.85567154513387L430.2696232071805,91.19990846505766L428.48922727614803,91.93305916200961L425.7580764143262,90.54215062736728L424.1855373875045,93.46016516099644L423.59453422142155,91.14519819998236L420.8580254967982,97.64569847634209L418.24939401497346,101.83580386792983ZM467.83527646389064,147.11442262915034L453.13863205581197,149.5191326843592L453.0268321194055,148.57375067517285L431.23601955089646,150.91733146644287L433.37739979757663,148.71494098358096L435.25327878770184,143.98416388585576L436.6011057596015,138.1097242971165L435.982257380694,132.12173844370056L431.674116522779,123.80933547340635L432.52573771044604,120.86249191969193L431.4379917044324,117.63520943445485L433.23200354010265,112.84754694223818L433.00076406425876,106.91966724748681L438.99650148188766,99.69950516139443L439.2440474959357,105.38381614697835L440.7333340104781,105.21966081125083L441.5776572029696,102.66517679622439L441.024263465324,97.73014924352981L445.61517760870544,95.38019196023708L443.1070326226984,93.05503332052183L446.4030234012181,89.42161819020498L449.9376870275237,90.97767355155565L452.5348868754303,90.89501469534162L453.49415603361894,92.59974261762966L460.4479802290184,94.32322264101458L463.2776753215176,98.63616429383978L461.355751735972,98.33653949858638L463.1914088611172,100.79604591728366L463.88984102896916,108.82441019502403L462.13509141487873,109.93423631261555L461.18063976184317,114.28281790925314L458.69051297721205,115.7202166567663L459.16174162687463,119.40618066560842L461.54978756379086,120.05505349256748L465.4179089161956,114.51803233948101L468.90371506773147,112.04751747547368L472.40098833796964,115.14879712572747L474.9273459001449,124.77752311570032L476.404805472109,126.96500947673553L475.4490847503118,133.90313970228408L474.01217070259025,132.02593078992504L472.3943502557067,134.41244660508198L472.69983444060125,136.61030268907712L470.27794164135616,138.94400332182624L470.38409718404955,142.61042510199718L468.62030277777,144.1288503923181ZM458.6119953505935,86.07023108333794L455.6307605886532,85.982379542643L457.23176532568897,84.03065389931487Z"></path><text class="state__label" x="442.53584534856526" y="111.75851632988902" dx="1%" dy="2%">MI</text>\n        </g>\n        <g class="state state-MN">\n            <path class="state__path" d="M326.62304916128727,130.06453837141396L326.747680899708,103.29916903947571L324.15824413919864,101.7082400496721L322.7056122570421,98.15340736436758L324.56190716453995,96.98749810068966L325.6867620402479,94.00526335122629L325.35409169330325,88.26558195389953L323.1952013827997,83.93145674728635L322.94900473622766,70.53014844917016L320.1735442054479,62.21777181844618L320.2842307006743,52.86365422109975L319.27510981599545,49.1160563383994L339.6402473928116,49.15704434529857L339.59162346229516,43.71833326011449L342.7427138397365,44.46126974743402L344.2520592865499,52.52810856374231L348.51207851327666,54.17267816232322L352.75515870407713,54.39666841930887L352.7908599204412,55.95442735325207L356.31714066040234,55.47722119379739L358.7504486542014,54.006265174736996L365.9120130526602,56.5755814240307L367.1012159844249,59.886739815296096L368.0903676874518,57.89708261441706L370.2135487343927,57.73345651231284L371.3562258988987,59.5590561603442L373.8625525471903,59.91761025418032L375.3925592025753,62.19133108042547L377.8615701958352,61.60367225512698L382.3469449354966,58.79228561661148L383.1765956331264,60.935205716655105L390.6515760414933,60.65019233734745L391.07126020354883,61.64065017189944L395.3617905073318,61.67184515211079L392.63115572154504,63.653775354940194L384.6027896573244,67.2721603592438L380.1410301287576,71.27239236468779L377.78432492687347,74.68274269631479L370.8091353479998,80.8801975450848L371.5779333131237,81.86900411105705L369.06420889797107,82.7560645184094L369.399325312568,91.31049084193228L364.7297089753331,94.47210083038362L363.40097245764446,98.925891671042L366.0793794931759,101.35593277924681L365.0100156373083,102.65429305070859L364.9029632046876,110.46716486662501L367.2625329988446,113.54280634554232L374.16516335869994,116.66724556046222L374.63068371629004,118.70261424102375L379.6846473083974,121.55587282261797L381.7669132073019,125.25247293118764L382.32637089502754,128.7879118677339L368.9805893426765,129.37384228220446L351.4307853872871,129.87554396456915Z"></path><text class="state__label" x="348.6553973329788" y="88.95280081666536" dx="0" dy="0">MN</text>\n        </g>\n        <g class="state state-MS">\n            <path class="state__path" d="M427.5805227691946,320.91428485408267L426.7353869255886,321.77299272935795L422.0988394248883,320.86618826313145L415.8668874946885,323.0604758558124L413.70145693177926,324.79157680122154L412.29873455998757,324.3333702388997L411.13759084579186,320.6161965045044L409.7149075934748,319.7609803905501L409.01610575771,316.00973135830304L410.1687402796679,312.84792442249005L388.9779696544648,314.1382242692961L386.198082501317,312.68767130379905L387.43470460030284,310.17816166299696L387.25241109003787,306.30951420179684L388.5818474587435,305.9295190214345L389.261223300601,301.4627130299201L391.010861179793,300.6628156837189L393.0880325556194,297.62458545783187L391.2880134005472,297.3213832598669L394.22815406300043,293.9182647594737L391.4612140869447,292.00203188036136L393.12392571529267,289.85383010068944L390.91772613053195,290.0475309095101L392.034021611142,285.9449633203807L390.62774850308745,284.3512658263196L391.4094934385846,282.40678160099804L390.7469821825823,278.0753897548605L389.3269933409196,276.00383107780647L390.5317274157884,273.8781870191144L392.3619109618259,267.18919332888714L396.90683319036214,263.0434218772572L396.3214326198597,260.37360155490137L398.2658261941231,256.68225205309136L400.3553944808231,255.60270763526268L399.4115916197063,254.22769057754704L424.6781143724146,252.4290033119513L425.65890070186924,253.86178424466812L425.8591772146341,261.492664650008L425.1746631754037,274.4436791719054L425.364062129561,287.705513414585L424.8529112009691,292.4328950124649L425.2109923930087,302.5631223002806L426.9880514688757,313.5190167454715Z"></path><text class="state__label" x="409.27708844891964" y="287.1685610346058" dx="0" dy="0">MS</text>\n        </g>\n        <g class="state state-MO">\n            <path class="state__path" d="M406.9007453949256,231.45543345926808L407.4778787929778,233.72658369159205L405.49481889061826,235.6924677874867L406.86129786435976,237.11435902058435L405.2880522881341,238.97179793183244L397.68058938192206,239.52805117965244L400.4254423084616,235.85848004788903L401.12455061266047,233.50546335691L399.7597902980994,231.91772672676746L371.5913698500137,233.29302765300338L347.60618896632604,233.9016439341682L347.49821155898474,226.50915114727025L347.0337206733973,194.70855872860795L344.58439777306194,193.7080159300192L343.74442711511796,191.25362554188837L341.2927340677892,188.81503718017188L343.2505787902849,183.31086723477938L340.84268714043276,183.6530078593794L339.221444999238,181.83852989055754L338.01525444829264,181.44949463393857L337.1950400752528,178.19667540817284L335.192865950578,177.41140843045196L333.9835882330376,173.20502574992815L342.3423916732813,173.30967250952574L361.83942984857805,172.8460137391395L378.518914095896,171.6741130062619L382.2635976345812,174.998581424113L381.5152930418698,176.0683360116925L381.7301659523487,180.5920465963493L383.13314423618374,184.66172494768034L391.2139877938452,192.11938888493L391.3823853236089,195.13561848977258L392.7096176928328,196.9718570539294L393.8520107660444,195.55234280875084L398.0187697914492,196.97490969626256L397.81196801319186,200.25365087645298L395.6213140454263,204.76698757163877L397.4826089045023,208.31952355795227L400.8885627301508,209.9398012313119L400.97461630671705,211.28881071755575L406.0955842043795,213.50049439396173L406.2961787494827,216.4356452766616L407.66577324591145,218.1743748386906L407.021188965205,220.9286957944405L411.42207584460544,223.96547825959544L410.9860797980357,229.57632083184637L408.86749051804406,229.407563953627L408.5805282749143,231.33999607033866L407.740658634188,231.39803197604317Z"></path><text class="state__label" x="371.79577511612115" y="205.5288694072001" dx="0" dy="0">MO</text>\n        </g>\n        <g class="state state-NC">\n            <path class="state__path" d="M498.2957921019282,219.99569838106402L514.6047502146208,218.12273514248375L540.6911167983635,213.45131196002626L565.3918847505572,208.27108059370846L567.6833977753834,212.899761160273L565.7144507133348,211.7790362767023L564.6104568561138,214.69718572345198L557.7526598258273,219.13783855990675L565.0740438405929,216.87362084509903L566.1335181134862,221.84761083016713L566.2019536164139,218.09555960824378L567.1793320220353,216.58564826828012L569.2401325614912,218.0920866494224L569.9969174465718,221.5866791713712L568.0319768289854,222.57919123277657L565.872107136176,226.77615953989482L556.7181942442469,226.81116306612353L562.1393506691276,227.72253755418058L561.6405403337483,231.63885031326788L559.9867457714165,234.2500282349207L564.6941609040324,231.57014689186542L566.036032560698,231.69354087157092L564.4228230179772,234.46664415303133L563.8380358099126,237.99485359808136L561.9394974163858,237.33405136172001L556.2132223862918,239.4718201944313L551.7764976779387,243.75114999959203L550.0765229175097,246.34691556649233L549.071113073834,252.6016407796809L546.3253148914723,252.15694058340927L542.2199157127468,253.89673950954392L526.0671592719573,242.36546314311022L512.8694325646459,244.33330897443483L512.5278286416234,242.21670394258786L509.1357979467268,240.02497589104257L492.9344017148871,241.75382253197688L484.8388602569904,245.7754656759003L470.8093845622693,247.75883898726732L470.41961838384157,244.60600045657043L473.66870004109035,242.99860276202196L473.4190937669905,241.02843146968564L476.1084475434503,238.52157812874583L479.4888710573699,238.07902626231885L483.7150984166096,234.3836679826274L483.7150984166096,234.3836679826274L485.47107364982423,231.57514509274517L488.5740461716623,229.29458197554754L488.78587267013353,230.78960549977046L491.40533752049544,228.16705314159583L495.57978628821945,227.47595143542287L497.1642624169767,223.78403691720348L498.4391524414631,223.7526092638616ZM571.9839554198056,218.71448753738684L573.4280473921392,221.32612272378503L573.7509775113471,226.7855741851156L569.3652919994685,228.7927179539014L573.197091658006,226.25626579305276L573.4033541633804,223.20232097876374Z"></path><text class="state__label" x="528.1194023195069" y="230.71345393423587" dx="0" dy="0">NC</text>\n        </g>\n        <g class="state state-OH">\n            <path class="state__path" d="M484.0614725234275,194.52258576574604L480.92246290717605,192.79637646883168L480.14492879568866,190.1752554210575L477.5607372323677,192.3768754881596L471.77227519661653,192.26788865527726L464.6460458052368,191.2539343967902L462.12898962412737,187.47924908325763L457.6629215739107,187.77659554382024L453.13863205581197,149.5191326843592L467.83527646389064,147.11442262915034L472.90176839558876,149.4720443942391L476.0683626897161,149.43248319916722L479.04956221958787,150.85302461540266L483.8206652696506,148.15281382746946L486.9873765951354,148.07966935983313L490.32347095484147,143.95626524075976L498.9978144965835,138.7945042989213L502.2313085943904,158.4517140636858L500.7126251381684,159.022274145893L501.95032992618553,164.13243339562928L501.0209595158251,165.8935939877689L500.7001674309895,173.99488512191488L497.25788649862136,178.08216488015114L494.41023842263917,178.20289616824675L491.7089719422785,181.99206574350194L492.29039147730884,185.84389861032082L490.78497295508464,186.7935266681992L488.8351660926496,184.7524392317132L487.90502439721615,186.8180529848596L488.1810169196386,191.51858859045228L487.2289655567447,193.50539632086827Z"></path><text class="state__label" x="477.88843806221837" y="167.45245997331673" dx="0" dy="0">OH</text>\n        </g>\n        <g class="state state-OK">\n            <path class="state__path" d="M347.60618896632604,233.9016439341682L349.0477101931497,245.24600398566764L349.9544037238157,248.6482517387767L350.1115998744506,258.1780502805202L349.7327189628065,261.3605352814673L349.9731190766749,276.276061320813L345.1490992071947,274.83678374400137L340.7588748326042,271.62859353320823L339.89802185321474,272.9046234945754L334.2358543523674,273.3294152570868L332.0565877420649,272.77757414416016L329.44042044300625,274.442009274326L325.07841766252056,274.4266402273882L322.9107641880791,272.58842330722763L320.72670760463296,273.28436833919994L320.30687907167766,271.6144659356051L316.78791430454913,274.5899802160744L316.37428137118883,272.8395092556173L313.7498639393796,273.5164872586667L310.74149539285065,271.0865071999768L308.52609544769496,273.107738315237L307.70027899585995,270.86941606633195L302.5399349098849,268.45026885223297L296.46520994042476,268.281986463817L292.5899770770526,267.2844637804623L292.24851742547673,264.5729972060562L286.6206386063463,264.52593573423894L283.2712929598876,261.76853428951466L284.4801414058474,233.03545155500615L271.86649303556294,232.43317105922654L249.182250217664,230.98908124158822L249.73303328072734,223.5366211103119L260.98534808704886,224.4699546982356L290.64330011701963,225.7998605206916L314.46606888089326,226.49880920177645L347.49821155898474,226.50915114727025Z"></path><text class="state__label" x="313.6129212374246" y="247.38198145234654" dx="0" dy="0">OK</text>\n        </g>\n        <g class="state state-SC">\n            <path class="state__path" d="M542.2199157127468,253.89673950954392L539.0623839915189,256.0112471949467L536.0935409970725,261.70618734564016L536.2762870492276,265.2167596584178L534.526541861158,267.94281398062714L531.8826476197306,268.16615113545356L532.1824611205958,269.8833342869373L527.6965028548473,275.0768852340964L522.7929070326986,277.9862837880258L523.0898248820906,279.7828466149199L520.701890575777,281.69882821601055L518.129450314385,285.32106822630794L515.3143149688367,284.64713247932076L514.8452127142561,281.67637490052584L513.0624083389478,278.9113419968069L510.6909087756811,278.0786220084726L508.4035799198758,271.9389141706365L505.10777300894625,270.75747387837833L502.6889776752656,266.4715238553483L498.889758098386,264.70877283747365L496.67082881613567,261.5853999092306L493.3830263140487,260.13359192621226L491.28423450269236,257.7057421061569L488.8871250064999,253.07242024823307L487.185227626161,253.3877910048908L482.918918497249,250.84245476728313L482.718581426687,249.34729668282125L484.8388602569904,245.7754656759003L492.9344017148871,241.75382253197688L509.1357979467268,240.02497589104257L512.5278286416234,242.21670394258786L512.8694325646459,244.33330897443483L526.0671592719573,242.36546314311022Z"></path><text class="state__label" x="513.8654358229387" y="257.94723245685594" dx="0" dy="0">SC</text>\n        </g>\n        <g class="state state-TN">\n            <path class="state__path" d="M498.2957921019282,219.99569838106402L498.4391524414631,223.7526092638616L497.1642624169767,223.78403691720348L495.57978628821945,227.47595143542287L491.40533752049544,228.16705314159583L488.78587267013353,230.78960549977046L488.5740461716623,229.29458197554754L485.47107364982423,231.57514509274517L483.7150984166096,234.3836679826274L483.7150984166096,234.3836679826274L479.4888710573699,238.07902626231885L476.1084475434503,238.52157812874583L473.4190937669905,241.02843146968564L473.66870004109035,242.99860276202196L470.41961838384157,244.60600045657043L470.8093845622693,247.75883898726732L455.4651381802454,249.6298844825282L424.6781143724146,252.4290033119513L399.4115916197063,254.22769057754704L400.67302147696785,253.75348528415356L401.7458776893622,250.26557671921728L401.1126925587114,246.96208607067064L403.18099583693805,245.87687823653982L402.99384825557223,242.94307963496954L406.2502123662711,240.66001375053145L405.2880522881341,238.97179793183244L406.86129786435976,237.11435902058435L405.49481889061826,235.6924677874867L407.4778787929778,233.72658369159205L406.9007453949256,231.45543345926808L407.740658634188,231.39803197604317L408.5805282749143,231.33999607033866L424.5291305383877,230.11681979800687L423.87804745673367,227.3793357032514L426.4563478739825,227.95880824175686L442.314918485392,226.08394691723663L449.47662643799373,225.90186451434306L456.15142963588164,225.08871949144316L468.31172056510434,224.12861719736975L475.38067410404227,223.06869469831815Z"></path><text class="state__label" x="445.2733262620899" y="237.6663897491603" dx="0" dy="0">TN</text>\n        </g>\n        <g class="state state-UT">\n            <path class="state__path" d="M121.73454647763717,206.52587106900432L126.1603310122573,183.57211137535546L127.39898267315982,181.46240782817745L136.5661726115712,133.72401756532827L142.30059514974215,134.88907238057277L168.4628162690703,139.25174895062878L166.11005524411533,153.98318812395144L188.03586409283204,157.16730737427838L179.89214600455077,216.14113872123414L163.33065217409185,213.80687806815433L134.88719819192482,208.9795339894871Z"></path><text class="state__label" x="155.23173750759054" y="177.8027533802847" dx="0" dy="0">UT</text>\n        </g>\n        <g class="state state-VA">\n            <path class="state__path" d="M558.99572183641,188.33728584541825L559.8030218588842,188.16500984126878L558.99572183641,188.33728584541825ZM568.0303509207217,185.23259107674755L565.0373319618504,190.85791600675657L565.0892769589234,194.99679338413728L564.1853228198848,198.69073946112087L562.4960159073368,200.7612986350241L561.3243321029024,197.27167548444845L561.4223111643114,193.7544524396585L563.4342520926316,187.3822235328854ZM492.9010821422444,206.57570214121574L493.7100905263008,209.1884818614534L496.9362950782258,211.03506547692643L500.32858948259286,208.42304780064364L502.21971935923966,209.73750563522424L512.236861405941,203.92865912799675L511.8705154083374,201.7326341632563L514.340365761014,196.47874990526088L514.6320043069388,193.2833575133501L516.0650195197893,191.90817672904063L516.5191314915687,187.3109966822144L521.343301620721,188.7243764999231L523.4270640939068,181.8079562792658L525.404212877318,181.2868851622901L529.0681633884216,176.48603311313911L528.9418995218443,171.41448627395766L535.8354320783128,175.11660725362344L536.5143046886261,172.2313329225824L539.5279867026385,172.8549490558554L539.0700753435083,174.72788332361904L544.001042881731,176.58356419154757L545.6086370144726,178.3679589097543L544.8948771239288,181.0263804493984L543.4310264478498,182.0495482444694L544.1625631316076,185.71428608217866L546.80717887278,184.29061556537533L548.1654725156928,186.85480023726393L551.9371701960633,186.81239211383604L557.1739249543723,189.6989228995575L556.5617820591409,190.8029756601734L558.5232977317132,198.10937273266939L556.2892276057769,199.63335822114186L559.2279669689706,201.45482237808847L557.1484074470759,203.7586828305965L563.0112929815335,203.171470628948L565.3918847505572,208.27108059370846L540.6911167983635,213.45131196002626L514.6047502146208,218.12273514248375L498.2957921019282,219.99569838106402L475.38067410404227,223.06869469831815L481.35119564308536,220.18694885636535L481.540808625724,218.47610304359318L483.9760891293523,217.73916695712876L485.1371741150117,213.96442586395165L489.3638405359185,211.1127251662906Z"></path><text class="state__label" x="529.2590274476485" y="200.75329290324345" dx="0" dy="0">VA</text>\n        </g>\n        <g class="state state-WV">\n            <path class="state__path" d="M492.9010821422444,206.57570214121574L488.9080408030831,205.07271773351988L486.36170050821033,201.90506113694698L484.553583765147,197.98637672134612L484.0614725234275,194.52258576574604L487.2289655567447,193.50539632086827L488.1810169196386,191.51858859045228L487.90502439721615,186.8180529848596L488.8351660926496,184.7524392317132L490.78497295508464,186.7935266681992L492.29039147730884,185.84389861032082L491.7089719422785,181.99206574350194L494.41023842263917,178.20289616824675L497.25788649862136,178.08216488015114L500.7001674309895,173.99488512191488L501.0209595158251,165.8935939877689L501.95032992618553,164.13243339562928L500.7126251381684,159.022274145893L502.2313085943904,158.4517140636858L504.4365033572596,171.8576380315941L515.9521854229224,169.89854713614648L516.901014761469,177.64069769113155L523.5318008868472,171.04284953846138L527.6186191515274,170.93450144864437L529.9243415598123,167.91294924643603L534.5503656486587,168.48334375241234L536.5143046886261,172.2313329225824L535.8354320783128,175.11660725362344L528.9418995218443,171.41448627395766L529.0681633884216,176.48603311313911L525.404212877318,181.2868851622901L523.4270640939068,181.8079562792658L521.343301620721,188.7243764999231L516.5191314915687,187.3109966822144L516.0650195197893,191.90817672904063L514.6320043069388,193.2833575133501L514.340365761014,196.47874990526088L511.8705154083374,201.7326341632563L512.236861405941,203.92865912799675L502.21971935923966,209.73750563522424L500.32858948259286,208.42304780064364L496.9362950782258,211.03506547692643L493.7100905263008,209.1884818614534Z"></path><text class="state__label" x="505.7281097030439" y="187.93854680671166" dx="0" dy="0">WV</text>\n        </g>\n        <g class="state state-WI">\n            <path class="state__path" d="M389.2520662431379,143.08615870393885L388.37285867271135,141.23088845165228L384.4312004814029,139.8567424357301L383.12203518937713,136.91046823750094L384.0484796836814,132.50276165930723L382.32637089502754,128.7879118677339L381.7669132073019,125.25247293118764L379.6846473083974,121.55587282261797L374.63068371629004,118.70261424102375L374.16516335869994,116.66724556046222L367.2625329988446,113.54280634554232L364.9029632046876,110.46716486662501L365.0100156373083,102.65429305070859L366.0793794931759,101.35593277924681L363.40097245764446,98.925891671042L364.7297089753331,94.47210083038362L369.399325312568,91.31049084193228L369.06420889797107,82.7560645184094L371.5779333131237,81.86900411105705L374.1325467792528,81.99436920671474L380.9127861713993,79.23411564590492L383.36915309702425,77.61222513773794L384.1747801959968,79.06002880869664L382.93905585911926,83.13404974572336L385.0569988492693,81.83931317732026L388.05204806732144,83.16110186039612L390.2979307149712,84.04869074630255L391.16718742350884,86.27684706392267L401.9636982565878,88.46293213374986L404.63770569727365,89.76210091446615L407.953918071396,89.74244126284782L412.1079553575188,90.90465771015408L412.2644047129893,92.78604212783114L415.6876662548153,93.837993029637L415.36904603444265,98.76500865619767L417.5879449017303,98.57205177245203L417.1294431449986,101.85514202609261L418.6901687044628,102.588022463269L416.2668337209032,104.85782989480117L415.03767206369474,108.05017275842954L415.67855547828384,111.16374018610406L418.65246224199757,106.39112221846051L420.86011411453865,105.87649526601217L421.92991880228027,101.18659575967285L424.0875073167689,100.27265951124343L424.27303081401465,102.23428227509135L420.2496150399642,111.63614907415558L420.63734574923575,115.9622923134923L418.6609175008828,119.38952890107271L419.07366686396074,124.11524107953778L417.5333014940468,128.45670766998978L417.9847775779993,133.74091840654205L419.7776443326735,136.60694182497627L419.77619515509593,141.06048177013986L407.4235733545877,142.0548064961505Z"></path><text class="state__label" x="394.15252812222354" y="111.47971239518823" dx="0" dy="0">WI</text>\n        </g>\n        <g class="state state-ND">\n            <path class="state__path" d="M325.6867620402479,94.00526335122629L304.3426275500159,93.64788175420836L280.44246027766883,92.61339274687123L267.58375143446244,91.85573547326476L248.8673283532965,90.44759710130813L252.65412524479183,45.85935566238106L270.5110517602754,47.20282942991753L283.4805794893025,47.96210109930382L303.12708239769853,48.76636336784179L319.27510981599545,49.1160563383994L320.2842307006743,52.86365422109975L320.1735442054479,62.21777181844618L322.94900473622766,70.53014844917016L323.1952013827997,83.93145674728635L325.35409169330325,88.26558195389953Z"></path><text class="state__label" x="286.56370805165255" y="70.80324677548552" dx="0" dy="0">ND</text>\n        </g>\n        <g class="state state-SD">\n            <path class="state__path" d="M326.5537340090911,144.95035856729396L324.61881912981005,144.70178039566088L323.8611910993718,142.398655825304L316.9498706503943,139.3144739826779L309.21442156633645,140.68132947930712L305.0354578485783,138.12620686367643L304.677692454685,137.08713839939105L288.1559022051683,136.52014591565614L270.1103802434456,135.59359675644248L245.1867873778076,133.78471138106534L247.68783593402424,104.3357179255355L248.8673283532965,90.44759710130813L267.58375143446244,91.85573547326476L280.44246027766883,92.61339274687123L304.3426275500159,93.64788175420836L325.6867620402479,94.00526335122629L324.56190716453995,96.98749810068966L322.7056122570421,98.15340736436758L324.15824413919864,101.7082400496721L326.747680899708,103.29916903947571L326.62304916128727,130.06453837141396L325.0963591025764,130.05627617421283L326.59356812219426,136.3957579276247L325.82415378362293,136.62940605435074L324.637487382272,141.8494537317472Z"></path><text class="state__label" x="287.0663058601896" y="115.0993618053138" dx="0" dy="0">SD</text>\n        </g>\n        <g class="state state-WY">\n            <path class="state__path" d="M188.03586409283204,157.16730737427838L166.11005524411533,153.98318812395144L168.4628162690703,139.25174895062878L174.2167035711565,103.22469822096127L175.4609948659263,95.43376606577283L195.76586741092402,98.46074120070023L216.4908015403796,101.18706137437232L247.68783593402424,104.3357179255355L245.1867873778076,133.78471138106534L242.68377689076868,163.25680590266734L218.65407285587966,161.0166807272451Z"></path><text class="state__label" x="207.89634158668923" y="129.94029766922537" dx="0" dy="0">WY</text>\n        </g>\n        <g class="state state-TX">\n            <path class="state__path" d="M320.41051712755785,358.6298494011288L316.61182260851734,363.2189246560707L313.70950399550304,369.1377187002501L313.1378270650918,376.01843458925265L314.95705261251834,382.14184046758294L313.10386450569945,378.36437785362983L313.2409392966808,368.89601950926743L314.70257851974293,365.4684829747871L317.08784294089173,362.67553723979285L320.8937398957905,356.82878679495786L326.0447338687944,354.4275579139043ZM200.38150547238584,296.6489378907702L199.85337718379748,293.3264976702563L214.49326415799712,294.8739262173487L243.8252075591152,297.4208330861998L248.7624647795392,230.9579767853446L249.182250217664,230.98908124158822L271.86649303556294,232.43317105922654L284.4801414058474,233.03545155500615L283.2712929598876,261.76853428951466L286.6206386063463,264.52593573423894L292.24851742547673,264.5729972060562L292.5899770770526,267.2844637804623L296.46520994042476,268.281986463817L302.5399349098849,268.45026885223297L307.70027899585995,270.86941606633195L308.52609544769496,273.107738315237L310.74149539285065,271.0865071999768L313.7498639393796,273.5164872586667L316.37428137118883,272.8395092556173L316.78791430454913,274.5899802160744L320.30687907167766,271.6144659356051L320.72670760463296,273.28436833919994L322.9107641880791,272.58842330722763L325.07841766252056,274.4266402273882L329.44042044300625,274.442009274326L332.0565877420649,272.77757414416016L334.2358543523674,273.3294152570868L339.89802185321474,272.9046234945754L340.7588748326042,271.62859353320823L345.1490992071947,274.83678374400137L349.9731190766749,276.276061320813L350.8642963405402,277.2924047936147L355.2434874502442,277.52748107679173L355.4055136456463,285.3733469506998L355.7177688648659,300.49381905920126L358.46101872931723,303.3616991760995L358.54436354788083,306.99830176104086L359.9050490523273,307.59898237456076L360.43098691992316,310.74876118001805L362.273645037372,312.36223503680304L361.9684416653749,318.0585999932113L360.23172716041273,321.18114906523806L360.4232854946498,329.1454942790761L357.76785869785886,333.1479817641853L359.17365208069947,334.45618510115884L355.0559761357078,335.17385773072806L349.1259997620672,337.95295079182284L350.0221832538541,336.3644548304248L347.2738804658259,337.1123775004169L347.6838777898843,333.4045488267129L344.49073043843816,334.9402775515001L345.4735873560089,340.52003881228904L342.72346344943713,342.3588415849817L342.73592554076146,343.69625517088747L339.5203741130201,346.8679450699471L331.17572286279665,350.98253975299417L328.38449869619467,351.2147511277338L328.8533348973048,349.4083534827944L325.1277292503436,351.2812332433137L326.05011056311326,353.17095869918836L323.71268616879416,354.41537765047457L320.45686249602284,353.3699904403542L320.8983739702834,356.27929832274816L315.263656464583,358.49532921510735L317.60342383039296,358.52345739362477L315.6851946070397,362.18811875550483L313.34191606138177,361.9211105139778L314.72245076975975,363.9792423657222L310.75351046442904,376.68571593700443L313.9668616621363,384.78462735460596L313.9336556703797,387.20460132960864L315.8231133636431,389.33622786084936L311.0085688457078,390.4385959975505L309.6019337438566,388.4646596281267L302.42220702088514,387.93114094670636L294.874749340698,383.6753942744127L290.1360882285802,382.4357466253628L287.51408631923016,375.46432130727703L285.6992393891725,373.12924778576956L285.06343803130915,364.72023074797505L280.47943525609116,361.6383183462128L280.12362918305746,358.87606459868806L278.3520536035574,356.44528889575605L275.61988141416134,354.7536872697814L275.27464543996507,352.0654063751151L271.4268115528664,344.88161599647185L271.1149385498488,341.7951383612546L266.3145601472845,336.3473679951829L264.06460535760357,335.357603730809L262.40215623474927,332.1877727042345L252.84730450232922,330.6594952521388L245.92059774494734,331.13854875680124L242.71793292531635,337.2248363010193L239.60540237108063,341.72835983823364L237.29145626191544,341.63138647493867L234.2667326136351,338.79077323276067L226.7236322717022,334.8492171019362L226.3798952948863,333.47621733295654L222.05759759515516,330.16911107467524L220.61040074078832,325.8440241710556L220.98509788612563,321.7614446105657L218.98715379036094,318.64510596101684L217.97867793782837,314.8246105868643L214.53674489146897,312.7481798737346L211.20945895776885,309.64000377914823L210.5022926559048,307.6629077474719L206.8525317287993,303.55189602582203L204.28785708822937,302.1665513788758L201.63746522937336,297.50407245274147Z"></path><text class="state__label" x="289.76717970392355" y="307.74768202738454" dx="0" dy="0">TX</text>\n        </g>\n        <g class="state state-NM">\n            <path class="state__path" d="M168.3903363735582,299.4330422485704L179.89214600455077,216.14113872123414L204.7799110639822,219.29096953834494L205.17717645180508,219.49665911181955L229.72536186154412,221.95523015853735L249.73303328072734,223.5366211103119L249.182250217664,230.98908124158822L248.7624647795392,230.9579767853446L243.8252075591152,297.4208330861998L214.49326415799712,294.8739262173487L199.85337718379748,293.3264976702563L200.38150547238584,296.6489378907702L179.50751224452887,294.1391581941067L178.64610498087976,300.8038983961664Z"></path><text class="state__label" x="209.6994671847954" y="258.5433121268557" dx="0" dy="0">NM</text>\n        </g>\n        <g class="state state-CO">\n            <path class="state__path" d="M260.98534808704886,224.4699546982356L249.73303328072734,223.5366211103119L229.72536186154412,221.95523015853735L205.17717645180508,219.49665911181955L204.7799110639822,219.29096953834494L179.89214600455077,216.14113872123414L188.03586409283204,157.16730737427838L218.65407285587966,161.0166807272451L242.68377689076868,163.25680590266734L264.7777225675432,164.89807591258864L263.8340467564621,179.72164919624367Z"></path><text class="state__label" x="223.35996601037823" y="191.38430957781313" dx="0" dy="0">CO</text>\n        </g>\n        <g class="state state-NE">\n            <path class="state__path" d="M333.9835882330376,173.20502574992815L335.192865950578,177.41140843045196L337.1950400752528,178.19667540817284L338.01525444829264,181.44949463393857L339.221444999238,181.83852989055754L309.130197775641,181.635902357001L289.8796263095148,181.05896212558446L263.8340467564621,179.72164919624367L264.7777225675432,164.89807591258864L242.68377689076868,163.25680590266734L245.1867873778076,133.78471138106534L270.1103802434456,135.59359675644248L288.1559022051683,136.52014591565614L304.677692454685,137.08713839939105L305.0354578485783,138.12620686367643L309.21442156633645,140.68132947930712L316.9498706503943,139.3144739826779L323.8611910993718,142.398655825304L324.61881912981005,144.70178039566088L326.5537340090911,144.95035856729396L328.4720093075528,151.53717264423494L330.029851058287,152.57123215435945L330.4140943489158,159.31458603576186L332.7746030460549,162.32967750024227L333.18274901195593,170.42703512803132Z"></path><text class="state__label" x="289.8062865272256" y="158.2498143042823" dx="0" dy="0">NE</text>\n        </g>\n        <g class="state state-IA">\n            <path class="state__path" d="M333.9835882330376,173.20502574992815L333.18274901195593,170.42703512803132L332.7746030460549,162.32967750024227L330.4140943489158,159.31458603576186L330.029851058287,152.57123215435945L328.4720093075528,151.53717264423494L326.5537340090911,144.95035856729396L324.637487382272,141.8494537317472L325.82415378362293,136.62940605435074L326.59356812219426,136.3957579276247L325.0963591025764,130.05627617421283L326.62304916128727,130.06453837141396L351.4307853872871,129.87554396456915L368.9805893426765,129.37384228220446L382.32637089502754,128.7879118677339L384.0484796836814,132.50276165930723L383.12203518937713,136.91046823750094L384.4312004814029,139.8567424357301L388.37285867271135,141.23088845165228L389.2520662431379,143.08615870393885L391.8089951166794,146.98760808799727L394.6225976618975,148.40679323413724L394.8709265452678,152.4436628499068L393.15152979208676,156.44216925580167L389.733329359885,158.5477316753428L385.45321057380426,159.49466809217563L385.2119357989801,162.44780056079844L386.8633709680988,163.7920728700459L387.02358470196646,166.80480693377478L385.50277544092336,168.07724834046257L385.24096766129713,170.7148905844938L382.89366321032117,171.54831131446952L382.2635976345812,174.998581424113L378.518914095896,171.6741130062619L361.83942984857805,172.8460137391395L342.3423916732813,173.30967250952574Z"></path><text class="state__label" x="358.5488973737881" y="150.72732497741816" dx="0" dy="0">IA</text>\n        </g>\n        <g class="state state-IN">\n            <path class="state__path" d="M422.9068910338359,210.7853756903114L422.60767352200025,207.21974522091114L423.73223235132946,205.84796904323457L425.35645822859055,200.7602572920008L427.9024524661794,197.0234297344033L427.5617868965134,193.22242038475895L425.7372309520973,191.06996943004674L426.6474612968206,187.55758506578502L423.5127667319936,152.43272382906298L425.968962968924,153.48528501783903L431.23601955089646,150.91733146644287L453.0268321194055,148.57375067517285L453.13863205581197,149.5191326843592L457.6629215739107,187.77659554382024L458.22312882407357,192.5137168047322L453.9263541755917,194.45354455174163L451.03997918730136,194.3788118311162L451.7550003123313,197.0991220051195L447.6596736091706,201.1476568095435L446.86310278891204,205.31122999815204L443.99204951583937,205.61288111089254L440.53465212058813,204.20780787743138L440.4265037189445,207.255448630057L437.5966887189215,208.0149074373677L437.05473334633984,206.7095602449408L434.29231986347634,208.1726985338047L434.04519071954047,209.95312212079546L427.627596252646,207.82455188628433L428.19347311922127,209.5305627626667L424.00179418509026,209.01711212673456Z"></path><text class="state__label" x="439.9400857749388" y="177.8719834064139" dx="0" dy="0">IN</text>\n        </g>\n        <g class="state state-PA">\n            <path class="state__path" d="M560.3433936298087,159.90089206154778L558.652594926861,159.7022158567114L556.2704913165603,162.00863175792745L537.3504584568409,165.9929815949232L515.9521854229224,169.89854713614648L504.4365033572596,171.8576380315941L502.2313085943904,158.4517140636858L498.9978144965835,138.7945042989213L506.36189123969245,133.2915538798918L507.02288122995367,137.12003351716965L517.7886587897844,135.28318792796983L543.4304356349693,130.24018916436944L553.7091411795054,127.94734815131119L557.898813577732,130.59103061383394L558.5580335409996,133.53288503563112L563.0567321679067,135.60751074598159L561.749291889548,136.9627395527666L559.5774446682941,145.34304900474035L560.2674095438871,148.44405532252335L561.4157706185482,148.10648478306587L566.7097312666393,153.42692475784088L562.949033170473,156.7999088880356L563.1914753409916,157.8856816246696Z"></path><text class="state__label" x="531.1898550231315" y="149.65323119081037" dx="0" dy="0">PA</text>\n        </g>\n        <g class="state state-NY">\n            <path class="state__path" d="M575.4666351439749,138.41232095721L574.607308557799,141.6381192227792L577.1546014860076,138.65981506885316L586.9567737143285,135.42679462329818L588.7500951260517,132.84429588577086L591.9615140014557,134.23635785744534L594.1009373774593,133.0283041390228L583.1435262746498,141.4500083160575L578.7517458090199,143.58440490583212L572.5224110840231,144.9062192849874L572.5636048614197,143.34626170800857L572.7171096653046,138.82242443507255L563.0567321679067,135.60751074598159L558.5580335409996,133.53288503563112L557.898813577732,130.59103061383394L553.7091411795054,127.94734815131119L543.4304356349693,130.24018916436944L517.7886587897844,135.28318792796983L507.02288122995367,137.12003351716965L506.36189123969245,133.2915538798918L511.0528480632777,128.60642969431717L514.5897129038036,124.26573856544508L512.0872524917215,121.25867850876284L511.02153234300806,117.50927336700704L515.2697132918912,115.20604103882067L524.3327653779088,113.73089570829165L527.2663558835425,114.77015069416734L533.1983197539641,113.18014813695913L537.3971183362548,108.9234980174441L540.1566077014609,107.21284388782283L538.1913270402187,103.42478228103278L539.8849189776095,102.25910245674459L536.7513286268071,100.25439284398533L537.1019837907993,98.24337305594952L540.6692899909395,95.0633648221384L545.3768063593511,86.6869861321095L549.9470164338773,83.15763019970495L554.7471018459605,82.37985262289988L564.842494035028,79.65694367990409L565.5480634281935,85.7360940583219L567.2405690150362,87.92434368235558L566.943146865555,91.49134120451265L568.7327825166138,100.49240268907909L570.6036336446522,100.11918099264835L573.5120761067326,112.03892536337344L573.3031031439297,122.6919252126155L575.561623221221,133.73587132288185L576.5886467361335,134.63126931274758L574.2912132285428,136.89758028468896Z"></path><text class="state__label" x="549.3104519322362" y="114.73693102079201" dx="0" dy="0">NY</text>\n        </g>\n        <g class="state state-VT">\n            <path class="state__path" d="M581.8089246959493,110.22278590478118L573.5120761067326,112.03892536337344L570.6036336446522,100.11918099264835L568.7327825166138,100.49240268907909L566.943146865555,91.49134120451265L567.2405690150362,87.92434368235558L565.5480634281935,85.7360940583219L564.842494035028,79.65694367990409L583.2924692772503,74.98122786795898L583.6848234757211,83.85157939094938L580.1680735189458,86.80358666266L581.3415084107406,89.84601335293826L580.8947482011479,94.2042414655399L579.4824231652593,97.91005434804993L580.9389019437726,105.21476961783458L580.2088663911823,107.03250883984322Z"></path>\n        </g>\n        <g class="state state-NH">\n            <path class="state__path" d="M581.8089246959493,110.22278590478118L580.2088663911823,107.03250883984322L580.9389019437726,105.21476961783458L579.4824231652593,97.91005434804993L580.8947482011479,94.2042414655399L581.3415084107406,89.84601335293826L580.1680735189458,86.80358666266L583.6848234757211,83.85157939094938L583.2924692772503,74.98122786795898L583.167608575955,71.59025938361276L586.1371672315179,69.73941267244834L588.6361535606836,76.1695161167703L591.2351766891082,84.37967768936119L594.689725681645,97.20448201491445L598.8084111997666,100.6807043589854L598.4224095273704,103.65787311671033L594.948972916,105.57779429303162L594.2593342461608,107.48338927166822Z"></path>\n        </g>\n        <g class="state state-MA">\n            <path class="state__path" d="M606.1378074784832,123.084305552621L608.1383720363032,124.4277651921866L605.1424432165297,125.41270460120359ZM573.5120761067326,112.03892536337344L581.8089246959493,110.22278590478118L594.2593342461608,107.48338927166822L594.948972916,105.57779429303162L598.4224095273704,103.65787311671033L599.5212284590068,106.23222557734653L601.5933515765007,106.48813698053175L598.94108626888,108.52396516124634L598.9128521428661,112.88258373651013L602.1216091366537,112.83441279250371L605.6561046952718,118.36249414172096L608.8852777572946,118.29338316536996L611.2247257426218,116.48686363829665L612.5582329230394,118.33690381525969L605.3820472317118,121.81027771959998L603.6002267925128,119.74700463548743L602.4765234884346,123.09334831421518L600.3452435727677,124.24177470537438L598.9109252611994,121.9148998129242L598.7677002067542,121.37834702251132L596.9690134786302,120.70776878875574L595.7378105201901,117.58794223649522L591.6089494960556,118.75455255552083L591.1916087050929,118.69928739672457L573.3031031439297,122.6919252126155Z"></path>\n        </g>\n        <g class="state state-RI">\n            <path class="state__path" d="M600.3452435727677,124.24177470537438L598.223233214142,123.9044168049212L598.9109252611994,121.9148998129242ZM598.7677002067542,121.37834702251132L596.2193042736494,122.46541016186893L597.3539685169256,126.76166445303079L593.4063585818939,128.7799914821279L593.8285783283114,127.27610065470094L591.6089494960556,118.75455255552083L595.7378105201901,117.58794223649522L596.9690134786302,120.70776878875574Z"></path>\n        </g>\n        <g class="state state-CT">\n            <path class="state__path" d="M575.4666351439749,138.41232095721L574.2912132285428,136.89758028468896L576.5886467361335,134.63126931274758L575.561623221221,133.73587132288185L573.3031031439297,122.6919252126155L591.1916087050929,118.69928739672457L591.6089494960556,118.75455255552083L593.8285783283114,127.27610065470094L593.4063585818939,128.7799914821279L589.368063768442,130.47532086185834L582.4892292625982,132.20616445093924L580.6480786176401,134.62280984334586Z"></path>\n        </g>\n        <g class="state state-NJ">\n            <path class="state__path" d="M559.5553474991833,161.94532097281797L560.3433936298087,159.90089206154778L563.1914753409916,157.8856816246696L562.949033170473,156.7999088880356L566.7097312666393,153.42692475784088L561.4157706185482,148.10648478306587L560.2674095438871,148.44405532252335L559.5774446682941,145.34304900474035L561.749291889548,136.9627395527666L563.0567321679067,135.60751074598159L572.7171096653046,138.82242443507255L572.5636048614197,143.34626170800857L570.3962375833594,146.30108998480898L571.180939454091,147.91257716941357L573.8807553903105,147.1975576404244L574.2599549039436,154.04614304100676L575.0047761836803,157.21805894874478L572.7652666280046,163.61590073051252L570.5174168956844,166.49791655367926L569.4353252046882,170.90202227771806L567.8989917541148,171.49323186654942L568.3896055002701,168.12279444951412L561.7615565085662,166.34357240740394L559.3991755276245,163.1184882450383L559.3143319022072,162.73025295665502Z"></path>\n        </g>\n        <g class="state state-DE">\n            <path class="state__path" d="M559.3143319022072,162.73025295665502L559.3991755276245,163.1184882450383L559.3143319022072,162.73025295665502ZM559.5553474991833,161.94532097281797L559.5470896007071,165.68958832488954L562.069150210336,167.74096330416592L562.7185540808352,170.69118969611202L565.9116062101803,173.81156335101798L567.175466443688,173.85544694658074L568.6863330593075,178.7317327397094L561.446202909152,180.16545480326067L556.2704913165603,162.00863175792745L558.652594926861,159.7022158567114L560.3433936298087,159.90089206154778Z"></path>\n        </g>\n        <g class="state state-MD">\n            <path class="state__path" d="M559.8030218588842,188.16500984126878L558.99572183641,188.33728584541825L559.8030218588842,188.16500984126878ZM563.4342520926316,187.3822235328854L561.1474240999992,188.52736234017004L560.831280779813,185.09800105367947L559.290692463639,183.80234328904703L555.4586017437762,183.55958743756446L554.0995739179583,181.08280105500546L555.5601790865477,178.0933637391529L553.2504685528625,177.03648228147745L554.732751282499,176.15550974137477L552.9547745021719,169.70575431287307L555.2153327432511,166.70641915864485L554.8165077880595,164.84094369774084L551.1663578738983,171.05614327442458L552.1339050112036,173.69636910490954L550.8857184134297,177.6923570038283L552.0782822642791,181.42374308576927L554.1387209933905,183.26808479751855L555.4059630907775,187.30825581339764L551.2930663669141,185.7275241556256L549.6820285014362,186.05861289560403L547.0987158517157,183.66367268468935L544.8585197780811,185.00747686192346L543.6177988616369,182.9852114135797L544.8948771239288,181.0263804493984L545.6086370144726,178.3679589097543L546.538670975497,176.80006750811742L544.001042881731,176.58356419154757L539.0700753435083,174.72788332361904L539.5279867026385,172.8549490558554L536.5143046886261,172.2313329225824L534.5503656486587,168.48334375241234L529.9243415598123,167.91294924643603L527.6186191515274,170.93450144864437L523.5318008868472,171.04284953846138L516.901014761469,177.64069769113155L515.9521854229224,169.89854713614648L537.3504584568409,165.9929815949232L556.2704913165603,162.00863175792745L561.446202909152,180.16545480326067L568.6863330593075,178.7317327397094L568.0303509207217,185.23259107674755Z"></path>\n        </g>\n        <g class="state state-MT">\n            <path class="state__path" d="M247.68783593402424,104.3357179255355L216.4908015403796,101.18706137437232L195.76586741092402,98.46074120070023L175.4609948659263,95.43376606577283L174.2167035711565,103.22469822096127L171.19046901498194,98.41851118308148L169.67093200027622,100.72794853215021L166.15318505460365,101.26252151218466L160.6751480853126,99.8444155042323L160.44500057757648,101.16654128321397L156.87695368208261,99.73690761475677L155.00563844728845,101.64815996049117L154.103533341064,100.28222149100577L153.52768583222064,95.04426480033919L150.45761345311905,93.11585640700571L150.97608779612176,90.32492645084744L148.40999201259393,85.83474421280778L148.8228244789284,81.6650832996346L147.13950969565516,80.62297959696002L143.30051408411902,82.9276296441002L141.07509471520314,80.8051148581576L141.6710067049426,77.79409442216831L143.78354908867223,76.60654469204746L143.02344723662287,72.85094744365233L143.95601929578967,71.91334321225565L146.68864461896075,65.56723918271257L143.47388623235432,64.93415903961932L141.11479024283227,61.90163339378887L138.22987783816242,56.11373981198017L136.78066133424545,54.21399671312804L135.06921706615523,50.097154535500295L135.59793642892873,49.32924796057648L133.25103958630228,43.157731748241986L136.38858131747583,28.526919335244884L157.7262377814504,32.84205721788351L177.0681969504003,36.3859134974698L199.63250086937018,39.81926004354216L217.03445196497682,42.14197897423128L240.76531488957264,44.772734338341365L252.65412524479183,45.85935566238106L248.8673283532965,90.44759710130813Z"></path><text class="state__label" x="194.13979995649166" y="67.88506372963397" dx="0" dy="0">MT</text>\n        </g>\n        <g class="state state-CA">\n            <path class="state__path" d="M46.44350732387551,234.499569838443L48.776279666613846,235.91141956482625L44.50253435400418,235.06682250201135ZM40.371458891080806,233.66853246846938L43.92295188811613,235.57302853999937L41.65642850275083,235.6425848670392ZM59.12201444087941,246.8028876658832L61.14272767175186,249.6528746297596L58.69402128088291,248.575367973261ZM29.106016192856487,107.04474912414764L57.19700375258452,115.20822934171997L73.40315415766264,119.52870743348763L62.27561121883781,162.67271673936295L62.82610427106681,163.79962144618287L81.69267005071578,192.3211578819206L93.00685303096012,208.73017638267015L96.17074663809393,214.05198554232334L105.48960734581868,227.6113691679558L109.80302763166753,234.39385716612674L109.41613036508312,236.341045231002L111.0811099897409,239.01740865528853L111.16357111291586,243.0786013491973L113.7734932239278,245.5270083988189L112.5451698365948,247.31000336512477L109.34981085488951,247.817649630507L108.05173508124838,249.90689155647055L106.85295934702668,255.9760931002545L104.35047093950084,257.33854812127265L103.68140566431296,262.9434826945878L105.82578405460794,263.4490798884352L105.72255192507126,266.25510623135756L102.33515331566258,267.4413692751424L72.76972972848046,263.90636019617557L71.48036019608674,261.58393428887433L72.43985233925702,255.3834056438281L69.68868205768541,249.70898971711762L65.553677639824,244.3443006765882L61.362815897175096,243.10114761910825L62.17571940687753,241.5833070773736L60.72862904068546,238.29714890991244L56.90832306028062,237.4479343339699L53.78064790556107,235.61271843089168L53.131792775624035,232.8339865793638L50.27544849488021,229.9879171538571L45.42380007458752,228.01101296751233L39.964402492072566,226.67066653320637L38.24035464940471,224.73740331553074L39.46137232199243,220.1329105739154L40.49950975491015,216.21806447300855L37.516589880320225,214.10695559940484L39.000611286122194,211.87308042300822L34.68644790620084,206.59239268624708L32.576445612947055,198.2653784419831L30.881531705693533,196.4743864440602L31.16268468961681,190.7754452176904L32.84543670336575,190.99795371900564L33.59433398897568,186.75008761676065L30.8600592719298,185.65312884511115L28.57738230157804,181.45265974414997L29.340334748091948,178.77645385974938L28.621802851415396,176.7519206330379L29.869326878093773,172.39471521867756L31.127904106151902,172.50620247426218L30.277708627471554,175.48843046675586L33.103052228824765,177.69426147278693L33.24334583500655,175.66845414377735L31.25411646056176,170.55771348485018L33.67317805829549,169.5924851799257L31.16064029485642,167.8845673651448L30.398156317856376,172.04978749451664L24.95828811446262,167.08304870616575L26.6123394775056,165.8263049578576L25.563955769938843,160.63193989932506L24.5419346537156,159.75098125200793L20.78571699053049,152.32765942107937L21.770248308794578,150.46515671390023L21.79555881612208,146.1559715892705L23.81029337681099,140.86909599922262L21.89258891146369,134.7249304644953L19.621932596841532,131.20371227512146L19.91902680203725,128.88445799242083L25.875713877026612,121.65665482035638L26.169315037138574,119.33917476076351L28.195819848719054,115.39314122957842L28.74069174135849,110.91412945607999L27.757019653058478,110.11556743451638Z"></path><text class="state__label" x="61.26901855723234" y="190.05892749028894" dx="0" dy="0">CA</text>\n        </g>\n        <g class="state state-AK">\n            <path class="state__path" d="M35.411081144045305,390.06618596799547L35.68794871373703,390.36730176044273L34.438071071648125,390.56077960406583L34.70891742019201,389.68699541441924ZM32.370287126933206,390.3654974043054L32.78567935427203,391.090346993681L33.74055009539988,390.7392001707922L32.7379553481911,391.9215499037807L34.161321487919686,391.4611470353563L33.938697671685006,392.0634837539874L32.655297789190975,392.35381690194527L31.823863516764142,393.17368256564407L30.854027900227514,392.95449505272643L29.018176836173836,393.64640967251364L28.423279589716287,393.24075066957437L28.952864024462265,392.8745588771239L30.81051742144502,392.6092947616593L31.230804890972784,391.6274392862272L32.09176145754443,391.79689904448617L31.021850551611003,390.99651450760143ZM27.292789208873508,393.22339648583045L26.199712134194804,394.05277693104597L24.321431698849764,394.7550678678194L25.998486137723376,392.9098314831004L26.756672593113144,393.0780998485791L26.7120866999675,392.2518648474037L28.06161973374161,391.75799739650245L28.747333701260658,392.2413659502359L28.50859528455502,392.8373025639201ZM-28.69383522064942,374.720620645607L-28.650818595133103,373.71044302659203L-27.375810971131287,374.40512561282117L-26.852619586107437,375.5593252290045L-28.556007640602743,375.1712546705741ZM9.326021783064675,394.38321081923254L11.18360610441291,395.3406668853551L9.462302361055457,395.11274357877005L8.19887724802117,394.5531320270071ZM117.92450010618691,366.0008151542765L118.98421325726153,365.82442268112123L119.42591174445742,365.24160441298847L120.48604181951566,365.7739697819302L121.95917115240263,365.95024667004304L122.26402187555162,366.984234199167L121.5634223376349,367.390720884523L120.10106121308627,366.9181835711892L121.31822570762446,367.6054999212369L122.33436583183992,367.2228256409062L123.10539554990854,368.4356173872255L122.59717615687057,368.8162535808983L120.53408305172215,368.08825421288395L121.23953720132579,369.1230591128237L120.49208164962141,369.7651786711993L117.87876398101793,367.70254344670724L117.67083649529789,366.9283592699089ZM122.57931567640327,364.9582163351938L123.72047980846784,364.6983606877349L125.22963163770225,366.92208632469425L123.83815056394772,365.4140753637237L123.59010739569868,365.6055316986715L125.62060761872905,367.84218813888737L125.58236885994256,368.72232362003615L124.3834249864585,370.6198748203794L123.96956894156696,369.59046050359507L124.21529661589233,368.6794824714863L122.9636041076562,367.2668168666666L122.32490119946604,365.4670750558167L121.38844475041975,364.01446650821066ZM66.13500513901504,384.0959424143753L66.42394521926109,385.04107781489876L65.589618965279,385.1028579284003ZM134.61845126880385,376.2092364300388L135.2420424938055,376.4005261434934L135.1343864418922,377.3724779492886ZM51.789486082339195,386.22432695339324L51.68144727960457,387.32173318117555L50.77413873881122,386.84230733518046L50.97218152547456,385.9480997647757ZM135.37789472222937,376.46975328275073L135.91304469316657,376.71970931802826L136.33446899985034,377.5939369948253L135.64318118217005,377.86638528290945ZM130.95712513198347,377.1792282250398L129.53171882535258,376.5086812520872L130.0544264014326,375.413468207149L129.52635981395412,374.45332347321823L129.11244171588888,375.1946609856643L128.0174948885613,375.1646011579462L128.39901767385868,373.97379385128636L128.00931223942655,373.08391825232616L129.22123298177365,372.84069672389L129.9446209520096,373.73739451916776L131.44989012661597,374.345026912913L132.25545726668122,375.4426943823799L133.21317369942483,375.9924049112604L132.2153147450689,375.9797625086947L133.91183289659344,377.0651202152083L134.3284442980551,376.98048518747265L135.1603012519232,379.72524831863046L134.33289749794082,379.9493907555288L133.7954051234841,379.025931875047L133.01116943165204,379.02746889025303L132.73643081824235,377.8697264801716L130.6866799614209,378.0494695749816ZM36.38389921554552,389.5396465688122L35.88738676120363,390.48651269751883L35.677732103486115,389.80627648610727ZM120.97265059984517,370.00308964944634L121.3584534504536,370.2670547996857L121.48994710398101,371.46446671975576L120.56662830987703,370.031226387412ZM75.11977115279785,374.35521831438336L75.04689019024842,375.46267581976446L75.93329203969247,375.32960647197416L75.36646761511726,376.3948569521851L73.67029446031682,375.95890359626964L74.77452605583993,376.6019007860935L73.80193271238363,378.0015805058023L72.40124467613322,378.2948199754948L70.99734250318039,379.9307158161955L70.38976601624562,379.9578184917203L70.99665358973834,379.0469864114658L71.19629959661748,378.0247377393597L69.98725768802389,379.40407690433784L69.2865362593537,378.68140888752464L69.29582750249325,377.57652444349816L68.50586212064667,376.7945654612196L69.31209117536692,375.6425013110789L70.20407598965082,375.20566835755386L71.29061661272674,375.565543245213L70.99303513509146,374.40527879479237L71.77731700766837,374.04365772293244L72.0772860757269,374.8986933686578L72.56550966276914,374.4248923146307L72.16597752238643,373.54370588012404L74.12834241064489,373.87820051833137L74.2345542922109,374.3185636426429L75.10095141596071,373.5538707551375ZM130.5251941808975,370.92911354598857L129.9351607301868,371.73609129927416L129.2056929001296,371.80084785156333L127.7869496277698,372.7199687875753L127.0831062491603,370.8284926343923L125.81676471049565,370.1536265696374L126.09356806499143,369.6915760825893L128.43613614340103,369.4376568120309L129.11101314882433,370.2050003941387ZM129.64223138707462,372.15200970081685L130.62930219732007,371.88399681161104L130.77647169350703,372.6496245961371L129.63645652230565,372.79280311959144ZM121.18644391699272,368.93706318858017L121.60155196711617,368.5879786532466L123.04077148372443,368.9159230904144L123.28387024974388,369.73718736934313L124.85877657088807,372.5532493411639L125.51741136039163,374.7477826965126L124.96206417947191,374.6832061412884L122.91349886561584,372.40707443029265L121.98330410152803,370.63440228783224L120.92757856613119,369.84356155872376ZM127.08931998883169,374.96182295648174L126.79354895224594,375.05277408482226L126.18671210047023,373.0736440933174L126.83711695629336,373.1041765315967L125.47493718796537,372.1362910268374L125.1131029269788,371.2938125432108L125.74689437602325,370.60885016663224L126.66929468605862,371.5371620887218L127.44956185940741,373.6940725944861L127.15584602753708,373.7856095276746ZM35.920838337762596,341.77656320655416L37.08884748925458,342.2434885620416L36.58123806730453,342.97824024635673L35.36955871856651,342.668565477498L34.6252698252642,343.6275013474869L34.31206433992612,342.7842842558915L33.54024987470925,342.0818527573397L33.105244746765756,341.0891061332609L32.24764135625725,340.44026250112256L30.97207971824767,340.7307328726894L30.26218799076939,339.56369387640103L31.094059442458928,338.703611282575L32.52253485722222,339.7127509869415L33.64043236336618,339.3158418429809L34.32765535245746,339.94367232431347L34.401581399546764,340.673129994245ZM86.98182965538943,359.32844662012826L86.64188305641737,361.5283502406622L86.24644447239761,361.23149638718706L86.39954272885856,359.911654282107ZM41.06998180130687,359.5743012486569L41.20550770473784,360.9188018694954L39.97366982339846,360.9784386736744L39.49359255814586,361.5368554733522L36.82304354989719,359.29731107516307L37.084222298453206,358.4753197269688L37.94902634086654,358.818236475367L38.593917333437275,358.3809607365789L40.30365555601159,358.1700425083009L41.186565343700316,358.9206685416705ZM84.71974096365093,362.7795078585996L83.23950867686796,362.78271467945L83.00281840738283,363.35445734688113L82.72926768698181,362.09806503695825L81.87883237948643,364.62269521362L81.31083004443809,364.49188510397937L80.18007061168457,365.99746210452923L80.06722447189529,365.6433966537179L78.62341546151517,366.90483330085675L77.58269316461814,366.8374070440622L77.22311640138963,367.32144368055054L76.07649776565,366.9167515087114L76.33031420211485,365.9957208254898L78.26121969219821,365.0656478637917L78.40139092888586,364.00737544512646L77.32168177062555,364.90968082538177L76.37160583743207,364.3615218872634L76.60249975234814,362.94230877677717L77.62930326693743,360.96648132174755L77.28793921114084,359.20804640004945L78.26482225198963,358.86283052397897L79.81295000064466,357.5121949270232L80.7421142324885,358.09646643417574L81.70410851501816,357.7034910477923L80.5757984593927,356.80391316437755L80.81179724670076,356.29093852301446L78.95324102635547,356.39344944763155L78.17486653391121,356.8454355612024L77.85023950569234,357.5794596722259L76.96764485900526,357.86367493529724L76.20720255554963,359.24629008444265L74.97527653531363,360.4712560073752L75.35224574916897,360.98738707137045L73.91539707370546,362.09875608932913L74.47449470252198,362.5304572491751L74.12564765323035,363.505956496968L73.30017854224859,363.93477327318374L73.21822386004786,364.71056276711255L71.35973985382896,365.44530663978196L71.45528080028768,366.053552037534L70.61117587157709,366.3033838997113L70.41870297877244,368.21147758851475L71.55648602226493,367.9063615036339L72.80137708487655,369.0862306050581L71.75812800709257,370.2837942391523L71.0858989248913,370.3136054505419L70.89407633169726,371.50271953700695L70.01678129465049,373.02133757362355L68.06012997028883,373.4163710728875L67.95268517652254,374.02286580898397L66.4692768684722,374.5183946952147L66.04479778745873,375.69642911669854L65.25652126813398,375.5634506186589L63.61707795629143,376.97153683519895L64.32350118299405,376.74908958756737L64.39508316658066,377.5532882258437L63.56292290347348,378.3517055647786L62.5455011277161,378.6131233681804L61.6912706623711,379.59609136365003L60.148760677434026,379.98434953932036L59.68320610901461,380.98054442607054L58.46343537457531,380.8765978371605L58.00774219251137,381.56545951960476L58.671520404090685,382.4114877990439L58.19724519946619,383.3484502009624L54.941350114409786,383.8520450979845L54.85902046194706,384.84170363173934L54.08876613857731,385.27440587361565L54.5044382315386,384.0920777771997L54.11453374355399,383.78146198440305L52.129736816314576,384.899954131216L51.75274552941784,385.5280029691301L50.736046223911586,385.17510720447694L49.70657021588272,385.92473234481616L48.87395676523835,385.80409899025517L49.536134247295536,384.60201616345813L48.70296378693325,384.53545238861255L47.4632297184286,386.97126618211234L45.94762006814172,387.1441290604257L45.60066269059642,385.70947433592437L45.61802653074881,387.212817712728L44.60914136645667,387.55206996787L44.21365168280776,386.5248104057083L44.19892564663978,387.4129705095405L43.037653469142924,388.0298943736271L42.26904458441553,388.86552632175784L40.454244020232736,388.6762715077008L39.565661598033884,389.4846338578121L38.289343739781856,389.2775730945866L38.23975865446995,388.26428385276785L39.0245390186884,388.1143940106203L40.09000029589271,386.86234220322376L40.27005120975426,387.0860334179027L42.074433116329885,386.5254312078033L42.69952180416544,386.6450113371874L43.3067203162116,387.6506108285076L43.483989136093086,386.39534526276935L44.79666427975809,386.1589942568616L44.8444748679873,385.8038175586195L45.84487956392843,385.46323491418514L45.915791341060086,384.9163344661519L46.998367454931646,383.8585527843527L48.25619887083053,382.9834005596608L49.8519491189347,382.6941196292177L50.52742624984098,383.18374727799574L51.161169020393714,384.1100053475608L51.2373509089273,383.3690594766905L52.77163143580396,383.6591412545427L51.98915711414138,383.1398867400768L52.568676886122645,381.4497398580343L54.32361876495242,380.2258480587107L55.69363784538381,379.70437659449357L56.86830401981436,378.96507819308994L57.6586911045996,379.2441771391951L57.7580071485285,377.83911759793114L58.63223941162539,376.79143028851536L60.910315200407624,375.3234816701807L60.63105084357212,375.0036152727394L61.069478165660634,372.3979942181493L61.658257664023054,372.31833534281714L61.120542846008696,371.4594022450556L61.553411483791265,370.5964506369754L62.65913501793257,369.62655757399403L62.60354761487327,368.76575714412525L59.76226081552257,369.9120345718168L58.76874856966779,368.9601349995161L59.0356793227837,367.8417782975588L58.22657825220156,368.5062645614543L57.94600649127231,369.73364830321134L58.180199809588196,370.4990392191862L57.28978775951863,370.7661353189403L56.391404953536956,368.7256487841134L55.59474852386684,367.96444279048546L55.1394976399545,368.7849682245928L54.25259459288753,368.00917321231697L53.95335378986013,367.1470379542889L51.32217631717333,368.5140671033875L50.06536958059678,369.37238101412953L50.177405396115816,366.79586585508537L49.6463092456039,365.67317912725645L50.726760828966746,364.5489842835569L49.99540382017898,362.0651126786037L49.49719416065295,360.8597856451883L50.04170036324757,358.7256392498206L49.07812745022153,360.5271130294745L49.016572057757,361.71862860620513L47.17393888624597,362.25262908552384L45.2168057370789,362.19177440136326L44.57304886202721,361.50531753774095L43.792639389970056,359.392510837004L43.01811255273648,359.04062408102516L42.50933395036465,357.69176088509454L43.33751922369113,357.1306338599585L43.701257884075225,356.0413989131384L43.09235262475433,355.88296205769075L43.54155775053148,355.369681770186L42.950692748902696,354.5958107709144L42.17348435980641,354.90949616271035L42.17721670061634,353.8707209455655L41.57935878493687,353.2009811863091L42.12586718882156,352.65333944724824L41.36187354518414,351.9518086877786L42.2626738966132,351.89109202380286L41.70926574261372,351.0315828741164L42.77123337345057,351.02665071149994L42.704331473288775,349.9192805099858L44.632165590900684,347.84114194831886L45.52954433903521,347.62592858153187L45.402116544991515,346.3164647967257L46.78533780893749,344.5810260029066L47.726777654851816,344.47561623450423L49.20758653811858,345.8657431832007L50.821996758187396,345.13764254982283L52.01687247561728,343.6197209029839L52.45012439397445,344.1461126708233L54.44718336481834,344.09746429752244L55.39900033089877,342.8928122403125L55.31624086898556,340.5530759399955L54.21197527840343,338.8781353631442L55.85057926908664,338.5007506090917L55.9069860888525,337.9521372706863L55.15641459039803,336.81927732882974L54.51829694679019,337.5806773412319L54.067269565556366,337.36262650542244L51.928399744332566,338.54465457589345L51.176565622310434,339.36372079396546L51.20396919074588,338.56021985975957L50.587559765882716,338.94934752537813L49.895124680836716,338.15512634848375L48.191402224169174,337.7321486428455L46.43149343238787,338.14565653621383L43.98088280992886,336.92770771710804L43.568916775887175,336.1206538859523L43.86741858744704,335.39155258685827L43.082404495098416,334.08960927440813L44.32726693524441,333.37518071349785L42.175587429520775,332.30607316984197L40.94007106818793,331.08918333018005L41.056293425887134,330.55108674854955L46.67880086076417,328.12811673954894L49.5736096184285,327.44473781600425L50.52977898702317,327.5366054473997L50.89143625065991,328.1180728200662L50.14885788022266,329.5631613529759L50.41817515901586,330.29852518649176L52.600577992321064,330.4383204866327L54.42256846228673,331.02734042285994L55.14616353191325,330.0044303665393L56.33499222088341,330.1351102003032L55.31361509863642,329.1937346802065L54.46584061409995,329.3990540408778L54.57366765213446,328.4988502553901L53.437725526588174,326.33722589218706L54.10212510394602,326.3114547023469L54.59653367915981,328.3079511593703L55.72525006394418,328.8529486222139L54.69123991752639,327.51728755735604L54.94384041520575,326.63525257736126L55.65494825812751,326.19311049962283L55.04406943989859,325.7907515857876L52.99383379888336,325.80813339372196L51.29183681644781,324.9035412616171L51.392073389360476,324.22554217708125L51.00859852870771,322.45034885842927L48.982329654109506,319.98741207856955L47.7294964245729,319.0713640918003L46.561454307766596,317.79500503768406L47.42213925748,317.3201197175462L48.018704021108505,315.2400941552389L49.592883419625096,315.6333473581936L51.64517675187594,315.6119480069516L52.960988376101355,314.984697204263L54.085296605384286,313.68850831150576L54.546709802633714,311.77821511248976L55.658673747892486,310.77692485249435L56.86797738449202,309.3445978174393L57.528672166106425,309.7213991827334L58.787740210314645,309.3138287962909L61.004599490477176,307.217651363215L61.606926906364464,307.48430793696275L64.24807237269067,307.1260406113492L66.45076822386602,304.753516666937L66.79902785930858,305.1970173999243L68.12583977615115,305.7481614822411L68.17559012236568,306.23397439624046L67.35088021866974,307.07403751084996L68.21283987984144,307.2859028784563L69.10275386344634,305.8751252447774L69.8921363187606,306.6654176052534L69.82349029789009,307.4464674825716L70.56752257421473,307.80134644496945L70.94067264043576,307.235336377353L72.17701556724612,306.9851014826829L73.85664745017404,307.3577903187684L73.51109472008208,308.5269008919642L74.65113276705195,308.8734511585972L74.5425107092121,309.4176785237459L76.54645031447254,309.0124375746113L77.75917902336045,309.2445777115409L79.06171204037044,308.8621112208471L81.0112623697066,309.4677809198724L81.82946568767312,310.04591978253376L85.36520145313978,310.07071540493234L86.6040875199337,310.64888404493774L87.57963417453321,310.6514481817882L89.22119852472186,309.47492963260623L90.89461206054914,309.7766509633314L93.56563081090565,311.0834715373992L94.37588643222485,311.1466537956674L103.73612921169075,358.31405024909816L104.8880919490524,358.4766714484191L104.88853469785752,358.0246998794281L106.36185286497256,358.3654742268329L106.90683617079554,357.4266369368489L108.31243989773989,357.0277456169854L108.44048437831607,358.4171409052344L109.81903709522093,359.06474351929626L110.13832022095377,359.61494688948153L113.44703493540092,361.74150493951737L114.32724473333272,363.2874871753062L115.56131550540027,361.6241365605812L116.19331630151119,361.4270531247949L116.06280703087327,359.85801890707336L116.30322838551349,358.9613956473093L118.1162413696197,357.5059783957947L119.52775157128116,358.36378850541064L120.12149617761054,359.7172517573508L121.51873298823278,360.1082093338815L122.5656130779067,361.2638377890472L123.6744631113499,361.6153441108722L125.42496665039332,362.68523874374114L125.21634275219728,362.98423288757823L126.8447177843797,364.55065455611685L130.2836792953504,367.68799121467885L130.19411509181884,368.3599375406842L131.0340830466868,368.33688818309747L131.1295317596257,369.2383161926747L132.01919609939245,369.34139200585827L132.45843519329253,370.2997123632247L133.1028843024893,369.9871892806626L134.72073724480487,370.5848165273116L136.73655207462082,370.73166640822086L136.91846184481886,371.22348003179314L137.82538048310295,371.0033261047685L138.48469193402607,371.87555180607455L138.41692680473366,372.57903710867424L138.92101932779613,373.92179608887795L139.75148095836852,374.934894580889L139.62349542553278,376.39656972995726L138.85698055142106,378.00291364150587L137.99841540953656,378.13979608680216L136.82653636015476,376.45292874797383L137.3146501964044,375.631912635802L136.5161534660947,374.04411040206725L136.8959845795848,375.4023396221272L136.61847155629076,376.49818492367797L135.45897895182623,376.3828308896237L134.41081309400207,375.9310451010803L134.67067986335746,375.40266990901745L133.94735163580586,373.9605807860247L133.32231365347818,375.6638822802469L132.70622403200866,374.8246760875225L133.17813690634918,373.32186867720844L132.78400392884285,372.4944712544237L132.68976016168187,373.8102942527022L132.01121195521932,374.3897910231541L130.66868385312705,372.97627371528506L131.49262829546257,372.2057634395649L131.00795788202845,371.4078066915702L131.24247121498,370.51253999822956L129.34701713139594,369.95293558656175L128.9747607023658,369.14503392455106L126.82069267166412,368.9994632942194L127.04440652227527,368.05824028329044L125.98502672547099,366.36573535740735L124.23140821652814,365.032586466561L123.84130921900098,364.42976638119586L122.4680570217794,364.5875088770784L120.32840761364182,362.1064990466158L119.11171726186959,359.95408199815745L118.85553411670728,360.0852951754083L119.68648915299656,361.94719467257846L120.630601964644,363.141783272619L121.42923056082824,365.1839813653178L120.61357048900786,365.1619962130651L119.60284771860265,364.4446164690265L118.83309502523234,364.91945831262706L118.61410161721693,363.77491359447106L117.96367420273396,362.865007461817L117.48414842532239,363.2836645148685L115.30738649652993,362.5203061242888L115.34826863784662,363.05274200556335L116.63091546542606,363.05638244270546L117.63720116015755,363.8438506820707L118.55361870416837,364.9970350370685L117.34097873680508,365.70018755256723L117.09467250258652,366.28118332951163L113.19339044021766,364.2559899456004L113.06092615457072,363.7189868351813L111.92811698715172,363.0842433577799L108.28995076404905,361.9942618788337L107.2398998814802,361.57219370748896L107.99591657593777,361.0960345913445L107.35613661728485,359.4805557722534L107.18524844088935,359.99910950407485L106.16143992896025,360.98128030640953L104.38723974255922,361.1179700502641L102.9708934163443,360.6332866280355L103.03760245211052,360.00081007105587L102.17295634386072,360.389886224264L99.3323993631679,360.19386584169166L96.69930072210208,361.20787714806556L96.06620472595444,360.71629612428023L93.83892464821466,360.0300963060977L93.9999627721225,359.1979626134467L92.7202413053717,359.9287911318542L92.1977395723625,359.43846343760674L91.19874439739425,359.50750791238204L91.69892114922956,358.38629320437707L90.83228464630355,358.7437513069565L90.58720213174831,358.21585585802893L89.26215582864934,358.5353941718822L89.46000109134792,357.8730450156099L88.83975906292883,357.1625324815512L87.36825266005128,357.73376230379614L86.73141367478078,356.740148041397L86.84596345246942,357.9241340875944L85.44478422960105,358.38696028297204L85.84653282421397,356.85113085798L85.22498930539234,356.9066901353381L85.14499005593598,358.0521113604564L84.30186454290417,358.7611470116887L85.27514591140678,358.5128790901914L85.39974019817166,359.9460183788427L85.62225488818066,359.37107547264293L86.15589667565709,360.2396961998474L85.24829234978361,361.37517690692096L85.79554818198662,361.32759957048813L85.78440220765705,362.24505855101285ZM7.447345873935042,393.1390373625458L8.094693269387605,392.594835827655L8.488770295794268,393.2354557360493L7.994053742351973,394.0584782871932L6.764798492018315,394.1601975338476L4.672568057938747,393.569593942585L6.095176736160582,393.62908038653626ZM-16.96211309109019,385.19276748307897L-17.28262794852995,385.61926796991406L-18.393743270352473,385.2893730872669ZM-2.5619874641443516,392.7067519838557L-1.8707548723737801,391.82107295031733L-1.2988605704974105,392.26218299761547L-2.0584221616016123,393.0074616403297ZM-3.889224134478326,391.9806206745755L-4.540955694166016,392.73126127195803L-4.98492788366751,391.94775930931826L-4.320107128164835,391.81856405548194L-5.024176666473451,391.0819113742351L-4.05875425215622,391.12594126377803ZM-0.6971585461443368,392.62420876167346L0.28859966877097065,392.2470955320776L0.0053162328135698544,393.04859154627707L0.935886177657423,393.1718222718678L0.7193003831233682,393.79314804935734L-0.12258889027954467,393.41047449932853L-1.5129429241712842,393.8750864911435L-1.1141656377073872,392.7659401342238ZM75.65008430917052,372.12978901146266L75.56897150338723,372.74034906067993L73.6324819679275,373.4994616686254L72.35765294166774,373.07226848384676L73.31634337462904,371.8452001299071L73.8999657206837,371.97447996602466L74.35366810729451,370.3898731238234L75.21168330259057,370.09429502109765L74.85208776578058,371.18142424381784L76.21570052777243,371.56058370540006L75.95450279978311,372.59156024155874ZM90.4800847010427,359.6214060425802L90.26113274828,359.31278004807666L91.40150834650517,358.92517963329897ZM24.819648911327803,355.15344305855484L24.14016623790831,354.873125912776L23.505463910524774,353.79543828415467L24.852631074567093,354.7027179476888ZM89.60935354459983,360.8349256331364L89.18245969391032,360.29757194190466L89.64572069317883,359.5224786668197L90.79343812512033,359.94647114403676ZM86.64758876463122,363.5837638064338L86.52228086472272,363.2341622509712L88.15096128947587,360.96333433951435L88.7819685989424,360.84165804370343L87.88934774032772,362.0187868435991L87.61241424182009,362.963747736375ZM51.78612932455559,369.566240407058L51.96430121399737,368.80666559976584L52.97573267547563,368.32842396001394L52.47009930559632,369.49959076226696ZM133.18580260674352,380.5663724375162L131.42212441122834,379.63670659848526L130.76286905621004,378.2856001953288L131.02984558652105,378.0833183868766Z"></path><text class="state__label" x="74.52767912239584" y="342.5884195357982" dx="0" dy="0">AK</text>\n        </g>\n        <g class="state state-NV">\n            <path class="state__path" d="M121.73454647763717,206.52587106900432L120.30704573162268,218.39386181889586L118.5645637154569,220.7291237519645L116.40517484319585,218.52822808402357L111.7476447844407,218.09345412571201L111.87928557203668,221.7663149568649L110.65369814658942,227.92232353017152L111.38538399970341,230.82110252449752L109.80302763166753,234.39385716612674L105.48960734581868,227.6113691679558L96.17074663809393,214.05198554232334L93.00685303096012,208.73017638267015L81.69267005071578,192.3211578819206L62.82610427106681,163.79962144618287L62.27561121883781,162.67271673936295L73.40315415766264,119.52870743348763L98.40855796086129,125.64667056492578L104.89079611759209,127.04403142416152L125.85169145271195,131.6077161168829L136.5661726115712,133.72401756532827L127.39898267315982,181.46240782817745L126.1603310122573,183.57211137535546Z"></path><text class="state__label" x="100.32380875333739" y="166.61780612678226" dx="0" dy="0">NV</text>\n        </g>\n        <g class="state state-OR">\n            <path class="state__path" d="M104.89079611759209,127.04403142416152L98.40855796086129,125.64667056492578L73.40315415766264,119.52870743348763L57.19700375258452,115.20822934171997L29.106016192856487,107.04474912414764L27.923737989832432,101.62137300860729L29.789850461893536,96.88954003119477L29.338890571302784,94.42854069182044L34.379212008510365,87.20104945418939L37.68857057070028,81.5966496817997L40.30962053602207,74.30030208918731L42.15064216826522,68.26007529113713L44.9798441706817,64.09227325419283L47.83584588317075,54.67097604861351L49.73854030298236,49.65965338545766L54.18920361399313,48.863508034831284L56.17982341819783,51.17557361661238L57.764813415128685,50.98694867789402L60.23521414317878,55.638073087948555L59.65454769529515,60.302493140939305L63.99795152866017,62.60964056489354L68.88760989813301,61.612563416578496L71.83981177187343,62.021860435573444L77.57026760011138,64.88464638929281L81.14782032689618,64.37234731137232L84.67852201304308,65.46277984264111L98.16508392756762,64.74556810695003L118.90846028075359,69.70268188828663L119.42185800856399,72.47632034789194L121.7395683358751,73.95537985364035L121.88863008110889,76.72755085310291L118.55797126151637,79.7842072248418L117.61475806906114,82.3192538331408L114.62514753116548,87.14636943631729L113.07675299178305,87.20267806596848L110.74109990087516,90.71981727525474L110.11151238766047,93.49183334541522L113.06164972048381,95.85695459631813L110.93317666822315,100.1580394535473Z"></path><text class="state__label" x="74.66908439382814" y="90.271958825749" dx="0" dy="0">OR</text>\n        </g>\n        <g class="state state-ID">\n            <path class="state__path" d="M168.4628162690703,139.25174895062878L142.30059514974215,134.88907238057277L136.5661726115712,133.72401756532827L125.85169145271195,131.6077161168829L104.89079611759209,127.04403142416152L110.93317666822315,100.1580394535473L113.06164972048381,95.85695459631813L110.11151238766047,93.49183334541522L110.74109990087516,90.71981727525474L113.07675299178305,87.20267806596848L114.62514753116548,87.14636943631729L117.61475806906114,82.3192538331408L118.55797126151637,79.7842072248418L121.88863008110889,76.72755085310291L121.7395683358751,73.95537985364035L119.42185800856399,72.47632034789194L118.90846028075359,69.70268188828663L118.2210316482145,64.39340150438863L126.78655647245782,26.41462203703179L136.38858131747583,28.526919335244884L133.25103958630228,43.157731748241986L135.59793642892873,49.32924796057648L135.06921706615523,50.097154535500295L136.78066133424545,54.21399671312804L138.22987783816242,56.11373981198017L141.11479024283227,61.90163339378887L143.47388623235432,64.93415903961932L146.68864461896075,65.56723918271257L143.95601929578967,71.91334321225565L143.02344723662287,72.85094744365233L143.78354908867223,76.60654469204746L141.6710067049426,77.79409442216831L141.07509471520314,80.8051148581576L143.30051408411902,82.9276296441002L147.13950969565516,80.62297959696002L148.8228244789284,81.6650832996346L148.40999201259393,85.83474421280778L150.97608779612176,90.32492645084744L150.45761345311905,93.11585640700571L153.52768583222064,95.04426480033919L154.103533341064,100.28222149100577L155.00563844728845,101.64815996049117L156.87695368208261,99.73690761475677L160.44500057757648,101.16654128321397L160.6751480853126,99.8444155042323L166.15318505460365,101.26252151218466L169.67093200027622,100.72794853215021L171.19046901498194,98.41851118308148L174.2167035711565,103.22469822096127Z"></path><text class="state__label" x="136.9954408178304" y="98.25510136256071" dx="0" dy="0">ID</text>\n        </g>\n        <g class="state state-WA">\n            <path class="state__path" d="M72.55279958383761,23.314894389615347L71.27020088651324,23.92079596551548L72.8928631381238,27.307659442416025L72.40103296671936,29.03532513110804L70.49371649210104,26.62124302813777L70.05586247336282,23.002270440582038L71.30022112574142,21.251066058527954ZM118.90846028075359,69.70268188828663L98.16508392756762,64.74556810695003L84.67852201304308,65.46277984264111L81.14782032689618,64.37234731137232L77.57026760011138,64.88464638929281L71.83981177187343,62.021860435573444L68.88760989813301,61.612563416578496L63.99795152866017,62.60964056489354L59.65454769529515,60.302493140939305L60.23521414317878,55.638073087948555L57.764813415128685,50.98694867789402L56.17982341819783,51.17557361661238L54.18920361399313,48.863508034831284L49.13447733771659,46.60213492858361L50.18630152215076,43.14651490437893L53.33142277997359,41.55744764834628L50.61534021566791,40.48816045435797L51.000105966665956,37.981768749784806L53.912503277951146,38.37425744255779L51.31759293630097,35.702002046556004L51.199008961961,31.160291797041623L51.757471124063784,25.684517521481666L50.640337792938396,20.8394449604765L51.58747069926869,15.413540943135331L58.38602816797061,21.094711806932196L69.76929468195823,25.275046689888768L69.13771152325643,28.750478729236647L66.20485508989839,31.156176773087736L70.9412466624517,28.943537176790414L67.72874880624045,37.54262126769959L66.12608036174657,36.59187782679567L65.1043780170516,38.82378246928715L67.38291919492207,38.74705550535077L68.29130374788997,36.889445280736595L70.15280017079345,36.93275576376186L70.64123459512064,32.597288280007206L74.26461616439326,27.69704884304167L71.88700186350763,25.640314477607376L72.08246207484285,23.667006541994283L73.91852103093981,23.70480208884169L71.37054803421046,19.729894040540557L73.64435170030367,20.788690066921845L74.46176127877811,16.647497165092545L72.32140032169934,16.43708527065337L73.06341815133976,12.601820824031961L82.50156673627623,15.357934933075967L106.97063046144333,21.71679436188731L126.78655647245782,26.41462203703179L118.2210316482145,64.39340150438863Z"></path><text class="state__label" x="88.47237606116714" y="41.474872557246435" dx="0" dy="0">WA</text>\n        </g>\n        <g class="state state-AZ">\n            <path class="state__path" d="M179.89214600455077,216.14113872123414L168.3903363735582,299.4330422485704L143.0284991847331,295.65219356919465L122.31972977217839,283.71531186744727L100.38024615674487,270.44231838937844L102.33515331566258,267.4413692751424L105.72255192507126,266.25510623135756L105.82578405460794,263.4490798884352L103.68140566431296,262.9434826945878L104.35047093950084,257.33854812127265L106.85295934702668,255.9760931002545L108.05173508124838,249.90689155647055L109.34981085488951,247.817649630507L112.5451698365948,247.31000336512477L113.7734932239278,245.5270083988189L111.16357111291586,243.0786013491973L111.0811099897409,239.01740865528853L109.41613036508312,236.341045231002L109.80302763166753,234.39385716612674L111.38538399970341,230.82110252449752L110.65369814658942,227.92232353017152L111.87928557203668,221.7663149568649L111.7476447844407,218.09345412571201L116.40517484319585,218.52822808402357L118.5645637154569,220.7291237519645L120.30704573162268,218.39386181889586L121.73454647763717,206.52587106900432L134.88719819192482,208.9795339894871L163.33065217409185,213.80687806815433Z"></path><text class="state__label" x="143.08769040231576" y="251.47184091430907" dx="0" dy="0">AZ</text>\n        </g>\n    </g>\n    <g class="state-boxes" transform="translate(645, 85)">\n        <g class="state-box-VT" transform="translate(0, 0)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">VT</text>\n        </g>\n        <g class="state-box-NH" transform="translate(0, 27)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">NH</text>\n        </g>\n        <g class="state-box-MA" transform="translate(0, 54)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">MA</text>\n        </g>\n        <g class="state-box-RI" transform="translate(0, 81)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">RI</text>\n        </g>\n        <g class="state-box-CT" transform="translate(0, 108)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">CT</text>\n        </g>\n        <g class="state-box-NJ" transform="translate(0, 135)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">NJ</text>\n        </g>\n        <g class="state-box-DE" transform="translate(0, 162)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">DE</text>\n        </g>\n        <g class="state-box-MD" transform="translate(0, 189)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">MD</text>\n        </g>\n        <g class="state-box-DC" transform="translate(0, 216)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">DC</text>\n        </g>\n        <g class="state-box-PR" transform="translate(0, 243)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">PR</text>\n        </g>\n        <g class="state-box-PW" transform="translate(0, 270)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">PW</text>\n        </g>\n    </g>\n</svg>'},function(t,e,n){t.exports={active:"src-views-map-view--active",mapContainer:"src-views-map-view--mapContainer",legendContainer:"src-views-map-view--legendContainer",legendWrapper:"src-views-map-view--legendWrapper",tick:"src-views-map-view--tick",gradient:"src-views-map-view--gradient",hover:"src-views-map-view--hover"}},function(t,e,n){
/**
 * chroma.js - JavaScript library for color conversions
 *
 * Copyright (c) 2011-2018, Gregor Aisch
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -------------------------------------------------------
 *
 * chroma.js includes colors from colorbrewer2.org, which are released under
 * the following license:
 *
 * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,
 * and The Pennsylvania State University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * ------------------------------------------------------
 *
 * Named colors are taken from X11 Color Names.
 * http://www.w3.org/TR/css3-color/#svg-color
 *
 * @preserve
 */
t.exports=function(){"use strict";for(var t=function(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=1),t<e?e:t>n?n:t},e={},n=0,r=["Boolean","Number","String","Function","Array","Date","RegExp","Undefined","Null"];n<r.length;n+=1){var i=r[n];e["[object "+i+"]"]=i.toLowerCase()}var a=function(t){return e[Object.prototype.toString.call(t)]||"object"},o=Math.PI,s={clip_rgb:function(e){e._clipped=!1,e._unclipped=e.slice(0);for(var n=0;n<=3;n++)n<3?((e[n]<0||e[n]>255)&&(e._clipped=!0),e[n]=t(e[n],0,255)):3===n&&(e[n]=t(e[n],0,1));return e},limit:t,type:a,unpack:function(t,e){return void 0===e&&(e=null),t.length>=3?Array.prototype.slice.call(t):"object"==a(t[0])&&e?e.split("").filter(function(e){return void 0!==t[0][e]}).map(function(e){return t[0][e]}):t[0]},last:function(t){if(t.length<2)return null;var e=t.length-1;return"string"==a(t[e])?t[e].toLowerCase():null},PI:o,TWOPI:2*o,PITHIRD:o/3,DEG2RAD:o/180,RAD2DEG:180/o},u={format:{},autodetect:[]},c=s.last,l=s.clip_rgb,f=s.type,p=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if("object"===f(t[0])&&t[0].constructor&&t[0].constructor===this.constructor)return t[0];var n=c(t),r=!1;if(!n){r=!0,u.sorted||(u.autodetect=u.autodetect.sort(function(t,e){return e.p-t.p}),u.sorted=!0);for(var i=0,a=u.autodetect;i<a.length;i+=1){var o=a[i];if(n=o.test.apply(o,t))break}}if(!u.format[n])throw new Error("unknown format: "+t);var s=u.format[n].apply(null,r?t:t.slice(0,-1));this._rgb=l(s),3===this._rgb.length&&this._rgb.push(1)};p.prototype.toString=function(){return"function"==f(this.hex)?this.hex():"["+this._rgb.join(",")+"]"};var d=p,h=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(h.Color,[null].concat(t)))};h.Color=d,h.version="2.0.3";var L=h,v=s.unpack,y=Math.max,m=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=v(t,"rgb"),r=n[0],i=n[1],a=n[2],o=1-y(r/=255,y(i/=255,a/=255)),s=o<1?1/(1-o):0,u=(1-r-o)*s,c=(1-i-o)*s,l=(1-a-o)*s;return[u,c,l,o]},g=s.unpack,b=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=(t=g(t,"cmyk"))[0],r=t[1],i=t[2],a=t[3],o=t.length>4?t[4]:1;return 1===a?[0,0,0,o]:[n>=1?0:255*(1-n)*(1-a),r>=1?0:255*(1-r)*(1-a),i>=1?0:255*(1-i)*(1-a),o]},_=s.unpack,w=s.type;d.prototype.cmyk=function(){return m(this._rgb)},L.cmyk=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["cmyk"])))},u.format.cmyk=b,u.autodetect.push({p:2,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=_(t,"cmyk"),"array"===w(t)&&4===t.length)return"cmyk"}});var x=s.unpack,k=s.last,O=function(t){return Math.round(100*t)/100},E=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=x(t,"hsla"),r=k(t)||"lsa";return n[0]=O(n[0]||0),n[1]=O(100*n[1])+"%",n[2]=O(100*n[2])+"%","hsla"===r||n.length>3&&n[3]<1?(n[3]=n.length>3?n[3]:1,r="hsla"):n.length=3,r+"("+n.join(",")+")"},S=s.unpack,M=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=(t=S(t,"rgba"))[0],r=t[1],i=t[2];n/=255,r/=255,i/=255;var a,o,s=Math.min(n,r,i),u=Math.max(n,r,i),c=(u+s)/2;return u===s?(a=0,o=Number.NaN):a=c<.5?(u-s)/(u+s):(u-s)/(2-u-s),n==u?o=(r-i)/(u-s):r==u?o=2+(i-n)/(u-s):i==u&&(o=4+(n-r)/(u-s)),(o*=60)<0&&(o+=360),t.length>3&&void 0!==t[3]?[o,a,c,t[3]]:[o,a,c]},C=s.unpack,A=s.last,j=Math.round,P=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=C(t,"rgba"),r=A(t)||"rgb";return"hsl"==r.substr(0,3)?E(M(n),r):(n[0]=j(n[0]),n[1]=j(n[1]),n[2]=j(n[2]),("rgba"===r||n.length>3&&n[3]<1)&&(n[3]=n.length>3?n[3]:1,r="rgba"),r+"("+n.slice(0,"rgb"===r?3:4).join(",")+")")},T=/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/,D=/^#?([A-Fa-f0-9]{8})$/,I=function(t){if(t.match(T)){4!==t.length&&7!==t.length||(t=t.substr(1)),3===t.length&&(t=(t=t.split(""))[0]+t[0]+t[1]+t[1]+t[2]+t[2]);var e=parseInt(t,16),n=e>>16,r=e>>8&255,i=255&e;return[n,r,i,1]}if(t.match(D)){9===t.length&&(t=t.substr(1));var a=parseInt(t,16),o=a>>24&255,s=a>>16&255,u=a>>8&255,c=Math.round((255&a)/255*100)/100;return[o,s,u,c]}throw new Error("unknown hex color: "+t)},R=s.unpack,N=Math.round,H=function(){for(var t,e=[],n=arguments.length;n--;)e[n]=arguments[n];var r,i,a,o=(e=R(e,"hsl"))[0],s=e[1],u=e[2];if(0===s)r=i=a=255*u;else{var c=[0,0,0],l=[0,0,0],f=u<.5?u*(1+s):u+s-u*s,p=2*u-f,d=o/360;c[0]=d+1/3,c[1]=d,c[2]=d-1/3;for(var h=0;h<3;h++)c[h]<0&&(c[h]+=1),c[h]>1&&(c[h]-=1),6*c[h]<1?l[h]=p+6*(f-p)*c[h]:2*c[h]<1?l[h]=f:3*c[h]<2?l[h]=p+(f-p)*(2/3-c[h])*6:l[h]=p;t=[N(255*l[0]),N(255*l[1]),N(255*l[2])],r=t[0],i=t[1],a=t[2]}return e.length>3?[r,i,a,e[3]]:[r,i,a,1]},W={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflower:"#6495ed",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",laserlemon:"#ffff54",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrod:"#fafad2",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",maroon2:"#7f0000",maroon3:"#b03060",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",purple2:"#7f007f",purple3:"#a020f0",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"},B=/^rgb\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*\)$/,Z=/^rgba\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*,\s*([01]|[01]?\.\d+)\)$/,F=/^rgb\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/,q=/^rgba\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/,z=/^hsl\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/,U=/^hsla\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/,V=Math.round,Y=function(t){if(t=t.toLowerCase().trim(),W[t])return I(W[t]);var e;if(e=t.match(B)){for(var n=e.slice(1,4),r=0;r<3;r++)n[r]=+n[r];return n[3]=1,n}if(e=t.match(Z)){for(var i=e.slice(1,5),a=0;a<4;a++)i[a]=+i[a];return i}if(e=t.match(F)){for(var o=e.slice(1,4),s=0;s<3;s++)o[s]=V(2.55*o[s]);return o[3]=1,o}if(e=t.match(q)){for(var u=e.slice(1,5),c=0;c<3;c++)u[c]=V(2.55*u[c]);return u[3]=+u[3],u}if(e=t.match(z)){var l=e.slice(1,4);l[1]*=.01,l[2]*=.01;var f=H(l);return f[3]=1,f}if(e=t.match(U)){var p=e.slice(1,4);p[1]*=.01,p[2]*=.01;var d=H(p);return d[3]=+e[4],d}};Y.test=function(t){return B.test(t)||Z.test(t)||F.test(t)||q.test(t)||z.test(t)||U.test(t)};var G=Y,X=s.type;d.prototype.css=function(t){return P(this._rgb,t)},L.css=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["css"])))},u.format.css=G,u.autodetect.push({p:5,test:function(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];if(!e.length&&"string"===X(t)&&G.test(t))return"css"}});var $=s.unpack;u.format.gl=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=$(t,"rgba");return n[0]*=255,n[1]*=255,n[2]*=255,n},L.gl=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["gl"])))},d.prototype.gl=function(){var t=this._rgb;return[t[0]/255,t[1]/255,t[2]/255,t[3]]};var K=s.unpack,J=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n,r=K(t,"rgb"),i=r[0],a=r[1],o=r[2],s=Math.min(i,a,o),u=Math.max(i,a,o),c=u-s,l=100*c/255,f=s/(255-c)*100;return 0===c?n=Number.NaN:(i===u&&(n=(a-o)/c),a===u&&(n=2+(o-i)/c),o===u&&(n=4+(i-a)/c),(n*=60)<0&&(n+=360)),[n,l,f]},Q=s.unpack,tt=Math.floor,et=function(){for(var t,e,n,r,i,a,o=[],s=arguments.length;s--;)o[s]=arguments[s];var u,c,l,f=(o=Q(o,"hcg"))[0],p=o[1],d=o[2];d*=255;var h=255*p;if(0===p)u=c=l=d;else{360===f&&(f=0),f>360&&(f-=360),f<0&&(f+=360);var L=tt(f/=60),v=f-L,y=d*(1-p),m=y+h*(1-v),g=y+h*v,b=y+h;switch(L){case 0:u=(t=[b,g,y])[0],c=t[1],l=t[2];break;case 1:u=(e=[m,b,y])[0],c=e[1],l=e[2];break;case 2:u=(n=[y,b,g])[0],c=n[1],l=n[2];break;case 3:u=(r=[y,m,b])[0],c=r[1],l=r[2];break;case 4:u=(i=[g,y,b])[0],c=i[1],l=i[2];break;case 5:u=(a=[b,y,m])[0],c=a[1],l=a[2]}}return[u,c,l,o.length>3?o[3]:1]},nt=s.unpack,rt=s.type;d.prototype.hcg=function(){return J(this._rgb)},L.hcg=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["hcg"])))},u.format.hcg=et,u.autodetect.push({p:1,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=nt(t,"hcg"),"array"===rt(t)&&3===t.length)return"hcg"}});var it=s.unpack,at=s.last,ot=Math.round,st=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=it(t,"rgba"),r=n[0],i=n[1],a=n[2],o=n[3],s=at(t)||"auto";void 0===o&&(o=1),"auto"===s&&(s=o<1?"rgba":"rgb"),r=ot(r),i=ot(i),a=ot(a);var u=r<<16|i<<8|a,c="000000"+u.toString(16);c=c.substr(c.length-6);var l="0"+ot(255*o).toString(16);switch(l=l.substr(l.length-2),s.toLowerCase()){case"rgba":return"#"+c+l;case"argb":return"#"+l+c;default:return"#"+c}},ut=s.type;d.prototype.hex=function(t){return st(this._rgb,t)},L.hex=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["hex"])))},u.format.hex=I,u.autodetect.push({p:4,test:function(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];if(!e.length&&"string"===ut(t)&&[3,4,6,7,8,9].includes(t.length))return"hex"}});var ct=s.unpack,lt=s.TWOPI,ft=Math.min,pt=Math.sqrt,dt=Math.acos,ht=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n,r=ct(t,"rgb"),i=r[0],a=r[1],o=r[2],s=ft(i/=255,a/=255,o/=255),u=(i+a+o)/3,c=u>0?1-s/u:0;return 0===c?n=NaN:(n=(i-a+(i-o))/2,n/=pt((i-a)*(i-a)+(i-o)*(a-o)),n=dt(n),o>a&&(n=lt-n),n/=lt),[360*n,c,u]},Lt=s.unpack,vt=s.limit,yt=s.TWOPI,mt=s.PITHIRD,gt=Math.cos,bt=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n,r,i,a=(t=Lt(t,"hsi"))[0],o=t[1],s=t[2];return isNaN(a)&&(a=0),isNaN(o)&&(o=0),a>360&&(a-=360),a<0&&(a+=360),(a/=360)<1/3?(i=(1-o)/3,n=(1+o*gt(yt*a)/gt(mt-yt*a))/3,r=1-(i+n)):a<2/3?(n=(1-o)/3,r=(1+o*gt(yt*(a-=1/3))/gt(mt-yt*a))/3,i=1-(n+r)):(r=(1-o)/3,i=(1+o*gt(yt*(a-=2/3))/gt(mt-yt*a))/3,n=1-(r+i)),n=vt(s*n*3),r=vt(s*r*3),i=vt(s*i*3),[255*n,255*r,255*i,t.length>3?t[3]:1]},_t=s.unpack,wt=s.type;d.prototype.hsi=function(){return ht(this._rgb)},L.hsi=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["hsi"])))},u.format.hsi=bt,u.autodetect.push({p:2,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=_t(t,"hsi"),"array"===wt(t)&&3===t.length)return"hsi"}});var xt=s.unpack,kt=s.type;d.prototype.hsl=function(){return M(this._rgb)},L.hsl=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["hsl"])))},u.format.hsl=H,u.autodetect.push({p:2,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=xt(t,"hsl"),"array"===kt(t)&&3===t.length)return"hsl"}});var Ot=s.unpack,Et=Math.min,St=Math.max,Mt=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n,r,i,a=(t=Ot(t,"rgb"))[0],o=t[1],s=t[2],u=Et(a,o,s),c=St(a,o,s),l=c-u;return i=c/255,0===c?(n=Number.NaN,r=0):(r=l/c,a===c&&(n=(o-s)/l),o===c&&(n=2+(s-a)/l),s===c&&(n=4+(a-o)/l),(n*=60)<0&&(n+=360)),[n,r,i]},Ct=s.unpack,At=Math.floor,jt=function(){for(var t,e,n,r,i,a,o=[],s=arguments.length;s--;)o[s]=arguments[s];var u,c,l,f=(o=Ct(o,"hsv"))[0],p=o[1],d=o[2];if(d*=255,0===p)u=c=l=d;else{360===f&&(f=0),f>360&&(f-=360),f<0&&(f+=360);var h=At(f/=60),L=f-h,v=d*(1-p),y=d*(1-p*L),m=d*(1-p*(1-L));switch(h){case 0:u=(t=[d,m,v])[0],c=t[1],l=t[2];break;case 1:u=(e=[y,d,v])[0],c=e[1],l=e[2];break;case 2:u=(n=[v,d,m])[0],c=n[1],l=n[2];break;case 3:u=(r=[v,y,d])[0],c=r[1],l=r[2];break;case 4:u=(i=[m,v,d])[0],c=i[1],l=i[2];break;case 5:u=(a=[d,v,y])[0],c=a[1],l=a[2]}}return[u,c,l,o.length>3?o[3]:1]},Pt=s.unpack,Tt=s.type;d.prototype.hsv=function(){return Mt(this._rgb)},L.hsv=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["hsv"])))},u.format.hsv=jt,u.autodetect.push({p:2,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=Pt(t,"hsv"),"array"===Tt(t)&&3===t.length)return"hsv"}});var Dt={Kn:18,Xn:.95047,Yn:1,Zn:1.08883,t0:.137931034,t1:.206896552,t2:.12841855,t3:.008856452},It=s.unpack,Rt=Math.pow,Nt=function(t){return(t/=255)<=.04045?t/12.92:Rt((t+.055)/1.055,2.4)},Ht=function(t){return t>Dt.t3?Rt(t,1/3):t/Dt.t2+Dt.t0},Wt=function(t,e,n){t=Nt(t),e=Nt(e),n=Nt(n);var r=Ht((.4124564*t+.3575761*e+.1804375*n)/Dt.Xn),i=Ht((.2126729*t+.7151522*e+.072175*n)/Dt.Yn),a=Ht((.0193339*t+.119192*e+.9503041*n)/Dt.Zn);return[r,i,a]},Bt=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=It(t,"rgb"),r=n[0],i=n[1],a=n[2],o=Wt(r,i,a),s=o[0],u=o[1],c=o[2],l=116*u-16;return[l<0?0:l,500*(s-u),200*(u-c)]},Zt=s.unpack,Ft=Math.pow,qt=function(t){return 255*(t<=.00304?12.92*t:1.055*Ft(t,1/2.4)-.055)},zt=function(t){return t>Dt.t1?t*t*t:Dt.t2*(t-Dt.t0)},Ut=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n,r,i,a,o,s,u=(t=Zt(t,"lab"))[0],c=t[1],l=t[2];return r=(u+16)/116,n=isNaN(c)?r:r+c/500,i=isNaN(l)?r:r-l/200,r=Dt.Yn*zt(r),n=Dt.Xn*zt(n),i=Dt.Zn*zt(i),a=qt(3.2404542*n-1.5371385*r-.4985314*i),o=qt(-.969266*n+1.8760108*r+.041556*i),s=qt(.0556434*n-.2040259*r+1.0572252*i),[a,o,s,t.length>3?t[3]:1]},Vt=s.unpack,Yt=s.type;d.prototype.lab=function(){return Bt(this._rgb)},L.lab=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["lab"])))},u.format.lab=Ut,u.autodetect.push({p:2,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=Vt(t,"lab"),"array"===Yt(t)&&3===t.length)return"lab"}});var Gt=s.unpack,Xt=s.RAD2DEG,$t=Math.sqrt,Kt=Math.atan2,Jt=Math.round,Qt=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=Gt(t,"lab"),r=n[0],i=n[1],a=n[2],o=$t(i*i+a*a),s=(Kt(a,i)*Xt+360)%360;return 0===Jt(1e4*o)&&(s=Number.NaN),[r,o,s]},te=s.unpack,ee=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=te(t,"rgb"),r=n[0],i=n[1],a=n[2],o=Bt(r,i,a),s=o[0],u=o[1],c=o[2];return Qt(s,u,c)},ne=s.unpack,re=s.DEG2RAD,ie=Math.sin,ae=Math.cos,oe=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=ne(t,"lch"),r=n[0],i=n[1],a=n[2];return isNaN(a)&&(a=0),[r,ae(a*=re)*i,ie(a)*i]},se=s.unpack,ue=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=(t=se(t,"lch"))[0],r=t[1],i=t[2],a=oe(n,r,i),o=a[0],s=a[1],u=a[2],c=Ut(o,s,u),l=c[0],f=c[1],p=c[2];return[l,f,p,t.length>3?t[3]:1]},ce=s.unpack,le=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=ce(t,"hcl").reverse();return ue.apply(void 0,n)},fe=s.unpack,pe=s.type;d.prototype.lch=function(){return ee(this._rgb)},d.prototype.hcl=function(){return ee(this._rgb).reverse()},L.lch=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["lch"])))},L.hcl=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["hcl"])))},u.format.lch=ue,u.format.hcl=le,["lch","hcl"].forEach(function(t){return u.autodetect.push({p:2,test:function(){for(var e=[],n=arguments.length;n--;)e[n]=arguments[n];if(e=fe(e,t),"array"===pe(e)&&3===e.length)return t}})});var de=s.type;d.prototype.name=function(){for(var t=st(this._rgb,"rgb"),e=0,n=Object.keys(W);e<n.length;e+=1){var r=n[e];if(W[r]===t)return r.toLowerCase()}return t},u.format.named=function(t){if(t=t.toLowerCase(),W[t])return I(W[t]);throw new Error("unknown color name: "+t)},u.autodetect.push({p:5,test:function(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];if(!e.length&&"string"===de(t)&&W[t.toLowerCase()])return"named"}});var he=s.unpack,Le=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=he(t,"rgb"),r=n[0],i=n[1],a=n[2];return(r<<16)+(i<<8)+a},ve=s.type,ye=function(t){if("number"==ve(t)&&t>=0&&t<=16777215){var e=t>>16,n=t>>8&255,r=255&t;return[e,n,r,1]}throw new Error("unknown num color: "+t)},me=s.type;d.prototype.num=function(){return Le(this._rgb)},L.num=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["num"])))},u.format.num=ye,u.autodetect.push({p:5,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(1===t.length&&"number"===me(t[0])&&t[0]>=0&&t[0]<=16777215)return"num"}});var ge=s.unpack,be=s.type,_e=Math.round;d.prototype.rgb=function(t){return void 0===t&&(t=!0),!1===t?this._rgb.slice(0,3):this._rgb.slice(0,3).map(_e)},d.prototype.rgba=function(t){return void 0===t&&(t=!0),this._rgb.slice(0,4).map(function(e,n){return n<3?!1===t?e:_e(e):e})},L.rgb=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["rgb"])))},u.format.rgb=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=ge(t,"rgba");return void 0===n[3]&&(n[3]=1),n},u.autodetect.push({p:3,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=ge(t,"rgba"),"array"===be(t)&&(3===t.length||4===t.length&&"number"==be(t[3])&&t[3]>=0&&t[3]<=1))return"rgb"}});var we=Math.log,xe=function(t){var e,n,r,i=t/100;return i<66?(e=255,n=-155.25485562709179-.44596950469579133*(n=i-2)+104.49216199393888*we(n),r=i<20?0:.8274096064007395*(r=i-10)-254.76935184120902+115.67994401066147*we(r)):(e=351.97690566805693+.114206453784165*(e=i-55)-40.25366309332127*we(e),n=325.4494125711974+.07943456536662342*(n=i-50)-28.0852963507957*we(n),r=255),[e,n,r,1]},ke=s.unpack,Oe=Math.round,Ee=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];for(var n,r=ke(t,"rgb"),i=r[0],a=r[2],o=1e3,s=4e4;s-o>.4;){var u=xe(n=.5*(s+o));u[2]/u[0]>=a/i?s=n:o=n}return Oe(n)};d.prototype.temp=d.prototype.kelvin=d.prototype.temperature=function(){return Ee(this._rgb)},L.temp=L.kelvin=L.temperature=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["temp"])))},u.format.temp=u.format.kelvin=u.format.temperature=xe;var Se=s.type;d.prototype.alpha=function(t,e){return void 0===e&&(e=!1),void 0!==t&&"number"===Se(t)?e?(this._rgb[3]=t,this):new d([this._rgb[0],this._rgb[1],this._rgb[2],t],"rgb"):this._rgb[3]},d.prototype.clipped=function(){return this._rgb._clipped||!1},d.prototype.darken=function(t){void 0===t&&(t=1);var e=this.lab();return e[0]-=Dt.Kn*t,new d(e,"lab").alpha(this.alpha(),!0)},d.prototype.brighten=function(t){return void 0===t&&(t=1),this.darken(-t)},d.prototype.darker=d.prototype.darken,d.prototype.brighter=d.prototype.brighten,d.prototype.get=function(t){var e=t.split("."),n=e[0],r=e[1],i=this[n]();if(r){var a=n.indexOf(r);if(a>-1)return i[a];throw new Error("unknown channel "+r+" in mode "+n)}return i};var Me=s.type,Ce=Math.pow;d.prototype.luminance=function(t){if(void 0!==t&&"number"===Me(t)){if(0===t)return new d([0,0,0,this._rgb[3]],"rgb");if(1===t)return new d([255,255,255,this._rgb[3]],"rgb");var e=this.luminance(),n=20,r=function(e,i){var a=e.interpolate(i,.5,"rgb"),o=a.luminance();return Math.abs(t-o)<1e-7||!n--?a:o>t?r(e,a):r(a,i)},i=(e>t?r(new d([0,0,0]),this):r(this,new d([255,255,255]))).rgb();return new d(i.concat([this._rgb[3]]))}return Ae.apply(void 0,this._rgb.slice(0,3))};var Ae=function(t,e,n){return t=je(t),e=je(e),n=je(n),.2126*t+.7152*e+.0722*n},je=function(t){return(t/=255)<=.03928?t/12.92:Ce((t+.055)/1.055,2.4)},Pe={},Te=s.type,De=function(t,e,n){void 0===n&&(n=.5);for(var r=[],i=arguments.length-3;i-- >0;)r[i]=arguments[i+3];var a=r[0]||"lrgb";if(Pe[a]||r.length||(a=Object.keys(Pe)[0]),!Pe[a])throw new Error("interpolation mode "+a+" is not defined");return"object"!==Te(t)&&(t=new d(t)),"object"!==Te(e)&&(e=new d(e)),Pe[a](t,e,n).alpha(t.alpha()+n*(e.alpha()-t.alpha()))};d.prototype.mix=d.prototype.interpolate=function(t,e){void 0===e&&(e=.5);for(var n=[],r=arguments.length-2;r-- >0;)n[r]=arguments[r+2];return De.apply(void 0,[this,t,e].concat(n))},d.prototype.premultiply=function(t){void 0===t&&(t=!1);var e=this._rgb,n=e[3];return t?(this._rgb=[e[0]*n,e[1]*n,e[2]*n,n],this):new d([e[0]*n,e[1]*n,e[2]*n,n],"rgb")},d.prototype.saturate=function(t){void 0===t&&(t=1);var e=this.lch();return e[1]+=Dt.Kn*t,e[1]<0&&(e[1]=0),new d(e,"lch").alpha(this.alpha(),!0)},d.prototype.desaturate=function(t){return void 0===t&&(t=1),this.saturate(-t)};var Ie=s.type;d.prototype.set=function(t,e,n){void 0===n&&(n=!1);var r=t.split("."),i=r[0],a=r[1],o=this[i]();if(a){var s=i.indexOf(a);if(s>-1){if("string"==Ie(e))switch(e.charAt(0)){case"+":case"-":o[s]+=+e;break;case"*":o[s]*=+e.substr(1);break;case"/":o[s]/=+e.substr(1);break;default:o[s]=+e}else{if("number"!==Ie(e))throw new Error("unsupported value for Color.set");o[s]=e}var u=new d(o,i);return n?(this._rgb=u._rgb,this):u}throw new Error("unknown channel "+a+" in mode "+i)}return o},Pe.rgb=function(t,e,n){var r=t._rgb,i=e._rgb;return new d(r[0]+n*(i[0]-r[0]),r[1]+n*(i[1]-r[1]),r[2]+n*(i[2]-r[2]),"rgb")};var Re=Math.sqrt,Ne=Math.pow;Pe.lrgb=function(t,e,n){var r=t._rgb,i=r[0],a=r[1],o=r[2],s=e._rgb,u=s[0],c=s[1],l=s[2];return new d(Re(Ne(i,2)*(1-n)+Ne(u,2)*n),Re(Ne(a,2)*(1-n)+Ne(c,2)*n),Re(Ne(o,2)*(1-n)+Ne(l,2)*n),"rgb")},Pe.lab=function(t,e,n){var r=t.lab(),i=e.lab();return new d(r[0]+n*(i[0]-r[0]),r[1]+n*(i[1]-r[1]),r[2]+n*(i[2]-r[2]),"lab")};var He=function(t,e,n,r){var i,a,o,s,u,c,l,f,p,h,L,v;return"hsl"===r?(o=t.hsl(),s=e.hsl()):"hsv"===r?(o=t.hsv(),s=e.hsv()):"hcg"===r?(o=t.hcg(),s=e.hcg()):"hsi"===r?(o=t.hsi(),s=e.hsi()):"lch"!==r&&"hcl"!==r||(r="hcl",o=t.hcl(),s=e.hcl()),"h"===r.substr(0,1)&&(u=(i=o)[0],l=i[1],p=i[2],c=(a=s)[0],f=a[1],h=a[2]),isNaN(u)||isNaN(c)?isNaN(u)?isNaN(c)?v=Number.NaN:(v=c,1!=p&&0!=p||"hsv"==r||(L=f)):(v=u,1!=h&&0!=h||"hsv"==r||(L=l)):v=u+n*(c>u&&c-u>180?c-(u+360):c<u&&u-c>180?c+360-u:c-u),void 0===L&&(L=l+n*(f-l)),new d([v,L,p+n*(h-p)],r)},We=function(t,e,n){return He(t,e,n,"lch")};Pe.lch=We,Pe.hcl=We,Pe.num=function(t,e,n){var r=t.num(),i=e.num();return new d(r+n*(i-r),"num")},Pe.hcg=function(t,e,n){return He(t,e,n,"hcg")},Pe.hsi=function(t,e,n){return He(t,e,n,"hsi")},Pe.hsl=function(t,e,n){return He(t,e,n,"hsl")},Pe.hsv=function(t,e,n){return He(t,e,n,"hsv")};var Be=s.clip_rgb,Ze=Math.pow,Fe=Math.sqrt,qe=Math.PI,ze=Math.cos,Ue=Math.sin,Ve=Math.atan2,Ye=function(t){for(var e=t.length,n=1/e,r=[0,0,0,0],i=0,a=t;i<a.length;i+=1){var o=a[i],s=o._rgb;r[0]+=Ze(s[0],2)*n,r[1]+=Ze(s[1],2)*n,r[2]+=Ze(s[2],2)*n,r[3]+=s[3]*n}return r[0]=Fe(r[0]),r[1]=Fe(r[1]),r[2]=Fe(r[2]),r[3]>.9999999&&(r[3]=1),new d(Be(r))},Ge=s.type,Xe=Math.pow,$e=function(t){var e="rgb",n=L("#ccc"),r=0,i=[0,1],a=[],o=[0,0],s=!1,u=[],c=!1,l=0,f=1,p=!1,d={},h=!0,v=1,y=function(t){if((t=t||["#fff","#000"])&&"string"===Ge(t)&&L.brewer&&L.brewer[t.toLowerCase()]&&(t=L.brewer[t.toLowerCase()]),"array"===Ge(t)){1===t.length&&(t=[t[0],t[0]]),t=t.slice(0);for(var e=0;e<t.length;e++)t[e]=L(t[e]);a.length=0;for(var n=0;n<t.length;n++)a.push(n/(t.length-1))}return b(),u=t},m=function(t){return t},g=function(t,r){var i,c;if(null==r&&(r=!1),isNaN(t)||null===t)return n;if(r)c=t;else if(s&&s.length>2){var p=function(t){if(null!=s){for(var e=s.length-1,n=0;n<e&&t>=s[n];)n++;return n-1}return 0}(t);c=p/(s.length-2)}else c=f!==l?(t-l)/(f-l):1;r||(c=m(c)),1!==v&&(c=Xe(c,v)),c=o[0]+c*(1-o[0]-o[1]),c=Math.min(1,Math.max(0,c));var y=Math.floor(1e4*c);if(h&&d[y])i=d[y];else{if("array"===Ge(u))for(var g=0;g<a.length;g++){var b=a[g];if(c<=b){i=u[g];break}if(c>=b&&g===a.length-1){i=u[g];break}if(c>b&&c<a[g+1]){c=(c-b)/(a[g+1]-b),i=L.interpolate(u[g],u[g+1],c,e);break}}else"function"===Ge(u)&&(i=u(c));h&&(d[y]=i)}return i},b=function(){return d={}};y(t);var _=function(t){var e=L(g(t));return c&&e[c]?e[c]():e};return _.classes=function(t){if(null!=t){if("array"===Ge(t))s=t,i=[t[0],t[t.length-1]];else{var e=L.analyze(i);s=0===t?[e.min,e.max]:L.limits(e,"e",t)}return _}return s},_.domain=function(t){if(!arguments.length)return i;l=t[0],f=t[t.length-1],a=[];var e=u.length;if(t.length===e&&l!==f)for(var n=0,r=Array.from(t);n<r.length;n+=1){var o=r[n];a.push((o-l)/(f-l))}else for(var s=0;s<e;s++)a.push(s/(e-1));return i=[l,f],_},_.mode=function(t){return arguments.length?(e=t,b(),_):e},_.range=function(t,e){return y(t),_},_.out=function(t){return c=t,_},_.spread=function(t){return arguments.length?(r=t,_):r},_.correctLightness=function(t){return null==t&&(t=!0),p=t,b(),m=p?function(t){for(var e=g(0,!0).lab()[0],n=g(1,!0).lab()[0],r=e>n,i=g(t,!0).lab()[0],a=e+(n-e)*t,o=i-a,s=0,u=1,c=20;Math.abs(o)>.01&&c-- >0;)r&&(o*=-1),o<0?(s=t,t+=.5*(u-t)):(u=t,t+=.5*(s-t)),i=g(t,!0).lab()[0],o=i-a;return t}:function(t){return t},_},_.padding=function(t){return null!=t?("number"===Ge(t)&&(t=[t,t]),o=t,_):o},_.colors=function(e,n){arguments.length<2&&(n="hex");var r=[];if(0===arguments.length)r=u.slice(0);else if(1===e)r=[_(.5)];else if(e>1){var a=i[0],o=i[1]-a;r=function(t,e,n){for(var r=[],i=t<e,a=n?i?e+1:e-1:e,o=t;i?o<a:o>a;i?o++:o--)r.push(o);return r}(0,e,!1).map(function(t){return _(a+t/(e-1)*o)})}else{t=[];var c=[];if(s&&s.length>2)for(var l=1,f=s.length,p=1<=f;p?l<f:l>f;p?l++:l--)c.push(.5*(s[l-1]+s[l]));else c=i;r=c.map(function(t){return _(t)})}return L[n]&&(r=r.map(function(t){return t[n]()})),r},_.cache=function(t){return null!=t?(h=t,_):h},_.gamma=function(t){return null!=t?(v=t,_):v},_.nodata=function(t){return null!=t?(n=L(t),_):n},_},Ke=function(t){var e,n,r,i,a,o,s;if(2===(t=t.map(function(t){return new d(t)})).length)e=t.map(function(t){return t.lab()}),a=e[0],o=e[1],i=function(t){var e=[0,1,2].map(function(e){return a[e]+t*(o[e]-a[e])});return new d(e,"lab")};else if(3===t.length)n=t.map(function(t){return t.lab()}),a=n[0],o=n[1],s=n[2],i=function(t){var e=[0,1,2].map(function(e){return(1-t)*(1-t)*a[e]+2*(1-t)*t*o[e]+t*t*s[e]});return new d(e,"lab")};else if(4===t.length){var u;r=t.map(function(t){return t.lab()}),a=r[0],o=r[1],s=r[2],u=r[3],i=function(t){var e=[0,1,2].map(function(e){return(1-t)*(1-t)*(1-t)*a[e]+3*(1-t)*(1-t)*t*o[e]+3*(1-t)*t*t*s[e]+t*t*t*u[e]});return new d(e,"lab")}}else if(5===t.length){var c=Ke(t.slice(0,3)),l=Ke(t.slice(2,5));i=function(t){return t<.5?c(2*t):l(2*(t-.5))}}return i},Je=function(t,e,n){if(!Je[n])throw new Error("unknown blend mode "+n);return Je[n](t,e)},Qe=function(t){return function(e,n){var r=L(n).rgb(),i=L(e).rgb();return L.rgb(t(r,i))}},tn=function(t){return function(e,n){var r=[];return r[0]=t(e[0],n[0]),r[1]=t(e[1],n[1]),r[2]=t(e[2],n[2]),r}};Je.normal=Qe(tn(function(t){return t})),Je.multiply=Qe(tn(function(t,e){return t*e/255})),Je.screen=Qe(tn(function(t,e){return 255*(1-(1-t/255)*(1-e/255))})),Je.overlay=Qe(tn(function(t,e){return e<128?2*t*e/255:255*(1-2*(1-t/255)*(1-e/255))})),Je.darken=Qe(tn(function(t,e){return t>e?e:t})),Je.lighten=Qe(tn(function(t,e){return t>e?t:e})),Je.dodge=Qe(tn(function(t,e){return 255===t?255:(t=e/255*255/(1-t/255))>255?255:t})),Je.burn=Qe(tn(function(t,e){return 255*(1-(1-e/255)/(t/255))}));for(var en=Je,nn=s.type,rn=s.clip_rgb,an=s.TWOPI,on=Math.pow,sn=Math.sin,un=Math.cos,cn=Math.floor,ln=Math.random,fn=Math.log,pn=Math.pow,dn=Math.floor,hn=Math.abs,Ln=function(t,e){void 0===e&&(e=null);var n={min:Number.MAX_VALUE,max:-1*Number.MAX_VALUE,sum:0,values:[],count:0};return"object"===a(t)&&(t=Object.values(t)),t.forEach(function(t){e&&"object"===a(t)&&(t=t[e]),null==t||isNaN(t)||(n.values.push(t),n.sum+=t,t<n.min&&(n.min=t),t>n.max&&(n.max=t),n.count+=1)}),n.domain=[n.min,n.max],n.limits=function(t,e){return vn(n,t,e)},n},vn=function(t,e,n){void 0===e&&(e="equal"),void 0===n&&(n=7),"array"==a(t)&&(t=Ln(t));var r=t.min,i=t.max,o=t.values.sort(function(t,e){return t-e});if(1===n)return[r,i];var s=[];if("c"===e.substr(0,1)&&(s.push(r),s.push(i)),"e"===e.substr(0,1)){s.push(r);for(var u=1;u<n;u++)s.push(r+u/n*(i-r));s.push(i)}else if("l"===e.substr(0,1)){if(r<=0)throw new Error("Logarithmic scales are only possible for values > 0");var c=Math.LOG10E*fn(r),l=Math.LOG10E*fn(i);s.push(r);for(var f=1;f<n;f++)s.push(pn(10,c+f/n*(l-c)));s.push(i)}else if("q"===e.substr(0,1)){s.push(r);for(var p=1;p<n;p++){var d=(o.length-1)*p/n,h=dn(d);if(h===d)s.push(o[h]);else{var L=d-h;s.push(o[h]*(1-L)+o[h+1]*L)}}s.push(i)}else if("k"===e.substr(0,1)){var v,y=o.length,m=new Array(y),g=new Array(n),b=!0,_=0,w=null;(w=[]).push(r);for(var x=1;x<n;x++)w.push(r+x/n*(i-r));for(w.push(i);b;){for(var k=0;k<n;k++)g[k]=0;for(var O=0;O<y;O++)for(var E=o[O],S=Number.MAX_VALUE,M=void 0,C=0;C<n;C++){var A=hn(w[C]-E);A<S&&(S=A,M=C),g[M]++,m[O]=M}for(var j=new Array(n),P=0;P<n;P++)j[P]=null;for(var T=0;T<y;T++)v=m[T],null===j[v]?j[v]=o[T]:j[v]+=o[T];for(var D=0;D<n;D++)j[D]*=1/g[D];b=!1;for(var I=0;I<n;I++)if(j[I]!==w[I]){b=!0;break}w=j,++_>200&&(b=!1)}for(var R={},N=0;N<n;N++)R[N]=[];for(var H=0;H<y;H++)v=m[H],R[v].push(o[H]);for(var W=[],B=0;B<n;B++)W.push(R[B][0]),W.push(R[B][R[B].length-1]);W=W.sort(function(t,e){return t-e}),s.push(W[0]);for(var Z=1;Z<W.length;Z+=2){var F=W[Z];isNaN(F)||-1!==s.indexOf(F)||s.push(F)}}return s},yn={analyze:Ln,limits:vn},mn=Math.sqrt,gn=Math.atan2,bn=Math.abs,_n=Math.cos,wn=Math.PI,xn={cool:function(){return $e([L.hsl(180,1,.9),L.hsl(250,.7,.4)])},hot:function(){return $e(["#000","#f00","#ff0","#fff"]).mode("rgb")}},kn={OrRd:["#fff7ec","#fee8c8","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#b30000","#7f0000"],PuBu:["#fff7fb","#ece7f2","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#045a8d","#023858"],BuPu:["#f7fcfd","#e0ecf4","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#810f7c","#4d004b"],Oranges:["#fff5eb","#fee6ce","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#a63603","#7f2704"],BuGn:["#f7fcfd","#e5f5f9","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#006d2c","#00441b"],YlOrBr:["#ffffe5","#fff7bc","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#993404","#662506"],YlGn:["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#006837","#004529"],Reds:["#fff5f0","#fee0d2","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#a50f15","#67000d"],RdPu:["#fff7f3","#fde0dd","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177","#49006a"],Greens:["#f7fcf5","#e5f5e0","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#006d2c","#00441b"],YlGnBu:["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"],Purples:["#fcfbfd","#efedf5","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#54278f","#3f007d"],GnBu:["#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#0868ac","#084081"],Greys:["#ffffff","#f0f0f0","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525","#000000"],YlOrRd:["#ffffcc","#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#bd0026","#800026"],PuRd:["#f7f4f9","#e7e1ef","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#980043","#67001f"],Blues:["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"],PuBuGn:["#fff7fb","#ece2f0","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016c59","#014636"],Viridis:["#440154","#482777","#3f4a8a","#31678e","#26838f","#1f9d8a","#6cce5a","#b6de2b","#fee825"],Spectral:["#9e0142","#d53e4f","#f46d43","#fdae61","#fee08b","#ffffbf","#e6f598","#abdda4","#66c2a5","#3288bd","#5e4fa2"],RdYlGn:["#a50026","#d73027","#f46d43","#fdae61","#fee08b","#ffffbf","#d9ef8b","#a6d96a","#66bd63","#1a9850","#006837"],RdBu:["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#f7f7f7","#d1e5f0","#92c5de","#4393c3","#2166ac","#053061"],PiYG:["#8e0152","#c51b7d","#de77ae","#f1b6da","#fde0ef","#f7f7f7","#e6f5d0","#b8e186","#7fbc41","#4d9221","#276419"],PRGn:["#40004b","#762a83","#9970ab","#c2a5cf","#e7d4e8","#f7f7f7","#d9f0d3","#a6dba0","#5aae61","#1b7837","#00441b"],RdYlBu:["#a50026","#d73027","#f46d43","#fdae61","#fee090","#ffffbf","#e0f3f8","#abd9e9","#74add1","#4575b4","#313695"],BrBG:["#543005","#8c510a","#bf812d","#dfc27d","#f6e8c3","#f5f5f5","#c7eae5","#80cdc1","#35978f","#01665e","#003c30"],RdGy:["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#ffffff","#e0e0e0","#bababa","#878787","#4d4d4d","#1a1a1a"],PuOr:["#7f3b08","#b35806","#e08214","#fdb863","#fee0b6","#f7f7f7","#d8daeb","#b2abd2","#8073ac","#542788","#2d004b"],Set2:["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f","#e5c494","#b3b3b3"],Accent:["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f","#bf5b17","#666666"],Set1:["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628","#f781bf","#999999"],Set3:["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd","#ccebc5","#ffed6f"],Dark2:["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"],Paired:["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99","#b15928"],Pastel2:["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae","#f1e2cc","#cccccc"],Pastel1:["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd","#fddaec","#f2f2f2"]},On=0,En=Object.keys(kn);On<En.length;On+=1){var Sn=En[On];kn[Sn.toLowerCase()]=kn[Sn]}var Mn=kn;return L.average=function(t,e){void 0===e&&(e="lrgb");var n=t.length;if(t=t.map(function(t){return new d(t)}),"lrgb"===e)return Ye(t);for(var r=t.shift(),i=r.get(e),a=[],o=0,s=0,u=0;u<i.length;u++)if(i[u]=i[u]||0,a.push(isNaN(i[u])?0:1),"h"===e.charAt(u)&&!isNaN(i[u])){var c=i[u]/180*qe;o+=ze(c),s+=Ue(c)}var l=r.alpha();t.forEach(function(t){var n=t.get(e);l+=t.alpha();for(var r=0;r<i.length;r++)if(!isNaN(n[r]))if(a[r]++,"h"===e.charAt(r)){var u=n[r]/180*qe;o+=ze(u),s+=Ue(u)}else i[r]+=n[r]});for(var f=0;f<i.length;f++)if("h"===e.charAt(f)){for(var p=Ve(s/a[f],o/a[f])/qe*180;p<0;)p+=360;for(;p>=360;)p-=360;i[f]=p}else i[f]=i[f]/a[f];return l/=n,new d(i,e).alpha(l>.99999?1:l,!0)},L.bezier=function(t){var e=Ke(t);return e.scale=function(){return $e(e)},e},L.blend=en,L.cubehelix=function(t,e,n,r,i){void 0===t&&(t=300),void 0===e&&(e=-1.5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===i&&(i=[0,1]);var a,o=0;"array"===nn(i)?a=i[1]-i[0]:(a=0,i=[i,i]);var s=function(s){var u=an*((t+120)/360+e*s),c=on(i[0]+a*s,r),l=0!==o?n[0]+s*o:n,f=l*c*(1-c)/2,p=un(u),d=sn(u),h=c+f*(-.14861*p+1.78277*d),v=c+f*(-.29227*p-.90649*d),y=c+f*(1.97294*p);return L(rn([255*h,255*v,255*y,1]))};return s.start=function(e){return null==e?t:(t=e,s)},s.rotations=function(t){return null==t?e:(e=t,s)},s.gamma=function(t){return null==t?r:(r=t,s)},s.hue=function(t){return null==t?n:("array"===nn(n=t)?0==(o=n[1]-n[0])&&(n=n[1]):o=0,s)},s.lightness=function(t){return null==t?i:("array"===nn(t)?(i=t,a=t[1]-t[0]):(i=[t,t],a=0),s)},s.scale=function(){return L.scale(s)},s.hue(n),s},L.mix=L.interpolate=De,L.random=function(){for(var t="#",e=0;e<6;e++)t+="0123456789abcdef".charAt(cn(16*ln()));return new d(t,"hex")},L.scale=$e,L.analyze=yn.analyze,L.contrast=function(t,e){t=new d(t),e=new d(e);var n=t.luminance(),r=e.luminance();return n>r?(n+.05)/(r+.05):(r+.05)/(n+.05)},L.deltaE=function(t,e,n,r){void 0===n&&(n=1),void 0===r&&(r=1),t=new d(t),e=new d(e);for(var i=Array.from(t.lab()),a=i[0],o=i[1],s=i[2],u=Array.from(e.lab()),c=u[0],l=u[1],f=u[2],p=mn(o*o+s*s),h=mn(l*l+f*f),L=a<16?.511:.040975*a/(1+.01765*a),v=.0638*p/(1+.0131*p)+.638,y=p<1e-6?0:180*gn(s,o)/wn;y<0;)y+=360;for(;y>=360;)y-=360;var m=y>=164&&y<=345?.56+bn(.2*_n(wn*(y+168)/180)):.36+bn(.4*_n(wn*(y+35)/180)),g=p*p*p*p,b=mn(g/(g+1900)),_=v*(b*m+1-b),w=p-h,x=o-l,k=s-f,O=(a-c)/(n*L),E=w/(r*v);return mn(O*O+E*E+(x*x+k*k-w*w)/(_*_))},L.distance=function(t,e,n){void 0===n&&(n="lab"),t=new d(t),e=new d(e);var r=t.get(n),i=e.get(n),a=0;for(var o in r){var s=(r[o]||0)-(i[o]||0);a+=s*s}return Math.sqrt(a)},L.limits=yn.limits,L.valid=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];try{return new(Function.prototype.bind.apply(d,[null].concat(t))),!0}catch(t){return!1}},L.scales=xn,L.colors=W,L.brewer=Mn,L}()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=f(n(0)),a=f(n(26)),o=n(27),s=f(o),u=n(2),c=f(n(4)),l=f(n(1));function f(t){return t&&t.__esModule?t:{default:t}}var p=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),r(e,[{key:"prerender",value:function(){var t=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.bars=[],this.labels=[],this.barContainers=[],this.pushBars(this.data.primary),this.addChildren([].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(this.bars),[this.createComponent(o.Axis,"div.axis-"+this.data.primary,{renderToSelector:".js-bar-view-"+this.data.primary,data:{styles:a.default,primary:this.data.primary}})])),this.prerendered&&!this.rerender?t:(t.classList.add(a.default.barView,"js-bar-view","js-bar-view-"+this.data.primary),t.appendChild(this.returnTitle(this.data.primary)),t)}},{key:"returnTitle",value:function(t){var e=document.createElement("h2");return e.textContent=this.model.fields.find(function(e){return e.key===t}).text,e.classList.add("section-title"),e}},{key:"pushBars",value:function(t){var e=this;this.model.nestBy[t].forEach(function(n){e.bars.push(e.createComponent(s.default,"div.bar-"+e.app.cleanKey(n.key),{data:{d:n,primary:t},renderToSelector:".js-bar-view-"+t,primary:t}))})}},{key:"init",value:function(){l.default.setSubs([["hoverPrimaryGroup",this.highlightBar.bind(this)],["unHoverPrimaryGroup",this.highlightBar.bind(this)],["view",this.showBarView.bind(this)]]);var t=document.querySelectorAll(".js-innerWrapper-"+this.data.primary);(0,c.default)(t,{followCursor:!0}),t.forEach(function(t){t.addEventListener("click",function(t){t.stopPropagation(),u.stateModule.setState("selectPrimaryGroup.map",this.dataset.key)}),t.addEventListener("mouseenter",function(){u.stateModule.setState("hoverPrimaryGroup",this.dataset.key,{forceChange:!0})}),t.addEventListener("mouseleave",function(){u.stateModule.setState("unHoverPrimaryGroup",this.dataset.key,{forceChange:!0})})})}},{key:"showBarView",value:function(t,e){e===this.data.primary?this.el.classList.add(a.default.active):this.el.classList.remove(a.default.active)}},{key:"highlightBar",value:function(t,e){var n=".bar-"+this.app.cleanKey(e)+" .js-innerWrapper",r=document.querySelector(n);"hoverPrimaryGroup"===t?r.classList.add("hover"):r.classList.remove("hover")}}]),e}();e.default=p},function(t,e,n){t.exports={barView:"src-views-bar-view--barView",active:"src-views-bar-view--active"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Axis=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},a=s(n(28)),o=s(n(0));function s(t){return t&&t.__esModule?t:{default:t}}function u(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function f(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var p=function(t){function e(){return c(this,e),l(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return f(e,o.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.prerendered&&!this.rerender)return t;t.classList.add(a.default.barContainer),console.log(this);var n=document.createElement("p");n.classList.add(a.default.label,"js-bar-label");var r=document.createElement("span");r.textContent=this.data.d.key||"Not specified",n.appendChild(r),this.parent.labels.push(n);var o=document.createElement("div");o.classList.add(a.default.innerWrapper,"js-innerWrapper","js-innerWrapper-"+this.data.primary),o.dataset.tippyContent="<strong>"+this.data.d.values.length+" HIA"+(this.data.d.values.length>1?"s":"")+"</strong><br />Click for details",o.dataset.key=this.data.d.key;var s=document.createElement("div");s.classList.add(a.default.bar),s.style.transform="scaleX("+this.linearScale()+")";var u=document.createElement("div");return u.classList.add(a.default.placeholder),o.appendChild(s),t.appendChild(n),t.appendChild(o),t.appendChild(u),t}},{key:"linearScale",value:function(){var t=Math.max.apply(Math,u(this.model.nestBy[this.data.primary].map(function(t){return t.values.length})));return this.data.d.values.length/t}},{key:"init",value:function(){}},{key:"update",value:function(){}}]),e}();e.default=p;e.Axis=function(t){function e(){return c(this,e),l(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return f(e,o.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.prerendered&&!this.rerender)return t;t.classList.add(a.default.barContainer,a.default.axisContainer),console.log(this);var n=document.createElement("p");n.classList.add(a.default.label);var r=document.createElement("div");r.classList.add(a.default.innerWrapper);var o=document.createElement("div");o.classList.add(a.default.bar,a.default.axisLine);var s=document.createElement("div");s.classList.add(a.default.placeholder);var u=document.createElement("div");u.classList.add(a.default.minMarker),u.textContent="0";var c=document.createElement("div");return c.classList.add(a.default.maxMarker),c.textContent=this.returnMax(),r.appendChild(o),r.appendChild(u),r.appendChild(c),t.appendChild(n),t.appendChild(r),t.appendChild(s),t}},{key:"returnMax",value:function(){return Math.max.apply(Math,u(this.model.nestBy[this.data.primary].map(function(t){return t.values.length})))}},{key:"update",value:function(){}}]),e}()},function(t,e,n){t.exports={barContainer:"src-components-bar--barContainer",label:"src-components-bar--label",innerWrapper:"src-components-bar--innerWrapper",axisContainer:"src-components-bar--axisContainer",bar:"src-components-bar--bar",placeholder:"src-components-bar--placeholder",axisLine:"src-components-bar--axisLine",minMarker:"src-components-bar--minMarker",maxMarker:"src-components-bar--maxMarker"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=l(n(0)),a=l(n(30)),o=l(n(31)),s=l(n(35)),u=l(n(37)),c=l(n(1));function l(t){return t&&t.__esModule?t:{default:t}}var f=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),r(e,[{key:"prerender",value:function(){var t=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.dropdownData=this.setDropdownData("stateOrTerritory"),this.name="WaffleView",this.dropdown=this.createComponent(o.default,"div#dropdown",{renderToSelector:".js-dropdown-inner",data:{label:"Select secondary dimension",data:this.dropdownData.data,type:"selectSecondaryDimension"}}),this.addChildren([this.dropdown,this.createComponent(s.default,"div#waffle",{renderToSelector:".js-waffle-container",data:{primary:"stateOrTerritory"}}),this.createComponent(u.default,"div#legend",{renderToSelector:".js-legend-container",data:{primary:"stateOrTerritory"}})]),this.prerendered&&!this.rerender)return t;t.classList.add(a.default.waffleView),t.appendChild(this.returnHeading("stateOrTerritory")),t.appendChild(this.returnDropdownWrapper("stateOrTerritory"));var n=document.createElement("div");n.classList.add("js-waffle-container");var r=document.createElement("div");return r.classList.add("js-legend-container"),n.appendChild(r),t.appendChild(n),t}},{key:"returnHeading",value:function(t){var e=this.model.fields.find(function(e){return e.key===t}).instruct,n=document.createElement("h2");return n.textContent=e,n.classList.add(a.default.instructHeading,"js-instruct-heading"),n}},{key:"returnDropdownWrapper",value:function(){var t=document.createElement("div");t.classList.add(a.default.dropdownWrapper,a.default.hide);var e=document.createElement("div"),n=document.createElement("div"),r=document.createElement("label");return this.children[0].el.querySelector(".js-input-div").id="label-dropdown-"+this.dropdownData.type+"-value",this.children[0].el.setAttribute("aria-labelledby","label-dropdown-"+this.dropdownData.type+" label-dropdown-"+this.dropdownData.type+"-value"),this.children[0].el.querySelector("ul").setAttribute("aria-controls","TODODODODO"),n.classList.add(a.default.dropdownOuter),r.innerText=this.dropdownData.label,r.setAttribute("id","label-dropdown-"+this.dropdownData.type),e.classList.add("js-dropdown-inner",a.default.dropdownInner),n.appendChild(r),n.appendChild(e),t.appendChild(n),t}},{key:"setDropdownData",value:function(t){var e=this;return{label:"Secondary dimension:",data:this.model.fields.find(function(e){return e.key===t}).secondaryDimensions.map(function(t,n){var r=e.model.fields.find(function(e){return e.key===t});return{field:r.key,label:r.heading,isDefaultSelection:0===n}}),type:"selectSecondaryDimension"}}},{key:"init",value:function(){console.log("init waffle-view"),c.default.setSubs([["selectPrimaryGroup",this.toggleHeading.bind(this)],["selectPrimaryGroup",this.toggleDropdown.bind(this)],["selectPrimaryGroup",this.scrollIfNecessary.bind(this)],["view",this.update.bind(this)]])}},{key:"update",value:function(t,e){document.querySelector(".js-instruct-heading").textContent=this.returnHeading(e).textContent,this.dropdownData=this.setDropdownData(e),document.querySelector("."+a.default.dropdownWrapper).innerHTML=this.returnDropdownWrapper(e).innerHTML,this.dropdown=this.createComponent(o.default,"div#dropdown",{renderToSelector:".js-dropdown-inner",data:{label:"Select secondary dimension",data:this.dropdownData.data,type:"selectSecondaryDimension"}}),this.dropdown.init()}},{key:"scrollIfNecessary",value:function(t){var e=t.split(".");e.length>1&&"map"===e[1]&&this.scrollPageIfNecessary()}},{key:"scrollPageIfNecessary",value:function(){var t=document.querySelector(".js-show-details").getBoundingClientRect(),e=t.top-105;t.top>window.innerHeight-100?this.smoothScroll("#pew-app",e).then(this.scrollWaffleIfNecessary()):this.scrollWaffleIfNecessary()}},{key:"scrollWaffleIfNecessary",value:function(){var t=document.querySelector(".js-show-details");console.log(t);var e=t.offsetTop-document.querySelector(".js-waffle-container-inner").offsetTop;this.smoothScroll(".js-waffle-container-inner",e)}},{key:"smoothScroll",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:200;return Math.easeInOutQuad=function(t,e,n,r){return(t/=r/2)<1?n/2*t*t+e:-n/2*(--t*(t-2)-1)+e},new Promise(function(r){var i=document.querySelector(t),a=i.scrollTop,o=e-a,s=0;!function t(){s+=20;var e=Math.easeInOutQuad(s,a,o,n);i.scrollTop=e,s<n?setTimeout(t,20):setTimeout(function(){r(!0)},20)}()})}},{key:"toggleHeading",value:function(t,e){var n=document.querySelector("."+a.default.instructHeading);e?n.classList.add(a.default.hide):n.classList.remove(a.default.hide)}},{key:"toggleDropdown",value:function(t,e){var n=document.querySelector("."+a.default.dropdownWrapper);e?n.classList.remove(a.default.hide):n.classList.add(a.default.hide)}},{key:"clickHandler",value:function(){}}]),e}();e.default=f},function(t,e,n){t.exports={waffleView:"src-views-waffle-view--waffleView",instructHeading:"src-views-waffle-view--instructHeading",hide:"src-views-waffle-view--hide",dropdownWrapper:"src-views-waffle-view--dropdownWrapper",dropdownOuter:"src-views-waffle-view--dropdownOuter",dropdownInner:"src-views-waffle-view--dropdownInner",label:"src-views-waffle-view--label",sortActive:"src-views-waffle-view--sortActive"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},o=n(32),s=(r=o)&&r.__esModule?r:{default:r},u=n(33),c=n(2);var l=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=[],i=n.data.type;n.data.data.forEach(function(t){r.push({value:t.field,name:t.label,selected:!!t.isDefaultSelection})}),n.data=r.sort(function(t,e){return t.name<e.name?-1:t.name>e.name?1:t.name>=e.name?0:NaN});var a=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments));return a.dropdownType=i,a}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,u.Dropdown),i(e,[{key:"prerender",value:function(){var t=a(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.prerendered&&!this.rerender?t:(t.classList.add(s.default.dropdown,"js-dropdown"),t)}},{key:"onChange",value:function(){c.stateModule.setState(this.dropdownType,this.selectedOption.dataset.value)}},{key:"init",value:function(){a(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this)}}]),e}();e.default=l},function(t,e,n){},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Dropdown=e.TextInput=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},a=n(3),o=u(n(0)),s=u(n(34));function u(t){return t&&t.__esModule?t:{default:t}}function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function f(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}e.TextInput=function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"input",n=arguments[1];return c(this,e),l(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n))}return f(e,o.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.prerendered?t:(t.setAttribute("type","text"),t)}},{key:"init",value:function(){}}]),e}(),e.Dropdown=function(t){function e(t,n){c(this,e),console.log(t);var r,i,a=t.split(".")[0].split("#")[0];"div"!==a&&(t.split(".").length>1&&(r=t.split(".")[0].split("#")[0]),t.split("#").length>1&&(i=t.split("#")[0].split(".")[0]),console.log("Dropdown element must be a div; coercing . . ."),t=(a="div")+(void 0!==i?"#"+i:"")+(void 0!==r?"."+r:""));var o=l(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return o.options=o.el.querySelector("ul"),o.body=document.querySelector("body"),o._isOpen=!1,o}return f(e,o.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.prerendered)return t;t.setAttribute("aria-haspopup","listbox"),t.setAttribute("aria-expanded","false"),t.setAttribute("role","button");var n=a.DOMHelpers.c("div.js-input-div"),r=a.DOMHelpers.c("ul");return console.log(this),r.setAttribute("aria-role","listbox"),this.data.forEach(function(t){var e=a.DOMHelpers.c("li");e.setAttribute("data-value",t.value),e.setAttribute("aria-role","option"),e.innerHTML=t.name,e.id="dropdown-item-"+t.value,t.selected&&(e.setAttribute("aria-selected","true"),e.classList.add("selected"),n.textContent=t.name,r.setAttribute("aria-activedescendant",e.id)),r.appendChild(e)}),t.appendChild(n),t.appendChild(r),t.classList.add(s.default.PCTDropdown),t.setAttribute("tabindex","0"),t}},{key:"init",value:function(){var t=this;console.log(this),this.input=this.el.querySelector(".js-input-div"),this.el.querySelectorAll("li").forEach(function(e){e.addEventListener("click",function(n){n.stopPropagation(),t.itemClickHandler(e)})}),this._selectedOption=this.el.querySelector("li.selected"),this.toBeSelected=this.el.querySelector("li.selected"),this.el.addEventListener("click",this.clickHandler.bind(this)),this.el.addEventListener("keydown",function(e){if(console.log(e.keyCode),9!==e.keyCode)return[32,38,40].indexOf(e.keyCode)>-1?(e.preventDefault(),void t.spaceAndArrowHandler.call(t,e)):void([13,27].indexOf(e.keyCode>-1)&&t.isOpen&&t.enterAndEscapeHandler.call(t,e));t.tabHandler.call(t,e)})}},{key:"itemClickHandler",value:function(t){console.log(this,t),this.toBeSelected.classList.remove("selected"),this.toBeSelected.removeAttribute("aria-selected"),this.toBeSelected=t,this.toBeSelected.classList.add("selected"),this.toBeSelected.setAttribute("aria-selected","true"),this.options.setAttribute("aria-activedescendant",t.id),this.selectedOption=this.toBeSelected}},{key:"enterAndEscapeHandler",value:function(t){27===t.keyCode?(console.log("escape key"),this.toBeSelected.classList.remove("selected"),this.selectedOption.classList.add("selected"),this.toBeSelected=this.selectedOption,this.isOpen=!1):this.selectedOption=this.toBeSelected}},{key:"spaceAndArrowHandler",value:function(t){if(32!==t.keyCode)if(this.isOpen){var e=38===t.keyCode?this.toBeSelected.previousElementSibling:this.toBeSelected.nextElementSibling;e&&(this.toBeSelected.classList.remove("selected"),this.toBeSelected=e,this.toBeSelected.classList.add("selected"))}else this.isOpen=!0;else this.isOpen||(this.isOpen=!0)}},{key:"tabHandler",value:function(t){this.isOpen&&t.preventDefault()}},{key:"clickHandler",value:function(t){!this.isOpen&&this.body.UIControlIsOpen||(t.stopPropagation(),this.isOpen=!this.isOpen)}},{key:"isOpen",set:function(t){function e(){this.isOpen=!1}this._isOpen=t,t?(this.el.classList.add(s.default.isOpen),this.el.setAttribute("aria-expanded",!0),this.body.UIControlIsOpen=!0,this.body.addEventListener("click",e.bind(this))):(this.el.classList.remove(s.default.isOpen),this.el.setAttribute("aria-expanded",!1),this.body.UIControlIsOpen=!1,this.body.removeEventListener("click",e.bind(this)))},get:function(){return this._isOpen}},{key:"selectedOption",set:function(t){this._selectedOption=t,this.isOpen=!1,this.input.textContent=this._selectedOption.innerText,this.onChange?this.onChange():console.log("Instance of Dropdown class needs an onChange method to handle selection of a new value")},get:function(){return this._selectedOption}}]),e}()},function(t,e,n){t.exports={PCTDropdown:"submodules-UI-js-inputs--PCTDropdown",isOpen:"submodules-UI-js-inputs--isOpen"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=c(n(0)),a=c(n(36)),o=n(2),s=c(n(1)),u=c(n(4));function c(t){return t&&t.__esModule?t:{default:t}}var l=new Set,f=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),r(e,[{key:"prerender",value:function(){var t=this,n=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.name="Waffle",this.nestedData=this.model.nestBy[this.data.primary],this.secondary=this.model.fields.find(function(e){return e.key===t.data.primary}).secondaryDimensions[0],this.prerendered&&!this.rerender)return n;var r=document.createElement("button");r.classList.add(a.default.showAllDetails),r.textContent=this.updateShowAllDetails(this.data.primary),n.appendChild(r);var i=document.createElement("div");return i.classList.add(a.default.waffleContainer,"js-waffle-container-inner"),this.render().forEach(function(t){i.appendChild(t)}),n.appendChild(i),console.log(l),n}},{key:"render",value:function(){var t=this,e=[];function n(t){var e=this;return this.model.nestBy[this.secondary].find(function(n){return n.key===t[e.secondary][0]}).values.length}return this.nestedData.forEach(function(r){var i=document.createElement("div");i.dataset.group=r.key,i.dataset.count=r.values.length,i.classList.add(a.default.groupDiv,"js-group-"+t.app.cleanKey(r.key)),i.insertAdjacentHTML("afterbegin",'<h2 class="'+a.default.groupDivHeading+'">'+(""!==r.key?r.key:"[blank]")+' &ndash; <span class="'+a.default.itemCount+'">'+r.values.length+"</span></h2>");var o=document.createElement("div");o.classList.add(a.default.itemsContainer),o.style.width=28*Math.ceil(Math.sqrt(r.values.length))+"px",r.values.sort(function(e,r){return n.call(t,r)-n.call(t,e)}),r.values.forEach(function(e){var n=document.createElement("div"),r=t.app.cleanKey(e[t.secondary]),i=t.model.nestBy[t.secondary],s="string"==typeof e[t.secondary]?e[t.secondary]:e[t.secondary][0],u=i.findIndex(function(t){return t.key===s});n.classList.add(a.default.item),n.classList.add(r,a.default[t.app.cleanKey(e.status)],"secondary-"+u),n.dataset.title=e.title,n.dataset.id=e.id,o.appendChild(n)}),i.appendChild(o),e.push(i)}),e}},{key:"updateSecondary",value:function(t,e){var n=document.querySelector("."+a.default.showDetails),r=n?n.dataset.group:null,i=document.querySelector(".js-waffle-container-inner");i.innerHTML="",this.secondary=e,this.render().forEach(function(t){i.appendChild(t)}),r&&document.querySelector(".js-group-"+this.app.cleanKey(r)).classList.add(a.default.showDetails),this.initGroupsAndItems()}},{key:"updatePrimary",value:function(t,e){this.nestedData=this.model.nestBy[e],this.secondary=this.model.fields.find(function(t){return t.key===e}).secondaryDimensions[0];var n=document.querySelector(".js-waffle-container-inner");n.innerHTML="",this.render().forEach(function(t){n.appendChild(t)}),this.initGroupsAndItems()}},{key:"init",value:function(){console.log("init waffle"),s.default.setSubs([["hoverPrimaryGroup",this.highlightGroup.bind(this)],["unHoverPrimaryGroup",this.highlightGroup.bind(this)],["selectPrimaryGroup",this.showGroupDetails.bind(this)],["showAllDetails",this.toggleShowAll.bind(this)],["selectSecondaryDimension",this.updateSecondary.bind(this)],["view",this.updatePrimary.bind(this)]]),document.querySelector("."+a.default.showAllDetails).addEventListener("click",function(t){t.stopPropagation(),"true"===this.dataset.isOn?(o.stateModule.setState("showAllDetails",!1),this.innerText=this.innerText.replace("Hide","Show"),this.dataset.isOn=!1):(o.stateModule.setState("showAllDetails",!0),this.innerText=this.innerText.replace("Show","Hide"),this.dataset.isOn=!0)}),this.initGroupsAndItems()}},{key:"initGroupsAndItems",value:function(){var t=this;function e(){(this.parentElement.parentElement.classList.contains(a.default.showDetails)||this.parentElement.parentElement.parentElement.classList.contains(a.default.showAll))&&o.stateModule.setState("selectHIA",+this.dataset.id)}function n(){(this.parentElement.parentElement.classList.contains(a.default.showDetails)||this.parentElement.parentElement.parentElement.classList.contains(a.default.showAll))&&this._tippy.show()}function r(){this._tippy.hide()}function i(){this.classList.contains(a.default.showDetails)||this.parentElement.classList.contains(a.default.showAll)||this._tippy.show(),o.stateModule.setState("hoverPrimaryGroup",this.dataset.group,{forceChange:!0})}function s(){this.classList.contains(a.default.showDetails)||this.parentElement.classList.contains(a.default.showAllDetails)||this._tippy.hide(),o.stateModule.setState("unHoverPrimaryGroup",this.dataset.group,{forceChange:!0})}document.querySelectorAll("."+a.default.groupDiv).forEach(function(e){t.setTippys(e),e.addEventListener("mouseenter",i),e.addEventListener("mouseleave",s),e.addEventListener("click",t.clickHandler)}),document.querySelectorAll("."+a.default.item).forEach(function(i){t.setItemTippy(i),i.addEventListener("mouseenter",n),i.addEventListener("mouseleave",r),i.addEventListener("click",e)})}},{key:"toggleShowAll",value:function(t,e){e?document.querySelector("."+a.default.waffleContainer).classList.add(a.default.showAll):document.querySelector("."+a.default.waffleContainer).classList.remove(a.default.showAll)}},{key:"updateShowAllDetails",value:function(t){return"Show details for all "+this.model.fields.find(function(e){return e.key===t}).heading.toLowerCase()}},{key:"showGroupDetails",value:function(t,e){var n=document.querySelector("."+a.default.showDetails);n&&n.classList.remove(a.default.showDetails,"js-show-details");var r="."+a.default.groupDiv+'[data-group="'+e+'"',i=document.querySelector(r);i&&i.classList.add(a.default.showDetails,"js-show-details"),e?document.querySelector("."+a.default.showAllDetails).classList.add(a.default.isVisible):document.querySelector("."+a.default.showAllDetails).classList.remove(a.default.isVisible)}},{key:"setTippys",value:function(t){(0,u.default)(t,{content:"<strong>"+t.dataset.count+" HIA"+(+t.dataset.count>1?"s":"")+"</strong><br />Click for details",trigger:"manual",offset:"0, -100"})}},{key:"setItemTippy",value:function(t){(0,u.default)(t,{content:"<strong>"+t.dataset.title+"</strong><br />Click for details",trigger:"manual"})}},{key:"highlightGroup",value:function(t,e){var n="."+a.default.groupDiv+'[data-group="'+e+'"',r=document.querySelector(n);r&&("hoverPrimaryGroup"===t&&r.classList.add(a.default.isHighlighted),"unHoverPrimaryGroup"===t&&r.classList.remove(a.default.isHighlighted))}},{key:"clickHandler",value:function(t){t.stopPropagation(),console.log("click group"),o.stateModule.setState("selectPrimaryGroup",this.dataset.group)}}]),e}();e.default=f},function(t,e,n){t.exports={waffleContainer:"src-components-waffle--waffleContainer",groupDiv:"src-components-waffle--groupDiv",isHighlighted:"src-components-waffle--isHighlighted",groupDivHeading:"src-components-waffle--groupDivHeading",itemsContainer:"src-components-waffle--itemsContainer",legendItem:"src-components-waffle--legendItem",item:"src-components-waffle--item",completed:"src-components-waffle--completed",showAll:"src-components-waffle--showAll",showDetails:"src-components-waffle--showDetails",showAllDetails:"src-components-waffle--showAllDetails",isVisible:"src-components-waffle--isVisible"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=s(n(0)),a=s(n(38)),o=s(n(1));function s(t){return t&&t.__esModule?t:{default:t}}var u=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),r(e,[{key:"prerender",value:function(){var t=this,n=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.name="Legend",this.prerendered&&!this.rerender?n:(n.classList.add(a.default.legend,"js-legend"),this.returnUpdatedItems(this.model.fields.find(function(e){return e.key===t.data.primary}).secondaryDimensions[0]).forEach(function(t){n.appendChild(t)}),n)}},{key:"init",value:function(){o.default.setSubs([["selectPrimaryGroup",this.toggleLegend.bind(this)],["selectSecondaryDimension",this.update.bind(this)]])}},{key:"returnUpdatedItems",value:function(t){var e=this,n=[],r=document.createElement("div");r.classList.add(a.default.legendLabel),r.textContent=this.model.fields.find(function(e){return e.key===t}).heading+": ",n.push(r),this.model.nestBy[t].forEach(function(t,r){var i=document.createElement("div");i.classList.add(a.default.legendGroup);var o=document.createElement("div");o.classList.add(a.default.legendItem,e.app.cleanKey(t.key),"secondary-"+r);var s=document.createElement("span");s.textContent=t.key||"Not specified",i.appendChild(o),i.appendChild(s),n.push(i)});var i=document.createElement("div");return i.classList.add(a.default.boolItem),i.textContent="= Completed",n.push(i),n}},{key:"update",value:function(t,e){var n=this;this.el.innerHTML="",this.returnUpdatedItems(e).forEach(function(t){n.el.appendChild(t)})}},{key:"toggleLegend",value:function(t,e){e?this.el.classList.add(a.default.showLegend):this.el.classList.remove(a.default.showLegend)}}]),e}();e.default=u},function(t,e,n){t.exports={legend:"src-components-legend--legend",showLegend:"src-components-legend--showLegend",legendGroup:"src-components-legend--legendGroup",legendItem:"src-components-legend--legendItem",legendLabel:"src-components-legend--legendLabel",boolItem:"src-components-legend--boolItem"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},a=c(n(0)),o=c(n(40)),s=n(2),u=c(n(1));function c(t){return t&&t.__esModule?t:{default:t}}function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function f(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function p(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var d=function(t){function e(){return l(this,e),f(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return p(e,a.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.name="DetailsView",this.addChildren([this.createComponent(h,"button#close-button")]),this.prerendered&&!this.rerender)return t;t.classList.add(o.default.detailsView);var n=document.createElement("div");return n.classList.add(o.default.container,"js-details-container"),t.appendChild(n),t}},{key:"init",value:function(){console.log("init details"),u.default.setSubs([["selectHIA",this.showDetailsHandler.bind(this)],["selectHIA",this.update.bind(this)]]),this.el.addEventListener("click",this.clickHandler)}},{key:"showDetailsHandler",value:function(t,e){this.isOpen=!!e}},{key:"clickHandler",value:function(t){t.stopPropagation()}},{key:"update",value:function(t,e){if(e){var n=this.model.data.find(function(t){return t.id===e}),r=isNaN(parseInt(n.publicationDate))?n.publicationDate:parseInt(n.publicationDate),i='<h2 class="'+o.default.detailsHeading+'">'+n.title+"</h2>\n                        <p><b>Date:</b> "+r+"</p>\n                        <p>"+n.description+'</p>\n                        <div class="'+o.default.columnsWrapper+'">\n                            \n                                <p><b>Source:</b> '+n.authorOrSource+"</p>\n                                <p><b>Location:</b> "+n.stateOrTerritory+"</p>\n                            \n                            \n                                <p><b>Status:</b> "+n.status+"</p>\n                                <p><b>Language:</b> TK UNAVAILABLE IN CSV</p>\n                            \n                        </div>\n\n\n        ";document.querySelector(".js-details-container").innerHTML=i}}},{key:"isOpen",get:function(){return this._isOpen},set:function(t){this._isOpen=t,t?this.el.classList.add(o.default.isOpen):this.el.classList.remove(o.default.isOpen)}}]),e}();e.default=d;var h=function(t){function e(){return l(this,e),f(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return p(e,a.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.name="CloseButton",this.prerendered&&!this.rerender?t:(t.classList.add(o.default.closeButton),t)}},{key:"init",value:function(){console.log("init closeButton"),this.el.addEventListener("click",this.clickHandler,!0)}},{key:"clickHandler",value:function(t){t.stopPropagation(),s.stateModule.setState("selectHIA",null)}}]),e}()},function(t,e,n){t.exports={detailsView:"src-views-details-view--detailsView",isOpen:"src-views-details-view--isOpen",columnsWrapper:"src-views-details-view--columnsWrapper",container:"src-views-details-view--container",closeButton:"src-views-details-view--closeButton"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=s(n(0)),a=s(n(42)),o=s(n(1));function s(t){return t&&t.__esModule?t:{default:t}}var u=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),r(e,[{key:"prerender",value:function(){var t=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.name="Mask",this.prerendered&&!this.rerender?t:(t.classList.add(a.default.mask),t)}},{key:"init",value:function(){console.log("init mask"),o.default.setSubs([["selectHIA",this.activate.bind(this)]]),this.el.addEventListener("click",this.clickHandler)}},{key:"activate",value:function(t,e){e?this.el.classList.add(a.default.isActivated):this.el.classList.remove(a.default.isActivated)}},{key:"clickHandler",value:function(t){t.stopPropagation()}}]),e}();e.default=u},function(t,e,n){t.exports={mask:"src-views-mask-view--mask",isActivated:"src-views-mask-view--isActivated"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=n(44),s=(r=o)&&r.__esModule?r:{default:r};var u=function(){function t(e,n){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.selector=e,this.el=document.querySelector(e),this.views=[],Object.keys(n).forEach(function(t){r[t]=n[t]})}return a(t,[{key:"init",value:function(t){this.needsRouter&&(this.router=new s.default,this.router.init(t)),this.disableHoverOnTouch()}},{key:"disableHoverOnTouch",value:function(){var t=!1,e=document.body,n=0;function r(){new Date-n<500||t||(e.classList.add("has-hover"),t=!0)}document.addEventListener("touchstart",function(){n=new Date},!0),document.addEventListener("touchstart",function(){t&&(e.classList.remove("has-hover"),t=!1)},!0),document.addEventListener("mousemove",r,!0),r()}},{key:"createComponent",value:function(t,e,n){var r=Object.create({app:this.app?this.app:this,children:[],data:null,model:this.model,parent:this,rerenderOnDataMismatch:!1,createComponent:this.createComponent,renderToSelector:this.selector});if(null!==n&&"object"===(void 0===n?"undefined":i(n)))for(var a in n)n.hasOwnProperty(a)&&(r[a]=n[a]);return new t(e,r)}}]),t}();e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return i(t,[{key:"init",value:function(t){var e=this;if(void 0===t||"object"!==(void 0===t?"undefined":r(t)))throw"router.init method requires a config object as parameter 1";if("function"!=typeof t.encode||"function"!=typeof t.decode||!Array.isArray(t.views)||"object"!==r(t.PS))throw"routerOptions object needs encode, decode, views, and PS properties. encode and decode must be functions; views is an array of views from the app; PS needs to be the PubSub setter.";this.stateObj={},this.hashState=t.encode,this.decodeHash=t.decode,this.viewPromises=t.views.map(function(t){return t.isReady}),this.PS=t.PS,Promise.all(this.viewPromises).then(function(){e.decodeHash()}),this.PS.setSubs(t.subscriptions.map(function(t){return[t,function(t,n){e.hashChange.call(e,t,n)}]}))}},{key:"hashChange",value:function(t,e){this.setStateObj(t,e),this.hashState(),this.replaceState()}},{key:"setStateObj",value:function(t,e){this.stateObj[t]=e}},{key:"replaceState",value:function(){window.history.replaceState(this.stateObj,"",this.hashString)}}]),t}();e.default=a},function(t,e,n){t.exports={"pew-app":"src-css--pew-app","section-title":"src-css--section-title","secondary-0":"src-css--secondary-0","secondary-1":"src-css--secondary-1","secondary-2":"src-css--secondary-2","secondary-3":"src-css--secondary-3","secondary-4":"src-css--secondary-4","secondary-5":"src-css--secondary-5","secondary-6":"src-css--secondary-6","secondary-7":"src-css--secondary-7","secondary-8":"src-css--secondary-8",none:"src-css--none"}},function(t,e,n){},function(t,e,n){"use strict";n.r(e);function r(){}function i(t,e){var n=new r;if(t instanceof r)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var i,a=-1,o=t.length;if(null==e)for(;++a<o;)n.set(a,t[a]);else for(;++a<o;)n.set(e(i=t[a],a,t),i)}else if(t)for(var s in t)n.set(s,t[s]);return n}r.prototype=i.prototype={constructor:r,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var a=i,o=function(){var t,e,n,r=[],i=[];function o(n,i,s,u){if(i>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var c,l,f,p=-1,d=n.length,h=r[i++],L=a(),v=s();++p<d;)(f=L.get(c=h(l=n[p])+""))?f.push(l):L.set(c,[l]);return L.each(function(t,e){u(v,e,o(t,i,s,u))}),v}return n={object:function(t){return o(t,0,s,u)},map:function(t){return o(t,0,c,l)},entries:function(t){return function t(n,a){if(++a>r.length)return n;var o,s=i[a-1];return null!=e&&a>=r.length?o=n.entries():(o=[],n.each(function(e,n){o.push({key:n,values:t(e,a)})})),null!=s?o.sort(function(t,e){return s(t.key,e.key)}):o}(o(t,0,c,l),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return i[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function s(){return{}}function u(t,e,n){t[e]=n}function c(){return a()}function l(t,e,n){t.set(e,n)}function f(){}var p=a.prototype;function d(t,e){var n=new f;if(t instanceof f)t.each(function(t){n.add(t)});else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}f.prototype=d.prototype={constructor:f,has:p.has,add:function(t){return this["$"+(t+="")]=t,this},remove:p.remove,clear:p.clear,values:p.keys,size:p.size,empty:p.empty,each:p.each};var h=d,L=function(t){var e=[];for(var n in t)e.push(n);return e},v=function(t){var e=[];for(var n in t)e.push(t[n]);return e},y=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e};n.d(e,"nest",function(){return o}),n.d(e,"set",function(){return h}),n.d(e,"map",function(){return a}),n.d(e,"keys",function(){return L}),n.d(e,"values",function(){return v}),n.d(e,"entries",function(){return y})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,