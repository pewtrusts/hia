!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=10)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(3);function a(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}var o=function(){function t(e,n){var r=this;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),"string"!=typeof e)throw'First parameter must be a string referencing the CSS-like selector of the element to be created \n                    ("div#divID.divClass").';this.selector=e,this.model=n.model,this.parent=n.parent,this.app=n.app,this.renderToSelector=n.renderToSelector,this.container=i.DOMHelpers.q(this.renderToSelector),this.children=n.children,this.rerender=n.rerenderOnDataMismatch&&n.model.isMismatched,this.data=n.data,this.createComponent=n.createComponent||null,this.el=this.prerender(arguments),this.isReady=new Promise(function(t,e){r.resolve=t,r.reject=e}).then(function(){r.children.forEach(function(t){t.container=i.DOMHelpers.q(t.renderToSelector),t.container.appendChild(t.el),t.resolve(!0)})}),!this.prerendered&&this.container&&(this.container.appendChild(this.el),this.resolve(!0))}return r(t,[{key:"addChildren",value:function(t){var e,n;(e=this.children).push.apply(e,a(t)),(n=this.app.views).push.apply(n,a(t))}},{key:"prerender",value:function(){var t=i.DOMHelpers.q(this.selector);return t&&!this.rerender?(this.prerendered=!0,t):t?(t.innerHTML="",t):i.DOMHelpers.c(this.selector)}},{key:"init",value:function(){}}]),t}();e.default=o},function(t,e,n){var r=n(7);const i=[];t.exports={logSubs:function(){console.log(i)},setSubs:function(t){t.forEach(function(t){var e=t[0],n=t[1];i.push(r.subscribe(e,n))})},cancelSub:function(t,e){console.log("pubsub",i);var n=r.subscribe(t,e),a=i.indexOf(n);if(console.log("pubsub",n),-1===a)throw"Subscription does not exist.";r.unsubscribe(n),i.splice(a,1)}}},function(t,e,n){const r=n(7),i={};function a(){console.log(i)}Array.prototype.compare=Array.prototype.compare||function(t){if(this.length!=t.length)return!1;if(0===this.length&&0===t.length)return!0;console.log("in compare"),console.log(this);for(var e=0;e<t.length;e++)if(this[e]!==t[e])return!1;return!0},e.stateModule={logState:a,getState:function(t){return void 0!==i[t]?i[t][0]:void 0},getPreviousState:function(t){return void 0!==i[t]&&void 0!==i[t][1]?i[t][1]:void 0},setState:function(t,e,n){if(n=n||{},void 0===i[t])i[t]=[e],r.publish(t,e),a();else{var o=!0;o="string"==typeof e||"number"==typeof e?i[t][0]!==e:!Array.isArray(e)||!Array.isArray(i[t][0])||!e.compare(i[t][0]),n.forceChange&&(o=!0),o&&(i[t].unshift(e),r.publish(t,e),a(),i[t].length>2&&(i[t].length=2))}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GTMPush=function(t){var e=window.dataLayer||null;e&&e.push({event:"Interactive Click",eventData:t})},e.publishWindowResize=function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:350;window.addEventListener("resize",function(){e||(e=setTimeout(function(){t.setState("resize",[document.documentElement.clientWidth,document.documentElement.clientHeight]),e=null},n))},!1)};e.FadeInText=(HTMLElement.prototype.fadeOutContent=function(){this.classList.add("no-opacity")},void(HTMLElement.prototype.fadeInContent=function(t,e){var n=this,r=e||0;return e&&(this.style.transition="opacity "+e+"s ease-in-out"),new Promise(function(e){var i=window.getComputedStyle(n).getPropertyValue("transition-duration")||r,a=1e3*parseFloat(i);n.fadeOutContent(),setTimeout(function(){n.innerHTML=t,n.classList.remove("no-opacity"),e(!0)},a)})})),e.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ \/]/g,"-").replace(/['"”’“‘,.!?;()&:]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},String.prototype.doCamelCase=function(){return this.replace(/(?:^\w|[A-Z]|\b\w)/g,function(t,e){return 0==e?t.toLowerCase():t.toUpperCase()}).replace(/\s+/g,"")},String.prototype.trunc=String.prototype.trunc||function(t,e){if(this.length<=t)return this;var n=this.substr(0,t-1);return(e?n.substr(0,n.lastIndexOf(" ")):n)+"..."},void(String.prototype.hashCode=function(){var t,e=0;if(0===this.length)return e;for(t=0;t<this.length;t++)e=(e<<5)-e+this.charCodeAt(t),e|=0;return e})),e.DOMHelpers={c:function(t){if(-1!==t.indexOf(".")||-1!==t.indexOf("#")){var e=t.match(/\.([^#.]*)/g)||[],n=t.match(/#([^.]*)/),r=t.match(/^([^.#]+)/),i=document.createElement(r[0]);return e.forEach(function(t){i.classList.add(t.replace(".",""))}),null!==n&&i.setAttribute("id",n[1]),i}return document.createElement(t)},q:function(t){return document.querySelector(t)},qa:function(t){return document.querySelectorAll(t)}}},function(t,e,n){"use strict";n.r(e);var r=n(9);
/**!
* tippy.js v4.3.1
* (c) 2017-2019 atomiks
* MIT License
*/function i(){return(i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}var a="undefined"!=typeof window&&"undefined"!=typeof document,o=a?navigator.userAgent:"",s=/MSIE |Trident\//.test(o),u=/UCBrowser\//.test(o),c=a&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,l={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:0,distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",triggerTarget:null,updateDuration:0,wait:null,zIndex:9999},f=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],p=a?Element.prototype:{},d=p.matches||p.matchesSelector||p.webkitMatchesSelector||p.mozMatchesSelector||p.msMatchesSelector;function h(t){return[].slice.call(t)}function L(t,e){return v(t,function(t){return d.call(t,e)})}function v(t,e){for(;t;){if(e(t))return t;t=t.parentElement}return null}var y={passive:!0},m=4,g="x-placement",b="x-out-of-boundaries",_="tippy-iOS",w="tippy-active",x="tippy-popper",k="tippy-tooltip",O="tippy-content",E="tippy-backdrop",S="tippy-arrow",M="tippy-roundarrow",C=".".concat(x),A=".".concat(k),j=".".concat(O),P=".".concat(E),T=".".concat(S),D=".".concat(M),I=!1;function R(){I||(I=!0,c&&document.body.classList.add(_),window.performance&&document.addEventListener("mousemove",H))}var N=0;function H(){var t=performance.now();t-N<20&&(I=!1,document.removeEventListener("mousemove",H),c||document.body.classList.remove(_)),N=t}function W(){var t=document.activeElement;t&&t.blur&&t._tippy&&t.blur()}var B=Object.keys(l);function Z(t,e){return{}.hasOwnProperty.call(t,e)}function F(t,e,n){if(Array.isArray(t)){var r=t[e];return null==r?n:r}return t}function q(t,e){var n;return function(){var r=this,i=arguments;clearTimeout(n),n=setTimeout(function(){return t.apply(r,i)},e)}}function z(t,e){return t&&t.modifiers&&t.modifiers[e]}function U(t,e){return t.indexOf(e)>-1}function V(t){return t instanceof Element}function Y(t){return!(!t||!Z(t,"isVirtual"))||V(t)}function G(t,e){return"function"==typeof t?t.apply(null,e):t}function X(t,e){t.filter(function(t){return"flip"===t.name})[0].enabled=e}function $(){return document.createElement("div")}function K(t,e){t.forEach(function(t){t&&(t.style.transitionDuration="".concat(e,"ms"))})}function J(t,e){t.forEach(function(t){t&&t.setAttribute("data-state",e)})}function Q(t,e){var n=i({},e,{content:G(e.content,[t])},e.ignoreAttributes?{}:function(t){return B.reduce(function(e,n){var r=(t.getAttribute("data-tippy-".concat(n))||"").trim();if(!r)return e;if("content"===n)e[n]=r;else try{e[n]=JSON.parse(r)}catch(t){e[n]=r}return e},{})}(t));return(n.arrow||u)&&(n.animateFill=!1),n}function tt(t,e){Object.keys(t).forEach(function(t){if(!Z(e,t))throw new Error("[tippy]: `".concat(t,"` is not a valid option"))})}function et(t,e){t.innerHTML=V(e)?e.innerHTML:e}function nt(t,e){if(V(e.content))et(t,""),t.appendChild(e.content);else if("function"!=typeof e.content){t[e.allowHTML?"innerHTML":"textContent"]=e.content}}function rt(t){return{tooltip:t.querySelector(A),backdrop:t.querySelector(P),content:t.querySelector(j),arrow:t.querySelector(T)||t.querySelector(D)}}function it(t){t.setAttribute("data-inertia","")}function at(t){var e=$();return"round"===t?(e.className=M,et(e,'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>')):e.className=S,e}function ot(){var t=$();return t.className=E,t.setAttribute("data-state","hidden"),t}function st(t,e){t.setAttribute("tabindex","-1"),e.setAttribute("data-interactive","")}function ut(t,e,n){var r=u&&void 0!==document.body.style.webkitTransition?"webkitTransitionEnd":"transitionend";t[e+"EventListener"](r,n)}function ct(t){var e=t.getAttribute(g);return e?e.split("-")[0]:""}function lt(t,e,n){n.split(" ").forEach(function(n){t.classList[e](n+"-theme")})}function ft(t,e){var n=$();n.className=x,n.id="tippy-".concat(t),n.style.zIndex=""+e.zIndex,e.role&&n.setAttribute("role",e.role);var r=$();r.className=k,r.style.maxWidth=e.maxWidth+("number"==typeof e.maxWidth?"px":""),r.setAttribute("data-size",e.size),r.setAttribute("data-animation",e.animation),r.setAttribute("data-state","hidden"),lt(r,"add",e.theme);var i=$();return i.className=O,i.setAttribute("data-state","hidden"),e.interactive&&st(n,r),e.arrow&&r.appendChild(at(e.arrowType)),e.animateFill&&(r.appendChild(ot()),r.setAttribute("data-animatefill","")),e.inertia&&it(r),nt(i,e),r.appendChild(i),n.appendChild(r),n}function pt(t,e,n){var r=rt(t),i=r.tooltip,a=r.content,o=r.backdrop,s=r.arrow;t.style.zIndex=""+n.zIndex,i.setAttribute("data-size",n.size),i.setAttribute("data-animation",n.animation),i.style.maxWidth=n.maxWidth+("number"==typeof n.maxWidth?"px":""),n.role?t.setAttribute("role",n.role):t.removeAttribute("role"),e.content!==n.content&&nt(a,n),!e.animateFill&&n.animateFill?(i.appendChild(ot()),i.setAttribute("data-animatefill","")):e.animateFill&&!n.animateFill&&(i.removeChild(o),i.removeAttribute("data-animatefill")),!e.arrow&&n.arrow?i.appendChild(at(n.arrowType)):e.arrow&&!n.arrow&&i.removeChild(s),e.arrow&&n.arrow&&e.arrowType!==n.arrowType&&i.replaceChild(at(n.arrowType),s),!e.interactive&&n.interactive?st(t,i):e.interactive&&!n.interactive&&function(t,e){t.removeAttribute("tabindex"),e.removeAttribute("data-interactive")}(t,i),!e.inertia&&n.inertia?it(i):e.inertia&&!n.inertia&&function(t){t.removeAttribute("data-inertia")}(i),e.theme!==n.theme&&(lt(i,"remove",e.theme),lt(i,"add",n.theme))}var dt=1;function ht(t,e){var n,a,o,u,c,p=Q(t,e);if(!p.multiple&&t._tippy)return null;var _,x,k,O,E,S,M=!1,A=!1,j=!1,P=[],T=p.interactiveDebounce>0?q(yt,p.interactiveDebounce):yt,D=dt++,R=ft(D,p),N=rt(R),H={id:D,reference:t,popper:R,popperChildren:N,popperInstance:null,props:p,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:Mt,set:Ct,setContent:function(t){Ct({content:t})},show:At,hide:jt,enable:function(){H.state.isEnabled=!0},disable:function(){H.state.isEnabled=!1},destroy:function(e){if(H.state.isDestroyed)return;H.state.isMounted&&jt(0);st(),delete t._tippy;var n=H.props.target;n&&e&&V(t)&&h(t.querySelectorAll(n)).forEach(function(t){t._tippy&&t._tippy.destroy()});H.popperInstance&&H.popperInstance.destroy();H.state.isDestroyed=!0}};return t._tippy=H,R._tippy=H,ot(),p.lazy||kt(),p.showOnInit&&Ot(),!p.a11y||p.target||(!V(S=Y())||d.call(S,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")&&!S.hasAttribute("disabled"))||Y().setAttribute("tabindex","0"),R.addEventListener("mouseenter",function(t){H.props.interactive&&H.state.isVisible&&"mouseenter"===n&&Ot(t,!0)}),R.addEventListener("mouseleave",function(){H.props.interactive&&"mouseenter"===n&&document.addEventListener("mousemove",T)}),H;function W(){document.removeEventListener("mousemove",Lt)}function B(){document.body.removeEventListener("mouseleave",Et),document.removeEventListener("mousemove",T)}function Y(){return H.props.triggerTarget||t}function $(){document.addEventListener("click",St,!0)}function et(){return[H.popperChildren.tooltip,H.popperChildren.backdrop,H.popperChildren.content]}function nt(){return H.props.followCursor&&!I&&"focus"!==n}function it(t,e){var n=H.popperChildren.tooltip;function r(t){t.target===n&&(ut(n,"remove",r),e())}if(0===t)return e();ut(n,"remove",O),ut(n,"add",r),O=r}function at(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];Y().addEventListener(t,e,n),P.push({eventType:t,handler:e,options:n})}function ot(){H.props.touchHold&&!H.props.target&&(at("touchstart",vt,y),at("touchend",mt,y)),H.props.trigger.trim().split(" ").forEach(function(t){if("manual"!==t)if(H.props.target)switch(t){case"mouseenter":at("mouseover",bt),at("mouseout",_t);break;case"focus":at("focusin",bt),at("focusout",_t);break;case"click":at(t,bt)}else switch(at(t,vt),t){case"mouseenter":at("mouseleave",mt);break;case"focus":at(s?"focusout":"blur",gt)}})}function st(){P.forEach(function(t){var e=t.eventType,n=t.handler,r=t.options;Y().removeEventListener(e,n,r)}),P=[]}function lt(t){return H.props.arrow?E[t]+("round"===H.props.arrowType?18:16):E[t]}function Lt(e){var n=a=e,r=n.clientX,o=n.clientY;if(E){var s=t.getBoundingClientRect(),u=H.props.followCursor,c="horizontal"===u,l="vertical"===u,f=ct(R),p=U(["top","bottom"],f),d=U(["left","right"],f),h=i({},E);p&&(h.left=lt("left"),h.right=lt("right")),d&&(h.top=lt("top"),h.bottom=lt("bottom"));var L=p?Math.max(h.left,r):r,y=d?Math.max(h.top,o):o;p&&L>h.right&&(L=Math.min(r,window.innerWidth-h.right)),d&&y>h.bottom&&(y=Math.min(o,window.innerHeight-h.bottom)),!v(e.target,function(e){return e===t})&&H.props.interactive||(H.popperInstance.reference=i({},H.popperInstance.reference,{getBoundingClientRect:function(){return{width:0,height:0,top:c?s.top:y,bottom:c?s.bottom:y,left:l?s.left:L,right:l?s.right:L}},clientWidth:0,clientHeight:0}),H.popperInstance.scheduleUpdate()),"initial"===u&&H.state.isVisible&&W()}}function vt(t){H.state.isEnabled&&!wt(t)&&(H.state.isVisible||(n=t.type,t instanceof MouseEvent&&(a=t)),"click"===t.type&&!1!==H.props.hideOnClick&&H.state.isVisible?Et():Ot(t))}function yt(e){var n=L(e.target,C)===R,r=v(e.target,function(e){return e===t});n||r||function(t,e,n,r){if(!t)return!0;var i=n.clientX,a=n.clientY,o=r.interactiveBorder,s=r.distance,u=e.top-a>("top"===t?o+s:o),c=a-e.bottom>("bottom"===t?o+s:o),l=e.left-i>("left"===t?o+s:o),f=i-e.right>("right"===t?o+s:o);return u||c||l||f}(ct(R),R.getBoundingClientRect(),e,H.props)&&(B(),Et())}function mt(t){if(!wt(t))return H.props.interactive?(document.body.addEventListener("mouseleave",Et),void document.addEventListener("mousemove",T)):void Et()}function gt(t){t.target===Y()&&(H.props.interactive&&t.relatedTarget&&R.contains(t.relatedTarget)||Et())}function bt(t){L(t.target,H.props.target)&&Ot(t)}function _t(t){L(t.target,H.props.target)&&Et()}function wt(t){var e="ontouchstart"in window,n=U(t.type,"touch"),r=H.props.touchHold;return e&&I&&r&&!n||I&&!r&&n}function xt(){!j&&k&&(j=!0,function(t){t.offsetHeight}(R),k())}function kt(){var e=H.props.popperOptions,n=H.popperChildren,a=n.tooltip,o=n.arrow,s=z(e,"preventOverflow");function u(t){H.props.flip&&!H.props.flipOnUpdate&&(t.flipped&&(H.popperInstance.options.placement=t.placement),X(H.popperInstance.modifiers,!1)),a.setAttribute(g,t.placement),!1!==t.attributes[b]?a.setAttribute(b,""):a.removeAttribute(b),x&&x!==t.placement&&A&&(a.style.transition="none",requestAnimationFrame(function(){a.style.transition=""})),x=t.placement,A=H.state.isVisible;var e=ct(R),n=a.style;n.top=n.bottom=n.left=n.right="",n[e]=-(H.props.distance-10)+"px";var r=s&&void 0!==s.padding?s.padding:m,o="number"==typeof r,u=i({top:o?r:r.top,bottom:o?r:r.bottom,left:o?r:r.left,right:o?r:r.right},!o&&r);u[e]=o?r+H.props.distance:(r[e]||0)+H.props.distance,H.popperInstance.modifiers.filter(function(t){return"preventOverflow"===t.name})[0].padding=u,E=u}var c=i({eventsEnabled:!1,placement:H.props.placement},e,{modifiers:i({},e?e.modifiers:{},{preventOverflow:i({boundariesElement:H.props.boundary,padding:m},s),arrow:i({element:o,enabled:!!o},z(e,"arrow")),flip:i({enabled:H.props.flip,padding:H.props.distance+m,behavior:H.props.flipBehavior},z(e,"flip")),offset:i({offset:H.props.offset},z(e,"offset"))}),onCreate:function(t){xt(),u(t),e&&e.onCreate&&e.onCreate(t)},onUpdate:function(t){xt(),u(t),e&&e.onUpdate&&e.onUpdate(t)}});H.popperInstance=new r.a(t,R,c)}function Ot(t,n){if(Mt(),!H.state.isVisible){if(H.props.target)return function(t){if(t){var n=L(t.target,H.props.target);n&&!n._tippy&&ht(n,i({},H.props,{content:G(e.content,[n]),appendTo:e.appendTo,target:"",showOnInit:!0}))}}(t);if(M=!0,t&&!n&&H.props.onTrigger(H,t),H.props.wait)return H.props.wait(H,t);nt()&&!H.state.isMounted&&(H.popperInstance||kt(),document.addEventListener("mousemove",Lt)),$();var r=F(H.props.delay,0,l.delay);r?o=setTimeout(function(){At()},r):At()}}function Et(){if(Mt(),!H.state.isVisible)return W();M=!1;var t=F(H.props.delay,1,l.delay);t?u=setTimeout(function(){H.state.isVisible&&jt()},t):c=requestAnimationFrame(function(){jt()})}function St(t){if(!H.props.interactive||!R.contains(t.target)){if(Y().contains(t.target)){if(I)return;if(H.state.isVisible&&U(H.props.trigger,"click"))return}!0===H.props.hideOnClick&&(Mt(),jt())}}function Mt(){clearTimeout(o),clearTimeout(u),cancelAnimationFrame(c)}function Ct(e){tt(e=e||{},l),st();var n=H.props,r=Q(t,i({},H.props,e,{ignoreAttributes:!0}));r.ignoreAttributes=Z(e,"ignoreAttributes")?e.ignoreAttributes||!1:n.ignoreAttributes,H.props=r,ot(),B(),T=q(yt,e.interactiveDebounce||0),pt(R,n,r),H.popperChildren=rt(R),H.popperInstance&&(f.some(function(t){return Z(e,t)&&e[t]!==n[t]})?(H.popperInstance.destroy(),kt(),H.state.isVisible&&H.popperInstance.enableEventListeners(),H.props.followCursor&&a&&Lt(a)):H.popperInstance.update())}function At(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:F(H.props.duration,0,l.duration[1]);if(!H.state.isDestroyed&&H.state.isEnabled&&(!I||H.props.touch)&&!Y().hasAttribute("disabled")&&!1!==H.props.onShow(H)){$(),R.style.visibility="visible",H.state.isVisible=!0,H.props.interactive&&Y().classList.add(w);var n=et();K(n.concat(R),0),k=function(){H.state.isVisible&&(nt()||H.popperInstance.update(),H.popperChildren.backdrop&&(H.popperChildren.content.style.transitionDelay=Math.round(e/12)+"ms"),H.props.sticky&&(K([R],s?0:H.props.updateDuration),function t(){H.popperInstance.scheduleUpdate(),H.state.isMounted?requestAnimationFrame(t):K([R],0)}()),K([R],H.props.updateDuration),K(n,e),J(n,"visible"),function(t,e){it(t,e)}(e,function(){H.props.aria&&Y().setAttribute("aria-".concat(H.props.aria),R.id),H.props.onShown(H),H.state.isShown=!0}))},function(){j=!1;var e=!(nt()||"initial"===H.props.followCursor&&I);H.popperInstance?(nt()||(H.popperInstance.scheduleUpdate(),e&&H.popperInstance.enableEventListeners()),X(H.popperInstance.modifiers,H.props.flip)):(kt(),e&&H.popperInstance.enableEventListeners()),H.popperInstance.reference=t;var n=H.popperChildren.arrow;nt()?(n&&(n.style.margin="0"),a&&Lt(a)):n&&(n.style.margin=""),I&&a&&"initial"===H.props.followCursor&&(Lt(a),n&&(n.style.margin="0"));var r=H.props.appendTo;(_="parent"===r?t.parentNode:G(r,[t])).contains(R)||(_.appendChild(R),H.props.onMount(H),H.state.isMounted=!0)}()}}function jt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:F(H.props.duration,1,l.duration[1]);if(!H.state.isDestroyed&&H.state.isEnabled&&!1!==H.props.onHide(H)){document.removeEventListener("click",St,!0),R.style.visibility="hidden",H.state.isVisible=!1,H.state.isShown=!1,A=!1,H.props.interactive&&Y().classList.remove(w);var e=et();K(e,t),J(e,"hidden"),function(t,e){it(t,function(){!H.state.isVisible&&_&&_.contains(R)&&e()})}(t,function(){M||W(),H.props.aria&&Y().removeAttribute("aria-".concat(H.props.aria)),H.popperInstance.disableEventListeners(),H.popperInstance.options.placement=H.props.placement,_.removeChild(R),H.props.onHidden(H),H.state.isMounted=!1})}}}var Lt=!1;function vt(t,e){tt(e||{},l),Lt||(document.addEventListener("touchstart",R,y),window.addEventListener("blur",W),Lt=!0);var n,r=i({},l,e);n=t,"[object Object]"!=={}.toString.call(n)||n.addEventListener||function(t){var e={isVirtual:!0,attributes:t.attributes||{},contains:function(){},setAttribute:function(e,n){t.attributes[e]=n},getAttribute:function(e){return t.attributes[e]},removeAttribute:function(e){delete t.attributes[e]},hasAttribute:function(e){return e in t.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(e){t.classList.classNames[e]=!0},remove:function(e){delete t.classList.classNames[e]},contains:function(e){return e in t.classList.classNames}}};for(var n in e)t[n]=e[n]}(t);var a=function(t){if(Y(t))return[t];if(t instanceof NodeList)return h(t);if(Array.isArray(t))return t;try{return h(document.querySelectorAll(t))}catch(t){return[]}}(t).reduce(function(t,e){var n=e&&ht(e,r);return n&&t.push(n),t},[]);return Y(t)?a[0]:a}vt.version="4.3.1",vt.defaults=l,vt.setDefaults=function(t){Object.keys(t).forEach(function(e){l[e]=t[e]})},vt.hideAll=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.exclude,n=t.duration;h(document.querySelectorAll(C)).forEach(function(t){var r,i=t._tippy;if(i){var a=!1;e&&(a=(r=e)._tippy&&!d.call(r,C)?i.reference===e:t===e.popper),a||i.hide(n)}})},vt.group=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.delay,r=void 0===n?t[0].props.delay:n,a=e.duration,o=void 0===a?0:a,s=!1;function u(t){s=t,p()}function c(e){e._originalProps.onShow(e),t.forEach(function(t){t.set({duration:o}),t.state.isVisible&&t.hide()}),u(!0)}function l(t){t._originalProps.onHide(t),u(!1)}function f(t){t._originalProps.onShown(t),t.set({duration:t._originalProps.duration})}function p(){t.forEach(function(t){t.set({onShow:c,onShown:f,onHide:l,delay:s?[0,Array.isArray(r)?r[1]:r]:r,duration:s?o:t._originalProps.duration})})}t.forEach(function(t){t._originalProps?t.set(t._originalProps):t._originalProps=i({},t.props)}),p()},a&&setTimeout(function(){h(document.querySelectorAll("[data-tippy]")).forEach(function(t){var e=t.getAttribute("data-tippy");e&&vt(t,{content:e})})}),function(t){if(a){var e=document.createElement("style");e.type="text/css",e.textContent=t,e.setAttribute("data-tippy-stylesheet","");var n=document.head,r=n.firstChild;r?n.insertBefore(e,r):n.appendChild(e)}}('.tippy-iOS{cursor:pointer!important;-webkit-tap-highlight-color:transparent}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px) rotateX(0);transform:perspective(700px) translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(60deg);transform:perspective(700px) translateY(0) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px) rotateX(0);transform:perspective(700px) translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(-60deg);transform:perspective(700px) translateY(0) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px) rotateY(0);transform:perspective(700px) translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(-60deg);transform:perspective(700px) translateX(0) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px) rotateY(0);transform:perspective(700px) translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(60deg);transform:perspective(700px) translateX(0) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=visible]{opacity:1}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}'),e.default=vt},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){(function(t){!function(n,r){"use strict";var i={};n.PubSub=i;var a=n.define;!function(t){var e={},n=-1;function r(t){var e;for(e in t)if(t.hasOwnProperty(e))return!0;return!1}function i(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function a(t,e,n){t(e,n)}function o(t,n,r,o){var s,u=e[n],c=o?a:i;if(e.hasOwnProperty(n))for(s in u)u.hasOwnProperty(s)&&c(u[s],t,r)}function s(t,n,i,a){var s=function(t,e,n){return function(){var r=String(t),i=r.lastIndexOf(".");for(o(t,t,e,n);-1!==i;)r=r.substr(0,i),i=r.lastIndexOf("."),o(t,r,e,n)}}(t="symbol"==typeof t?t.toString():t,n,a),u=function(t){var n=String(t),i=Boolean(e.hasOwnProperty(n)&&r(e[n])),a=n.lastIndexOf(".");for(;!i&&-1!==a;)n=n.substr(0,a),a=n.lastIndexOf("."),i=Boolean(e.hasOwnProperty(n)&&r(e[n]));return i}(t);return!!u&&(!0===i?s():setTimeout(s,0),!0)}t.publish=function(e,n){return s(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return s(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,r){if("function"!=typeof r)return!1;t="symbol"==typeof t?t.toString():t,e.hasOwnProperty(t)||(e[t]={});var i="uid_"+String(++n);return e[t][i]=r,i},t.subscribeOnce=function(e,n){var r=t.subscribe(e,function(){t.unsubscribe(r),n.apply(this,arguments)});return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)e.hasOwnProperty(n)&&0===n.indexOf(t)&&delete e[n]},t.unsubscribe=function(n){var r,i,a,o="string"==typeof n&&(e.hasOwnProperty(n)||function(t){var n;for(n in e)if(e.hasOwnProperty(n)&&0===n.indexOf(t))return!0;return!1}(n)),s=!o&&"string"==typeof n,u="function"==typeof n,c=!1;if(!o){for(r in e)if(e.hasOwnProperty(r)){if(i=e[r],s&&i[n]){delete i[n],c=n;break}if(u)for(a in i)i.hasOwnProperty(a)&&i[a]===n&&(delete i[a],c=!0)}return c}t.clearSubscriptions(n)}}(i),"function"==typeof a&&a.amd?a(function(){return i}):(void 0!==t&&t.exports&&(e=t.exports=i),e.PubSub=i,t.exports=e=i)}("object"==typeof window&&window||this)}).call(this,n(6)(t))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=u(n(0)),a=u(n(19)),o=n(2),s=n(3);function u(t){return t&&t.__esModule?t:{default:t}}var c=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),r(e,[{key:"prerender",value:function(){var t=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.prerendered&&!this.rerender)return t;var n=document.createElement("nav");if(n.setAttribute("aria-label","In-page"),n.setAttribute("aria-controls","map-view bar-view waffle-view"),n.classList.add(a.default.menuList),this.sections=this.model.fields.filter(function(t){return!t.isSecondaryOnly}),this.sections.forEach(function(t){var e=document.createElement("div");e.classList.add(a.default.navItemWrapper);var r=document.createElement("a");r.classList.add(a.default.navLink),r.href="#"+t.key,r.innerHTML="<span>"+t.heading+" <span>"+t.text+"</span></span>",r.setAttribute("data-section",t.key),e.appendChild(r),n.appendChild(e)}),this.sections.length%2==1){var r=document.createElement("div");r.classList.add(a.default.navLink,a.default.placeholderMenuItem),r.setAttribute("disabled","disabled"),n.appendChild(r)}return t.appendChild(n),t}},{key:"init",value:function(){var t=this;this.el.querySelectorAll("a").forEach(function(e){e.addEventListener("click",function(e){e.preventDefault(),t.clickHandler.call(this,t)}),e.addEventListener("keyup",function(e){13===e.keyCode&&(e.preventDefault(),t.clickHandler.call(this,t))})})}},{key:"clickHandler",value:function(t){(0,s.GTMPush)("HIA|Navigate|"+t.name+"|"+this.dataset.section),o.stateModule.setState("view",this.dataset.section)}}]),e}();e.default=c},function(t,e,n){"use strict";(function(t){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.15.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],i=0,a=0;a<r.length;a+=1)if(n&&navigator.userAgent.indexOf(r[a])>=0){i=1;break}var o=n&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},i))}};function s(t){return t&&"[object Function]"==={}.toString.call(t)}function u(t,e){if(1!==t.nodeType)return[];var n=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?n[e]:n}function c(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function l(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=u(t),n=e.overflow,r=e.overflowX,i=e.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?t:l(c(t))}var f=n&&!(!window.MSInputMethodContext||!document.documentMode),p=n&&/MSIE 10/.test(navigator.userAgent);function d(t){return 11===t?f:10===t?p:f||p}function h(t){if(!t)return document.documentElement;for(var e=d(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===u(n,"position")?h(n):n:t?t.ownerDocument.documentElement:document.documentElement}function L(t){return null!==t.parentNode?L(t.parentNode):t}function v(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?t:e,i=n?e:t,a=document.createRange();a.setStart(r,0),a.setEnd(i,0);var o,s,u=a.commonAncestorContainer;if(t!==u&&e!==u||r.contains(i))return"BODY"===(s=(o=u).nodeName)||"HTML"!==s&&h(o.firstElementChild)!==o?h(u):u;var c=L(t);return c.host?v(c.host,e):v(t,L(e).host)}function y(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var r=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||r)[e]}return t[e]}function m(t,e){var n="x"===e?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+r+"Width"],10)}function g(t,e,n,r){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],d(10)?parseInt(n["offset"+t])+parseInt(r["margin"+("Height"===t?"Top":"Left")])+parseInt(r["margin"+("Height"===t?"Bottom":"Right")]):0)}function b(t){var e=t.body,n=t.documentElement,r=d(10)&&getComputedStyle(n);return{height:g("Height",e,n,r),width:g("Width",e,n,r)}}var _=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},w=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),x=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},k=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function O(t){return k({},t,{right:t.left+t.width,bottom:t.top+t.height})}function E(t){var e={};try{if(d(10)){e=t.getBoundingClientRect();var n=y(t,"top"),r=y(t,"left");e.top+=n,e.left+=r,e.bottom+=n,e.right+=r}else e=t.getBoundingClientRect()}catch(t){}var i={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},a="HTML"===t.nodeName?b(t.ownerDocument):{},o=a.width||t.clientWidth||i.right-i.left,s=a.height||t.clientHeight||i.bottom-i.top,c=t.offsetWidth-o,l=t.offsetHeight-s;if(c||l){var f=u(t);c-=m(f,"x"),l-=m(f,"y"),i.width-=c,i.height-=l}return O(i)}function S(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=d(10),i="HTML"===e.nodeName,a=E(t),o=E(e),s=l(t),c=u(e),f=parseFloat(c.borderTopWidth,10),p=parseFloat(c.borderLeftWidth,10);n&&i&&(o.top=Math.max(o.top,0),o.left=Math.max(o.left,0));var h=O({top:a.top-o.top-f,left:a.left-o.left-p,width:a.width,height:a.height});if(h.marginTop=0,h.marginLeft=0,!r&&i){var L=parseFloat(c.marginTop,10),v=parseFloat(c.marginLeft,10);h.top-=f-L,h.bottom-=f-L,h.left-=p-v,h.right-=p-v,h.marginTop=L,h.marginLeft=v}return(r&&!n?e.contains(s):e===s&&"BODY"!==s.nodeName)&&(h=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=y(e,"top"),i=y(e,"left"),a=n?-1:1;return t.top+=r*a,t.bottom+=r*a,t.left+=i*a,t.right+=i*a,t}(h,e)),h}function M(t){if(!t||!t.parentElement||d())return document.documentElement;for(var e=t.parentElement;e&&"none"===u(e,"transform");)e=e.parentElement;return e||document.documentElement}function C(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a={top:0,left:0},o=i?M(t):v(t,e);if("viewport"===r)a=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,r=S(t,n),i=Math.max(n.clientWidth,window.innerWidth||0),a=Math.max(n.clientHeight,window.innerHeight||0),o=e?0:y(n),s=e?0:y(n,"left");return O({top:o-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:a})}(o,i);else{var s=void 0;"scrollParent"===r?"BODY"===(s=l(c(e))).nodeName&&(s=t.ownerDocument.documentElement):s="window"===r?t.ownerDocument.documentElement:r;var f=S(s,o,i);if("HTML"!==s.nodeName||function t(e){var n=e.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===u(e,"position"))return!0;var r=c(e);return!!r&&t(r)}(o))a=f;else{var p=b(t.ownerDocument),d=p.height,h=p.width;a.top+=f.top-f.marginTop,a.bottom=d+f.top,a.left+=f.left-f.marginLeft,a.right=h+f.left}}var L="number"==typeof(n=n||0);return a.left+=L?n:n.left||0,a.top+=L?n:n.top||0,a.right-=L?n:n.right||0,a.bottom-=L?n:n.bottom||0,a}function A(t,e,n,r,i){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var o=C(n,r,a,i),s={top:{width:o.width,height:e.top-o.top},right:{width:o.right-e.right,height:o.height},bottom:{width:o.width,height:o.bottom-e.bottom},left:{width:e.left-o.left,height:o.height}},u=Object.keys(s).map(function(t){return k({key:t},s[t],{area:(e=s[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),c=u.filter(function(t){var e=t.width,r=t.height;return e>=n.clientWidth&&r>=n.clientHeight}),l=c.length>0?c[0].key:u[0].key,f=t.split("-")[1];return l+(f?"-"+f:"")}function j(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return S(n,r?M(e):v(e,n),r)}function P(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),r=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+r,height:t.offsetHeight+n}}function T(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function D(t,e,n){n=n.split("-")[0];var r=P(t),i={width:r.width,height:r.height},a=-1!==["right","left"].indexOf(n),o=a?"top":"left",s=a?"left":"top",u=a?"height":"width",c=a?"width":"height";return i[o]=e[o]+e[u]/2-r[u]/2,i[s]=n===s?e[s]-r[c]:e[T(s)],i}function I(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function R(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var r=I(t,function(t){return t[e]===n});return t.indexOf(r)}(t,"name",n))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&s(n)&&(e.offsets.popper=O(e.offsets.popper),e.offsets.reference=O(e.offsets.reference),e=n(e,t))}),e}function N(t,e){return t.some(function(t){var n=t.name;return t.enabled&&n===e})}function H(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),r=0;r<e.length;r++){var i=e[r],a=i?""+i+n:t;if(void 0!==document.body.style[a])return a}return null}function W(t){var e=t.ownerDocument;return e?e.defaultView:window}function B(t,e,n,r){n.updateBound=r,W(t).addEventListener("resize",n.updateBound,{passive:!0});var i=l(t);return function t(e,n,r,i){var a="BODY"===e.nodeName,o=a?e.ownerDocument.defaultView:e;o.addEventListener(n,r,{passive:!0}),a||t(l(o.parentNode),n,r,i),i.push(o)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function Z(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,W(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function F(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function q(t,e){Object.keys(e).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&F(e[n])&&(r="px"),t.style[n]=e[n]+r})}var z=n&&/Firefox/i.test(navigator.userAgent);function U(t,e,n){var r=I(t,function(t){return t.name===e}),i=!!r&&t.some(function(t){return t.name===n&&t.enabled&&t.order<r.order});if(!i){var a="`"+e+"`",o="`"+n+"`";console.warn(o+" modifier is required by "+a+" modifier in order to work, be sure to include it before "+a+"!")}return i}var V=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Y=V.slice(3);function G(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Y.indexOf(t),r=Y.slice(n+1).concat(Y.slice(0,n));return e?r.reverse():r}var X={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function $(t,e,n,r){var i=[0,0],a=-1!==["right","left"].indexOf(r),o=t.split(/(\+|\-)/).map(function(t){return t.trim()}),s=o.indexOf(I(o,function(t){return-1!==t.search(/,|\s/)}));o[s]&&-1===o[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,c=-1!==s?[o.slice(0,s).concat([o[s].split(u)[0]]),[o[s].split(u)[1]].concat(o.slice(s+1))]:[o];return(c=c.map(function(t,r){var i=(1===r?!a:a)?"height":"width",o=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,o=!0,t):o?(t[t.length-1]+=e,o=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,r){var i=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),a=+i[1],o=i[2];if(!a)return t;if(0===o.indexOf("%")){var s=void 0;switch(o){case"%p":s=n;break;case"%":case"%r":default:s=r}return O(s)[e]/100*a}if("vh"===o||"vw"===o)return("vh"===o?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*a;return a}(t,i,e,n)})})).forEach(function(t,e){t.forEach(function(n,r){F(n)&&(i[e]+=n*("-"===t[r-1]?-1:1))})}),i}var K={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],r=e.split("-")[1];if(r){var i=t.offsets,a=i.reference,o=i.popper,s=-1!==["bottom","top"].indexOf(n),u=s?"left":"top",c=s?"width":"height",l={start:x({},u,a[u]),end:x({},u,a[u]+a[c]-o[c])};t.offsets.popper=k({},o,l[r])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,r=t.placement,i=t.offsets,a=i.popper,o=i.reference,s=r.split("-")[0],u=void 0;return u=F(+n)?[+n,0]:$(n,a,o,s),"left"===s?(a.top+=u[0],a.left-=u[1]):"right"===s?(a.top+=u[0],a.left+=u[1]):"top"===s?(a.left+=u[0],a.top-=u[1]):"bottom"===s&&(a.left+=u[0],a.top+=u[1]),t.popper=a,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||h(t.instance.popper);t.instance.reference===n&&(n=h(n));var r=H("transform"),i=t.instance.popper.style,a=i.top,o=i.left,s=i[r];i.top="",i.left="",i[r]="";var u=C(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);i.top=a,i.left=o,i[r]=s,e.boundaries=u;var c=e.priority,l=t.offsets.popper,f={primary:function(t){var n=l[t];return l[t]<u[t]&&!e.escapeWithReference&&(n=Math.max(l[t],u[t])),x({},t,n)},secondary:function(t){var n="right"===t?"left":"top",r=l[n];return l[t]>u[t]&&!e.escapeWithReference&&(r=Math.min(l[n],u[t]-("right"===t?l.width:l.height))),x({},n,r)}};return c.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";l=k({},l,f[e](t))}),t.offsets.popper=l,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,r=e.reference,i=t.placement.split("-")[0],a=Math.floor,o=-1!==["top","bottom"].indexOf(i),s=o?"right":"bottom",u=o?"left":"top",c=o?"width":"height";return n[s]<a(r[u])&&(t.offsets.popper[u]=a(r[u])-n[c]),n[u]>a(r[s])&&(t.offsets.popper[u]=a(r[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!U(t.instance.modifiers,"arrow","keepTogether"))return t;var r=e.element;if("string"==typeof r){if(!(r=t.instance.popper.querySelector(r)))return t}else if(!t.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var i=t.placement.split("-")[0],a=t.offsets,o=a.popper,s=a.reference,c=-1!==["left","right"].indexOf(i),l=c?"height":"width",f=c?"Top":"Left",p=f.toLowerCase(),d=c?"left":"top",h=c?"bottom":"right",L=P(r)[l];s[h]-L<o[p]&&(t.offsets.popper[p]-=o[p]-(s[h]-L)),s[p]+L>o[h]&&(t.offsets.popper[p]+=s[p]+L-o[h]),t.offsets.popper=O(t.offsets.popper);var v=s[p]+s[l]/2-L/2,y=u(t.instance.popper),m=parseFloat(y["margin"+f],10),g=parseFloat(y["border"+f+"Width"],10),b=v-t.offsets.popper[p]-m-g;return b=Math.max(Math.min(o[l]-L,b),0),t.arrowElement=r,t.offsets.arrow=(x(n={},p,Math.round(b)),x(n,d,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(N(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=C(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),r=t.placement.split("-")[0],i=T(r),a=t.placement.split("-")[1]||"",o=[];switch(e.behavior){case X.FLIP:o=[r,i];break;case X.CLOCKWISE:o=G(r);break;case X.COUNTERCLOCKWISE:o=G(r,!0);break;default:o=e.behavior}return o.forEach(function(s,u){if(r!==s||o.length===u+1)return t;r=t.placement.split("-")[0],i=T(r);var c=t.offsets.popper,l=t.offsets.reference,f=Math.floor,p="left"===r&&f(c.right)>f(l.left)||"right"===r&&f(c.left)<f(l.right)||"top"===r&&f(c.bottom)>f(l.top)||"bottom"===r&&f(c.top)<f(l.bottom),d=f(c.left)<f(n.left),h=f(c.right)>f(n.right),L=f(c.top)<f(n.top),v=f(c.bottom)>f(n.bottom),y="left"===r&&d||"right"===r&&h||"top"===r&&L||"bottom"===r&&v,m=-1!==["top","bottom"].indexOf(r),g=!!e.flipVariations&&(m&&"start"===a&&d||m&&"end"===a&&h||!m&&"start"===a&&L||!m&&"end"===a&&v),b=!!e.flipVariationsByContent&&(m&&"start"===a&&h||m&&"end"===a&&d||!m&&"start"===a&&v||!m&&"end"===a&&L),_=g||b;(p||y||_)&&(t.flipped=!0,(p||y)&&(r=o[u+1]),_&&(a=function(t){return"end"===t?"start":"start"===t?"end":t}(a)),t.placement=r+(a?"-"+a:""),t.offsets.popper=k({},t.offsets.popper,D(t.instance.popper,t.offsets.reference,t.placement)),t=R(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],r=t.offsets,i=r.popper,a=r.reference,o=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[o?"left":"top"]=a[n]-(s?i[o?"width":"height"]:0),t.placement=T(e),t.offsets.popper=O(i),t}},hide:{order:800,enabled:!0,fn:function(t){if(!U(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=I(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,r=e.y,i=t.offsets.popper,a=I(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var o=void 0!==a?a:e.gpuAcceleration,s=h(t.instance.popper),u=E(s),c={position:i.position},l=function(t,e){var n=t.offsets,r=n.popper,i=n.reference,a=Math.round,o=Math.floor,s=function(t){return t},u=a(i.width),c=a(r.width),l=-1!==["left","right"].indexOf(t.placement),f=-1!==t.placement.indexOf("-"),p=e?l||f||u%2==c%2?a:o:s,d=e?a:s;return{left:p(u%2==1&&c%2==1&&!f&&e?r.left-1:r.left),top:d(r.top),bottom:d(r.bottom),right:p(r.right)}}(t,window.devicePixelRatio<2||!z),f="bottom"===n?"top":"bottom",p="right"===r?"left":"right",d=H("transform"),L=void 0,v=void 0;if(v="bottom"===f?"HTML"===s.nodeName?-s.clientHeight+l.bottom:-u.height+l.bottom:l.top,L="right"===p?"HTML"===s.nodeName?-s.clientWidth+l.right:-u.width+l.right:l.left,o&&d)c[d]="translate3d("+L+"px, "+v+"px, 0)",c[f]=0,c[p]=0,c.willChange="transform";else{var y="bottom"===f?-1:1,m="right"===p?-1:1;c[f]=v*y,c[p]=L*m,c.willChange=f+", "+p}var g={"x-placement":t.placement};return t.attributes=k({},g,t.attributes),t.styles=k({},c,t.styles),t.arrowStyles=k({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return q(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&q(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,r,i){var a=j(i,e,t,n.positionFixed),o=A(n.placement,a,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",o),q(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},J=function(){function t(e,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};_(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=o(this.update.bind(this)),this.options=k({},t.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(k({},t.Defaults.modifiers,i.modifiers)).forEach(function(e){r.options.modifiers[e]=k({},t.Defaults.modifiers[e]||{},i.modifiers?i.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return k({name:t},r.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&s(t.onLoad)&&t.onLoad(r.reference,r.popper,r.options,t,r.state)}),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return w(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=j(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=A(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=D(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=R(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,N(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=B(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return Z.call(this)}}]),t}();J.Utils=("undefined"!=typeof window?window:t).PopperUtils,J.placements=V,J.Defaults=K,e.a=J}).call(this,n(5))},function(t,e,n){"use strict";n(3);var r,i=n(11),a=(r=i)&&r.__esModule?r:{default:r};n(46),n(47);var o=new a.default("#pew-app",{needsRouter:!1});window.IS_PRERENDERING?o.prerender():o.init()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=y(n(12)),a=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(48)),o=y(n(13)),s=n(2),u=y(n(1)),c=y(n(14)),l=y(n(15)),f=y(n(16)),p=y(n(17)),d=y(n(20)),h=y(n(40)),L=y(n(42)),v=y(n(44));function y(t){return t&&t.__esModule?t:{default:t}}var m=[2020,2017,2013,2009],g={fields:c.default,stateAbbreviations:l.default,abbreviations:f.default,nestBy:{}};function b(){return new Promise(function(t,e){i.default.parse("https://www.pewtrusts.org/api/hipmapapi/getdownload?resourceTypes=HIA%20reports&sortBy=relevance&sortOrder=asc&loadAllPages=true&pageId={d9dc47f1-2c76-444a-b4e3-b60d29bb3237}",{beforeFirstChunk:function(t){return t.replace(/.*/,function(t){return function(t){return t.split(",").map(function(t){return t.replace("/Geographic Scope","").replace("/"," or ").replace("HIA ","").replace("-"," ").doCamelCase()}).join(",")}(t)})},complete:function(e){e.data.forEach(function(t,e){t.id=e}),t(e.data)},download:!0,error:function(t,n){e({error:t,file:n})},header:!0,skipEmptyLines:!0,transform:function(t,e){var n=g.fields.find(function(t){return t.key===e});return n&&n.splitToArray?(t=t.replace(/([a-z]),([A-Z])/g,"$1|$2")).split("|"):t}})})}function _(t){return t.forEach(function(t){if(isNaN(parseInt(t.publicationDate))){var e=t.publicationDate.toLowerCase();t.dateBucket=[e.charAt(0).toUpperCase()+e.slice(1)]}else m.forEach(function(e,n){parseInt(t.publicationDate)<e&&(t.dateBucket=n===m.length-1?["Prior to "+e]:[m[n+1]+"–"+(m[n]-1)])})}),t}var w=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,v.default),r(e,[{key:"prerender",value:function(){var t=this;b.call(this).then(function(e){g.data=_(e),t.model=g,t.el.setAttribute("data-data-hash",JSON.stringify(e).hashCode()),t.nestData(),t.pushViews(),console.log(g),Promise.all(t.views.map(function(t){return t.isReady})).then(function(){t.onViewsReady(),document.dispatchEvent(new Event("all-views-ready"))})})}},{key:"onViewsReady",value:function(){var t=document.querySelector(".js-dropdown").offsetHeight+document.querySelector(".js-legend").offsetHeight;document.querySelector(".js-instruct-heading").style.height=t+"px"}},{key:"init",value:function(){var t=this;this.worker=new Worker("worker.js"),this.views.length=0,function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),this.bodyEventListenerBind=this.bodyEventListenerHandler.bind(this),u.default.setSubs([["selectPrimaryGroup",this.bodyEventListenerBind]]),b.call(this).then(function(e){g.data=_(e),t.model=g,t.el.dataset.dataHash!=JSON.stringify(e).hashCode()&&(t.el.setAttribute("data-data-mismatch",!0),t.model.isMismatched=!0),t.nestData(),t.pushViews(),t.views.forEach(function(e){e.init(t)})})}},{key:"pushViews",value:function(){this.views.push(this.createComponent(p.default,"div#menu-view"),this.createComponent(d.default,"div#section-view"),this.createComponent(h.default,"div#details-view"),this.createComponent(L.default,"div#mask-view"))}},{key:"nestData",value:function(){var t=this,e=this.model.fields.filter(function(t){return!0===t.splitToArray}).map(function(t){return t.key});function n(t,e){var n=this;return a.nest().key(function(e){return e[t]}).entries(e).sort(function(e,r){var i=n.model.fields.find(function(e){return e.key===t});return i.order?""===e.key?1:""===r.key?-1:i.order.indexOf(e.key)-i.order.indexOf(r.key):""===e.key?1:""===r.key?-1:e.values.length>=r.values.length?-1:1})}this.model.fields.filter(function(t){return!0!==t.splitToArray}).map(function(t){return t.key}).forEach(function(e){t.model.nestBy[e]=n.call(t,e,t.model.data)}),e.forEach(function(e){var r=[];t.model.data.forEach(function(t){t[e].forEach(function(n){var i=o.default.cloneDeep(t);i[e]=n,r.push(i)})}),t.model.nestBy[e]=n.call(t,e,r)})}},{key:"cleanKey",value:function(t){return void 0===t?"null":""===(t="string"==typeof t?t:t[0])?"none":t=t.toLowerCase().replace(/['"”’“‘,.!?;()&:\/]/g,"").doCamelCase()}},{key:"bodyEventListenerHandler",value:function(t,e){var n=this.bodyClickClear;null!==e?document.body.addEventListener("click",n):document.body.removeEventListener("click",n)}},{key:"bodyClickClear",value:function(){document.body.UIControlIsOpen||s.stateModule.getState("showAllDetails")||s.stateModule.setState("selectPrimaryGroup",null)}}]),e}();e.default=w},function(t,e,n){var r,i,a;
/* @license
Papa Parse
v4.6.3
https://github.com/mholt/PapaParse
License: MIT
*/Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),i=[],void 0===(a="function"==typeof(r=function(){"use strict";var t,e,n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:{},r=!n.document&&!!n.postMessage,i=r&&/(\?|&)papaworker(=|&|$)/.test(n.location.search),a=!1,o={},s=0,u={parse:function(e,r){var i=(r=r||{}).dynamicTyping||!1;if(x(i)&&(r.dynamicTypingFunction=i,i={}),r.dynamicTyping=i,r.transform=!!x(r.transform)&&r.transform,r.worker&&u.WORKERS_SUPPORTED){var c=function(){if(!u.WORKERS_SUPPORTED)return!1;if(!a&&null===u.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var e=u.SCRIPT_PATH||t;e+=(-1!==e.indexOf("?")?"&":"?")+"papaworker";var r=new n.Worker(e);return r.onmessage=m,r.id=s++,o[r.id]=r}();return c.userStep=r.step,c.userChunk=r.chunk,c.userComplete=r.complete,c.userError=r.error,r.step=x(r.step),r.chunk=x(r.chunk),r.complete=x(r.complete),r.error=x(r.error),delete r.worker,void c.postMessage({input:e,config:r,workerId:c.id})}var l=null;return u.NODE_STREAM_INPUT,"string"==typeof e?l=r.download?new f(r):new d(r):!0===e.readable&&x(e.read)&&x(e.on)?l=new h(r):(n.File&&e instanceof File||e instanceof Object)&&(l=new p(r)),l.stream(e)},unparse:function(t,e){var n=!1,r=!0,i=",",a="\r\n",o='"',s=!1;"object"==typeof e&&("string"!=typeof e.delimiter||u.BAD_DELIMITERS.filter(function(t){return-1!==e.delimiter.indexOf(t)}).length||(i=e.delimiter),("boolean"==typeof e.quotes||Array.isArray(e.quotes))&&(n=e.quotes),"boolean"!=typeof e.skipEmptyLines&&"string"!=typeof e.skipEmptyLines||(s=e.skipEmptyLines),"string"==typeof e.newline&&(a=e.newline),"string"==typeof e.quoteChar&&(o=e.quoteChar),"boolean"==typeof e.header&&(r=e.header));var c=new RegExp(v(o),"g");if("string"==typeof t&&(t=JSON.parse(t)),Array.isArray(t)){if(!t.length||Array.isArray(t[0]))return f(null,t,s);if("object"==typeof t[0])return f(l(t[0]),t,s)}else if("object"==typeof t)return"string"==typeof t.data&&(t.data=JSON.parse(t.data)),Array.isArray(t.data)&&(t.fields||(t.fields=t.meta&&t.meta.fields),t.fields||(t.fields=Array.isArray(t.data[0])?t.fields:l(t.data[0])),Array.isArray(t.data[0])||"object"==typeof t.data[0]||(t.data=[t.data])),f(t.fields||[],t.data||[],s);throw"exception: Unable to serialize unrecognized input";function l(t){if("object"!=typeof t)return[];var e=[];for(var n in t)e.push(n);return e}function f(t,e,n){var o="";"string"==typeof t&&(t=JSON.parse(t)),"string"==typeof e&&(e=JSON.parse(e));var s=Array.isArray(t)&&0<t.length,u=!Array.isArray(e[0]);if(s&&r){for(var c=0;c<t.length;c++)0<c&&(o+=i),o+=p(t[c],c);0<e.length&&(o+=a)}for(var l=0;l<e.length;l++){var f=s?t.length:e[l].length,d=!1,h=s?0===Object.keys(e[l]).length:0===e[l].length;if(n&&!s&&(d="greedy"===n?""===e[l].join("").trim():1===e[l].length&&0===e[l][0].length),"greedy"===n&&s){for(var L=[],v=0;v<f;v++){var y=u?t[v]:v;L.push(e[l][y])}d=""===L.join("").trim()}if(!d){for(var m=0;m<f;m++){0<m&&!h&&(o+=i);var g=s&&u?t[m]:m;o+=p(e[l][g],m)}l<e.length-1&&(!n||0<f&&!h)&&(o+=a)}}return o}function p(t,e){if(null==t)return"";if(t.constructor===Date)return JSON.stringify(t).slice(1,25);t=t.toString().replace(c,o+o);var r="boolean"==typeof n&&n||Array.isArray(n)&&n[e]||function(t,e){for(var n=0;n<e.length;n++)if(-1<t.indexOf(e[n]))return!0;return!1}(t,u.BAD_DELIMITERS)||-1<t.indexOf(i)||" "===t.charAt(0)||" "===t.charAt(t.length-1);return r?o+t+o:t}}};if(u.RECORD_SEP=String.fromCharCode(30),u.UNIT_SEP=String.fromCharCode(31),u.BYTE_ORDER_MARK="\ufeff",u.BAD_DELIMITERS=["\r","\n",'"',u.BYTE_ORDER_MARK],u.WORKERS_SUPPORTED=!r&&!!n.Worker,u.SCRIPT_PATH=null,u.NODE_STREAM_INPUT=1,u.LocalChunkSize=10485760,u.RemoteChunkSize=5242880,u.DefaultDelimiter=",",u.Parser=y,u.ParserHandle=L,u.NetworkStreamer=f,u.FileStreamer=p,u.StringStreamer=d,u.ReadableStreamStreamer=h,n.jQuery){var c=n.jQuery;c.fn.parse=function(t){var e=t.config||{},r=[];return this.each(function(t){if("INPUT"!==c(this).prop("tagName").toUpperCase()||"file"!==c(this).attr("type").toLowerCase()||!n.FileReader||!this.files||0===this.files.length)return!0;for(var i=0;i<this.files.length;i++)r.push({file:this.files[i],inputElem:this,instanceConfig:c.extend({},e)})}),i(),this;function i(){if(0!==r.length){var e,n,i,o=r[0];if(x(t.before)){var s=t.before(o.file,o.inputElem);if("object"==typeof s){if("abort"===s.action)return e=o.file,n=o.inputElem,i=s.reason,void(x(t.error)&&t.error({name:"AbortError"},e,n,i));if("skip"===s.action)return void a();"object"==typeof s.config&&(o.instanceConfig=c.extend(o.instanceConfig,s.config))}else if("skip"===s)return void a()}var l=o.instanceConfig.complete;o.instanceConfig.complete=function(t){x(l)&&l(t,o.file,o.inputElem),a()},u.parse(o.file,o.instanceConfig)}else x(t.complete)&&t.complete()}function a(){r.splice(0,1),i()}}}function l(t){this._handle=null,this._finished=!1,this._completed=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(t){var e=_(t);e.chunkSize=parseInt(e.chunkSize),t.step||t.chunk||(e.chunkSize=null),this._handle=new L(e),(this._handle.streamer=this)._config=e}.call(this,t),this.parseChunk=function(t,e){if(this.isFirstChunk&&x(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(t);void 0!==r&&(t=r)}this.isFirstChunk=!1;var a=this._partialLine+t;this._partialLine="";var o=this._handle.parse(a,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=o.meta.cursor;this._finished||(this._partialLine=a.substring(s-this._baseIndex),this._baseIndex=s),o&&o.data&&(this._rowCount+=o.data.length);var c=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(i)n.postMessage({results:o,workerId:u.WORKER_ID,finished:c});else if(x(this._config.chunk)&&!e){if(this._config.chunk(o,this._handle),this._handle.paused()||this._handle.aborted())return;o=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(o.data),this._completeResults.errors=this._completeResults.errors.concat(o.errors),this._completeResults.meta=o.meta),this._completed||!c||!x(this._config.complete)||o&&o.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),c||o&&o.meta.paused||this._nextChunk(),o}},this._sendError=function(t){x(this._config.error)?this._config.error(t):i&&this._config.error&&n.postMessage({workerId:u.WORKER_ID,error:t,finished:!1})}}function f(t){var e;(t=t||{}).chunkSize||(t.chunkSize=u.RemoteChunkSize),l.call(this,t),this._nextChunk=r?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(t){this._input=t,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(e=new XMLHttpRequest,this._config.withCredentials&&(e.withCredentials=this._config.withCredentials),r||(e.onload=w(this._chunkLoaded,this),e.onerror=w(this._chunkError,this)),e.open("GET",this._input,!r),this._config.downloadRequestHeaders){var t=this._config.downloadRequestHeaders;for(var n in t)e.setRequestHeader(n,t[n])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;e.setRequestHeader("Range","bytes="+this._start+"-"+i),e.setRequestHeader("If-None-Match","webkit-no-cache")}try{e.send()}catch(t){this._chunkError(t.message)}r&&0===e.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){var t;4===e.readyState&&(e.status<200||400<=e.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>(null===(t=e.getResponseHeader("Content-Range"))?-1:parseInt(t.substr(t.lastIndexOf("/")+1))),this.parseChunk(e.responseText)))},this._chunkError=function(t){var n=e.statusText||t;this._sendError(new Error(n))}}function p(t){var e,n;(t=t||{}).chunkSize||(t.chunkSize=u.LocalChunkSize),l.call(this,t);var r="undefined"!=typeof FileReader;this.stream=function(t){this._input=t,n=t.slice||t.webkitSlice||t.mozSlice,r?((e=new FileReader).onload=w(this._chunkLoaded,this),e.onerror=w(this._chunkError,this)):e=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var t=this._input;if(this._config.chunkSize){var i=Math.min(this._start+this._config.chunkSize,this._input.size);t=n.call(t,this._start,i)}var a=e.readAsText(t,this._config.encoding);r||this._chunkLoaded({target:{result:a}})},this._chunkLoaded=function(t){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(t.target.result)},this._chunkError=function(){this._sendError(e.error)}}function d(t){var e;l.call(this,t=t||{}),this.stream=function(t){return e=t,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var t=this._config.chunkSize,n=t?e.substr(0,t):e;return e=t?e.substr(t):"",this._finished=!e,this.parseChunk(n)}}}function h(t){l.call(this,t=t||{});var e=[],n=!0,r=!1;this.pause=function(){l.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){l.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(t){this._input=t,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){r&&1===e.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),e.length?this.parseChunk(e.shift()):n=!0},this._streamData=w(function(t){try{e.push("string"==typeof t?t:t.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(e.shift()))}catch(t){this._streamError(t)}},this),this._streamError=w(function(t){this._streamCleanUp(),this._sendError(t)},this),this._streamEnd=w(function(){this._streamCleanUp(),r=!0,this._streamData("")},this),this._streamCleanUp=w(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function L(t){var e,n,r,i=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,a=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,o=this,s=0,c=0,l=!1,f=!1,p=[],d={data:[],errors:[],meta:{}};if(x(t.step)){var h=t.step;t.step=function(e){if(d=e,g())m();else{if(m(),0===d.data.length)return;s+=e.data.length,t.preview&&s>t.preview?n.abort():h(d,o)}}}function L(e){return"greedy"===t.skipEmptyLines?""===e.join("").trim():1===e.length&&0===e[0].length}function m(){if(d&&r&&(w("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+u.DefaultDelimiter+"'"),r=!1),t.skipEmptyLines)for(var e=0;e<d.data.length;e++)L(d.data[e])&&d.data.splice(e--,1);return g()&&function(){if(d){for(var e=0;g()&&e<d.data.length;e++)for(var n=0;n<d.data[e].length;n++){var r=d.data[e][n];t.trimHeaders&&(r=r.trim()),p.push(r)}d.data.splice(0,1)}}(),function(){if(!d||!t.header&&!t.dynamicTyping&&!t.transform)return d;for(var e=0;e<d.data.length;e++){var n,r=t.header?{}:[];for(n=0;n<d.data[e].length;n++){var i=n,a=d.data[e][n];t.header&&(i=n>=p.length?"__parsed_extra":p[n]),t.transform&&(a=t.transform(a,i)),a=b(i,a),"__parsed_extra"===i?(r[i]=r[i]||[],r[i].push(a)):r[i]=a}d.data[e]=r,t.header&&(n>p.length?w("FieldMismatch","TooManyFields","Too many fields: expected "+p.length+" fields but parsed "+n,c+e):n<p.length&&w("FieldMismatch","TooFewFields","Too few fields: expected "+p.length+" fields but parsed "+n,c+e))}return t.header&&d.meta&&(d.meta.fields=p),c+=d.data.length,d}()}function g(){return t.header&&0===p.length}function b(e,n){return r=e,t.dynamicTypingFunction&&void 0===t.dynamicTyping[r]&&(t.dynamicTyping[r]=t.dynamicTypingFunction(r)),!0===(t.dynamicTyping[r]||t.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(i.test(n)?parseFloat(n):a.test(n)?new Date(n):""===n?null:n):n;var r}function w(t,e,n,r){d.errors.push({type:t,code:e,message:n,row:r})}this.parse=function(i,a,o){var s=t.quoteChar||'"';if(t.newline||(t.newline=function(t,e){t=t.substr(0,1048576);var n=new RegExp(v(e)+"([^]*?)"+v(e),"gm"),r=(t=t.replace(n,"")).split("\r"),i=t.split("\n"),a=1<i.length&&i[0].length<r[0].length;if(1===r.length||a)return"\n";for(var o=0,s=0;s<r.length;s++)"\n"===r[s][0]&&o++;return o>=r.length/2?"\r\n":"\r"}(i,s)),r=!1,t.delimiter)x(t.delimiter)&&(t.delimiter=t.delimiter(i),d.meta.delimiter=t.delimiter);else{var c=function(e,n,r,i){for(var a,o,s,c=[",","\t","|",";",u.RECORD_SEP,u.UNIT_SEP],l=0;l<c.length;l++){var f=c[l],p=0,d=0,h=0;s=void 0;for(var v=new y({comments:i,delimiter:f,newline:n,preview:10}).parse(e),m=0;m<v.data.length;m++)if(r&&L(v.data[m]))h++;else{var g=v.data[m].length;d+=g,void 0!==s?1<g&&(p+=Math.abs(g-s),s=g):s=0}0<v.data.length&&(d/=v.data.length-h),(void 0===o||o<p)&&1.99<d&&(o=p,a=f)}return{successful:!!(t.delimiter=a),bestDelimiter:a}}(i,t.newline,t.skipEmptyLines,t.comments);c.successful?t.delimiter=c.bestDelimiter:(r=!0,t.delimiter=u.DefaultDelimiter),d.meta.delimiter=t.delimiter}var f=_(t);return t.preview&&t.header&&f.preview++,e=i,n=new y(f),d=n.parse(e,a,o),m(),l?{meta:{paused:!0}}:d||{meta:{paused:!1}}},this.paused=function(){return l},this.pause=function(){l=!0,n.abort(),e=e.substr(n.getCharIndex())},this.resume=function(){l=!1,o.streamer.parseChunk(e,!0)},this.aborted=function(){return f},this.abort=function(){f=!0,n.abort(),d.meta.aborted=!0,x(t.complete)&&t.complete(d),e=""}}function v(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function y(t){var e,n=(t=t||{}).delimiter,r=t.newline,i=t.comments,a=t.step,o=t.preview,s=t.fastMode,c=e=void 0===t.quoteChar?'"':t.quoteChar;if(void 0!==t.escapeChar&&(c=t.escapeChar),("string"!=typeof n||-1<u.BAD_DELIMITERS.indexOf(n))&&(n=","),i===n)throw"Comment character same as delimiter";!0===i?i="#":("string"!=typeof i||-1<u.BAD_DELIMITERS.indexOf(i))&&(i=!1),"\n"!==r&&"\r"!==r&&"\r\n"!==r&&(r="\n");var l=0,f=!1;this.parse=function(t,u,p){if("string"!=typeof t)throw"Input must be a string";var d=t.length,h=n.length,L=r.length,y=i.length,m=x(a),g=[],b=[],_=[],w=l=0;if(!t)return R();if(s||!1!==s&&-1===t.indexOf(e)){for(var k=t.split(r),O=0;O<k.length;O++){if(_=k[O],l+=_.length,O!==k.length-1)l+=r.length;else if(p)return R();if(!i||_.substr(0,y)!==i){if(m){if(g=[],P(_.split(n)),N(),f)return R()}else P(_.split(n));if(o&&o<=O)return g=g.slice(0,o),R(!0)}}return R()}for(var E,S=t.indexOf(n,l),M=t.indexOf(r,l),C=new RegExp(v(c)+v(e),"g");;)if(t[l]!==e)if(i&&0===_.length&&t.substr(l,y)===i){if(-1===M)return R();l=M+L,M=t.indexOf(r,l),S=t.indexOf(n,l)}else if(-1!==S&&(S<M||-1===M))_.push(t.substring(l,S)),l=S+h,S=t.indexOf(n,l);else{if(-1===M)break;if(_.push(t.substring(l,M)),I(M+L),m&&(N(),f))return R();if(o&&g.length>=o)return R(!0)}else for(E=l,l++;;){if(-1===(E=t.indexOf(e,E+1)))return p||b.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:g.length,index:l}),D();if(E===d-1)return D(t.substring(l,E).replace(C,e));if(e!==c||t[E+1]!==c){if(e===c||0===E||t[E-1]!==c){var A=T(-1===M?S:Math.min(S,M));if(t[E+1+A]===n){_.push(t.substring(l,E).replace(C,e)),l=E+1+A+h,S=t.indexOf(n,l),M=t.indexOf(r,l);break}var j=T(M);if(t.substr(E+1+j,L)===r){if(_.push(t.substring(l,E).replace(C,e)),I(E+1+j+L),S=t.indexOf(n,l),m&&(N(),f))return R();if(o&&g.length>=o)return R(!0);break}b.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:g.length,index:l}),E++}}else E++}return D();function P(t){g.push(t),w=l}function T(e){var n=0;if(-1!==e){var r=t.substring(E+1,e);r&&""===r.trim()&&(n=r.length)}return n}function D(e){return p||(void 0===e&&(e=t.substr(l)),_.push(e),l=d,P(_),m&&N()),R()}function I(e){l=e,P(_),_=[],M=t.indexOf(r,l)}function R(t){return{data:g,errors:b,meta:{delimiter:n,linebreak:r,aborted:f,truncated:!!t,cursor:w+(u||0)}}}function N(){a(R()),g=[],b=[]}},this.abort=function(){f=!0},this.getCharIndex=function(){return l}}function m(t){var e=t.data,n=o[e.workerId],r=!1;if(e.error)n.userError(e.error,e.file);else if(e.results&&e.results.data){var i={abort:function(){r=!0,g(e.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:b,resume:b};if(x(n.userStep)){for(var a=0;a<e.results.data.length&&(n.userStep({data:[e.results.data[a]],errors:e.results.errors,meta:e.results.meta},i),!r);a++);delete e.results}else x(n.userChunk)&&(n.userChunk(e.results,i,e.file),delete e.results)}e.finished&&!r&&g(e.workerId,e.results)}function g(t,e){var n=o[t];x(n.userComplete)&&n.userComplete(e),n.terminate(),delete o[t]}function b(){throw"Not implemented."}function _(t){if("object"!=typeof t||null===t)return t;var e=Array.isArray(t)?[]:{};for(var n in t)e[n]=_(t[n]);return e}function w(t,e){return function(){t.apply(e,arguments)}}function x(t){return"function"==typeof t}return i?n.onmessage=function(t){var e=t.data;if(void 0===u.WORKER_ID&&e&&(u.WORKER_ID=e.workerId),"string"==typeof e.input)n.postMessage({workerId:u.WORKER_ID,results:u.parse(e.input,e.config),finished:!0});else if(n.File&&e.input instanceof File||e.input instanceof Object){var r=u.parse(e.input,e.config);r&&n.postMessage({workerId:u.WORKER_ID,results:r,finished:!0})}}:u.WORKERS_SUPPORTED&&(e=document.getElementsByTagName("script"),t=e.length?e[e.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",function(){a=!0},!0):a=!0),(f.prototype=Object.create(l.prototype)).constructor=f,(p.prototype=Object.create(l.prototype)).constructor=p,(d.prototype=Object.create(d.prototype)).constructor=d,(h.prototype=Object.create(l.prototype)).constructor=h,u})?r.apply(e,i):r)||(t.exports=a)},function(t,e,n){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var a,o=200,s="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",u="Expected a function",c="__lodash_hash_undefined__",l=500,f="__lodash_placeholder__",p=1,d=2,h=4,L=1,v=2,y=1,m=2,g=4,b=8,_=16,w=32,x=64,k=128,O=256,E=512,S=30,M="...",C=800,A=16,j=1,P=2,T=1/0,D=9007199254740991,I=1.7976931348623157e308,R=NaN,N=4294967295,H=N-1,W=N>>>1,B=[["ary",k],["bind",y],["bindKey",m],["curry",b],["curryRight",_],["flip",E],["partial",w],["partialRight",x],["rearg",O]],Z="[object Arguments]",F="[object Array]",q="[object AsyncFunction]",z="[object Boolean]",U="[object Date]",V="[object DOMException]",Y="[object Error]",G="[object Function]",X="[object GeneratorFunction]",$="[object Map]",K="[object Number]",J="[object Null]",Q="[object Object]",tt="[object Proxy]",et="[object RegExp]",nt="[object Set]",rt="[object String]",it="[object Symbol]",at="[object Undefined]",ot="[object WeakMap]",st="[object WeakSet]",ut="[object ArrayBuffer]",ct="[object DataView]",lt="[object Float32Array]",ft="[object Float64Array]",pt="[object Int8Array]",dt="[object Int16Array]",ht="[object Int32Array]",Lt="[object Uint8Array]",vt="[object Uint8ClampedArray]",yt="[object Uint16Array]",mt="[object Uint32Array]",gt=/\b__p \+= '';/g,bt=/\b(__p \+=) '' \+/g,_t=/(__e\(.*?\)|\b__t\)) \+\n'';/g,wt=/&(?:amp|lt|gt|quot|#39);/g,xt=/[&<>"']/g,kt=RegExp(wt.source),Ot=RegExp(xt.source),Et=/<%-([\s\S]+?)%>/g,St=/<%([\s\S]+?)%>/g,Mt=/<%=([\s\S]+?)%>/g,Ct=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,At=/^\w*$/,jt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Pt=/[\\^$.*+?()[\]{}|]/g,Tt=RegExp(Pt.source),Dt=/^\s+|\s+$/g,It=/^\s+/,Rt=/\s+$/,Nt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Ht=/\{\n\/\* \[wrapped with (.+)\] \*/,Wt=/,? & /,Bt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Zt=/\\(\\)?/g,Ft=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,qt=/\w*$/,zt=/^[-+]0x[0-9a-f]+$/i,Ut=/^0b[01]+$/i,Vt=/^\[object .+?Constructor\]$/,Yt=/^0o[0-7]+$/i,Gt=/^(?:0|[1-9]\d*)$/,Xt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,$t=/($^)/,Kt=/['\n\r\u2028\u2029\\]/g,Jt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Qt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",te="[\\ud800-\\udfff]",ee="["+Qt+"]",ne="["+Jt+"]",re="\\d+",ie="[\\u2700-\\u27bf]",ae="[a-z\\xdf-\\xf6\\xf8-\\xff]",oe="[^\\ud800-\\udfff"+Qt+re+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",se="\\ud83c[\\udffb-\\udfff]",ue="[^\\ud800-\\udfff]",ce="(?:\\ud83c[\\udde6-\\uddff]){2}",le="[\\ud800-\\udbff][\\udc00-\\udfff]",fe="[A-Z\\xc0-\\xd6\\xd8-\\xde]",pe="(?:"+ae+"|"+oe+")",de="(?:"+fe+"|"+oe+")",he="(?:"+ne+"|"+se+")"+"?",Le="[\\ufe0e\\ufe0f]?"+he+("(?:\\u200d(?:"+[ue,ce,le].join("|")+")[\\ufe0e\\ufe0f]?"+he+")*"),ve="(?:"+[ie,ce,le].join("|")+")"+Le,ye="(?:"+[ue+ne+"?",ne,ce,le,te].join("|")+")",me=RegExp("['’]","g"),ge=RegExp(ne,"g"),be=RegExp(se+"(?="+se+")|"+ye+Le,"g"),_e=RegExp([fe+"?"+ae+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[ee,fe,"$"].join("|")+")",de+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[ee,fe+pe,"$"].join("|")+")",fe+"?"+pe+"+(?:['’](?:d|ll|m|re|s|t|ve))?",fe+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",re,ve].join("|"),"g"),we=RegExp("[\\u200d\\ud800-\\udfff"+Jt+"\\ufe0e\\ufe0f]"),xe=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,ke=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Oe=-1,Ee={};Ee[lt]=Ee[ft]=Ee[pt]=Ee[dt]=Ee[ht]=Ee[Lt]=Ee[vt]=Ee[yt]=Ee[mt]=!0,Ee[Z]=Ee[F]=Ee[ut]=Ee[z]=Ee[ct]=Ee[U]=Ee[Y]=Ee[G]=Ee[$]=Ee[K]=Ee[Q]=Ee[et]=Ee[nt]=Ee[rt]=Ee[ot]=!1;var Se={};Se[Z]=Se[F]=Se[ut]=Se[ct]=Se[z]=Se[U]=Se[lt]=Se[ft]=Se[pt]=Se[dt]=Se[ht]=Se[$]=Se[K]=Se[Q]=Se[et]=Se[nt]=Se[rt]=Se[it]=Se[Lt]=Se[vt]=Se[yt]=Se[mt]=!0,Se[Y]=Se[G]=Se[ot]=!1;var Me={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ce=parseFloat,Ae=parseInt,je="object"==typeof t&&t&&t.Object===Object&&t,Pe="object"==typeof self&&self&&self.Object===Object&&self,Te=je||Pe||Function("return this")(),De=e&&!e.nodeType&&e,Ie=De&&"object"==typeof r&&r&&!r.nodeType&&r,Re=Ie&&Ie.exports===De,Ne=Re&&je.process,He=function(){try{var t=Ie&&Ie.require&&Ie.require("util").types;return t||Ne&&Ne.binding&&Ne.binding("util")}catch(t){}}(),We=He&&He.isArrayBuffer,Be=He&&He.isDate,Ze=He&&He.isMap,Fe=He&&He.isRegExp,qe=He&&He.isSet,ze=He&&He.isTypedArray;function Ue(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Ve(t,e,n,r){for(var i=-1,a=null==t?0:t.length;++i<a;){var o=t[i];e(r,o,n(o),t)}return r}function Ye(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Ge(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function Xe(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function $e(t,e){for(var n=-1,r=null==t?0:t.length,i=0,a=[];++n<r;){var o=t[n];e(o,n,t)&&(a[i++]=o)}return a}function Ke(t,e){return!!(null==t?0:t.length)&&un(t,e,0)>-1}function Je(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function Qe(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function tn(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function en(t,e,n,r){var i=-1,a=null==t?0:t.length;for(r&&a&&(n=t[++i]);++i<a;)n=e(n,t[i],i,t);return n}function nn(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function rn(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var an=pn("length");function on(t,e,n){var r;return n(t,function(t,n,i){if(e(t,n,i))return r=n,!1}),r}function sn(t,e,n,r){for(var i=t.length,a=n+(r?1:-1);r?a--:++a<i;)if(e(t[a],a,t))return a;return-1}function un(t,e,n){return e==e?function(t,e,n){var r=n-1,i=t.length;for(;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):sn(t,ln,n)}function cn(t,e,n,r){for(var i=n-1,a=t.length;++i<a;)if(r(t[i],e))return i;return-1}function ln(t){return t!=t}function fn(t,e){var n=null==t?0:t.length;return n?Ln(t,e)/n:R}function pn(t){return function(e){return null==e?a:e[t]}}function dn(t){return function(e){return null==t?a:t[e]}}function hn(t,e,n,r,i){return i(t,function(t,i,a){n=r?(r=!1,t):e(n,t,i,a)}),n}function Ln(t,e){for(var n,r=-1,i=t.length;++r<i;){var o=e(t[r]);o!==a&&(n=n===a?o:n+o)}return n}function vn(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function yn(t){return function(e){return t(e)}}function mn(t,e){return Qe(e,function(e){return t[e]})}function gn(t,e){return t.has(e)}function bn(t,e){for(var n=-1,r=t.length;++n<r&&un(e,t[n],0)>-1;);return n}function _n(t,e){for(var n=t.length;n--&&un(e,t[n],0)>-1;);return n}var wn=dn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),xn=dn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function kn(t){return"\\"+Me[t]}function On(t){return we.test(t)}function En(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function Sn(t,e){return function(n){return t(e(n))}}function Mn(t,e){for(var n=-1,r=t.length,i=0,a=[];++n<r;){var o=t[n];o!==e&&o!==f||(t[n]=f,a[i++]=n)}return a}function Cn(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function An(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=[t,t]}),n}function jn(t){return On(t)?function(t){var e=be.lastIndex=0;for(;be.test(t);)++e;return e}(t):an(t)}function Pn(t){return On(t)?function(t){return t.match(be)||[]}(t):function(t){return t.split("")}(t)}var Tn=dn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Dn=function t(e){var n,r=(e=null==e?Te:Dn.defaults(Te.Object(),e,Dn.pick(Te,ke))).Array,i=e.Date,Jt=e.Error,Qt=e.Function,te=e.Math,ee=e.Object,ne=e.RegExp,re=e.String,ie=e.TypeError,ae=r.prototype,oe=Qt.prototype,se=ee.prototype,ue=e["__core-js_shared__"],ce=oe.toString,le=se.hasOwnProperty,fe=0,pe=(n=/[^.]+$/.exec(ue&&ue.keys&&ue.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",de=se.toString,he=ce.call(ee),Le=Te._,ve=ne("^"+ce.call(le).replace(Pt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ye=Re?e.Buffer:a,be=e.Symbol,we=e.Uint8Array,Me=ye?ye.allocUnsafe:a,je=Sn(ee.getPrototypeOf,ee),Pe=ee.create,De=se.propertyIsEnumerable,Ie=ae.splice,Ne=be?be.isConcatSpreadable:a,He=be?be.iterator:a,an=be?be.toStringTag:a,dn=function(){try{var t=Ha(ee,"defineProperty");return t({},"",{}),t}catch(t){}}(),In=e.clearTimeout!==Te.clearTimeout&&e.clearTimeout,Rn=i&&i.now!==Te.Date.now&&i.now,Nn=e.setTimeout!==Te.setTimeout&&e.setTimeout,Hn=te.ceil,Wn=te.floor,Bn=ee.getOwnPropertySymbols,Zn=ye?ye.isBuffer:a,Fn=e.isFinite,qn=ae.join,zn=Sn(ee.keys,ee),Un=te.max,Vn=te.min,Yn=i.now,Gn=e.parseInt,Xn=te.random,$n=ae.reverse,Kn=Ha(e,"DataView"),Jn=Ha(e,"Map"),Qn=Ha(e,"Promise"),tr=Ha(e,"Set"),er=Ha(e,"WeakMap"),nr=Ha(ee,"create"),rr=er&&new er,ir={},ar=lo(Kn),or=lo(Jn),sr=lo(Qn),ur=lo(tr),cr=lo(er),lr=be?be.prototype:a,fr=lr?lr.valueOf:a,pr=lr?lr.toString:a;function dr(t){if(Ms(t)&&!ys(t)&&!(t instanceof yr)){if(t instanceof vr)return t;if(le.call(t,"__wrapped__"))return fo(t)}return new vr(t)}var hr=function(){function t(){}return function(e){if(!Ss(e))return{};if(Pe)return Pe(e);t.prototype=e;var n=new t;return t.prototype=a,n}}();function Lr(){}function vr(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=a}function yr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=N,this.__views__=[]}function mr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function gr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function br(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function _r(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new br;++e<n;)this.add(t[e])}function wr(t){var e=this.__data__=new gr(t);this.size=e.size}function xr(t,e){var n=ys(t),r=!n&&vs(t),i=!n&&!r&&_s(t),a=!n&&!r&&!i&&Rs(t),o=n||r||i||a,s=o?vn(t.length,re):[],u=s.length;for(var c in t)!e&&!le.call(t,c)||o&&("length"==c||i&&("offset"==c||"parent"==c)||a&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Ua(c,u))||s.push(c);return s}function kr(t){var e=t.length;return e?t[_i(0,e-1)]:a}function Or(t,e){return so(na(t),Dr(e,0,t.length))}function Er(t){return so(na(t))}function Sr(t,e,n){(n===a||ds(t[e],n))&&(n!==a||e in t)||Pr(t,e,n)}function Mr(t,e,n){var r=t[e];le.call(t,e)&&ds(r,n)&&(n!==a||e in t)||Pr(t,e,n)}function Cr(t,e){for(var n=t.length;n--;)if(ds(t[n][0],e))return n;return-1}function Ar(t,e,n,r){return Wr(t,function(t,i,a){e(r,t,n(t),a)}),r}function jr(t,e){return t&&ra(e,iu(e),t)}function Pr(t,e,n){"__proto__"==e&&dn?dn(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function Tr(t,e){for(var n=-1,i=e.length,o=r(i),s=null==t;++n<i;)o[n]=s?a:Qs(t,e[n]);return o}function Dr(t,e,n){return t==t&&(n!==a&&(t=t<=n?t:n),e!==a&&(t=t>=e?t:e)),t}function Ir(t,e,n,r,i,o){var s,u=e&p,c=e&d,l=e&h;if(n&&(s=i?n(t,r,i,o):n(t)),s!==a)return s;if(!Ss(t))return t;var f=ys(t);if(f){if(s=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&le.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!u)return na(t,s)}else{var L=Za(t),v=L==G||L==X;if(_s(t))return $i(t,u);if(L==Q||L==Z||v&&!i){if(s=c||v?{}:qa(t),!u)return c?function(t,e){return ra(t,Ba(t),e)}(t,function(t,e){return t&&ra(e,au(e),t)}(s,t)):function(t,e){return ra(t,Wa(t),e)}(t,jr(s,t))}else{if(!Se[L])return i?t:{};s=function(t,e,n){var r,i,a,o=t.constructor;switch(e){case ut:return Ki(t);case z:case U:return new o(+t);case ct:return function(t,e){var n=e?Ki(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case lt:case ft:case pt:case dt:case ht:case Lt:case vt:case yt:case mt:return Ji(t,n);case $:return new o;case K:case rt:return new o(t);case et:return(a=new(i=t).constructor(i.source,qt.exec(i))).lastIndex=i.lastIndex,a;case nt:return new o;case it:return r=t,fr?ee(fr.call(r)):{}}}(t,L,u)}}o||(o=new wr);var y=o.get(t);if(y)return y;if(o.set(t,s),Ts(t))return t.forEach(function(r){s.add(Ir(r,e,n,r,t,o))}),s;if(Cs(t))return t.forEach(function(r,i){s.set(i,Ir(r,e,n,i,t,o))}),s;var m=f?a:(l?c?ja:Aa:c?au:iu)(t);return Ye(m||t,function(r,i){m&&(r=t[i=r]),Mr(s,i,Ir(r,e,n,i,t,o))}),s}function Rr(t,e,n){var r=n.length;if(null==t)return!r;for(t=ee(t);r--;){var i=n[r],o=e[i],s=t[i];if(s===a&&!(i in t)||!o(s))return!1}return!0}function Nr(t,e,n){if("function"!=typeof t)throw new ie(u);return ro(function(){t.apply(a,n)},e)}function Hr(t,e,n,r){var i=-1,a=Ke,s=!0,u=t.length,c=[],l=e.length;if(!u)return c;n&&(e=Qe(e,yn(n))),r?(a=Je,s=!1):e.length>=o&&(a=gn,s=!1,e=new _r(e));t:for(;++i<u;){var f=t[i],p=null==n?f:n(f);if(f=r||0!==f?f:0,s&&p==p){for(var d=l;d--;)if(e[d]===p)continue t;c.push(f)}else a(e,p,r)||c.push(f)}return c}dr.templateSettings={escape:Et,evaluate:St,interpolate:Mt,variable:"",imports:{_:dr}},dr.prototype=Lr.prototype,dr.prototype.constructor=dr,vr.prototype=hr(Lr.prototype),vr.prototype.constructor=vr,yr.prototype=hr(Lr.prototype),yr.prototype.constructor=yr,mr.prototype.clear=function(){this.__data__=nr?nr(null):{},this.size=0},mr.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},mr.prototype.get=function(t){var e=this.__data__;if(nr){var n=e[t];return n===c?a:n}return le.call(e,t)?e[t]:a},mr.prototype.has=function(t){var e=this.__data__;return nr?e[t]!==a:le.call(e,t)},mr.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=nr&&e===a?c:e,this},gr.prototype.clear=function(){this.__data__=[],this.size=0},gr.prototype.delete=function(t){var e=this.__data__,n=Cr(e,t);return!(n<0||(n==e.length-1?e.pop():Ie.call(e,n,1),--this.size,0))},gr.prototype.get=function(t){var e=this.__data__,n=Cr(e,t);return n<0?a:e[n][1]},gr.prototype.has=function(t){return Cr(this.__data__,t)>-1},gr.prototype.set=function(t,e){var n=this.__data__,r=Cr(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},br.prototype.clear=function(){this.size=0,this.__data__={hash:new mr,map:new(Jn||gr),string:new mr}},br.prototype.delete=function(t){var e=Ra(this,t).delete(t);return this.size-=e?1:0,e},br.prototype.get=function(t){return Ra(this,t).get(t)},br.prototype.has=function(t){return Ra(this,t).has(t)},br.prototype.set=function(t,e){var n=Ra(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},_r.prototype.add=_r.prototype.push=function(t){return this.__data__.set(t,c),this},_r.prototype.has=function(t){return this.__data__.has(t)},wr.prototype.clear=function(){this.__data__=new gr,this.size=0},wr.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},wr.prototype.get=function(t){return this.__data__.get(t)},wr.prototype.has=function(t){return this.__data__.has(t)},wr.prototype.set=function(t,e){var n=this.__data__;if(n instanceof gr){var r=n.__data__;if(!Jn||r.length<o-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new br(r)}return n.set(t,e),this.size=n.size,this};var Wr=oa(Yr),Br=oa(Gr,!0);function Zr(t,e){var n=!0;return Wr(t,function(t,r,i){return n=!!e(t,r,i)}),n}function Fr(t,e,n){for(var r=-1,i=t.length;++r<i;){var o=t[r],s=e(o);if(null!=s&&(u===a?s==s&&!Is(s):n(s,u)))var u=s,c=o}return c}function qr(t,e){var n=[];return Wr(t,function(t,r,i){e(t,r,i)&&n.push(t)}),n}function zr(t,e,n,r,i){var a=-1,o=t.length;for(n||(n=za),i||(i=[]);++a<o;){var s=t[a];e>0&&n(s)?e>1?zr(s,e-1,n,r,i):tn(i,s):r||(i[i.length]=s)}return i}var Ur=sa(),Vr=sa(!0);function Yr(t,e){return t&&Ur(t,e,iu)}function Gr(t,e){return t&&Vr(t,e,iu)}function Xr(t,e){return $e(e,function(e){return ks(t[e])})}function $r(t,e){for(var n=0,r=(e=Vi(e,t)).length;null!=t&&n<r;)t=t[co(e[n++])];return n&&n==r?t:a}function Kr(t,e,n){var r=e(t);return ys(t)?r:tn(r,n(t))}function Jr(t){return null==t?t===a?at:J:an&&an in ee(t)?function(t){var e=le.call(t,an),n=t[an];try{t[an]=a;var r=!0}catch(t){}var i=de.call(t);return r&&(e?t[an]=n:delete t[an]),i}(t):function(t){return de.call(t)}(t)}function Qr(t,e){return t>e}function ti(t,e){return null!=t&&le.call(t,e)}function ei(t,e){return null!=t&&e in ee(t)}function ni(t,e,n){for(var i=n?Je:Ke,o=t[0].length,s=t.length,u=s,c=r(s),l=1/0,f=[];u--;){var p=t[u];u&&e&&(p=Qe(p,yn(e))),l=Vn(p.length,l),c[u]=!n&&(e||o>=120&&p.length>=120)?new _r(u&&p):a}p=t[0];var d=-1,h=c[0];t:for(;++d<o&&f.length<l;){var L=p[d],v=e?e(L):L;if(L=n||0!==L?L:0,!(h?gn(h,v):i(f,v,n))){for(u=s;--u;){var y=c[u];if(!(y?gn(y,v):i(t[u],v,n)))continue t}h&&h.push(v),f.push(L)}}return f}function ri(t,e,n){var r=null==(t=to(t,e=Vi(e,t)))?t:t[co(xo(e))];return null==r?a:Ue(r,t,n)}function ii(t){return Ms(t)&&Jr(t)==Z}function ai(t,e,n,r,i){return t===e||(null==t||null==e||!Ms(t)&&!Ms(e)?t!=t&&e!=e:function(t,e,n,r,i,o){var s=ys(t),u=ys(e),c=s?F:Za(t),l=u?F:Za(e),f=(c=c==Z?Q:c)==Q,p=(l=l==Z?Q:l)==Q,d=c==l;if(d&&_s(t)){if(!_s(e))return!1;s=!0,f=!1}if(d&&!f)return o||(o=new wr),s||Rs(t)?Ma(t,e,n,r,i,o):function(t,e,n,r,i,a,o){switch(n){case ct:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case ut:return!(t.byteLength!=e.byteLength||!a(new we(t),new we(e)));case z:case U:case K:return ds(+t,+e);case Y:return t.name==e.name&&t.message==e.message;case et:case rt:return t==e+"";case $:var s=En;case nt:var u=r&L;if(s||(s=Cn),t.size!=e.size&&!u)return!1;var c=o.get(t);if(c)return c==e;r|=v,o.set(t,e);var l=Ma(s(t),s(e),r,i,a,o);return o.delete(t),l;case it:if(fr)return fr.call(t)==fr.call(e)}return!1}(t,e,c,n,r,i,o);if(!(n&L)){var h=f&&le.call(t,"__wrapped__"),y=p&&le.call(e,"__wrapped__");if(h||y){var m=h?t.value():t,g=y?e.value():e;return o||(o=new wr),i(m,g,n,r,o)}}return!!d&&(o||(o=new wr),function(t,e,n,r,i,o){var s=n&L,u=Aa(t),c=u.length,l=Aa(e).length;if(c!=l&&!s)return!1;for(var f=c;f--;){var p=u[f];if(!(s?p in e:le.call(e,p)))return!1}var d=o.get(t);if(d&&o.get(e))return d==e;var h=!0;o.set(t,e),o.set(e,t);for(var v=s;++f<c;){p=u[f];var y=t[p],m=e[p];if(r)var g=s?r(m,y,p,e,t,o):r(y,m,p,t,e,o);if(!(g===a?y===m||i(y,m,n,r,o):g)){h=!1;break}v||(v="constructor"==p)}if(h&&!v){var b=t.constructor,_=e.constructor;b!=_&&"constructor"in t&&"constructor"in e&&!("function"==typeof b&&b instanceof b&&"function"==typeof _&&_ instanceof _)&&(h=!1)}return o.delete(t),o.delete(e),h}(t,e,n,r,i,o))}(t,e,n,r,ai,i))}function oi(t,e,n,r){var i=n.length,o=i,s=!r;if(null==t)return!o;for(t=ee(t);i--;){var u=n[i];if(s&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++i<o;){var c=(u=n[i])[0],l=t[c],f=u[1];if(s&&u[2]){if(l===a&&!(c in t))return!1}else{var p=new wr;if(r)var d=r(l,f,c,t,e,p);if(!(d===a?ai(f,l,L|v,r,p):d))return!1}}return!0}function si(t){return!(!Ss(t)||(e=t,pe&&pe in e))&&(ks(t)?ve:Vt).test(lo(t));var e}function ui(t){return"function"==typeof t?t:null==t?Au:"object"==typeof t?ys(t)?hi(t[0],t[1]):di(t):Wu(t)}function ci(t){if(!$a(t))return zn(t);var e=[];for(var n in ee(t))le.call(t,n)&&"constructor"!=n&&e.push(n);return e}function li(t){if(!Ss(t))return function(t){var e=[];if(null!=t)for(var n in ee(t))e.push(n);return e}(t);var e=$a(t),n=[];for(var r in t)("constructor"!=r||!e&&le.call(t,r))&&n.push(r);return n}function fi(t,e){return t<e}function pi(t,e){var n=-1,i=gs(t)?r(t.length):[];return Wr(t,function(t,r,a){i[++n]=e(t,r,a)}),i}function di(t){var e=Na(t);return 1==e.length&&e[0][2]?Ja(e[0][0],e[0][1]):function(n){return n===t||oi(n,t,e)}}function hi(t,e){return Ya(t)&&Ka(e)?Ja(co(t),e):function(n){var r=Qs(n,t);return r===a&&r===e?tu(n,t):ai(e,r,L|v)}}function Li(t,e,n,r,i){t!==e&&Ur(e,function(o,s){if(Ss(o))i||(i=new wr),function(t,e,n,r,i,o,s){var u=eo(t,n),c=eo(e,n),l=s.get(c);if(l)Sr(t,n,l);else{var f=o?o(u,c,n+"",t,e,s):a,p=f===a;if(p){var d=ys(c),h=!d&&_s(c),L=!d&&!h&&Rs(c);f=c,d||h||L?ys(u)?f=u:bs(u)?f=na(u):h?(p=!1,f=$i(c,!0)):L?(p=!1,f=Ji(c,!0)):f=[]:js(c)||vs(c)?(f=u,vs(u)?f=zs(u):Ss(u)&&!ks(u)||(f=qa(c))):p=!1}p&&(s.set(c,f),i(f,c,r,o,s),s.delete(c)),Sr(t,n,f)}}(t,e,s,n,Li,r,i);else{var u=r?r(eo(t,s),o,s+"",t,e,i):a;u===a&&(u=o),Sr(t,s,u)}},au)}function vi(t,e){var n=t.length;if(n)return Ua(e+=e<0?n:0,n)?t[e]:a}function yi(t,e,n){var r=-1;return e=Qe(e.length?e:[Au],yn(Ia())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(pi(t,function(t,n,i){return{criteria:Qe(e,function(e){return e(t)}),index:++r,value:t}}),function(t,e){return function(t,e,n){for(var r=-1,i=t.criteria,a=e.criteria,o=i.length,s=n.length;++r<o;){var u=Qi(i[r],a[r]);if(u){if(r>=s)return u;var c=n[r];return u*("desc"==c?-1:1)}}return t.index-e.index}(t,e,n)})}function mi(t,e,n){for(var r=-1,i=e.length,a={};++r<i;){var o=e[r],s=$r(t,o);n(s,o)&&Ei(a,Vi(o,t),s)}return a}function gi(t,e,n,r){var i=r?cn:un,a=-1,o=e.length,s=t;for(t===e&&(e=na(e)),n&&(s=Qe(t,yn(n)));++a<o;)for(var u=0,c=e[a],l=n?n(c):c;(u=i(s,l,u,r))>-1;)s!==t&&Ie.call(s,u,1),Ie.call(t,u,1);return t}function bi(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==a){var a=i;Ua(i)?Ie.call(t,i,1):Hi(t,i)}}return t}function _i(t,e){return t+Wn(Xn()*(e-t+1))}function wi(t,e){var n="";if(!t||e<1||e>D)return n;do{e%2&&(n+=t),(e=Wn(e/2))&&(t+=t)}while(e);return n}function xi(t,e){return io(Qa(t,e,Au),t+"")}function ki(t){return kr(du(t))}function Oi(t,e){var n=du(t);return so(n,Dr(e,0,n.length))}function Ei(t,e,n,r){if(!Ss(t))return t;for(var i=-1,o=(e=Vi(e,t)).length,s=o-1,u=t;null!=u&&++i<o;){var c=co(e[i]),l=n;if(i!=s){var f=u[c];(l=r?r(f,c,u):a)===a&&(l=Ss(f)?f:Ua(e[i+1])?[]:{})}Mr(u,c,l),u=u[c]}return t}var Si=rr?function(t,e){return rr.set(t,e),t}:Au,Mi=dn?function(t,e){return dn(t,"toString",{configurable:!0,enumerable:!1,value:Su(e),writable:!0})}:Au;function Ci(t){return so(du(t))}function Ai(t,e,n){var i=-1,a=t.length;e<0&&(e=-e>a?0:a+e),(n=n>a?a:n)<0&&(n+=a),a=e>n?0:n-e>>>0,e>>>=0;for(var o=r(a);++i<a;)o[i]=t[i+e];return o}function ji(t,e){var n;return Wr(t,function(t,r,i){return!(n=e(t,r,i))}),!!n}function Pi(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=W){for(;r<i;){var a=r+i>>>1,o=t[a];null!==o&&!Is(o)&&(n?o<=e:o<e)?r=a+1:i=a}return i}return Ti(t,e,Au,n)}function Ti(t,e,n,r){e=n(e);for(var i=0,o=null==t?0:t.length,s=e!=e,u=null===e,c=Is(e),l=e===a;i<o;){var f=Wn((i+o)/2),p=n(t[f]),d=p!==a,h=null===p,L=p==p,v=Is(p);if(s)var y=r||L;else y=l?L&&(r||d):u?L&&d&&(r||!h):c?L&&d&&!h&&(r||!v):!h&&!v&&(r?p<=e:p<e);y?i=f+1:o=f}return Vn(o,H)}function Di(t,e){for(var n=-1,r=t.length,i=0,a=[];++n<r;){var o=t[n],s=e?e(o):o;if(!n||!ds(s,u)){var u=s;a[i++]=0===o?0:o}}return a}function Ii(t){return"number"==typeof t?t:Is(t)?R:+t}function Ri(t){if("string"==typeof t)return t;if(ys(t))return Qe(t,Ri)+"";if(Is(t))return pr?pr.call(t):"";var e=t+"";return"0"==e&&1/t==-T?"-0":e}function Ni(t,e,n){var r=-1,i=Ke,a=t.length,s=!0,u=[],c=u;if(n)s=!1,i=Je;else if(a>=o){var l=e?null:wa(t);if(l)return Cn(l);s=!1,i=gn,c=new _r}else c=e?[]:u;t:for(;++r<a;){var f=t[r],p=e?e(f):f;if(f=n||0!==f?f:0,s&&p==p){for(var d=c.length;d--;)if(c[d]===p)continue t;e&&c.push(p),u.push(f)}else i(c,p,n)||(c!==u&&c.push(p),u.push(f))}return u}function Hi(t,e){return null==(t=to(t,e=Vi(e,t)))||delete t[co(xo(e))]}function Wi(t,e,n,r){return Ei(t,e,n($r(t,e)),r)}function Bi(t,e,n,r){for(var i=t.length,a=r?i:-1;(r?a--:++a<i)&&e(t[a],a,t););return n?Ai(t,r?0:a,r?a+1:i):Ai(t,r?a+1:0,r?i:a)}function Zi(t,e){var n=t;return n instanceof yr&&(n=n.value()),en(e,function(t,e){return e.func.apply(e.thisArg,tn([t],e.args))},n)}function Fi(t,e,n){var i=t.length;if(i<2)return i?Ni(t[0]):[];for(var a=-1,o=r(i);++a<i;)for(var s=t[a],u=-1;++u<i;)u!=a&&(o[a]=Hr(o[a]||s,t[u],e,n));return Ni(zr(o,1),e,n)}function qi(t,e,n){for(var r=-1,i=t.length,o=e.length,s={};++r<i;){var u=r<o?e[r]:a;n(s,t[r],u)}return s}function zi(t){return bs(t)?t:[]}function Ui(t){return"function"==typeof t?t:Au}function Vi(t,e){return ys(t)?t:Ya(t,e)?[t]:uo(Us(t))}var Yi=xi;function Gi(t,e,n){var r=t.length;return n=n===a?r:n,!e&&n>=r?t:Ai(t,e,n)}var Xi=In||function(t){return Te.clearTimeout(t)};function $i(t,e){if(e)return t.slice();var n=t.length,r=Me?Me(n):new t.constructor(n);return t.copy(r),r}function Ki(t){var e=new t.constructor(t.byteLength);return new we(e).set(new we(t)),e}function Ji(t,e){var n=e?Ki(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Qi(t,e){if(t!==e){var n=t!==a,r=null===t,i=t==t,o=Is(t),s=e!==a,u=null===e,c=e==e,l=Is(e);if(!u&&!l&&!o&&t>e||o&&s&&c&&!u&&!l||r&&s&&c||!n&&c||!i)return 1;if(!r&&!o&&!l&&t<e||l&&n&&i&&!r&&!o||u&&n&&i||!s&&i||!c)return-1}return 0}function ta(t,e,n,i){for(var a=-1,o=t.length,s=n.length,u=-1,c=e.length,l=Un(o-s,0),f=r(c+l),p=!i;++u<c;)f[u]=e[u];for(;++a<s;)(p||a<o)&&(f[n[a]]=t[a]);for(;l--;)f[u++]=t[a++];return f}function ea(t,e,n,i){for(var a=-1,o=t.length,s=-1,u=n.length,c=-1,l=e.length,f=Un(o-u,0),p=r(f+l),d=!i;++a<f;)p[a]=t[a];for(var h=a;++c<l;)p[h+c]=e[c];for(;++s<u;)(d||a<o)&&(p[h+n[s]]=t[a++]);return p}function na(t,e){var n=-1,i=t.length;for(e||(e=r(i));++n<i;)e[n]=t[n];return e}function ra(t,e,n,r){var i=!n;n||(n={});for(var o=-1,s=e.length;++o<s;){var u=e[o],c=r?r(n[u],t[u],u,n,t):a;c===a&&(c=t[u]),i?Pr(n,u,c):Mr(n,u,c)}return n}function ia(t,e){return function(n,r){var i=ys(n)?Ve:Ar,a=e?e():{};return i(n,t,Ia(r,2),a)}}function aa(t){return xi(function(e,n){var r=-1,i=n.length,o=i>1?n[i-1]:a,s=i>2?n[2]:a;for(o=t.length>3&&"function"==typeof o?(i--,o):a,s&&Va(n[0],n[1],s)&&(o=i<3?a:o,i=1),e=ee(e);++r<i;){var u=n[r];u&&t(e,u,r,o)}return e})}function oa(t,e){return function(n,r){if(null==n)return n;if(!gs(n))return t(n,r);for(var i=n.length,a=e?i:-1,o=ee(n);(e?a--:++a<i)&&!1!==r(o[a],a,o););return n}}function sa(t){return function(e,n,r){for(var i=-1,a=ee(e),o=r(e),s=o.length;s--;){var u=o[t?s:++i];if(!1===n(a[u],u,a))break}return e}}function ua(t){return function(e){var n=On(e=Us(e))?Pn(e):a,r=n?n[0]:e.charAt(0),i=n?Gi(n,1).join(""):e.slice(1);return r[t]()+i}}function ca(t){return function(e){return en(ku(vu(e).replace(me,"")),t,"")}}function la(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=hr(t.prototype),r=t.apply(n,e);return Ss(r)?r:n}}function fa(t){return function(e,n,r){var i=ee(e);if(!gs(e)){var o=Ia(n,3);e=iu(e),n=function(t){return o(i[t],t,i)}}var s=t(e,n,r);return s>-1?i[o?e[s]:s]:a}}function pa(t){return Ca(function(e){var n=e.length,r=n,i=vr.prototype.thru;for(t&&e.reverse();r--;){var o=e[r];if("function"!=typeof o)throw new ie(u);if(i&&!s&&"wrapper"==Ta(o))var s=new vr([],!0)}for(r=s?r:n;++r<n;){var c=Ta(o=e[r]),l="wrapper"==c?Pa(o):a;s=l&&Ga(l[0])&&l[1]==(k|b|w|O)&&!l[4].length&&1==l[9]?s[Ta(l[0])].apply(s,l[3]):1==o.length&&Ga(o)?s[c]():s.thru(o)}return function(){var t=arguments,r=t[0];if(s&&1==t.length&&ys(r))return s.plant(r).value();for(var i=0,a=n?e[i].apply(this,t):r;++i<n;)a=e[i].call(this,a);return a}})}function da(t,e,n,i,o,s,u,c,l,f){var p=e&k,d=e&y,h=e&m,L=e&(b|_),v=e&E,g=h?a:la(t);return function y(){for(var m=arguments.length,b=r(m),_=m;_--;)b[_]=arguments[_];if(L)var w=Da(y),x=function(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}(b,w);if(i&&(b=ta(b,i,o,L)),s&&(b=ea(b,s,u,L)),m-=x,L&&m<f){var k=Mn(b,w);return ba(t,e,da,y.placeholder,n,b,k,c,l,f-m)}var O=d?n:this,E=h?O[t]:t;return m=b.length,c?b=function(t,e){for(var n=t.length,r=Vn(e.length,n),i=na(t);r--;){var o=e[r];t[r]=Ua(o,n)?i[o]:a}return t}(b,c):v&&m>1&&b.reverse(),p&&l<m&&(b.length=l),this&&this!==Te&&this instanceof y&&(E=g||la(E)),E.apply(O,b)}}function ha(t,e){return function(n,r){return function(t,e,n,r){return Yr(t,function(t,i,a){e(r,n(t),i,a)}),r}(n,t,e(r),{})}}function La(t,e){return function(n,r){var i;if(n===a&&r===a)return e;if(n!==a&&(i=n),r!==a){if(i===a)return r;"string"==typeof n||"string"==typeof r?(n=Ri(n),r=Ri(r)):(n=Ii(n),r=Ii(r)),i=t(n,r)}return i}}function va(t){return Ca(function(e){return e=Qe(e,yn(Ia())),xi(function(n){var r=this;return t(e,function(t){return Ue(t,r,n)})})})}function ya(t,e){var n=(e=e===a?" ":Ri(e)).length;if(n<2)return n?wi(e,t):e;var r=wi(e,Hn(t/jn(e)));return On(e)?Gi(Pn(r),0,t).join(""):r.slice(0,t)}function ma(t){return function(e,n,i){return i&&"number"!=typeof i&&Va(e,n,i)&&(n=i=a),e=Bs(e),n===a?(n=e,e=0):n=Bs(n),function(t,e,n,i){for(var a=-1,o=Un(Hn((e-t)/(n||1)),0),s=r(o);o--;)s[i?o:++a]=t,t+=n;return s}(e,n,i=i===a?e<n?1:-1:Bs(i),t)}}function ga(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=qs(e),n=qs(n)),t(e,n)}}function ba(t,e,n,r,i,o,s,u,c,l){var f=e&b;e|=f?w:x,(e&=~(f?x:w))&g||(e&=~(y|m));var p=[t,e,i,f?o:a,f?s:a,f?a:o,f?a:s,u,c,l],d=n.apply(a,p);return Ga(t)&&no(d,p),d.placeholder=r,ao(d,t,e)}function _a(t){var e=te[t];return function(t,n){if(t=qs(t),n=null==n?0:Vn(Zs(n),292)){var r=(Us(t)+"e").split("e");return+((r=(Us(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var wa=tr&&1/Cn(new tr([,-0]))[1]==T?function(t){return new tr(t)}:Iu;function xa(t){return function(e){var n=Za(e);return n==$?En(e):n==nt?An(e):function(t,e){return Qe(e,function(e){return[e,t[e]]})}(e,t(e))}}function ka(t,e,n,i,o,s,c,l){var p=e&m;if(!p&&"function"!=typeof t)throw new ie(u);var d=i?i.length:0;if(d||(e&=~(w|x),i=o=a),c=c===a?c:Un(Zs(c),0),l=l===a?l:Zs(l),d-=o?o.length:0,e&x){var h=i,L=o;i=o=a}var v=p?a:Pa(t),E=[t,e,n,i,o,h,L,s,c,l];if(v&&function(t,e){var n=t[1],r=e[1],i=n|r,a=i<(y|m|k),o=r==k&&n==b||r==k&&n==O&&t[7].length<=e[8]||r==(k|O)&&e[7].length<=e[8]&&n==b;if(!a&&!o)return t;r&y&&(t[2]=e[2],i|=n&y?0:g);var s=e[3];if(s){var u=t[3];t[3]=u?ta(u,s,e[4]):s,t[4]=u?Mn(t[3],f):e[4]}(s=e[5])&&(u=t[5],t[5]=u?ea(u,s,e[6]):s,t[6]=u?Mn(t[5],f):e[6]),(s=e[7])&&(t[7]=s),r&k&&(t[8]=null==t[8]?e[8]:Vn(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i}(E,v),t=E[0],e=E[1],n=E[2],i=E[3],o=E[4],!(l=E[9]=E[9]===a?p?0:t.length:Un(E[9]-d,0))&&e&(b|_)&&(e&=~(b|_)),e&&e!=y)S=e==b||e==_?function(t,e,n){var i=la(t);return function o(){for(var s=arguments.length,u=r(s),c=s,l=Da(o);c--;)u[c]=arguments[c];var f=s<3&&u[0]!==l&&u[s-1]!==l?[]:Mn(u,l);return(s-=f.length)<n?ba(t,e,da,o.placeholder,a,u,f,a,a,n-s):Ue(this&&this!==Te&&this instanceof o?i:t,this,u)}}(t,e,l):e!=w&&e!=(y|w)||o.length?da.apply(a,E):function(t,e,n,i){var a=e&y,o=la(t);return function e(){for(var s=-1,u=arguments.length,c=-1,l=i.length,f=r(l+u),p=this&&this!==Te&&this instanceof e?o:t;++c<l;)f[c]=i[c];for(;u--;)f[c++]=arguments[++s];return Ue(p,a?n:this,f)}}(t,e,n,i);else var S=function(t,e,n){var r=e&y,i=la(t);return function e(){return(this&&this!==Te&&this instanceof e?i:t).apply(r?n:this,arguments)}}(t,e,n);return ao((v?Si:no)(S,E),t,e)}function Oa(t,e,n,r){return t===a||ds(t,se[n])&&!le.call(r,n)?e:t}function Ea(t,e,n,r,i,o){return Ss(t)&&Ss(e)&&(o.set(e,t),Li(t,e,a,Ea,o),o.delete(e)),t}function Sa(t){return js(t)?a:t}function Ma(t,e,n,r,i,o){var s=n&L,u=t.length,c=e.length;if(u!=c&&!(s&&c>u))return!1;var l=o.get(t);if(l&&o.get(e))return l==e;var f=-1,p=!0,d=n&v?new _r:a;for(o.set(t,e),o.set(e,t);++f<u;){var h=t[f],y=e[f];if(r)var m=s?r(y,h,f,e,t,o):r(h,y,f,t,e,o);if(m!==a){if(m)continue;p=!1;break}if(d){if(!rn(e,function(t,e){if(!gn(d,e)&&(h===t||i(h,t,n,r,o)))return d.push(e)})){p=!1;break}}else if(h!==y&&!i(h,y,n,r,o)){p=!1;break}}return o.delete(t),o.delete(e),p}function Ca(t){return io(Qa(t,a,mo),t+"")}function Aa(t){return Kr(t,iu,Wa)}function ja(t){return Kr(t,au,Ba)}var Pa=rr?function(t){return rr.get(t)}:Iu;function Ta(t){for(var e=t.name+"",n=ir[e],r=le.call(ir,e)?n.length:0;r--;){var i=n[r],a=i.func;if(null==a||a==t)return i.name}return e}function Da(t){return(le.call(dr,"placeholder")?dr:t).placeholder}function Ia(){var t=dr.iteratee||ju;return t=t===ju?ui:t,arguments.length?t(arguments[0],arguments[1]):t}function Ra(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function Na(t){for(var e=iu(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Ka(i)]}return e}function Ha(t,e){var n=function(t,e){return null==t?a:t[e]}(t,e);return si(n)?n:a}var Wa=Bn?function(t){return null==t?[]:(t=ee(t),$e(Bn(t),function(e){return De.call(t,e)}))}:Fu,Ba=Bn?function(t){for(var e=[];t;)tn(e,Wa(t)),t=je(t);return e}:Fu,Za=Jr;function Fa(t,e,n){for(var r=-1,i=(e=Vi(e,t)).length,a=!1;++r<i;){var o=co(e[r]);if(!(a=null!=t&&n(t,o)))break;t=t[o]}return a||++r!=i?a:!!(i=null==t?0:t.length)&&Es(i)&&Ua(o,i)&&(ys(t)||vs(t))}function qa(t){return"function"!=typeof t.constructor||$a(t)?{}:hr(je(t))}function za(t){return ys(t)||vs(t)||!!(Ne&&t&&t[Ne])}function Ua(t,e){var n=typeof t;return!!(e=null==e?D:e)&&("number"==n||"symbol"!=n&&Gt.test(t))&&t>-1&&t%1==0&&t<e}function Va(t,e,n){if(!Ss(n))return!1;var r=typeof e;return!!("number"==r?gs(n)&&Ua(e,n.length):"string"==r&&e in n)&&ds(n[e],t)}function Ya(t,e){if(ys(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Is(t))||At.test(t)||!Ct.test(t)||null!=e&&t in ee(e)}function Ga(t){var e=Ta(t),n=dr[e];if("function"!=typeof n||!(e in yr.prototype))return!1;if(t===n)return!0;var r=Pa(n);return!!r&&t===r[0]}(Kn&&Za(new Kn(new ArrayBuffer(1)))!=ct||Jn&&Za(new Jn)!=$||Qn&&"[object Promise]"!=Za(Qn.resolve())||tr&&Za(new tr)!=nt||er&&Za(new er)!=ot)&&(Za=function(t){var e=Jr(t),n=e==Q?t.constructor:a,r=n?lo(n):"";if(r)switch(r){case ar:return ct;case or:return $;case sr:return"[object Promise]";case ur:return nt;case cr:return ot}return e});var Xa=ue?ks:qu;function $a(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||se)}function Ka(t){return t==t&&!Ss(t)}function Ja(t,e){return function(n){return null!=n&&n[t]===e&&(e!==a||t in ee(n))}}function Qa(t,e,n){return e=Un(e===a?t.length-1:e,0),function(){for(var i=arguments,a=-1,o=Un(i.length-e,0),s=r(o);++a<o;)s[a]=i[e+a];a=-1;for(var u=r(e+1);++a<e;)u[a]=i[a];return u[e]=n(s),Ue(t,this,u)}}function to(t,e){return e.length<2?t:$r(t,Ai(e,0,-1))}function eo(t,e){if("__proto__"!=e)return t[e]}var no=oo(Si),ro=Nn||function(t,e){return Te.setTimeout(t,e)},io=oo(Mi);function ao(t,e,n){var r=e+"";return io(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Nt,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return Ye(B,function(n){var r="_."+n[0];e&n[1]&&!Ke(t,r)&&t.push(r)}),t.sort()}(function(t){var e=t.match(Ht);return e?e[1].split(Wt):[]}(r),n)))}function oo(t){var e=0,n=0;return function(){var r=Yn(),i=A-(r-n);if(n=r,i>0){if(++e>=C)return arguments[0]}else e=0;return t.apply(a,arguments)}}function so(t,e){var n=-1,r=t.length,i=r-1;for(e=e===a?r:e;++n<e;){var o=_i(n,i),s=t[o];t[o]=t[n],t[n]=s}return t.length=e,t}var uo=function(t){var e=ss(t,function(t){return n.size===l&&n.clear(),t}),n=e.cache;return e}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(jt,function(t,n,r,i){e.push(r?i.replace(Zt,"$1"):n||t)}),e});function co(t){if("string"==typeof t||Is(t))return t;var e=t+"";return"0"==e&&1/t==-T?"-0":e}function lo(t){if(null!=t){try{return ce.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function fo(t){if(t instanceof yr)return t.clone();var e=new vr(t.__wrapped__,t.__chain__);return e.__actions__=na(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var po=xi(function(t,e){return bs(t)?Hr(t,zr(e,1,bs,!0)):[]}),ho=xi(function(t,e){var n=xo(e);return bs(n)&&(n=a),bs(t)?Hr(t,zr(e,1,bs,!0),Ia(n,2)):[]}),Lo=xi(function(t,e){var n=xo(e);return bs(n)&&(n=a),bs(t)?Hr(t,zr(e,1,bs,!0),a,n):[]});function vo(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Zs(n);return i<0&&(i=Un(r+i,0)),sn(t,Ia(e,3),i)}function yo(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return n!==a&&(i=Zs(n),i=n<0?Un(r+i,0):Vn(i,r-1)),sn(t,Ia(e,3),i,!0)}function mo(t){return null!=t&&t.length?zr(t,1):[]}function go(t){return t&&t.length?t[0]:a}var bo=xi(function(t){var e=Qe(t,zi);return e.length&&e[0]===t[0]?ni(e):[]}),_o=xi(function(t){var e=xo(t),n=Qe(t,zi);return e===xo(n)?e=a:n.pop(),n.length&&n[0]===t[0]?ni(n,Ia(e,2)):[]}),wo=xi(function(t){var e=xo(t),n=Qe(t,zi);return(e="function"==typeof e?e:a)&&n.pop(),n.length&&n[0]===t[0]?ni(n,a,e):[]});function xo(t){var e=null==t?0:t.length;return e?t[e-1]:a}var ko=xi(Oo);function Oo(t,e){return t&&t.length&&e&&e.length?gi(t,e):t}var Eo=Ca(function(t,e){var n=null==t?0:t.length,r=Tr(t,e);return bi(t,Qe(e,function(t){return Ua(t,n)?+t:t}).sort(Qi)),r});function So(t){return null==t?t:$n.call(t)}var Mo=xi(function(t){return Ni(zr(t,1,bs,!0))}),Co=xi(function(t){var e=xo(t);return bs(e)&&(e=a),Ni(zr(t,1,bs,!0),Ia(e,2))}),Ao=xi(function(t){var e=xo(t);return e="function"==typeof e?e:a,Ni(zr(t,1,bs,!0),a,e)});function jo(t){if(!t||!t.length)return[];var e=0;return t=$e(t,function(t){if(bs(t))return e=Un(t.length,e),!0}),vn(e,function(e){return Qe(t,pn(e))})}function Po(t,e){if(!t||!t.length)return[];var n=jo(t);return null==e?n:Qe(n,function(t){return Ue(e,a,t)})}var To=xi(function(t,e){return bs(t)?Hr(t,e):[]}),Do=xi(function(t){return Fi($e(t,bs))}),Io=xi(function(t){var e=xo(t);return bs(e)&&(e=a),Fi($e(t,bs),Ia(e,2))}),Ro=xi(function(t){var e=xo(t);return e="function"==typeof e?e:a,Fi($e(t,bs),a,e)}),No=xi(jo);var Ho=xi(function(t){var e=t.length,n=e>1?t[e-1]:a;return n="function"==typeof n?(t.pop(),n):a,Po(t,n)});function Wo(t){var e=dr(t);return e.__chain__=!0,e}function Bo(t,e){return e(t)}var Zo=Ca(function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,i=function(e){return Tr(e,t)};return!(e>1||this.__actions__.length)&&r instanceof yr&&Ua(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:Bo,args:[i],thisArg:a}),new vr(r,this.__chain__).thru(function(t){return e&&!t.length&&t.push(a),t})):this.thru(i)});var Fo=ia(function(t,e,n){le.call(t,n)?++t[n]:Pr(t,n,1)});var qo=fa(vo),zo=fa(yo);function Uo(t,e){return(ys(t)?Ye:Wr)(t,Ia(e,3))}function Vo(t,e){return(ys(t)?Ge:Br)(t,Ia(e,3))}var Yo=ia(function(t,e,n){le.call(t,n)?t[n].push(e):Pr(t,n,[e])});var Go=xi(function(t,e,n){var i=-1,a="function"==typeof e,o=gs(t)?r(t.length):[];return Wr(t,function(t){o[++i]=a?Ue(e,t,n):ri(t,e,n)}),o}),Xo=ia(function(t,e,n){Pr(t,n,e)});function $o(t,e){return(ys(t)?Qe:pi)(t,Ia(e,3))}var Ko=ia(function(t,e,n){t[n?0:1].push(e)},function(){return[[],[]]});var Jo=xi(function(t,e){if(null==t)return[];var n=e.length;return n>1&&Va(t,e[0],e[1])?e=[]:n>2&&Va(e[0],e[1],e[2])&&(e=[e[0]]),yi(t,zr(e,1),[])}),Qo=Rn||function(){return Te.Date.now()};function ts(t,e,n){return e=n?a:e,e=t&&null==e?t.length:e,ka(t,k,a,a,a,a,e)}function es(t,e){var n;if("function"!=typeof e)throw new ie(u);return t=Zs(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=a),n}}var ns=xi(function(t,e,n){var r=y;if(n.length){var i=Mn(n,Da(ns));r|=w}return ka(t,r,e,n,i)}),rs=xi(function(t,e,n){var r=y|m;if(n.length){var i=Mn(n,Da(rs));r|=w}return ka(e,r,t,n,i)});function is(t,e,n){var r,i,o,s,c,l,f=0,p=!1,d=!1,h=!0;if("function"!=typeof t)throw new ie(u);function L(e){var n=r,o=i;return r=i=a,f=e,s=t.apply(o,n)}function v(t){var n=t-l;return l===a||n>=e||n<0||d&&t-f>=o}function y(){var t=Qo();if(v(t))return m(t);c=ro(y,function(t){var n=e-(t-l);return d?Vn(n,o-(t-f)):n}(t))}function m(t){return c=a,h&&r?L(t):(r=i=a,s)}function g(){var t=Qo(),n=v(t);if(r=arguments,i=this,l=t,n){if(c===a)return function(t){return f=t,c=ro(y,e),p?L(t):s}(l);if(d)return c=ro(y,e),L(l)}return c===a&&(c=ro(y,e)),s}return e=qs(e)||0,Ss(n)&&(p=!!n.leading,o=(d="maxWait"in n)?Un(qs(n.maxWait)||0,e):o,h="trailing"in n?!!n.trailing:h),g.cancel=function(){c!==a&&Xi(c),f=0,r=l=i=c=a},g.flush=function(){return c===a?s:m(Qo())},g}var as=xi(function(t,e){return Nr(t,1,e)}),os=xi(function(t,e,n){return Nr(t,qs(e)||0,n)});function ss(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new ie(u);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],a=n.cache;if(a.has(i))return a.get(i);var o=t.apply(this,r);return n.cache=a.set(i,o)||a,o};return n.cache=new(ss.Cache||br),n}function us(t){if("function"!=typeof t)throw new ie(u);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}ss.Cache=br;var cs=Yi(function(t,e){var n=(e=1==e.length&&ys(e[0])?Qe(e[0],yn(Ia())):Qe(zr(e,1),yn(Ia()))).length;return xi(function(r){for(var i=-1,a=Vn(r.length,n);++i<a;)r[i]=e[i].call(this,r[i]);return Ue(t,this,r)})}),ls=xi(function(t,e){var n=Mn(e,Da(ls));return ka(t,w,a,e,n)}),fs=xi(function(t,e){var n=Mn(e,Da(fs));return ka(t,x,a,e,n)}),ps=Ca(function(t,e){return ka(t,O,a,a,a,e)});function ds(t,e){return t===e||t!=t&&e!=e}var hs=ga(Qr),Ls=ga(function(t,e){return t>=e}),vs=ii(function(){return arguments}())?ii:function(t){return Ms(t)&&le.call(t,"callee")&&!De.call(t,"callee")},ys=r.isArray,ms=We?yn(We):function(t){return Ms(t)&&Jr(t)==ut};function gs(t){return null!=t&&Es(t.length)&&!ks(t)}function bs(t){return Ms(t)&&gs(t)}var _s=Zn||qu,ws=Be?yn(Be):function(t){return Ms(t)&&Jr(t)==U};function xs(t){if(!Ms(t))return!1;var e=Jr(t);return e==Y||e==V||"string"==typeof t.message&&"string"==typeof t.name&&!js(t)}function ks(t){if(!Ss(t))return!1;var e=Jr(t);return e==G||e==X||e==q||e==tt}function Os(t){return"number"==typeof t&&t==Zs(t)}function Es(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=D}function Ss(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Ms(t){return null!=t&&"object"==typeof t}var Cs=Ze?yn(Ze):function(t){return Ms(t)&&Za(t)==$};function As(t){return"number"==typeof t||Ms(t)&&Jr(t)==K}function js(t){if(!Ms(t)||Jr(t)!=Q)return!1;var e=je(t);if(null===e)return!0;var n=le.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&ce.call(n)==he}var Ps=Fe?yn(Fe):function(t){return Ms(t)&&Jr(t)==et};var Ts=qe?yn(qe):function(t){return Ms(t)&&Za(t)==nt};function Ds(t){return"string"==typeof t||!ys(t)&&Ms(t)&&Jr(t)==rt}function Is(t){return"symbol"==typeof t||Ms(t)&&Jr(t)==it}var Rs=ze?yn(ze):function(t){return Ms(t)&&Es(t.length)&&!!Ee[Jr(t)]};var Ns=ga(fi),Hs=ga(function(t,e){return t<=e});function Ws(t){if(!t)return[];if(gs(t))return Ds(t)?Pn(t):na(t);if(He&&t[He])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[He]());var e=Za(t);return(e==$?En:e==nt?Cn:du)(t)}function Bs(t){return t?(t=qs(t))===T||t===-T?(t<0?-1:1)*I:t==t?t:0:0===t?t:0}function Zs(t){var e=Bs(t),n=e%1;return e==e?n?e-n:e:0}function Fs(t){return t?Dr(Zs(t),0,N):0}function qs(t){if("number"==typeof t)return t;if(Is(t))return R;if(Ss(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Ss(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(Dt,"");var n=Ut.test(t);return n||Yt.test(t)?Ae(t.slice(2),n?2:8):zt.test(t)?R:+t}function zs(t){return ra(t,au(t))}function Us(t){return null==t?"":Ri(t)}var Vs=aa(function(t,e){if($a(e)||gs(e))ra(e,iu(e),t);else for(var n in e)le.call(e,n)&&Mr(t,n,e[n])}),Ys=aa(function(t,e){ra(e,au(e),t)}),Gs=aa(function(t,e,n,r){ra(e,au(e),t,r)}),Xs=aa(function(t,e,n,r){ra(e,iu(e),t,r)}),$s=Ca(Tr);var Ks=xi(function(t,e){t=ee(t);var n=-1,r=e.length,i=r>2?e[2]:a;for(i&&Va(e[0],e[1],i)&&(r=1);++n<r;)for(var o=e[n],s=au(o),u=-1,c=s.length;++u<c;){var l=s[u],f=t[l];(f===a||ds(f,se[l])&&!le.call(t,l))&&(t[l]=o[l])}return t}),Js=xi(function(t){return t.push(a,Ea),Ue(su,a,t)});function Qs(t,e,n){var r=null==t?a:$r(t,e);return r===a?n:r}function tu(t,e){return null!=t&&Fa(t,e,ei)}var eu=ha(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=de.call(e)),t[e]=n},Su(Au)),nu=ha(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=de.call(e)),le.call(t,e)?t[e].push(n):t[e]=[n]},Ia),ru=xi(ri);function iu(t){return gs(t)?xr(t):ci(t)}function au(t){return gs(t)?xr(t,!0):li(t)}var ou=aa(function(t,e,n){Li(t,e,n)}),su=aa(function(t,e,n,r){Li(t,e,n,r)}),uu=Ca(function(t,e){var n={};if(null==t)return n;var r=!1;e=Qe(e,function(e){return e=Vi(e,t),r||(r=e.length>1),e}),ra(t,ja(t),n),r&&(n=Ir(n,p|d|h,Sa));for(var i=e.length;i--;)Hi(n,e[i]);return n});var cu=Ca(function(t,e){return null==t?{}:function(t,e){return mi(t,e,function(e,n){return tu(t,n)})}(t,e)});function lu(t,e){if(null==t)return{};var n=Qe(ja(t),function(t){return[t]});return e=Ia(e),mi(t,n,function(t,n){return e(t,n[0])})}var fu=xa(iu),pu=xa(au);function du(t){return null==t?[]:mn(t,iu(t))}var hu=ca(function(t,e,n){return e=e.toLowerCase(),t+(n?Lu(e):e)});function Lu(t){return xu(Us(t).toLowerCase())}function vu(t){return(t=Us(t))&&t.replace(Xt,wn).replace(ge,"")}var yu=ca(function(t,e,n){return t+(n?"-":"")+e.toLowerCase()}),mu=ca(function(t,e,n){return t+(n?" ":"")+e.toLowerCase()}),gu=ua("toLowerCase");var bu=ca(function(t,e,n){return t+(n?"_":"")+e.toLowerCase()});var _u=ca(function(t,e,n){return t+(n?" ":"")+xu(e)});var wu=ca(function(t,e,n){return t+(n?" ":"")+e.toUpperCase()}),xu=ua("toUpperCase");function ku(t,e,n){return t=Us(t),(e=n?a:e)===a?function(t){return xe.test(t)}(t)?function(t){return t.match(_e)||[]}(t):function(t){return t.match(Bt)||[]}(t):t.match(e)||[]}var Ou=xi(function(t,e){try{return Ue(t,a,e)}catch(t){return xs(t)?t:new Jt(t)}}),Eu=Ca(function(t,e){return Ye(e,function(e){e=co(e),Pr(t,e,ns(t[e],t))}),t});function Su(t){return function(){return t}}var Mu=pa(),Cu=pa(!0);function Au(t){return t}function ju(t){return ui("function"==typeof t?t:Ir(t,p))}var Pu=xi(function(t,e){return function(n){return ri(n,t,e)}}),Tu=xi(function(t,e){return function(n){return ri(t,n,e)}});function Du(t,e,n){var r=iu(e),i=Xr(e,r);null!=n||Ss(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=Xr(e,iu(e)));var a=!(Ss(n)&&"chain"in n&&!n.chain),o=ks(t);return Ye(i,function(n){var r=e[n];t[n]=r,o&&(t.prototype[n]=function(){var e=this.__chain__;if(a||e){var n=t(this.__wrapped__);return(n.__actions__=na(this.__actions__)).push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,tn([this.value()],arguments))})}),t}function Iu(){}var Ru=va(Qe),Nu=va(Xe),Hu=va(rn);function Wu(t){return Ya(t)?pn(co(t)):function(t){return function(e){return $r(e,t)}}(t)}var Bu=ma(),Zu=ma(!0);function Fu(){return[]}function qu(){return!1}var zu=La(function(t,e){return t+e},0),Uu=_a("ceil"),Vu=La(function(t,e){return t/e},1),Yu=_a("floor");var Gu,Xu=La(function(t,e){return t*e},1),$u=_a("round"),Ku=La(function(t,e){return t-e},0);return dr.after=function(t,e){if("function"!=typeof e)throw new ie(u);return t=Zs(t),function(){if(--t<1)return e.apply(this,arguments)}},dr.ary=ts,dr.assign=Vs,dr.assignIn=Ys,dr.assignInWith=Gs,dr.assignWith=Xs,dr.at=$s,dr.before=es,dr.bind=ns,dr.bindAll=Eu,dr.bindKey=rs,dr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return ys(t)?t:[t]},dr.chain=Wo,dr.chunk=function(t,e,n){e=(n?Va(t,e,n):e===a)?1:Un(Zs(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var o=0,s=0,u=r(Hn(i/e));o<i;)u[s++]=Ai(t,o,o+=e);return u},dr.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var a=t[e];a&&(i[r++]=a)}return i},dr.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return tn(ys(n)?na(n):[n],zr(e,1))},dr.cond=function(t){var e=null==t?0:t.length,n=Ia();return t=e?Qe(t,function(t){if("function"!=typeof t[1])throw new ie(u);return[n(t[0]),t[1]]}):[],xi(function(n){for(var r=-1;++r<e;){var i=t[r];if(Ue(i[0],this,n))return Ue(i[1],this,n)}})},dr.conforms=function(t){return function(t){var e=iu(t);return function(n){return Rr(n,t,e)}}(Ir(t,p))},dr.constant=Su,dr.countBy=Fo,dr.create=function(t,e){var n=hr(t);return null==e?n:jr(n,e)},dr.curry=function t(e,n,r){var i=ka(e,b,a,a,a,a,a,n=r?a:n);return i.placeholder=t.placeholder,i},dr.curryRight=function t(e,n,r){var i=ka(e,_,a,a,a,a,a,n=r?a:n);return i.placeholder=t.placeholder,i},dr.debounce=is,dr.defaults=Ks,dr.defaultsDeep=Js,dr.defer=as,dr.delay=os,dr.difference=po,dr.differenceBy=ho,dr.differenceWith=Lo,dr.drop=function(t,e,n){var r=null==t?0:t.length;return r?Ai(t,(e=n||e===a?1:Zs(e))<0?0:e,r):[]},dr.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?Ai(t,0,(e=r-(e=n||e===a?1:Zs(e)))<0?0:e):[]},dr.dropRightWhile=function(t,e){return t&&t.length?Bi(t,Ia(e,3),!0,!0):[]},dr.dropWhile=function(t,e){return t&&t.length?Bi(t,Ia(e,3),!0):[]},dr.fill=function(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&Va(t,e,n)&&(n=0,r=i),function(t,e,n,r){var i=t.length;for((n=Zs(n))<0&&(n=-n>i?0:i+n),(r=r===a||r>i?i:Zs(r))<0&&(r+=i),r=n>r?0:Fs(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},dr.filter=function(t,e){return(ys(t)?$e:qr)(t,Ia(e,3))},dr.flatMap=function(t,e){return zr($o(t,e),1)},dr.flatMapDeep=function(t,e){return zr($o(t,e),T)},dr.flatMapDepth=function(t,e,n){return n=n===a?1:Zs(n),zr($o(t,e),n)},dr.flatten=mo,dr.flattenDeep=function(t){return null!=t&&t.length?zr(t,T):[]},dr.flattenDepth=function(t,e){return null!=t&&t.length?zr(t,e=e===a?1:Zs(e)):[]},dr.flip=function(t){return ka(t,E)},dr.flow=Mu,dr.flowRight=Cu,dr.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},dr.functions=function(t){return null==t?[]:Xr(t,iu(t))},dr.functionsIn=function(t){return null==t?[]:Xr(t,au(t))},dr.groupBy=Yo,dr.initial=function(t){return null!=t&&t.length?Ai(t,0,-1):[]},dr.intersection=bo,dr.intersectionBy=_o,dr.intersectionWith=wo,dr.invert=eu,dr.invertBy=nu,dr.invokeMap=Go,dr.iteratee=ju,dr.keyBy=Xo,dr.keys=iu,dr.keysIn=au,dr.map=$o,dr.mapKeys=function(t,e){var n={};return e=Ia(e,3),Yr(t,function(t,r,i){Pr(n,e(t,r,i),t)}),n},dr.mapValues=function(t,e){var n={};return e=Ia(e,3),Yr(t,function(t,r,i){Pr(n,r,e(t,r,i))}),n},dr.matches=function(t){return di(Ir(t,p))},dr.matchesProperty=function(t,e){return hi(t,Ir(e,p))},dr.memoize=ss,dr.merge=ou,dr.mergeWith=su,dr.method=Pu,dr.methodOf=Tu,dr.mixin=Du,dr.negate=us,dr.nthArg=function(t){return t=Zs(t),xi(function(e){return vi(e,t)})},dr.omit=uu,dr.omitBy=function(t,e){return lu(t,us(Ia(e)))},dr.once=function(t){return es(2,t)},dr.orderBy=function(t,e,n,r){return null==t?[]:(ys(e)||(e=null==e?[]:[e]),ys(n=r?a:n)||(n=null==n?[]:[n]),yi(t,e,n))},dr.over=Ru,dr.overArgs=cs,dr.overEvery=Nu,dr.overSome=Hu,dr.partial=ls,dr.partialRight=fs,dr.partition=Ko,dr.pick=cu,dr.pickBy=lu,dr.property=Wu,dr.propertyOf=function(t){return function(e){return null==t?a:$r(t,e)}},dr.pull=ko,dr.pullAll=Oo,dr.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?gi(t,e,Ia(n,2)):t},dr.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?gi(t,e,a,n):t},dr.pullAt=Eo,dr.range=Bu,dr.rangeRight=Zu,dr.rearg=ps,dr.reject=function(t,e){return(ys(t)?$e:qr)(t,us(Ia(e,3)))},dr.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],a=t.length;for(e=Ia(e,3);++r<a;){var o=t[r];e(o,r,t)&&(n.push(o),i.push(r))}return bi(t,i),n},dr.rest=function(t,e){if("function"!=typeof t)throw new ie(u);return xi(t,e=e===a?e:Zs(e))},dr.reverse=So,dr.sampleSize=function(t,e,n){return e=(n?Va(t,e,n):e===a)?1:Zs(e),(ys(t)?Or:Oi)(t,e)},dr.set=function(t,e,n){return null==t?t:Ei(t,e,n)},dr.setWith=function(t,e,n,r){return r="function"==typeof r?r:a,null==t?t:Ei(t,e,n,r)},dr.shuffle=function(t){return(ys(t)?Er:Ci)(t)},dr.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&Va(t,e,n)?(e=0,n=r):(e=null==e?0:Zs(e),n=n===a?r:Zs(n)),Ai(t,e,n)):[]},dr.sortBy=Jo,dr.sortedUniq=function(t){return t&&t.length?Di(t):[]},dr.sortedUniqBy=function(t,e){return t&&t.length?Di(t,Ia(e,2)):[]},dr.split=function(t,e,n){return n&&"number"!=typeof n&&Va(t,e,n)&&(e=n=a),(n=n===a?N:n>>>0)?(t=Us(t))&&("string"==typeof e||null!=e&&!Ps(e))&&!(e=Ri(e))&&On(t)?Gi(Pn(t),0,n):t.split(e,n):[]},dr.spread=function(t,e){if("function"!=typeof t)throw new ie(u);return e=null==e?0:Un(Zs(e),0),xi(function(n){var r=n[e],i=Gi(n,0,e);return r&&tn(i,r),Ue(t,this,i)})},dr.tail=function(t){var e=null==t?0:t.length;return e?Ai(t,1,e):[]},dr.take=function(t,e,n){return t&&t.length?Ai(t,0,(e=n||e===a?1:Zs(e))<0?0:e):[]},dr.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?Ai(t,(e=r-(e=n||e===a?1:Zs(e)))<0?0:e,r):[]},dr.takeRightWhile=function(t,e){return t&&t.length?Bi(t,Ia(e,3),!1,!0):[]},dr.takeWhile=function(t,e){return t&&t.length?Bi(t,Ia(e,3)):[]},dr.tap=function(t,e){return e(t),t},dr.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new ie(u);return Ss(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),is(t,e,{leading:r,maxWait:e,trailing:i})},dr.thru=Bo,dr.toArray=Ws,dr.toPairs=fu,dr.toPairsIn=pu,dr.toPath=function(t){return ys(t)?Qe(t,co):Is(t)?[t]:na(uo(Us(t)))},dr.toPlainObject=zs,dr.transform=function(t,e,n){var r=ys(t),i=r||_s(t)||Rs(t);if(e=Ia(e,4),null==n){var a=t&&t.constructor;n=i?r?new a:[]:Ss(t)&&ks(a)?hr(je(t)):{}}return(i?Ye:Yr)(t,function(t,r,i){return e(n,t,r,i)}),n},dr.unary=function(t){return ts(t,1)},dr.union=Mo,dr.unionBy=Co,dr.unionWith=Ao,dr.uniq=function(t){return t&&t.length?Ni(t):[]},dr.uniqBy=function(t,e){return t&&t.length?Ni(t,Ia(e,2)):[]},dr.uniqWith=function(t,e){return e="function"==typeof e?e:a,t&&t.length?Ni(t,a,e):[]},dr.unset=function(t,e){return null==t||Hi(t,e)},dr.unzip=jo,dr.unzipWith=Po,dr.update=function(t,e,n){return null==t?t:Wi(t,e,Ui(n))},dr.updateWith=function(t,e,n,r){return r="function"==typeof r?r:a,null==t?t:Wi(t,e,Ui(n),r)},dr.values=du,dr.valuesIn=function(t){return null==t?[]:mn(t,au(t))},dr.without=To,dr.words=ku,dr.wrap=function(t,e){return ls(Ui(e),t)},dr.xor=Do,dr.xorBy=Io,dr.xorWith=Ro,dr.zip=No,dr.zipObject=function(t,e){return qi(t||[],e||[],Mr)},dr.zipObjectDeep=function(t,e){return qi(t||[],e||[],Ei)},dr.zipWith=Ho,dr.entries=fu,dr.entriesIn=pu,dr.extend=Ys,dr.extendWith=Gs,Du(dr,dr),dr.add=zu,dr.attempt=Ou,dr.camelCase=hu,dr.capitalize=Lu,dr.ceil=Uu,dr.clamp=function(t,e,n){return n===a&&(n=e,e=a),n!==a&&(n=(n=qs(n))==n?n:0),e!==a&&(e=(e=qs(e))==e?e:0),Dr(qs(t),e,n)},dr.clone=function(t){return Ir(t,h)},dr.cloneDeep=function(t){return Ir(t,p|h)},dr.cloneDeepWith=function(t,e){return Ir(t,p|h,e="function"==typeof e?e:a)},dr.cloneWith=function(t,e){return Ir(t,h,e="function"==typeof e?e:a)},dr.conformsTo=function(t,e){return null==e||Rr(t,e,iu(e))},dr.deburr=vu,dr.defaultTo=function(t,e){return null==t||t!=t?e:t},dr.divide=Vu,dr.endsWith=function(t,e,n){t=Us(t),e=Ri(e);var r=t.length,i=n=n===a?r:Dr(Zs(n),0,r);return(n-=e.length)>=0&&t.slice(n,i)==e},dr.eq=ds,dr.escape=function(t){return(t=Us(t))&&Ot.test(t)?t.replace(xt,xn):t},dr.escapeRegExp=function(t){return(t=Us(t))&&Tt.test(t)?t.replace(Pt,"\\$&"):t},dr.every=function(t,e,n){var r=ys(t)?Xe:Zr;return n&&Va(t,e,n)&&(e=a),r(t,Ia(e,3))},dr.find=qo,dr.findIndex=vo,dr.findKey=function(t,e){return on(t,Ia(e,3),Yr)},dr.findLast=zo,dr.findLastIndex=yo,dr.findLastKey=function(t,e){return on(t,Ia(e,3),Gr)},dr.floor=Yu,dr.forEach=Uo,dr.forEachRight=Vo,dr.forIn=function(t,e){return null==t?t:Ur(t,Ia(e,3),au)},dr.forInRight=function(t,e){return null==t?t:Vr(t,Ia(e,3),au)},dr.forOwn=function(t,e){return t&&Yr(t,Ia(e,3))},dr.forOwnRight=function(t,e){return t&&Gr(t,Ia(e,3))},dr.get=Qs,dr.gt=hs,dr.gte=Ls,dr.has=function(t,e){return null!=t&&Fa(t,e,ti)},dr.hasIn=tu,dr.head=go,dr.identity=Au,dr.includes=function(t,e,n,r){t=gs(t)?t:du(t),n=n&&!r?Zs(n):0;var i=t.length;return n<0&&(n=Un(i+n,0)),Ds(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&un(t,e,n)>-1},dr.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Zs(n);return i<0&&(i=Un(r+i,0)),un(t,e,i)},dr.inRange=function(t,e,n){return e=Bs(e),n===a?(n=e,e=0):n=Bs(n),function(t,e,n){return t>=Vn(e,n)&&t<Un(e,n)}(t=qs(t),e,n)},dr.invoke=ru,dr.isArguments=vs,dr.isArray=ys,dr.isArrayBuffer=ms,dr.isArrayLike=gs,dr.isArrayLikeObject=bs,dr.isBoolean=function(t){return!0===t||!1===t||Ms(t)&&Jr(t)==z},dr.isBuffer=_s,dr.isDate=ws,dr.isElement=function(t){return Ms(t)&&1===t.nodeType&&!js(t)},dr.isEmpty=function(t){if(null==t)return!0;if(gs(t)&&(ys(t)||"string"==typeof t||"function"==typeof t.splice||_s(t)||Rs(t)||vs(t)))return!t.length;var e=Za(t);if(e==$||e==nt)return!t.size;if($a(t))return!ci(t).length;for(var n in t)if(le.call(t,n))return!1;return!0},dr.isEqual=function(t,e){return ai(t,e)},dr.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:a)?n(t,e):a;return r===a?ai(t,e,a,n):!!r},dr.isError=xs,dr.isFinite=function(t){return"number"==typeof t&&Fn(t)},dr.isFunction=ks,dr.isInteger=Os,dr.isLength=Es,dr.isMap=Cs,dr.isMatch=function(t,e){return t===e||oi(t,e,Na(e))},dr.isMatchWith=function(t,e,n){return n="function"==typeof n?n:a,oi(t,e,Na(e),n)},dr.isNaN=function(t){return As(t)&&t!=+t},dr.isNative=function(t){if(Xa(t))throw new Jt(s);return si(t)},dr.isNil=function(t){return null==t},dr.isNull=function(t){return null===t},dr.isNumber=As,dr.isObject=Ss,dr.isObjectLike=Ms,dr.isPlainObject=js,dr.isRegExp=Ps,dr.isSafeInteger=function(t){return Os(t)&&t>=-D&&t<=D},dr.isSet=Ts,dr.isString=Ds,dr.isSymbol=Is,dr.isTypedArray=Rs,dr.isUndefined=function(t){return t===a},dr.isWeakMap=function(t){return Ms(t)&&Za(t)==ot},dr.isWeakSet=function(t){return Ms(t)&&Jr(t)==st},dr.join=function(t,e){return null==t?"":qn.call(t,e)},dr.kebabCase=yu,dr.last=xo,dr.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return n!==a&&(i=(i=Zs(n))<0?Un(r+i,0):Vn(i,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):sn(t,ln,i,!0)},dr.lowerCase=mu,dr.lowerFirst=gu,dr.lt=Ns,dr.lte=Hs,dr.max=function(t){return t&&t.length?Fr(t,Au,Qr):a},dr.maxBy=function(t,e){return t&&t.length?Fr(t,Ia(e,2),Qr):a},dr.mean=function(t){return fn(t,Au)},dr.meanBy=function(t,e){return fn(t,Ia(e,2))},dr.min=function(t){return t&&t.length?Fr(t,Au,fi):a},dr.minBy=function(t,e){return t&&t.length?Fr(t,Ia(e,2),fi):a},dr.stubArray=Fu,dr.stubFalse=qu,dr.stubObject=function(){return{}},dr.stubString=function(){return""},dr.stubTrue=function(){return!0},dr.multiply=Xu,dr.nth=function(t,e){return t&&t.length?vi(t,Zs(e)):a},dr.noConflict=function(){return Te._===this&&(Te._=Le),this},dr.noop=Iu,dr.now=Qo,dr.pad=function(t,e,n){t=Us(t);var r=(e=Zs(e))?jn(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return ya(Wn(i),n)+t+ya(Hn(i),n)},dr.padEnd=function(t,e,n){t=Us(t);var r=(e=Zs(e))?jn(t):0;return e&&r<e?t+ya(e-r,n):t},dr.padStart=function(t,e,n){t=Us(t);var r=(e=Zs(e))?jn(t):0;return e&&r<e?ya(e-r,n)+t:t},dr.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),Gn(Us(t).replace(It,""),e||0)},dr.random=function(t,e,n){if(n&&"boolean"!=typeof n&&Va(t,e,n)&&(e=n=a),n===a&&("boolean"==typeof e?(n=e,e=a):"boolean"==typeof t&&(n=t,t=a)),t===a&&e===a?(t=0,e=1):(t=Bs(t),e===a?(e=t,t=0):e=Bs(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=Xn();return Vn(t+i*(e-t+Ce("1e-"+((i+"").length-1))),e)}return _i(t,e)},dr.reduce=function(t,e,n){var r=ys(t)?en:hn,i=arguments.length<3;return r(t,Ia(e,4),n,i,Wr)},dr.reduceRight=function(t,e,n){var r=ys(t)?nn:hn,i=arguments.length<3;return r(t,Ia(e,4),n,i,Br)},dr.repeat=function(t,e,n){return e=(n?Va(t,e,n):e===a)?1:Zs(e),wi(Us(t),e)},dr.replace=function(){var t=arguments,e=Us(t[0]);return t.length<3?e:e.replace(t[1],t[2])},dr.result=function(t,e,n){var r=-1,i=(e=Vi(e,t)).length;for(i||(i=1,t=a);++r<i;){var o=null==t?a:t[co(e[r])];o===a&&(r=i,o=n),t=ks(o)?o.call(t):o}return t},dr.round=$u,dr.runInContext=t,dr.sample=function(t){return(ys(t)?kr:ki)(t)},dr.size=function(t){if(null==t)return 0;if(gs(t))return Ds(t)?jn(t):t.length;var e=Za(t);return e==$||e==nt?t.size:ci(t).length},dr.snakeCase=bu,dr.some=function(t,e,n){var r=ys(t)?rn:ji;return n&&Va(t,e,n)&&(e=a),r(t,Ia(e,3))},dr.sortedIndex=function(t,e){return Pi(t,e)},dr.sortedIndexBy=function(t,e,n){return Ti(t,e,Ia(n,2))},dr.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=Pi(t,e);if(r<n&&ds(t[r],e))return r}return-1},dr.sortedLastIndex=function(t,e){return Pi(t,e,!0)},dr.sortedLastIndexBy=function(t,e,n){return Ti(t,e,Ia(n,2),!0)},dr.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var n=Pi(t,e,!0)-1;if(ds(t[n],e))return n}return-1},dr.startCase=_u,dr.startsWith=function(t,e,n){return t=Us(t),n=null==n?0:Dr(Zs(n),0,t.length),e=Ri(e),t.slice(n,n+e.length)==e},dr.subtract=Ku,dr.sum=function(t){return t&&t.length?Ln(t,Au):0},dr.sumBy=function(t,e){return t&&t.length?Ln(t,Ia(e,2)):0},dr.template=function(t,e,n){var r=dr.templateSettings;n&&Va(t,e,n)&&(e=a),t=Us(t),e=Gs({},e,r,Oa);var i,o,s=Gs({},e.imports,r.imports,Oa),u=iu(s),c=mn(s,u),l=0,f=e.interpolate||$t,p="__p += '",d=ne((e.escape||$t).source+"|"+f.source+"|"+(f===Mt?Ft:$t).source+"|"+(e.evaluate||$t).source+"|$","g"),h="//# sourceURL="+("sourceURL"in e?e.sourceURL:"lodash.templateSources["+ ++Oe+"]")+"\n";t.replace(d,function(e,n,r,a,s,u){return r||(r=a),p+=t.slice(l,u).replace(Kt,kn),n&&(i=!0,p+="' +\n__e("+n+") +\n'"),s&&(o=!0,p+="';\n"+s+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=u+e.length,e}),p+="';\n";var L=e.variable;L||(p="with (obj) {\n"+p+"\n}\n"),p=(o?p.replace(gt,""):p).replace(bt,"$1").replace(_t,"$1;"),p="function("+(L||"obj")+") {\n"+(L?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var v=Ou(function(){return Qt(u,h+"return "+p).apply(a,c)});if(v.source=p,xs(v))throw v;return v},dr.times=function(t,e){if((t=Zs(t))<1||t>D)return[];var n=N,r=Vn(t,N);e=Ia(e),t-=N;for(var i=vn(r,e);++n<t;)e(n);return i},dr.toFinite=Bs,dr.toInteger=Zs,dr.toLength=Fs,dr.toLower=function(t){return Us(t).toLowerCase()},dr.toNumber=qs,dr.toSafeInteger=function(t){return t?Dr(Zs(t),-D,D):0===t?t:0},dr.toString=Us,dr.toUpper=function(t){return Us(t).toUpperCase()},dr.trim=function(t,e,n){if((t=Us(t))&&(n||e===a))return t.replace(Dt,"");if(!t||!(e=Ri(e)))return t;var r=Pn(t),i=Pn(e);return Gi(r,bn(r,i),_n(r,i)+1).join("")},dr.trimEnd=function(t,e,n){if((t=Us(t))&&(n||e===a))return t.replace(Rt,"");if(!t||!(e=Ri(e)))return t;var r=Pn(t);return Gi(r,0,_n(r,Pn(e))+1).join("")},dr.trimStart=function(t,e,n){if((t=Us(t))&&(n||e===a))return t.replace(It,"");if(!t||!(e=Ri(e)))return t;var r=Pn(t);return Gi(r,bn(r,Pn(e))).join("")},dr.truncate=function(t,e){var n=S,r=M;if(Ss(e)){var i="separator"in e?e.separator:i;n="length"in e?Zs(e.length):n,r="omission"in e?Ri(e.omission):r}var o=(t=Us(t)).length;if(On(t)){var s=Pn(t);o=s.length}if(n>=o)return t;var u=n-jn(r);if(u<1)return r;var c=s?Gi(s,0,u).join(""):t.slice(0,u);if(i===a)return c+r;if(s&&(u+=c.length-u),Ps(i)){if(t.slice(u).search(i)){var l,f=c;for(i.global||(i=ne(i.source,Us(qt.exec(i))+"g")),i.lastIndex=0;l=i.exec(f);)var p=l.index;c=c.slice(0,p===a?u:p)}}else if(t.indexOf(Ri(i),u)!=u){var d=c.lastIndexOf(i);d>-1&&(c=c.slice(0,d))}return c+r},dr.unescape=function(t){return(t=Us(t))&&kt.test(t)?t.replace(wt,Tn):t},dr.uniqueId=function(t){var e=++fe;return Us(t)+e},dr.upperCase=wu,dr.upperFirst=xu,dr.each=Uo,dr.eachRight=Vo,dr.first=go,Du(dr,(Gu={},Yr(dr,function(t,e){le.call(dr.prototype,e)||(Gu[e]=t)}),Gu),{chain:!1}),dr.VERSION="4.17.11",Ye(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){dr[t].placeholder=dr}),Ye(["drop","take"],function(t,e){yr.prototype[t]=function(n){n=n===a?1:Un(Zs(n),0);var r=this.__filtered__&&!e?new yr(this):this.clone();return r.__filtered__?r.__takeCount__=Vn(n,r.__takeCount__):r.__views__.push({size:Vn(n,N),type:t+(r.__dir__<0?"Right":"")}),r},yr.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}}),Ye(["filter","map","takeWhile"],function(t,e){var n=e+1,r=n==j||3==n;yr.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Ia(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}}),Ye(["head","last"],function(t,e){var n="take"+(e?"Right":"");yr.prototype[t]=function(){return this[n](1).value()[0]}}),Ye(["initial","tail"],function(t,e){var n="drop"+(e?"":"Right");yr.prototype[t]=function(){return this.__filtered__?new yr(this):this[n](1)}}),yr.prototype.compact=function(){return this.filter(Au)},yr.prototype.find=function(t){return this.filter(t).head()},yr.prototype.findLast=function(t){return this.reverse().find(t)},yr.prototype.invokeMap=xi(function(t,e){return"function"==typeof t?new yr(this):this.map(function(n){return ri(n,t,e)})}),yr.prototype.reject=function(t){return this.filter(us(Ia(t)))},yr.prototype.slice=function(t,e){t=Zs(t);var n=this;return n.__filtered__&&(t>0||e<0)?new yr(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==a&&(n=(e=Zs(e))<0?n.dropRight(-e):n.take(e-t)),n)},yr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},yr.prototype.toArray=function(){return this.take(N)},Yr(yr.prototype,function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),i=dr[r?"take"+("last"==e?"Right":""):e],o=r||/^find/.test(e);i&&(dr.prototype[e]=function(){var e=this.__wrapped__,s=r?[1]:arguments,u=e instanceof yr,c=s[0],l=u||ys(e),f=function(t){var e=i.apply(dr,tn([t],s));return r&&p?e[0]:e};l&&n&&"function"==typeof c&&1!=c.length&&(u=l=!1);var p=this.__chain__,d=!!this.__actions__.length,h=o&&!p,L=u&&!d;if(!o&&l){e=L?e:new yr(this);var v=t.apply(e,s);return v.__actions__.push({func:Bo,args:[f],thisArg:a}),new vr(v,p)}return h&&L?t.apply(this,s):(v=this.thru(f),h?r?v.value()[0]:v.value():v)})}),Ye(["pop","push","shift","sort","splice","unshift"],function(t){var e=ae[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);dr.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(ys(i)?i:[],t)}return this[n](function(n){return e.apply(ys(n)?n:[],t)})}}),Yr(yr.prototype,function(t,e){var n=dr[e];if(n){var r=n.name+"";(ir[r]||(ir[r]=[])).push({name:e,func:n})}}),ir[da(a,m).name]=[{name:"wrapper",func:a}],yr.prototype.clone=function(){var t=new yr(this.__wrapped__);return t.__actions__=na(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=na(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=na(this.__views__),t},yr.prototype.reverse=function(){if(this.__filtered__){var t=new yr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},yr.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=ys(t),r=e<0,i=n?t.length:0,a=function(t,e,n){for(var r=-1,i=n.length;++r<i;){var a=n[r],o=a.size;switch(a.type){case"drop":t+=o;break;case"dropRight":e-=o;break;case"take":e=Vn(e,t+o);break;case"takeRight":t=Un(t,e-o)}}return{start:t,end:e}}(0,i,this.__views__),o=a.start,s=a.end,u=s-o,c=r?s:o-1,l=this.__iteratees__,f=l.length,p=0,d=Vn(u,this.__takeCount__);if(!n||!r&&i==u&&d==u)return Zi(t,this.__actions__);var h=[];t:for(;u--&&p<d;){for(var L=-1,v=t[c+=e];++L<f;){var y=l[L],m=y.iteratee,g=y.type,b=m(v);if(g==P)v=b;else if(!b){if(g==j)continue t;break t}}h[p++]=v}return h},dr.prototype.at=Zo,dr.prototype.chain=function(){return Wo(this)},dr.prototype.commit=function(){return new vr(this.value(),this.__chain__)},dr.prototype.next=function(){this.__values__===a&&(this.__values__=Ws(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?a:this.__values__[this.__index__++]}},dr.prototype.plant=function(t){for(var e,n=this;n instanceof Lr;){var r=fo(n);r.__index__=0,r.__values__=a,e?i.__wrapped__=r:e=r;var i=r;n=n.__wrapped__}return i.__wrapped__=t,e},dr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof yr){var e=t;return this.__actions__.length&&(e=new yr(this)),(e=e.reverse()).__actions__.push({func:Bo,args:[So],thisArg:a}),new vr(e,this.__chain__)}return this.thru(So)},dr.prototype.toJSON=dr.prototype.valueOf=dr.prototype.value=function(){return Zi(this.__wrapped__,this.__actions__)},dr.prototype.first=dr.prototype.head,He&&(dr.prototype[He]=function(){return this}),dr}();Te._=Dn,(i=function(){return Dn}.call(e,n,e,r))===a||(r.exports=i)}).call(this)}).call(this,n(5),n(6)(t))},function(t){t.exports=[{key:"stateOrTerritory",heading:"States and territories",text:"Where have HIAs been done in the United States?",instruct:"Select a state or territory to drill down",secondaryDimensions:["decisionMakingLevels","organizationTypes","communityTypes","fundingSource","dateBucket"]},{key:"sectors",heading:"Sectors",text:"In what sectors have HIAs been conducted?",instruct:"Select a sector to drill down",splitToArray:!0,secondaryDimensions:["decisionMakingLevels","organizationTypes","communityTypes","fundingSource","dateBucket"]},{key:"driversOfHealth",heading:"Drivers of health",text:"What drivers of health have been addressed by HIAs?",instruct:"Select a driver to drill down",splitToArray:!0,secondaryDimensions:["decisionMakingLevels","organizationTypes","communityTypes","fundingSource"]},{key:"affectedPopulations",heading:"Affected populations",text:"Which populations have been included in HIA analyses?",instruct:"Select a population type to drill down",splitToArray:!0,secondaryDimensions:["researchMethods","decisionMakingLevels","organizationTypes","communityTypes","fundingSource"]},{key:"researchMethods",heading:"Research methods",text:"What research methods have been used in HIAs?",instruct:"Select a research method to drill down",splitToArray:!0,secondaryDimensions:["decisionMakingLevels","organizationTypes","communityTypes"]},{key:"decisionMakingLevels",heading:"Decision-making levels",text:"What levels of decision-making have HIAs been informing?",instruct:"Select a decision-making level to drill down",splitToArray:!0,secondaryDimensions:["organizationTypes","communityTypes"]},{key:"organizationTypes",heading:"Organization types",text:"",instruct:"",splitToArray:!0,secondaryDimensions:[],isSecondaryOnly:!0},{key:"communityTypes",heading:"Community types",text:"",instruct:"",splitToArray:!0,secondaryDimensions:[],isSecondaryOnly:!0},{key:"fundingSource",heading:"Funding source",text:"",instruct:"",splitToArray:!0,secondaryDimensions:[],isSecondaryOnly:!0},{key:"dateBucket",heading:"Publication date",text:"",instruct:"",secondaryDimensions:[],isSecondaryOnly:!0,order:["Prior to 2009","2009–2012","2013–2016","2017–2019","In progress"]}]},function(t){t.exports={Alabama:"AL",Alaska:"AK",Arizona:"AZ",Arkansas:"AR",California:"CA",Colorado:"CO",Connecticut:"CT",Delaware:"DE","District of Columbia":"DC",Florida:"FL",Georgia:"GA",Hawaii:"HI",Idaho:"ID",Illinois:"IL",Indiana:"IN",Iowa:"IA",Kansas:"KS",Kentucky:"KY",Louisiana:"LA",Maine:"ME",Maryland:"MD",Massachusetts:"MA",Michigan:"MI",Minnesota:"MN",Mississippi:"MS",Missouri:"MO",Montana:"MT",Nebraska:"NE",Nevada:"NV","New Hampshire":"NH","New Jersey":"NJ","New Mexico":"NM","New York":"NY","North Carolina":"NC","North Dakota":"ND",Ohio:"OH",Oklahoma:"OK",Oregon:"OR",Pennsylvania:"PA","Rhode Island":"RI","South Carolina":"SC","South Dakota":"SD",Tennessee:"TN",Texas:"TX",Utah:"UT",Vermont:"VT",Virginia:"VA",Washington:"WA","West Virginia":"WV",Wisconsin:"WI",Wyoming:"WY","Puerto Rico":"PR","Republic of Palau":"PW"}},function(t){t.exports={"Safe and accessible active transportation routes":"Transportation routes","Safe, affordable, and healthy housing":"Housing","Safe and affordable parks and recreational facilities":"Parks and recreational facilities","Access to services/medical care":"Access to medical care","Safe and affordable public transit":"Public transit","Current/former correctional population":"Correctional population"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},a=l(n(0)),o=l(n(18)),s=n(2),u=l(n(1)),c=l(n(8));function l(t){return t&&t.__esModule?t:{default:t}}function f(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var h=function(t){function e(){return f(this,e),p(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return d(e,a.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.name="MenuView",this.menu=this.createComponent(L,"div#menu-main"),this.addChildren([this.menu]),this.prerendered&&!this.rerender)return t;t.classList.add(o.default.menuView),t.classList.add("menu-view");var n=document.createElement("h2");return n.textContent="Explore Health Impact Assessments",t.appendChild(n),t}},{key:"init",value:function(){u.default.setSubs([["isSelected",this.hideSection.bind(this)]])}},{key:"hideSection",value:function(){this.el.style.display="none"}}]),e}();e.default=h;var L=function(t){function e(){return f(this,e),p(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return d(e,c.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.name="MainMenu",this.prerendered&&this.rerender,t}},{key:"clickHandler",value:function(t){i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"clickHandler",this).call(this,t),s.stateModule.setState("isSelected",!0)}}]),e}()},function(t,e,n){t.exports={menuView:"src-views-menu-view--menuView"}},function(t,e,n){t.exports={menuList:"src-components-menu--menuList",navItemWrapper:"src-components-menu--navItemWrapper",navLink:"src-components-menu--navLink",active:"src-components-menu--active",placeholderMenuItem:"src-components-menu--placeholderMenuItem"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},a=p(n(0)),o=p(n(1)),s=p(n(21)),u=p(n(22)),c=p(n(26)),l=p(n(30)),f=p(n(8));function p(t){return t&&t.__esModule?t:{default:t}}function d(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function L(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var v=function(t){function e(){return d(this,e),h(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return L(e,a.default),r(e,[{key:"prerender",value:function(){var t=this,n=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.name="SectionView",this.barViews=this.model.fields.filter(function(t){return!t.isSecondaryOnly&&"stateOrTerritory"!==t.key}).map(function(e){return t.createComponent(c.default,"section#bar-view-"+e.key,{data:{primary:e.key}})}),this.addChildren([this.createComponent(y,"div#top-menu"),this.createComponent(u.default,"section#map-view")].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(this.barViews),[this.createComponent(l.default,"section#waffle-view")])),this.prerendered&&!this.rerender?n:(n.classList.add("section-view",s.default.sectionView),n)}},{key:"init",value:function(){var t=this.showSection.bind(this);o.default.setSubs([["isSelected",t],["selectHIA",this.blurSection.bind(this)]])}},{key:"blurSection",value:function(t,e){e?this.el.classList.add(s.default.isBlurred):this.el.classList.remove(s.default.isBlurred)}},{key:"showSection",value:function(){this.el.style.display="block"}}]),e}();e.default=v;var y=function(t){function e(){return d(this,e),h(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return L(e,f.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.name="TopMenu",this.prerendered&&this.rerender,t}},{key:"init",value:function(){i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),o.default.setSubs([["view",this.indicateActiveSection.bind(this)]])}},{key:"indicateActiveSection",value:function(t,e){this.el.querySelectorAll("a").forEach(function(t){t.classList.remove(s.default.active)}),this.el.querySelector('a[data-section="'+e+'"').classList.add(s.default.active)}}]),e}()},function(t,e,n){t.exports={sectionView:"src-views-section-view--sectionView",active:"src-views-section-view--active",isBlurred:"src-views-section-view--isBlurred"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=p(n(0)),a=p(n(23)),o=p(n(24)),s=p(n(25)),u=p(n(4)),c=p(n(1)),l=n(2),f=n(3);function p(t){return t&&t.__esModule?t:{default:t}}var d=["#2c75ce","#09132a"],h=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),r(e,[{key:"prerender",value:function(){var t=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.name="MapView",this.valuesArray=this.model.nestBy.stateOrTerritory.map(function(t){return t.values.length}),this.getMaxCount(),this.prerendered&&!this.rerender)return t;var n=document.createElement("h2");n.textContent=this.model.fields.find(function(t){return"stateOrTerritory"===t.key}).text,n.classList.add("section-title");var r=this.prerenderMap(),i=this.prerenderLegend(),a=document.createElement("p");return a.textContent="Only US territories that have conducted HIAs are represented on the map.",t.appendChild(n),t.appendChild(r),t.appendChild(i),t.appendChild(a),t}},{key:"prerenderMap",value:function(){var t=this,e=document.createElement("div");return e.classList.add(o.default.mapContainer,"js-map-container"),e.innerHTML=a.default,this.colorScale=s.default.scale(d).domain([1,Math.log(this.maxLegend)]),this.model.nestBy.stateOrTerritory.forEach(function(n){var r=e.querySelector(".state-"+t.model.stateAbbreviations[n.key]),i=e.querySelector(".state-box-"+t.model.stateAbbreviations[n.key]);if(null!==n.key){if(r){r.classList.add("is-not-null");var a=r.querySelector(".state__label");r.querySelector(".state__path").style.fill=t.colorScale(Math.log(n.values.length)),a&&(a.style.fontWeight="bold",a.style.fill="#fff")}if(i){i.classList.add("is-not-null");var o=i.querySelector("rect");o.style.fill=t.colorScale(Math.log(n.values.length)),o.style.stroke=t.colorScale(Math.log(n.values.length)),i.querySelector(".state-box__label").style.fill="#fff"}}}),e}},{key:"prerenderLegend",value:function(){var t=this,e=document.createElement("div");e.textContent="Number of health impact assessments",e.classList.add(o.default.legendContainer);var n=document.createElement("div");n.classList.add(o.default.legendWrapper);var r=document.createElement("div");return r.style.background="linear-gradient(to right, "+d.join(","),r.classList.add(o.default.gradient),n.appendChild(r),[1,Math.floor(this.maxLegend/10),this.maxLegend].forEach(function(e,r){var i=document.createElement("div");i.classList.add(o.default.tick),i.textContent=e,i.style.left=0===r?0:1===r?Math.log(e)/Math.log(t.maxLegend)*100+"%":"100%",n.appendChild(i)}),e.appendChild(n),e}},{key:"getMaxCount",value:function(){this.maxCount=Math.max.apply(Math,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(this.valuesArray)),this.maxLegend=this.maxCount<100?100:this.maxCount}},{key:"toggleActive",value:function(t,e){"stateOrTerritory"===e?this.el.classList.add(o.default.active):this.el.classList.remove(o.default.active)}},{key:"init",value:function(){var t=this;c.default.setSubs([["hoverPrimaryGroup",this.highlightState.bind(this)],["unHoverPrimaryGroup",this.highlightState.bind(this)],["view",this.toggleActive.bind(this)]]),this.setTippys(),this.mapContainer=this.mapContainer||document.querySelector(".js-map-container"),this.model.nestBy.stateOrTerritory.forEach(function(e){var n=t.mapContainer.querySelector(".state-"+t.model.stateAbbreviations[e.key]),r=t.mapContainer.querySelector(".state-box-"+t.model.stateAbbreviations[e.key]);"null"!==e.key&&(n&&(n.addEventListener("click",function(n){t.stateClickHandler.call(t,e,n)}),n.addEventListener("mouseenter",function(){l.stateModule.setState("hoverPrimaryGroup",e.key,{forceChange:!0})}),n.addEventListener("mouseleave",function(){l.stateModule.setState("unHoverPrimaryGroup",e.key,{forceChange:!0})})),r&&(r.addEventListener("click",function(n){t.stateClickHandler.call(t,e,n)}),r.addEventListener("mouseenter",function(){l.stateModule.setState("hoverPrimaryGroup",e.key,{forceChange:!0})}),r.addEventListener("mouseleave",function(){l.stateModule.setState("unHoverPrimaryGroup",e.key,{forceChange:!0})})))})}},{key:"highlightState",value:function(t,e){var n=this.model.stateAbbreviations[e],r=document.querySelector(".state-"+n),i=document.querySelector(".state-box-"+n);"hoverPrimaryGroup"===t&&(r&&r.classList.add(o.default.hover),i&&i.classList.add(o.default.hover)),"unHoverPrimaryGroup"===t&&(r&&r.classList.remove(o.default.hover),i&&i.classList.remove(o.default.hover))}},{key:"stateClickHandler",value:function(t,e){e.stopPropagation(),l.stateModule.setState("selectPrimaryGroup.map",t.key),(0,f.GTMPush)("HIA|Select|State|"+t.key)}},{key:"setTippys",value:function(){var t=this;function e(t,e){(0,u.default)(t,{content:"<strong>"+e.values.length+" HIA"+(e.values.length>1?"s":"")+"</strong><br />Click for details",followCursor:!0})}this.mapContainer=this.mapContainer||document.querySelector(".js-map-container"),this.model.nestBy.stateOrTerritory.forEach(function(n){var r=t.mapContainer.querySelector(".state-"+t.model.stateAbbreviations[n.key]),i=t.mapContainer.querySelector(".state-box-"+t.model.stateAbbreviations[n.key]);"null"!==n.key&&(r&&e(r,n),i&&e(i,n))})}},{key:"clickHandler",value:function(){}}]),e}();e.default=h},function(t,e){t.exports='<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 689 402">\n   <style>\n    .state .state__label {\n        fill: black; font-size: 12px; text-anchor: middle; dominant-baseline: middle; cursor: pointer;\n    }\n    .state__label.invert {\n        fill: black; font-size: 12px; text-anchor: middle; dominant-baseline: middle; cursor: pointer;\n    }\n    .state__path, .state-box__background {\n        cursor: pointer;\n        transition: fill 0.25s ease-in-out 0s, stroke 0.25s ease-in-out 0s;\n        fill: url(#diagonalHatch);\n        stroke: #fff;\n        stroke-width: 1px;\n    }\n    .state-box__background {\n        width: 40px;\n        height: 22px;\n        fill: url(#diagonalHatch);\n        stroke: #ccc;\n        stroke-width: 1px;\n\n    }\n    .state-boxes text {\n        fill: #000; text-anchor: middle; font-size: 12px; cursor: pointer;\n    }\n   </style>\n   <pattern id="diagonalHatch" patternUnits="userSpaceOnUse" width="8" height="8">\n     <rect width="8" height="8" fill="#fff"></rect>\n     <path d="M-1,1 l4,-4\n              M0,8 l8,-8\n              M7,9 l4,-4" \n           style="stroke:#ccc; stroke-width:2" />\n   </pattern>\n    <g class="states">\n        <g class="state state-AL">\n            <path class="state__path" d="M469.539581155115,307.43638535113575L458.3337592977518,308.84547414207526L436.7456916701916,310.8736750684903L436.9753779232502,313.4694986369897L439.87343865043954,315.3498047407599L439.0396248346941,321.28751765744227L435.8824832556217,321.8038010938718L433.35110320059516,318.93362956770966L433.62272227508436,316.7720870622848L431.3287395971389,316.5698617008617L431.2493355006898,321.08965416402873L427.5805227691946,320.91428485408267L426.9880514688757,313.5190167454715L425.2109923930087,302.5631223002806L424.8529112009691,292.4328950124649L425.364062129561,287.705513414585L425.1746631754037,274.4436791719054L425.8591772146341,261.492664650008L425.65890070186924,253.86178424466812L424.6781143724146,252.4290033119513L455.4651381802454,249.6298844825282L459.01850251888993,262.09487938090086L462.8776314997724,276.8224408019717L465.45998366452403,283.8630309126188L466.93475700409806,285.0475180323113L468.3400061189456,289.42661148181895L466.71778986836273,290.89016909947173L466.5818705572519,297.5152686570608L467.56245674082925,298.19829753985L467.92229866182436,305.23796372429615Z"></path><text class="state__label" x="444.0257271064124" y="283.6736965790596" dx="0" dy="0">AL</text>\n        </g>\n        <g class="state state-AR">\n            <path class="state__path" d="M405.2880522881341,238.97179793183244L406.2502123662711,240.66001375053145L402.99384825557223,242.94307963496954L403.18099583693805,245.87687823653982L401.1126925587114,246.96208607067064L401.7458776893622,250.26557671921728L400.67302147696785,253.75348528415356L399.4115916197063,254.22769057754704L400.3553944808231,255.60270763526268L398.2658261941231,256.68225205309136L396.3214326198597,260.37360155490137L396.90683319036214,263.0434218772572L392.3619109618259,267.18919332888714L390.5317274157884,273.8781870191144L389.3269933409196,276.00383107780647L390.7469821825823,278.0753897548605L391.4094934385846,282.40678160099804L390.62774850308745,284.3512658263196L377.8628743473558,284.8516954753989L355.4055136456463,285.3733469506998L355.2434874502442,277.52748107679173L350.8642963405402,277.2924047936147L349.9731190766749,276.276061320813L349.7327189628065,261.3605352814673L350.1115998744506,258.1780502805202L349.9544037238157,248.6482517387767L349.0477101931497,245.24600398566764L347.60618896632604,233.9016439341682L371.5913698500137,233.29302765300338L399.7597902980994,231.91772672676746L401.12455061266047,233.50546335691L400.4254423084616,235.85848004788903L397.68058938192206,239.52805117965244Z"></path><text class="state__label" x="373.9346665313804" y="256.97999431669894" dx="0" dy="0">AR</text>\n        </g>\n        <g class="state state-DC">\n            <path class="state__path" d="M545.6086370144726,178.3679589097543L544.001042881731,176.58356419154757L546.538670975497,176.80006750811742Z"></path>\n        </g>\n        <g class="state state-FL">\n            <path class="state__path" d="M439.0396248346941,321.28751765744227L439.87343865043954,315.3498047407599L436.9753779232502,313.4694986369897L436.7456916701916,310.8736750684903L458.3337592977518,308.84547414207526L469.539581155115,307.43638535113575L471.8332341372674,311.4608087551739L504.946824509511,309.2432091791128L505.81880139863677,312.06615568349946L507.90858911036196,310.64197390069336L506.80071505526223,306.2584327537842L507.5462145961701,305.1103483436732L514.5131529522257,305.7314826625709L515.9389563040182,311.9782658672504L518.5928177549699,317.15057403818275L518.970163276578,319.56390827870433L523.9589643832091,327.5437701932184L530.2846039831314,334.7253054452681L531.4645495123655,341.93247279346417L539.2023763003025,354.0764745381752L541.4382633347086,358.77809676899324L542.2877066544117,363.78835348489565L542.2185468137016,369.1071873014666L543.075444675541,374.1846822581656L540.8459251817945,378.3520255323307L540.5823023190012,382.65903006511644L535.605520993347,385.2079182204871L530.7631610962081,385.58603488532356L530.0725811371157,381.2019439426693L526.9467273935531,376.8002362133404L524.3351847950955,375.625675599784L522.0563524269323,376.6048376119404L520.9087998463651,375.43733211307045L517.9845214269393,368.8503720387384L515.0391962780816,368.497158159852L515.3537495757168,364.10497889602175L514.0151632374166,361.5349972166789L513.9320809581711,364.23531426771285L512.5779300001801,364.82833546521505L507.1439454788724,356.9916664894189L504.9362571918724,354.8509471524494L508.5198957286261,349.98637294882803L506.5501525161119,349.47625814879467L504.53268111435796,351.97917630247923L502.89798143478305,350.46611558908575L502.602671151668,344.96188283415336L503.8825192503346,340.6586196132882L502.45618143581515,333.87490469201373L500.65550181589407,331.02983923284665L497.4946262840785,331.7850552646342L494.60423714951787,327.65110264809294L492.1560936475775,326.7085330201851L491.85448604881435,324.4445807880753L488.71445315804044,321.6803736148628L483.7754318041134,319.13839138365137L478.9247962052918,320.8568418689186L479.60989673740914,322.67846676860495L477.3090546700248,322.72162811394185L471.7365562169589,326.31972653299204L467.6689407219281,327.1031325995675L466.86925217712746,324.1009303564371L459.0703298320292,320.03754953060593L454.3339697437457,318.5498739694456L449.75796548627625,318.5348544359804ZM526.1158911635566,393.6258257268101L528.5572843539356,393.48606942194994L523.4825494069677,395.75400192808286Z"></path><text class="state__label" x="506.05225480846894" y="337.6942602272381" dx="1%" dy="0">FL</text>\n        </g>\n        <g class="state state-GA">\n            <path class="state__path" d="M514.5131529522257,305.7314826625709L507.5462145961701,305.1103483436732L506.80071505526223,306.2584327537842L507.90858911036196,310.64197390069336L505.81880139863677,312.06615568349946L504.946824509511,309.2432091791128L471.8332341372674,311.4608087551739L469.539581155115,307.43638535113575L467.92229866182436,305.23796372429615L467.56245674082925,298.19829753985L466.5818705572519,297.5152686570608L466.71778986836273,290.89016909947173L468.3400061189456,289.42661148181895L466.93475700409806,285.0475180323113L465.45998366452403,283.8630309126188L462.8776314997724,276.8224408019717L459.01850251888993,262.09487938090086L455.4651381802454,249.6298844825282L470.8093845622693,247.75883898726732L484.8388602569904,245.7754656759003L482.718581426687,249.34729668282125L482.918918497249,250.84245476728313L487.185227626161,253.3877910048908L488.8871250064999,253.07242024823307L491.28423450269236,257.7057421061569L493.3830263140487,260.13359192621226L496.67082881613567,261.5853999092306L498.889758098386,264.70877283747365L502.6889776752656,266.4715238553483L505.10777300894625,270.75747387837833L508.4035799198758,271.9389141706365L510.6909087756811,278.0786220084726L513.0624083389478,278.9113419968069L514.8452127142561,281.67637490052584L515.3143149688367,284.64713247932076L518.129450314385,285.32106822630794L519.0854824912842,285.64833095525285L516.4099425431983,288.71912640759126L516.1173379188675,292.6082125577383L513.9946313465689,299.41894294813204Z"></path><text class="state__label" x="485.77113881735016" y="280.992320946301" dx="0" dy="0">GA</text>\n        </g>\n        <g class="state state-HI">\n            <path class="state__path" d="M159.64116889705974,346.25012904774076L160.62846947385924,346.33741170980034L160.59449832761086,350.00436683481155L159.59350266314064,351.24399949349487L156.62929728840746,350.8240955250675L154.67547147933897,348.53972885646476L157.66513073256235,346.23071295452695ZM178.3784834291585,354.80955195811305L179.37320577357744,353.7199769504836L181.34134421304734,357.32133459459607L183.8110467233396,360.37790403241365L179.3507925684004,359.4248253413112L177.86117126388385,359.88782733047054L174.90672903961172,355.808944772924ZM189.26646810348637,360.857476071002L197.2050436019123,362.26542669083625L194.22784062922628,363.51934944085946L188.27182310732988,362.65535872812467ZM193.23497393282784,365.31947334034163L195.7190761735409,366.25794015935776L193.23497960228607,367.7464226380065ZM198.19987288213738,363.907246539678L199.69263177201097,365.70494018123975L202.670993077342,364.91551726320307L207.14959709991746,367.17093133952477L206.65977766158122,369.05227891830486L201.19307122877828,370.2437494223067L200.68941716182962,367.2687452241542L197.70625628406023,366.1776980093538ZM209.6717420723976,375.2302481965654L212.6700926329354,377.0185875893588L216.66500850841962,378.2493730809267L219.17470783485294,380.5855448227252L219.19075526748514,382.782887581552L223.20701045448132,385.49912026400057L221.72919005317917,388.10304448692983L217.2391891686145,389.47166251464705L213.25002005719352,391.53930925603083L211.76484144526796,394.6128428636929L208.24962037766093,392.3498007209069L208.23107784971907,387.9498626500115L206.20981811636713,381.9906347230986L209.1912883875409,379.15372679740295L208.1798147229922,375.7856861350302Z"></path><text class="state__label invert" x="203.2497970323911" y="375.9466278402094" dx="-2%" dy="2%">HI</text>\n        </g>\n        <g class="state state-IL">\n            <path class="state__path" d="M422.9068910338359,210.7853756903114L421.80153956122035,212.47330396559198L422.905117673439,215.7326165132041L418.42549738233157,217.0547600184666L419.2002362286074,221.53946781464902L417.9888902762969,222.11389276201476L413.2303143309193,220.0857620558404L410.5365618738655,223.3119586509323L411.42207584460544,223.96547825959544L407.021188965205,220.9286957944405L407.66577324591145,218.1743748386906L406.2961787494827,216.4356452766616L406.0955842043795,213.50049439396173L400.97461630671705,211.28881071755575L400.8885627301508,209.9398012313119L397.4826089045023,208.31952355795227L395.6213140454263,204.76698757163877L397.81196801319186,200.25365087645298L398.0187697914492,196.97490969626256L393.8520107660444,195.55234280875084L392.7096176928328,196.9718570539294L391.3823853236089,195.13561848977258L391.2139877938452,192.11938888493L383.13314423618374,184.66172494768034L381.7301659523487,180.5920465963493L381.5152930418698,176.0683360116925L382.2635976345812,174.998581424113L382.89366321032117,171.54831131446952L385.24096766129713,170.7148905844938L385.50277544092336,168.07724834046257L387.02358470196646,166.80480693377478L386.8633709680988,163.7920728700459L385.2119357989801,162.44780056079844L385.45321057380426,159.49466809217563L389.733329359885,158.5477316753428L393.15152979208676,156.44216925580167L394.8709265452678,152.4436628499068L394.6225976618975,148.40679323413724L391.8089951166794,146.98760808799727L389.2520662431379,143.08615870393885L407.4235733545877,142.0548064961505L419.77619515509593,141.06048177013986L419.72390969527464,144.96329483083525L421.4739383356226,147.11907759454562L423.5127667319936,152.43272382906298L426.6474612968206,187.55758506578502L425.7372309520973,191.06996943004674L427.5617868965134,193.22242038475895L427.9024524661794,197.0234297344033L425.35645822859055,200.7602572920008L423.73223235132946,205.84796904323457L422.60767352200025,207.21974522091114Z"></path><text class="state__label" x="407.2649484306247" y="178.6362444457285" dx="0" dy="0">IL</text>\n        </g>\n        <g class="state state-KS">\n            <path class="state__path" d="M347.49821155898474,226.50915114727025L314.46606888089326,226.49880920177645L290.64330011701963,225.7998605206916L260.98534808704886,224.4699546982356L263.8340467564621,179.72164919624367L289.8796263095148,181.05896212558446L309.130197775641,181.635902357001L339.221444999238,181.83852989055754L340.84268714043276,183.6530078593794L343.2505787902849,183.31086723477938L341.2927340677892,188.81503718017188L343.74442711511796,191.25362554188837L344.58439777306194,193.7080159300192L347.0337206733973,194.70855872860795Z"></path><text class="state__label" x="304.1792056461141" y="203.98267813251772" dx="0" dy="0">KS</text>\n        </g>\n        <g class="state state-KY">\n            <path class="state__path" d="M475.38067410404227,223.06869469831815L468.31172056510434,224.12861719736975L456.15142963588164,225.08871949144316L449.47662643799373,225.90186451434306L442.314918485392,226.08394691723663L426.4563478739825,227.95880824175686L423.87804745673367,227.3793357032514L424.5291305383877,230.11681979800687L408.5805282749143,231.33999607033866L408.86749051804406,229.407563953627L410.9860797980357,229.57632083184637L411.42207584460544,223.96547825959544L410.5365618738655,223.3119586509323L413.2303143309193,220.0857620558404L417.9888902762969,222.11389276201476L419.2002362286074,221.53946781464902L418.42549738233157,217.0547600184666L422.905117673439,215.7326165132041L421.80153956122035,212.47330396559198L422.9068910338359,210.7853756903114L424.00179418509026,209.01711212673456L428.19347311922127,209.5305627626667L427.627596252646,207.82455188628433L434.04519071954047,209.95312212079546L434.29231986347634,208.1726985338047L437.05473334633984,206.7095602449408L437.5966887189215,208.0149074373677L440.4265037189445,207.255448630057L440.53465212058813,204.20780787743138L443.99204951583937,205.61288111089254L446.86310278891204,205.31122999815204L447.6596736091706,201.1476568095435L451.7550003123313,197.0991220051195L451.03997918730136,194.3788118311162L453.9263541755917,194.45354455174163L458.22312882407357,192.5137168047322L457.6629215739107,187.77659554382024L462.12898962412737,187.47924908325763L464.6460458052368,191.2539343967902L471.77227519661653,192.26788865527726L477.5607372323677,192.3768754881596L480.14492879568866,190.1752554210575L480.92246290717605,192.79637646883168L484.0614725234275,194.52258576574604L484.553583765147,197.98637672134612L486.36170050821033,201.90506113694698L488.9080408030831,205.07271773351988L492.9010821422444,206.57570214121574L489.3638405359185,211.1127251662906L485.1371741150117,213.96442586395165L483.9760891293523,217.73916695712876L481.540808625724,218.47610304359318L481.35119564308536,220.18694885636535ZM407.740658634188,231.39803197604317L406.9007453949256,231.45543345926808L407.740658634188,231.39803197604317Z"></path><text class="state__label" x="454.83129816908286" y="211.67725348236203" dx="0" dy="0">KY</text>\n        </g>\n        <g class="state state-LA">\n            <path class="state__path" d="M359.17365208069947,334.45618510115884L357.76785869785886,333.1479817641853L360.4232854946498,329.1454942790761L360.23172716041273,321.18114906523806L361.9684416653749,318.0585999932113L362.273645037372,312.36223503680304L360.43098691992316,310.74876118001805L359.9050490523273,307.59898237456076L358.54436354788083,306.99830176104086L358.46101872931723,303.3616991760995L355.7177688648659,300.49381905920126L355.4055136456463,285.3733469506998L377.8628743473558,284.8516954753989L390.62774850308745,284.3512658263196L392.034021611142,285.9449633203807L390.91772613053195,290.0475309095101L393.12392571529267,289.85383010068944L391.4612140869447,292.00203188036136L394.22815406300043,293.9182647594737L391.2880134005472,297.3213832598669L393.0880325556194,297.62458545783187L391.010861179793,300.6628156837189L389.261223300601,301.4627130299201L388.5818474587435,305.9295190214345L387.25241109003787,306.30951420179684L387.43470460030284,310.17816166299696L386.198082501317,312.68767130379905L388.9779696544648,314.1382242692961L410.1687402796679,312.84792442249005L409.01610575771,316.00973135830304L409.7149075934748,319.7609803905501L411.13759084579186,320.6161965045044L412.29873455998757,324.3333702388997L413.70145693177926,324.79157680122154L409.3162830923706,327.6904264329676L413.0886642924156,329.25791864027343L412.96643027038357,327.4492764113661L417.22265819162027,329.2874418889831L415.5587272128511,331.7737965776916L412.30091907052264,331.2062020885975L412.0782590750389,334.7732551536764L421.1091370653504,338.401766218167L419.49967922071176,341.7531953817296L415.12880622655996,338.90638741954575L410.4360397686183,337.87911783757494L410.27282311997175,335.36530526482034L407.99148155714255,335.747954957075L408.2192537105576,339.36156229392043L406.4777297885335,341.1255057069877L404.49071763271576,338.88133091151633L400.79711567589675,338.93967410274786L400.0040352733714,341.2701360269248L397.7606993299628,342.5758987936196L396.7484562097661,340.97604563880327L391.1039609514012,339.0592423171248L392.8986566605138,338.0242100815362L391.89210947673723,336.34050168898966L388.6414811410982,335.7884699729241L387.12221958400244,332.78405825534173L384.78234551695886,331.7852857205029L380.2700113981823,333.631674861083L381.71740736640044,335.30680422229534L378.5334335277007,336.2226895382512L372.9780894024227,335.24352483162164L367.39747844293197,333.05762218448626L363.7305939585989,333.16106251688143ZM417.5448986225089,327.3682061201319L416.1265590103952,326.75741319927624L417.82051729223184,324.8192232044037ZM385.00440284076205,336.82139880096526L382.1864664404651,335.52374315459946L383.52368768660386,334.5211081018956L386.33384599935323,335.6585288151018Z"></path><text class="state__label" x="381.94716516794426" y="313.6435020069327" dx="-1%" dy="0">LA</text>\n        </g>\n        <g class="state state-ME">\n            <path class="state__path" d="M598.8084111997666,100.6807043589854L594.689725681645,97.20448201491445L591.2351766891082,84.37967768936119L588.6361535606836,76.1695161167703L586.1371672315179,69.73941267244834L588.9576248805174,70.20315792413066L588.9381690634078,65.8824375880555L591.6512638420461,61.79196074911897L592.1507916489915,59.44953137391633L591.0608681966269,56.89563100881196L590.9851526320705,52.51277715230617L592.1615128918118,51.28750810904421L591.7408116038679,47.08483971466319L595.9537396758844,34.15152132090702L597.8337466334459,34.17608727268089L598.5564076741803,36.65636345480334L600.2279701080347,37.22868521003397L606.0622476980857,32.80094720402349L611.3894945965407,35.44101679968469L617.3829462231413,55.04280538793489L620.6267199030093,55.52787798091197L622.4704620079019,60.233832063843465L624.027248469347,61.4837706232787L625.9962287067394,60.29158678999352L629.4082475948676,64.92221151711726L627.0847548605318,68.7926035049934L621.6421502264996,71.54395438400081L620.2839889745586,74.84441143665242L619.3523901858204,73.06383963036615L617.7099439603078,74.13538546307711L619.607880988955,75.21361781267785L616.4241865845318,77.7339058251298L612.5468294458616,75.25758507275066L610.8743106655493,76.24162866558879L611.334748281982,81.86669453930813L608.0685003181077,84.2087356239391L607.8614370249186,86.24143461386154L605.024934569065,88.77370012172037L602.4441187490222,88.02092251652789L601.1714052849159,89.11490735918994L601.9983101574055,92.08621396654382L600.3928845840677,93.43433377920155L600.6141377998952,95.67145717382346Z"></path><text class="state__label" x="604.4211873724557" y="63.845526110686464" dx="0" dy="0">ME</text>\n        </g>\n        <g class="state state-MI">\n            <path class="state__path" d="M403.76729054518444,59.34019481396422L406.5443300511329,58.33905960560651L404.2367972710321,60.79168643200137L399.45536281609714,63.89096844064636L398.98124850431986,62.280186237394446ZM438.3831186589899,90.73531054398586L439.3945455170953,93.15728072206161L437.9406150554799,93.4759378419202ZM418.6901687044628,102.588022463269L417.1294431449986,101.85514202609261L417.5879449017303,98.57205177245203L415.36904603444265,98.76500865619767L415.6876662548153,93.837993029637L412.2644047129893,92.78604212783114L412.1079553575188,90.90465771015408L407.953918071396,89.74244126284782L404.63770569727365,89.76210091446615L401.9636982565878,88.46293213374986L391.16718742350884,86.27684706392267L390.2979307149712,84.04869074630255L388.05204806732144,83.16110186039612L392.304739986997,81.09279693381643L393.9978326951647,79.09729155701814L398.302548193227,78.17756544762972L407.455590945027,69.71348166387816L410.932593775098,68.09346272879986L414.25187223422085,68.90882371792054L409.4610564235701,72.14313947813821L407.57608533579935,75.75434854192008L407.43201029877036,78.51879841177049L409.4391628871267,76.31183504340072L413.07234541329836,76.24434724812897L416.10788647425346,77.63332909072676L418.6477370563752,81.50232843872004L422.6213721668169,80.89681468725973L426.0117733868772,81.83105514977376L430.7910729658787,78.35010244007185L437.634536611058,77.2997375104843L442.89526731935587,75.2795388256335L442.2627374309303,79.30300964682635L447.48703104369446,79.95021374373869L449.13779329146877,78.40432823637957L451.74097536695325,78.63480579253587L451.1001434011058,82.35605403500938L455.1757133477561,85.32727767819517L450.1725997141124,86.82717692038102L447.0342057165567,85.38618732744726L447.0330341370974,88.47514467538497L443.8321181121593,86.4767559083474L439.2912750382027,85.57037996327347L437.307092885491,87.68821561740162L430.7707978206129,88.85567154513387L430.2696232071805,91.19990846505766L428.48922727614803,91.93305916200961L425.7580764143262,90.54215062736728L424.1855373875045,93.46016516099644L423.59453422142155,91.14519819998236L420.8580254967982,97.64569847634209L418.24939401497346,101.83580386792983ZM467.83527646389064,147.11442262915034L453.13863205581197,149.5191326843592L453.0268321194055,148.57375067517285L431.23601955089646,150.91733146644287L433.37739979757663,148.71494098358096L435.25327878770184,143.98416388585576L436.6011057596015,138.1097242971165L435.982257380694,132.12173844370056L431.674116522779,123.80933547340635L432.52573771044604,120.86249191969193L431.4379917044324,117.63520943445485L433.23200354010265,112.84754694223818L433.00076406425876,106.91966724748681L438.99650148188766,99.69950516139443L439.2440474959357,105.38381614697835L440.7333340104781,105.21966081125083L441.5776572029696,102.66517679622439L441.024263465324,97.73014924352981L445.61517760870544,95.38019196023708L443.1070326226984,93.05503332052183L446.4030234012181,89.42161819020498L449.9376870275237,90.97767355155565L452.5348868754303,90.89501469534162L453.49415603361894,92.59974261762966L460.4479802290184,94.32322264101458L463.2776753215176,98.63616429383978L461.355751735972,98.33653949858638L463.1914088611172,100.79604591728366L463.88984102896916,108.82441019502403L462.13509141487873,109.93423631261555L461.18063976184317,114.28281790925314L458.69051297721205,115.7202166567663L459.16174162687463,119.40618066560842L461.54978756379086,120.05505349256748L465.4179089161956,114.51803233948101L468.90371506773147,112.04751747547368L472.40098833796964,115.14879712572747L474.9273459001449,124.77752311570032L476.404805472109,126.96500947673553L475.4490847503118,133.90313970228408L474.01217070259025,132.02593078992504L472.3943502557067,134.41244660508198L472.69983444060125,136.61030268907712L470.27794164135616,138.94400332182624L470.38409718404955,142.61042510199718L468.62030277777,144.1288503923181ZM458.6119953505935,86.07023108333794L455.6307605886532,85.982379542643L457.23176532568897,84.03065389931487Z"></path><text class="state__label" x="442.53584534856526" y="111.75851632988902" dx="1%" dy="2%">MI</text>\n        </g>\n        <g class="state state-MN">\n            <path class="state__path" d="M326.62304916128727,130.06453837141396L326.747680899708,103.29916903947571L324.15824413919864,101.7082400496721L322.7056122570421,98.15340736436758L324.56190716453995,96.98749810068966L325.6867620402479,94.00526335122629L325.35409169330325,88.26558195389953L323.1952013827997,83.93145674728635L322.94900473622766,70.53014844917016L320.1735442054479,62.21777181844618L320.2842307006743,52.86365422109975L319.27510981599545,49.1160563383994L339.6402473928116,49.15704434529857L339.59162346229516,43.71833326011449L342.7427138397365,44.46126974743402L344.2520592865499,52.52810856374231L348.51207851327666,54.17267816232322L352.75515870407713,54.39666841930887L352.7908599204412,55.95442735325207L356.31714066040234,55.47722119379739L358.7504486542014,54.006265174736996L365.9120130526602,56.5755814240307L367.1012159844249,59.886739815296096L368.0903676874518,57.89708261441706L370.2135487343927,57.73345651231284L371.3562258988987,59.5590561603442L373.8625525471903,59.91761025418032L375.3925592025753,62.19133108042547L377.8615701958352,61.60367225512698L382.3469449354966,58.79228561661148L383.1765956331264,60.935205716655105L390.6515760414933,60.65019233734745L391.07126020354883,61.64065017189944L395.3617905073318,61.67184515211079L392.63115572154504,63.653775354940194L384.6027896573244,67.2721603592438L380.1410301287576,71.27239236468779L377.78432492687347,74.68274269631479L370.8091353479998,80.8801975450848L371.5779333131237,81.86900411105705L369.06420889797107,82.7560645184094L369.399325312568,91.31049084193228L364.7297089753331,94.47210083038362L363.40097245764446,98.925891671042L366.0793794931759,101.35593277924681L365.0100156373083,102.65429305070859L364.9029632046876,110.46716486662501L367.2625329988446,113.54280634554232L374.16516335869994,116.66724556046222L374.63068371629004,118.70261424102375L379.6846473083974,121.55587282261797L381.7669132073019,125.25247293118764L382.32637089502754,128.7879118677339L368.9805893426765,129.37384228220446L351.4307853872871,129.87554396456915Z"></path><text class="state__label" x="348.6553973329788" y="88.95280081666536" dx="0" dy="0">MN</text>\n        </g>\n        <g class="state state-MS">\n            <path class="state__path" d="M427.5805227691946,320.91428485408267L426.7353869255886,321.77299272935795L422.0988394248883,320.86618826313145L415.8668874946885,323.0604758558124L413.70145693177926,324.79157680122154L412.29873455998757,324.3333702388997L411.13759084579186,320.6161965045044L409.7149075934748,319.7609803905501L409.01610575771,316.00973135830304L410.1687402796679,312.84792442249005L388.9779696544648,314.1382242692961L386.198082501317,312.68767130379905L387.43470460030284,310.17816166299696L387.25241109003787,306.30951420179684L388.5818474587435,305.9295190214345L389.261223300601,301.4627130299201L391.010861179793,300.6628156837189L393.0880325556194,297.62458545783187L391.2880134005472,297.3213832598669L394.22815406300043,293.9182647594737L391.4612140869447,292.00203188036136L393.12392571529267,289.85383010068944L390.91772613053195,290.0475309095101L392.034021611142,285.9449633203807L390.62774850308745,284.3512658263196L391.4094934385846,282.40678160099804L390.7469821825823,278.0753897548605L389.3269933409196,276.00383107780647L390.5317274157884,273.8781870191144L392.3619109618259,267.18919332888714L396.90683319036214,263.0434218772572L396.3214326198597,260.37360155490137L398.2658261941231,256.68225205309136L400.3553944808231,255.60270763526268L399.4115916197063,254.22769057754704L424.6781143724146,252.4290033119513L425.65890070186924,253.86178424466812L425.8591772146341,261.492664650008L425.1746631754037,274.4436791719054L425.364062129561,287.705513414585L424.8529112009691,292.4328950124649L425.2109923930087,302.5631223002806L426.9880514688757,313.5190167454715Z"></path><text class="state__label" x="409.27708844891964" y="287.1685610346058" dx="0" dy="0">MS</text>\n        </g>\n        <g class="state state-MO">\n            <path class="state__path" d="M406.9007453949256,231.45543345926808L407.4778787929778,233.72658369159205L405.49481889061826,235.6924677874867L406.86129786435976,237.11435902058435L405.2880522881341,238.97179793183244L397.68058938192206,239.52805117965244L400.4254423084616,235.85848004788903L401.12455061266047,233.50546335691L399.7597902980994,231.91772672676746L371.5913698500137,233.29302765300338L347.60618896632604,233.9016439341682L347.49821155898474,226.50915114727025L347.0337206733973,194.70855872860795L344.58439777306194,193.7080159300192L343.74442711511796,191.25362554188837L341.2927340677892,188.81503718017188L343.2505787902849,183.31086723477938L340.84268714043276,183.6530078593794L339.221444999238,181.83852989055754L338.01525444829264,181.44949463393857L337.1950400752528,178.19667540817284L335.192865950578,177.41140843045196L333.9835882330376,173.20502574992815L342.3423916732813,173.30967250952574L361.83942984857805,172.8460137391395L378.518914095896,171.6741130062619L382.2635976345812,174.998581424113L381.5152930418698,176.0683360116925L381.7301659523487,180.5920465963493L383.13314423618374,184.66172494768034L391.2139877938452,192.11938888493L391.3823853236089,195.13561848977258L392.7096176928328,196.9718570539294L393.8520107660444,195.55234280875084L398.0187697914492,196.97490969626256L397.81196801319186,200.25365087645298L395.6213140454263,204.76698757163877L397.4826089045023,208.31952355795227L400.8885627301508,209.9398012313119L400.97461630671705,211.28881071755575L406.0955842043795,213.50049439396173L406.2961787494827,216.4356452766616L407.66577324591145,218.1743748386906L407.021188965205,220.9286957944405L411.42207584460544,223.96547825959544L410.9860797980357,229.57632083184637L408.86749051804406,229.407563953627L408.5805282749143,231.33999607033866L407.740658634188,231.39803197604317Z"></path><text class="state__label" x="371.79577511612115" y="205.5288694072001" dx="0" dy="0">MO</text>\n        </g>\n        <g class="state state-NC">\n            <path class="state__path" d="M498.2957921019282,219.99569838106402L514.6047502146208,218.12273514248375L540.6911167983635,213.45131196002626L565.3918847505572,208.27108059370846L567.6833977753834,212.899761160273L565.7144507133348,211.7790362767023L564.6104568561138,214.69718572345198L557.7526598258273,219.13783855990675L565.0740438405929,216.87362084509903L566.1335181134862,221.84761083016713L566.2019536164139,218.09555960824378L567.1793320220353,216.58564826828012L569.2401325614912,218.0920866494224L569.9969174465718,221.5866791713712L568.0319768289854,222.57919123277657L565.872107136176,226.77615953989482L556.7181942442469,226.81116306612353L562.1393506691276,227.72253755418058L561.6405403337483,231.63885031326788L559.9867457714165,234.2500282349207L564.6941609040324,231.57014689186542L566.036032560698,231.69354087157092L564.4228230179772,234.46664415303133L563.8380358099126,237.99485359808136L561.9394974163858,237.33405136172001L556.2132223862918,239.4718201944313L551.7764976779387,243.75114999959203L550.0765229175097,246.34691556649233L549.071113073834,252.6016407796809L546.3253148914723,252.15694058340927L542.2199157127468,253.89673950954392L526.0671592719573,242.36546314311022L512.8694325646459,244.33330897443483L512.5278286416234,242.21670394258786L509.1357979467268,240.02497589104257L492.9344017148871,241.75382253197688L484.8388602569904,245.7754656759003L470.8093845622693,247.75883898726732L470.41961838384157,244.60600045657043L473.66870004109035,242.99860276202196L473.4190937669905,241.02843146968564L476.1084475434503,238.52157812874583L479.4888710573699,238.07902626231885L483.7150984166096,234.3836679826274L483.7150984166096,234.3836679826274L485.47107364982423,231.57514509274517L488.5740461716623,229.29458197554754L488.78587267013353,230.78960549977046L491.40533752049544,228.16705314159583L495.57978628821945,227.47595143542287L497.1642624169767,223.78403691720348L498.4391524414631,223.7526092638616ZM571.9839554198056,218.71448753738684L573.4280473921392,221.32612272378503L573.7509775113471,226.7855741851156L569.3652919994685,228.7927179539014L573.197091658006,226.25626579305276L573.4033541633804,223.20232097876374Z"></path><text class="state__label" x="528.1194023195069" y="230.71345393423587" dx="0" dy="0">NC</text>\n        </g>\n        <g class="state state-OH">\n            <path class="state__path" d="M484.0614725234275,194.52258576574604L480.92246290717605,192.79637646883168L480.14492879568866,190.1752554210575L477.5607372323677,192.3768754881596L471.77227519661653,192.26788865527726L464.6460458052368,191.2539343967902L462.12898962412737,187.47924908325763L457.6629215739107,187.77659554382024L453.13863205581197,149.5191326843592L467.83527646389064,147.11442262915034L472.90176839558876,149.4720443942391L476.0683626897161,149.43248319916722L479.04956221958787,150.85302461540266L483.8206652696506,148.15281382746946L486.9873765951354,148.07966935983313L490.32347095484147,143.95626524075976L498.9978144965835,138.7945042989213L502.2313085943904,158.4517140636858L500.7126251381684,159.022274145893L501.95032992618553,164.13243339562928L501.0209595158251,165.8935939877689L500.7001674309895,173.99488512191488L497.25788649862136,178.08216488015114L494.41023842263917,178.20289616824675L491.7089719422785,181.99206574350194L492.29039147730884,185.84389861032082L490.78497295508464,186.7935266681992L488.8351660926496,184.7524392317132L487.90502439721615,186.8180529848596L488.1810169196386,191.51858859045228L487.2289655567447,193.50539632086827Z"></path><text class="state__label" x="477.88843806221837" y="167.45245997331673" dx="0" dy="0">OH</text>\n        </g>\n        <g class="state state-OK">\n            <path class="state__path" d="M347.60618896632604,233.9016439341682L349.0477101931497,245.24600398566764L349.9544037238157,248.6482517387767L350.1115998744506,258.1780502805202L349.7327189628065,261.3605352814673L349.9731190766749,276.276061320813L345.1490992071947,274.83678374400137L340.7588748326042,271.62859353320823L339.89802185321474,272.9046234945754L334.2358543523674,273.3294152570868L332.0565877420649,272.77757414416016L329.44042044300625,274.442009274326L325.07841766252056,274.4266402273882L322.9107641880791,272.58842330722763L320.72670760463296,273.28436833919994L320.30687907167766,271.6144659356051L316.78791430454913,274.5899802160744L316.37428137118883,272.8395092556173L313.7498639393796,273.5164872586667L310.74149539285065,271.0865071999768L308.52609544769496,273.107738315237L307.70027899585995,270.86941606633195L302.5399349098849,268.45026885223297L296.46520994042476,268.281986463817L292.5899770770526,267.2844637804623L292.24851742547673,264.5729972060562L286.6206386063463,264.52593573423894L283.2712929598876,261.76853428951466L284.4801414058474,233.03545155500615L271.86649303556294,232.43317105922654L249.182250217664,230.98908124158822L249.73303328072734,223.5366211103119L260.98534808704886,224.4699546982356L290.64330011701963,225.7998605206916L314.46606888089326,226.49880920177645L347.49821155898474,226.50915114727025Z"></path><text class="state__label" x="313.6129212374246" y="247.38198145234654" dx="0" dy="0">OK</text>\n        </g>\n        <g class="state state-SC">\n            <path class="state__path" d="M542.2199157127468,253.89673950954392L539.0623839915189,256.0112471949467L536.0935409970725,261.70618734564016L536.2762870492276,265.2167596584178L534.526541861158,267.94281398062714L531.8826476197306,268.16615113545356L532.1824611205958,269.8833342869373L527.6965028548473,275.0768852340964L522.7929070326986,277.9862837880258L523.0898248820906,279.7828466149199L520.701890575777,281.69882821601055L518.129450314385,285.32106822630794L515.3143149688367,284.64713247932076L514.8452127142561,281.67637490052584L513.0624083389478,278.9113419968069L510.6909087756811,278.0786220084726L508.4035799198758,271.9389141706365L505.10777300894625,270.75747387837833L502.6889776752656,266.4715238553483L498.889758098386,264.70877283747365L496.67082881613567,261.5853999092306L493.3830263140487,260.13359192621226L491.28423450269236,257.7057421061569L488.8871250064999,253.07242024823307L487.185227626161,253.3877910048908L482.918918497249,250.84245476728313L482.718581426687,249.34729668282125L484.8388602569904,245.7754656759003L492.9344017148871,241.75382253197688L509.1357979467268,240.02497589104257L512.5278286416234,242.21670394258786L512.8694325646459,244.33330897443483L526.0671592719573,242.36546314311022Z"></path><text class="state__label" x="513.8654358229387" y="257.94723245685594" dx="0" dy="0">SC</text>\n        </g>\n        <g class="state state-TN">\n            <path class="state__path" d="M498.2957921019282,219.99569838106402L498.4391524414631,223.7526092638616L497.1642624169767,223.78403691720348L495.57978628821945,227.47595143542287L491.40533752049544,228.16705314159583L488.78587267013353,230.78960549977046L488.5740461716623,229.29458197554754L485.47107364982423,231.57514509274517L483.7150984166096,234.3836679826274L483.7150984166096,234.3836679826274L479.4888710573699,238.07902626231885L476.1084475434503,238.52157812874583L473.4190937669905,241.02843146968564L473.66870004109035,242.99860276202196L470.41961838384157,244.60600045657043L470.8093845622693,247.75883898726732L455.4651381802454,249.6298844825282L424.6781143724146,252.4290033119513L399.4115916197063,254.22769057754704L400.67302147696785,253.75348528415356L401.7458776893622,250.26557671921728L401.1126925587114,246.96208607067064L403.18099583693805,245.87687823653982L402.99384825557223,242.94307963496954L406.2502123662711,240.66001375053145L405.2880522881341,238.97179793183244L406.86129786435976,237.11435902058435L405.49481889061826,235.6924677874867L407.4778787929778,233.72658369159205L406.9007453949256,231.45543345926808L407.740658634188,231.39803197604317L408.5805282749143,231.33999607033866L424.5291305383877,230.11681979800687L423.87804745673367,227.3793357032514L426.4563478739825,227.95880824175686L442.314918485392,226.08394691723663L449.47662643799373,225.90186451434306L456.15142963588164,225.08871949144316L468.31172056510434,224.12861719736975L475.38067410404227,223.06869469831815Z"></path><text class="state__label" x="445.2733262620899" y="237.6663897491603" dx="0" dy="0">TN</text>\n        </g>\n        <g class="state state-UT">\n            <path class="state__path" d="M121.73454647763717,206.52587106900432L126.1603310122573,183.57211137535546L127.39898267315982,181.46240782817745L136.5661726115712,133.72401756532827L142.30059514974215,134.88907238057277L168.4628162690703,139.25174895062878L166.11005524411533,153.98318812395144L188.03586409283204,157.16730737427838L179.89214600455077,216.14113872123414L163.33065217409185,213.80687806815433L134.88719819192482,208.9795339894871Z"></path><text class="state__label" x="155.23173750759054" y="177.8027533802847" dx="0" dy="0">UT</text>\n        </g>\n        <g class="state state-VA">\n            <path class="state__path" d="M558.99572183641,188.33728584541825L559.8030218588842,188.16500984126878L558.99572183641,188.33728584541825ZM568.0303509207217,185.23259107674755L565.0373319618504,190.85791600675657L565.0892769589234,194.99679338413728L564.1853228198848,198.69073946112087L562.4960159073368,200.7612986350241L561.3243321029024,197.27167548444845L561.4223111643114,193.7544524396585L563.4342520926316,187.3822235328854ZM492.9010821422444,206.57570214121574L493.7100905263008,209.1884818614534L496.9362950782258,211.03506547692643L500.32858948259286,208.42304780064364L502.21971935923966,209.73750563522424L512.236861405941,203.92865912799675L511.8705154083374,201.7326341632563L514.340365761014,196.47874990526088L514.6320043069388,193.2833575133501L516.0650195197893,191.90817672904063L516.5191314915687,187.3109966822144L521.343301620721,188.7243764999231L523.4270640939068,181.8079562792658L525.404212877318,181.2868851622901L529.0681633884216,176.48603311313911L528.9418995218443,171.41448627395766L535.8354320783128,175.11660725362344L536.5143046886261,172.2313329225824L539.5279867026385,172.8549490558554L539.0700753435083,174.72788332361904L544.001042881731,176.58356419154757L545.6086370144726,178.3679589097543L544.8948771239288,181.0263804493984L543.4310264478498,182.0495482444694L544.1625631316076,185.71428608217866L546.80717887278,184.29061556537533L548.1654725156928,186.85480023726393L551.9371701960633,186.81239211383604L557.1739249543723,189.6989228995575L556.5617820591409,190.8029756601734L558.5232977317132,198.10937273266939L556.2892276057769,199.63335822114186L559.2279669689706,201.45482237808847L557.1484074470759,203.7586828305965L563.0112929815335,203.171470628948L565.3918847505572,208.27108059370846L540.6911167983635,213.45131196002626L514.6047502146208,218.12273514248375L498.2957921019282,219.99569838106402L475.38067410404227,223.06869469831815L481.35119564308536,220.18694885636535L481.540808625724,218.47610304359318L483.9760891293523,217.73916695712876L485.1371741150117,213.96442586395165L489.3638405359185,211.1127251662906Z"></path><text class="state__label" x="529.2590274476485" y="200.75329290324345" dx="0" dy="0">VA</text>\n        </g>\n        <g class="state state-WV">\n            <path class="state__path" d="M492.9010821422444,206.57570214121574L488.9080408030831,205.07271773351988L486.36170050821033,201.90506113694698L484.553583765147,197.98637672134612L484.0614725234275,194.52258576574604L487.2289655567447,193.50539632086827L488.1810169196386,191.51858859045228L487.90502439721615,186.8180529848596L488.8351660926496,184.7524392317132L490.78497295508464,186.7935266681992L492.29039147730884,185.84389861032082L491.7089719422785,181.99206574350194L494.41023842263917,178.20289616824675L497.25788649862136,178.08216488015114L500.7001674309895,173.99488512191488L501.0209595158251,165.8935939877689L501.95032992618553,164.13243339562928L500.7126251381684,159.022274145893L502.2313085943904,158.4517140636858L504.4365033572596,171.8576380315941L515.9521854229224,169.89854713614648L516.901014761469,177.64069769113155L523.5318008868472,171.04284953846138L527.6186191515274,170.93450144864437L529.9243415598123,167.91294924643603L534.5503656486587,168.48334375241234L536.5143046886261,172.2313329225824L535.8354320783128,175.11660725362344L528.9418995218443,171.41448627395766L529.0681633884216,176.48603311313911L525.404212877318,181.2868851622901L523.4270640939068,181.8079562792658L521.343301620721,188.7243764999231L516.5191314915687,187.3109966822144L516.0650195197893,191.90817672904063L514.6320043069388,193.2833575133501L514.340365761014,196.47874990526088L511.8705154083374,201.7326341632563L512.236861405941,203.92865912799675L502.21971935923966,209.73750563522424L500.32858948259286,208.42304780064364L496.9362950782258,211.03506547692643L493.7100905263008,209.1884818614534Z"></path><text class="state__label" x="505.7281097030439" y="187.93854680671166" dx="0" dy="0">WV</text>\n        </g>\n        <g class="state state-WI">\n            <path class="state__path" d="M389.2520662431379,143.08615870393885L388.37285867271135,141.23088845165228L384.4312004814029,139.8567424357301L383.12203518937713,136.91046823750094L384.0484796836814,132.50276165930723L382.32637089502754,128.7879118677339L381.7669132073019,125.25247293118764L379.6846473083974,121.55587282261797L374.63068371629004,118.70261424102375L374.16516335869994,116.66724556046222L367.2625329988446,113.54280634554232L364.9029632046876,110.46716486662501L365.0100156373083,102.65429305070859L366.0793794931759,101.35593277924681L363.40097245764446,98.925891671042L364.7297089753331,94.47210083038362L369.399325312568,91.31049084193228L369.06420889797107,82.7560645184094L371.5779333131237,81.86900411105705L374.1325467792528,81.99436920671474L380.9127861713993,79.23411564590492L383.36915309702425,77.61222513773794L384.1747801959968,79.06002880869664L382.93905585911926,83.13404974572336L385.0569988492693,81.83931317732026L388.05204806732144,83.16110186039612L390.2979307149712,84.04869074630255L391.16718742350884,86.27684706392267L401.9636982565878,88.46293213374986L404.63770569727365,89.76210091446615L407.953918071396,89.74244126284782L412.1079553575188,90.90465771015408L412.2644047129893,92.78604212783114L415.6876662548153,93.837993029637L415.36904603444265,98.76500865619767L417.5879449017303,98.57205177245203L417.1294431449986,101.85514202609261L418.6901687044628,102.588022463269L416.2668337209032,104.85782989480117L415.03767206369474,108.05017275842954L415.67855547828384,111.16374018610406L418.65246224199757,106.39112221846051L420.86011411453865,105.87649526601217L421.92991880228027,101.18659575967285L424.0875073167689,100.27265951124343L424.27303081401465,102.23428227509135L420.2496150399642,111.63614907415558L420.63734574923575,115.9622923134923L418.6609175008828,119.38952890107271L419.07366686396074,124.11524107953778L417.5333014940468,128.45670766998978L417.9847775779993,133.74091840654205L419.7776443326735,136.60694182497627L419.77619515509593,141.06048177013986L407.4235733545877,142.0548064961505Z"></path><text class="state__label" x="394.15252812222354" y="111.47971239518823" dx="0" dy="0">WI</text>\n        </g>\n        <g class="state state-ND">\n            <path class="state__path" d="M325.6867620402479,94.00526335122629L304.3426275500159,93.64788175420836L280.44246027766883,92.61339274687123L267.58375143446244,91.85573547326476L248.8673283532965,90.44759710130813L252.65412524479183,45.85935566238106L270.5110517602754,47.20282942991753L283.4805794893025,47.96210109930382L303.12708239769853,48.76636336784179L319.27510981599545,49.1160563383994L320.2842307006743,52.86365422109975L320.1735442054479,62.21777181844618L322.94900473622766,70.53014844917016L323.1952013827997,83.93145674728635L325.35409169330325,88.26558195389953Z"></path><text class="state__label" x="286.56370805165255" y="70.80324677548552" dx="0" dy="0">ND</text>\n        </g>\n        <g class="state state-SD">\n            <path class="state__path" d="M326.5537340090911,144.95035856729396L324.61881912981005,144.70178039566088L323.8611910993718,142.398655825304L316.9498706503943,139.3144739826779L309.21442156633645,140.68132947930712L305.0354578485783,138.12620686367643L304.677692454685,137.08713839939105L288.1559022051683,136.52014591565614L270.1103802434456,135.59359675644248L245.1867873778076,133.78471138106534L247.68783593402424,104.3357179255355L248.8673283532965,90.44759710130813L267.58375143446244,91.85573547326476L280.44246027766883,92.61339274687123L304.3426275500159,93.64788175420836L325.6867620402479,94.00526335122629L324.56190716453995,96.98749810068966L322.7056122570421,98.15340736436758L324.15824413919864,101.7082400496721L326.747680899708,103.29916903947571L326.62304916128727,130.06453837141396L325.0963591025764,130.05627617421283L326.59356812219426,136.3957579276247L325.82415378362293,136.62940605435074L324.637487382272,141.8494537317472Z"></path><text class="state__label" x="287.0663058601896" y="115.0993618053138" dx="0" dy="0">SD</text>\n        </g>\n        <g class="state state-WY">\n            <path class="state__path" d="M188.03586409283204,157.16730737427838L166.11005524411533,153.98318812395144L168.4628162690703,139.25174895062878L174.2167035711565,103.22469822096127L175.4609948659263,95.43376606577283L195.76586741092402,98.46074120070023L216.4908015403796,101.18706137437232L247.68783593402424,104.3357179255355L245.1867873778076,133.78471138106534L242.68377689076868,163.25680590266734L218.65407285587966,161.0166807272451Z"></path><text class="state__label" x="207.89634158668923" y="129.94029766922537" dx="0" dy="0">WY</text>\n        </g>\n        <g class="state state-TX">\n            <path class="state__path" d="M320.41051712755785,358.6298494011288L316.61182260851734,363.2189246560707L313.70950399550304,369.1377187002501L313.1378270650918,376.01843458925265L314.95705261251834,382.14184046758294L313.10386450569945,378.36437785362983L313.2409392966808,368.89601950926743L314.70257851974293,365.4684829747871L317.08784294089173,362.67553723979285L320.8937398957905,356.82878679495786L326.0447338687944,354.4275579139043ZM200.38150547238584,296.6489378907702L199.85337718379748,293.3264976702563L214.49326415799712,294.8739262173487L243.8252075591152,297.4208330861998L248.7624647795392,230.9579767853446L249.182250217664,230.98908124158822L271.86649303556294,232.43317105922654L284.4801414058474,233.03545155500615L283.2712929598876,261.76853428951466L286.6206386063463,264.52593573423894L292.24851742547673,264.5729972060562L292.5899770770526,267.2844637804623L296.46520994042476,268.281986463817L302.5399349098849,268.45026885223297L307.70027899585995,270.86941606633195L308.52609544769496,273.107738315237L310.74149539285065,271.0865071999768L313.7498639393796,273.5164872586667L316.37428137118883,272.8395092556173L316.78791430454913,274.5899802160744L320.30687907167766,271.6144659356051L320.72670760463296,273.28436833919994L322.9107641880791,272.58842330722763L325.07841766252056,274.4266402273882L329.44042044300625,274.442009274326L332.0565877420649,272.77757414416016L334.2358543523674,273.3294152570868L339.89802185321474,272.9046234945754L340.7588748326042,271.62859353320823L345.1490992071947,274.83678374400137L349.9731190766749,276.276061320813L350.8642963405402,277.2924047936147L355.2434874502442,277.52748107679173L355.4055136456463,285.3733469506998L355.7177688648659,300.49381905920126L358.46101872931723,303.3616991760995L358.54436354788083,306.99830176104086L359.9050490523273,307.59898237456076L360.43098691992316,310.74876118001805L362.273645037372,312.36223503680304L361.9684416653749,318.0585999932113L360.23172716041273,321.18114906523806L360.4232854946498,329.1454942790761L357.76785869785886,333.1479817641853L359.17365208069947,334.45618510115884L355.0559761357078,335.17385773072806L349.1259997620672,337.95295079182284L350.0221832538541,336.3644548304248L347.2738804658259,337.1123775004169L347.6838777898843,333.4045488267129L344.49073043843816,334.9402775515001L345.4735873560089,340.52003881228904L342.72346344943713,342.3588415849817L342.73592554076146,343.69625517088747L339.5203741130201,346.8679450699471L331.17572286279665,350.98253975299417L328.38449869619467,351.2147511277338L328.8533348973048,349.4083534827944L325.1277292503436,351.2812332433137L326.05011056311326,353.17095869918836L323.71268616879416,354.41537765047457L320.45686249602284,353.3699904403542L320.8983739702834,356.27929832274816L315.263656464583,358.49532921510735L317.60342383039296,358.52345739362477L315.6851946070397,362.18811875550483L313.34191606138177,361.9211105139778L314.72245076975975,363.9792423657222L310.75351046442904,376.68571593700443L313.9668616621363,384.78462735460596L313.9336556703797,387.20460132960864L315.8231133636431,389.33622786084936L311.0085688457078,390.4385959975505L309.6019337438566,388.4646596281267L302.42220702088514,387.93114094670636L294.874749340698,383.6753942744127L290.1360882285802,382.4357466253628L287.51408631923016,375.46432130727703L285.6992393891725,373.12924778576956L285.06343803130915,364.72023074797505L280.47943525609116,361.6383183462128L280.12362918305746,358.87606459868806L278.3520536035574,356.44528889575605L275.61988141416134,354.7536872697814L275.27464543996507,352.0654063751151L271.4268115528664,344.88161599647185L271.1149385498488,341.7951383612546L266.3145601472845,336.3473679951829L264.06460535760357,335.357603730809L262.40215623474927,332.1877727042345L252.84730450232922,330.6594952521388L245.92059774494734,331.13854875680124L242.71793292531635,337.2248363010193L239.60540237108063,341.72835983823364L237.29145626191544,341.63138647493867L234.2667326136351,338.79077323276067L226.7236322717022,334.8492171019362L226.3798952948863,333.47621733295654L222.05759759515516,330.16911107467524L220.61040074078832,325.8440241710556L220.98509788612563,321.7614446105657L218.98715379036094,318.64510596101684L217.97867793782837,314.8246105868643L214.53674489146897,312.7481798737346L211.20945895776885,309.64000377914823L210.5022926559048,307.6629077474719L206.8525317287993,303.55189602582203L204.28785708822937,302.1665513788758L201.63746522937336,297.50407245274147Z"></path><text class="state__label" x="289.76717970392355" y="307.74768202738454" dx="0" dy="0">TX</text>\n        </g>\n        <g class="state state-NM">\n            <path class="state__path" d="M168.3903363735582,299.4330422485704L179.89214600455077,216.14113872123414L204.7799110639822,219.29096953834494L205.17717645180508,219.49665911181955L229.72536186154412,221.95523015853735L249.73303328072734,223.5366211103119L249.182250217664,230.98908124158822L248.7624647795392,230.9579767853446L243.8252075591152,297.4208330861998L214.49326415799712,294.8739262173487L199.85337718379748,293.3264976702563L200.38150547238584,296.6489378907702L179.50751224452887,294.1391581941067L178.64610498087976,300.8038983961664Z"></path><text class="state__label" x="209.6994671847954" y="258.5433121268557" dx="0" dy="0">NM</text>\n        </g>\n        <g class="state state-CO">\n            <path class="state__path" d="M260.98534808704886,224.4699546982356L249.73303328072734,223.5366211103119L229.72536186154412,221.95523015853735L205.17717645180508,219.49665911181955L204.7799110639822,219.29096953834494L179.89214600455077,216.14113872123414L188.03586409283204,157.16730737427838L218.65407285587966,161.0166807272451L242.68377689076868,163.25680590266734L264.7777225675432,164.89807591258864L263.8340467564621,179.72164919624367Z"></path><text class="state__label" x="223.35996601037823" y="191.38430957781313" dx="0" dy="0">CO</text>\n        </g>\n        <g class="state state-NE">\n            <path class="state__path" d="M333.9835882330376,173.20502574992815L335.192865950578,177.41140843045196L337.1950400752528,178.19667540817284L338.01525444829264,181.44949463393857L339.221444999238,181.83852989055754L309.130197775641,181.635902357001L289.8796263095148,181.05896212558446L263.8340467564621,179.72164919624367L264.7777225675432,164.89807591258864L242.68377689076868,163.25680590266734L245.1867873778076,133.78471138106534L270.1103802434456,135.59359675644248L288.1559022051683,136.52014591565614L304.677692454685,137.08713839939105L305.0354578485783,138.12620686367643L309.21442156633645,140.68132947930712L316.9498706503943,139.3144739826779L323.8611910993718,142.398655825304L324.61881912981005,144.70178039566088L326.5537340090911,144.95035856729396L328.4720093075528,151.53717264423494L330.029851058287,152.57123215435945L330.4140943489158,159.31458603576186L332.7746030460549,162.32967750024227L333.18274901195593,170.42703512803132Z"></path><text class="state__label" x="289.8062865272256" y="158.2498143042823" dx="0" dy="0">NE</text>\n        </g>\n        <g class="state state-IA">\n            <path class="state__path" d="M333.9835882330376,173.20502574992815L333.18274901195593,170.42703512803132L332.7746030460549,162.32967750024227L330.4140943489158,159.31458603576186L330.029851058287,152.57123215435945L328.4720093075528,151.53717264423494L326.5537340090911,144.95035856729396L324.637487382272,141.8494537317472L325.82415378362293,136.62940605435074L326.59356812219426,136.3957579276247L325.0963591025764,130.05627617421283L326.62304916128727,130.06453837141396L351.4307853872871,129.87554396456915L368.9805893426765,129.37384228220446L382.32637089502754,128.7879118677339L384.0484796836814,132.50276165930723L383.12203518937713,136.91046823750094L384.4312004814029,139.8567424357301L388.37285867271135,141.23088845165228L389.2520662431379,143.08615870393885L391.8089951166794,146.98760808799727L394.6225976618975,148.40679323413724L394.8709265452678,152.4436628499068L393.15152979208676,156.44216925580167L389.733329359885,158.5477316753428L385.45321057380426,159.49466809217563L385.2119357989801,162.44780056079844L386.8633709680988,163.7920728700459L387.02358470196646,166.80480693377478L385.50277544092336,168.07724834046257L385.24096766129713,170.7148905844938L382.89366321032117,171.54831131446952L382.2635976345812,174.998581424113L378.518914095896,171.6741130062619L361.83942984857805,172.8460137391395L342.3423916732813,173.30967250952574Z"></path><text class="state__label" x="358.5488973737881" y="150.72732497741816" dx="0" dy="0">IA</text>\n        </g>\n        <g class="state state-IN">\n            <path class="state__path" d="M422.9068910338359,210.7853756903114L422.60767352200025,207.21974522091114L423.73223235132946,205.84796904323457L425.35645822859055,200.7602572920008L427.9024524661794,197.0234297344033L427.5617868965134,193.22242038475895L425.7372309520973,191.06996943004674L426.6474612968206,187.55758506578502L423.5127667319936,152.43272382906298L425.968962968924,153.48528501783903L431.23601955089646,150.91733146644287L453.0268321194055,148.57375067517285L453.13863205581197,149.5191326843592L457.6629215739107,187.77659554382024L458.22312882407357,192.5137168047322L453.9263541755917,194.45354455174163L451.03997918730136,194.3788118311162L451.7550003123313,197.0991220051195L447.6596736091706,201.1476568095435L446.86310278891204,205.31122999815204L443.99204951583937,205.61288111089254L440.53465212058813,204.20780787743138L440.4265037189445,207.255448630057L437.5966887189215,208.0149074373677L437.05473334633984,206.7095602449408L434.29231986347634,208.1726985338047L434.04519071954047,209.95312212079546L427.627596252646,207.82455188628433L428.19347311922127,209.5305627626667L424.00179418509026,209.01711212673456Z"></path><text class="state__label" x="439.9400857749388" y="177.8719834064139" dx="0" dy="0">IN</text>\n        </g>\n        <g class="state state-PA">\n            <path class="state__path" d="M560.3433936298087,159.90089206154778L558.652594926861,159.7022158567114L556.2704913165603,162.00863175792745L537.3504584568409,165.9929815949232L515.9521854229224,169.89854713614648L504.4365033572596,171.8576380315941L502.2313085943904,158.4517140636858L498.9978144965835,138.7945042989213L506.36189123969245,133.2915538798918L507.02288122995367,137.12003351716965L517.7886587897844,135.28318792796983L543.4304356349693,130.24018916436944L553.7091411795054,127.94734815131119L557.898813577732,130.59103061383394L558.5580335409996,133.53288503563112L563.0567321679067,135.60751074598159L561.749291889548,136.9627395527666L559.5774446682941,145.34304900474035L560.2674095438871,148.44405532252335L561.4157706185482,148.10648478306587L566.7097312666393,153.42692475784088L562.949033170473,156.7999088880356L563.1914753409916,157.8856816246696Z"></path><text class="state__label" x="531.1898550231315" y="149.65323119081037" dx="0" dy="0">PA</text>\n        </g>\n        <g class="state state-NY">\n            <path class="state__path" d="M575.4666351439749,138.41232095721L574.607308557799,141.6381192227792L577.1546014860076,138.65981506885316L586.9567737143285,135.42679462329818L588.7500951260517,132.84429588577086L591.9615140014557,134.23635785744534L594.1009373774593,133.0283041390228L583.1435262746498,141.4500083160575L578.7517458090199,143.58440490583212L572.5224110840231,144.9062192849874L572.5636048614197,143.34626170800857L572.7171096653046,138.82242443507255L563.0567321679067,135.60751074598159L558.5580335409996,133.53288503563112L557.898813577732,130.59103061383394L553.7091411795054,127.94734815131119L543.4304356349693,130.24018916436944L517.7886587897844,135.28318792796983L507.02288122995367,137.12003351716965L506.36189123969245,133.2915538798918L511.0528480632777,128.60642969431717L514.5897129038036,124.26573856544508L512.0872524917215,121.25867850876284L511.02153234300806,117.50927336700704L515.2697132918912,115.20604103882067L524.3327653779088,113.73089570829165L527.2663558835425,114.77015069416734L533.1983197539641,113.18014813695913L537.3971183362548,108.9234980174441L540.1566077014609,107.21284388782283L538.1913270402187,103.42478228103278L539.8849189776095,102.25910245674459L536.7513286268071,100.25439284398533L537.1019837907993,98.24337305594952L540.6692899909395,95.0633648221384L545.3768063593511,86.6869861321095L549.9470164338773,83.15763019970495L554.7471018459605,82.37985262289988L564.842494035028,79.65694367990409L565.5480634281935,85.7360940583219L567.2405690150362,87.92434368235558L566.943146865555,91.49134120451265L568.7327825166138,100.49240268907909L570.6036336446522,100.11918099264835L573.5120761067326,112.03892536337344L573.3031031439297,122.6919252126155L575.561623221221,133.73587132288185L576.5886467361335,134.63126931274758L574.2912132285428,136.89758028468896Z"></path><text class="state__label" x="549.3104519322362" y="114.73693102079201" dx="0" dy="0">NY</text>\n        </g>\n        <g class="state state-VT">\n            <path class="state__path" d="M581.8089246959493,110.22278590478118L573.5120761067326,112.03892536337344L570.6036336446522,100.11918099264835L568.7327825166138,100.49240268907909L566.943146865555,91.49134120451265L567.2405690150362,87.92434368235558L565.5480634281935,85.7360940583219L564.842494035028,79.65694367990409L583.2924692772503,74.98122786795898L583.6848234757211,83.85157939094938L580.1680735189458,86.80358666266L581.3415084107406,89.84601335293826L580.8947482011479,94.2042414655399L579.4824231652593,97.91005434804993L580.9389019437726,105.21476961783458L580.2088663911823,107.03250883984322Z"></path>\n        </g>\n        <g class="state state-NH">\n            <path class="state__path" d="M581.8089246959493,110.22278590478118L580.2088663911823,107.03250883984322L580.9389019437726,105.21476961783458L579.4824231652593,97.91005434804993L580.8947482011479,94.2042414655399L581.3415084107406,89.84601335293826L580.1680735189458,86.80358666266L583.6848234757211,83.85157939094938L583.2924692772503,74.98122786795898L583.167608575955,71.59025938361276L586.1371672315179,69.73941267244834L588.6361535606836,76.1695161167703L591.2351766891082,84.37967768936119L594.689725681645,97.20448201491445L598.8084111997666,100.6807043589854L598.4224095273704,103.65787311671033L594.948972916,105.57779429303162L594.2593342461608,107.48338927166822Z"></path>\n        </g>\n        <g class="state state-MA">\n            <path class="state__path" d="M606.1378074784832,123.084305552621L608.1383720363032,124.4277651921866L605.1424432165297,125.41270460120359ZM573.5120761067326,112.03892536337344L581.8089246959493,110.22278590478118L594.2593342461608,107.48338927166822L594.948972916,105.57779429303162L598.4224095273704,103.65787311671033L599.5212284590068,106.23222557734653L601.5933515765007,106.48813698053175L598.94108626888,108.52396516124634L598.9128521428661,112.88258373651013L602.1216091366537,112.83441279250371L605.6561046952718,118.36249414172096L608.8852777572946,118.29338316536996L611.2247257426218,116.48686363829665L612.5582329230394,118.33690381525969L605.3820472317118,121.81027771959998L603.6002267925128,119.74700463548743L602.4765234884346,123.09334831421518L600.3452435727677,124.24177470537438L598.9109252611994,121.9148998129242L598.7677002067542,121.37834702251132L596.9690134786302,120.70776878875574L595.7378105201901,117.58794223649522L591.6089494960556,118.75455255552083L591.1916087050929,118.69928739672457L573.3031031439297,122.6919252126155Z"></path>\n        </g>\n        <g class="state state-RI">\n            <path class="state__path" d="M600.3452435727677,124.24177470537438L598.223233214142,123.9044168049212L598.9109252611994,121.9148998129242ZM598.7677002067542,121.37834702251132L596.2193042736494,122.46541016186893L597.3539685169256,126.76166445303079L593.4063585818939,128.7799914821279L593.8285783283114,127.27610065470094L591.6089494960556,118.75455255552083L595.7378105201901,117.58794223649522L596.9690134786302,120.70776878875574Z"></path>\n        </g>\n        <g class="state state-CT">\n            <path class="state__path" d="M575.4666351439749,138.41232095721L574.2912132285428,136.89758028468896L576.5886467361335,134.63126931274758L575.561623221221,133.73587132288185L573.3031031439297,122.6919252126155L591.1916087050929,118.69928739672457L591.6089494960556,118.75455255552083L593.8285783283114,127.27610065470094L593.4063585818939,128.7799914821279L589.368063768442,130.47532086185834L582.4892292625982,132.20616445093924L580.6480786176401,134.62280984334586Z"></path>\n        </g>\n        <g class="state state-NJ">\n            <path class="state__path" d="M559.5553474991833,161.94532097281797L560.3433936298087,159.90089206154778L563.1914753409916,157.8856816246696L562.949033170473,156.7999088880356L566.7097312666393,153.42692475784088L561.4157706185482,148.10648478306587L560.2674095438871,148.44405532252335L559.5774446682941,145.34304900474035L561.749291889548,136.9627395527666L563.0567321679067,135.60751074598159L572.7171096653046,138.82242443507255L572.5636048614197,143.34626170800857L570.3962375833594,146.30108998480898L571.180939454091,147.91257716941357L573.8807553903105,147.1975576404244L574.2599549039436,154.04614304100676L575.0047761836803,157.21805894874478L572.7652666280046,163.61590073051252L570.5174168956844,166.49791655367926L569.4353252046882,170.90202227771806L567.8989917541148,171.49323186654942L568.3896055002701,168.12279444951412L561.7615565085662,166.34357240740394L559.3991755276245,163.1184882450383L559.3143319022072,162.73025295665502Z"></path>\n        </g>\n        <g class="state state-DE">\n            <path class="state__path" d="M559.3143319022072,162.73025295665502L559.3991755276245,163.1184882450383L559.3143319022072,162.73025295665502ZM559.5553474991833,161.94532097281797L559.5470896007071,165.68958832488954L562.069150210336,167.74096330416592L562.7185540808352,170.69118969611202L565.9116062101803,173.81156335101798L567.175466443688,173.85544694658074L568.6863330593075,178.7317327397094L561.446202909152,180.16545480326067L556.2704913165603,162.00863175792745L558.652594926861,159.7022158567114L560.3433936298087,159.90089206154778Z"></path>\n        </g>\n        <g class="state state-MD">\n            <path class="state__path" d="M559.8030218588842,188.16500984126878L558.99572183641,188.33728584541825L559.8030218588842,188.16500984126878ZM563.4342520926316,187.3822235328854L561.1474240999992,188.52736234017004L560.831280779813,185.09800105367947L559.290692463639,183.80234328904703L555.4586017437762,183.55958743756446L554.0995739179583,181.08280105500546L555.5601790865477,178.0933637391529L553.2504685528625,177.03648228147745L554.732751282499,176.15550974137477L552.9547745021719,169.70575431287307L555.2153327432511,166.70641915864485L554.8165077880595,164.84094369774084L551.1663578738983,171.05614327442458L552.1339050112036,173.69636910490954L550.8857184134297,177.6923570038283L552.0782822642791,181.42374308576927L554.1387209933905,183.26808479751855L555.4059630907775,187.30825581339764L551.2930663669141,185.7275241556256L549.6820285014362,186.05861289560403L547.0987158517157,183.66367268468935L544.8585197780811,185.00747686192346L543.6177988616369,182.9852114135797L544.8948771239288,181.0263804493984L545.6086370144726,178.3679589097543L546.538670975497,176.80006750811742L544.001042881731,176.58356419154757L539.0700753435083,174.72788332361904L539.5279867026385,172.8549490558554L536.5143046886261,172.2313329225824L534.5503656486587,168.48334375241234L529.9243415598123,167.91294924643603L527.6186191515274,170.93450144864437L523.5318008868472,171.04284953846138L516.901014761469,177.64069769113155L515.9521854229224,169.89854713614648L537.3504584568409,165.9929815949232L556.2704913165603,162.00863175792745L561.446202909152,180.16545480326067L568.6863330593075,178.7317327397094L568.0303509207217,185.23259107674755Z"></path>\n        </g>\n        <g class="state state-MT">\n            <path class="state__path" d="M247.68783593402424,104.3357179255355L216.4908015403796,101.18706137437232L195.76586741092402,98.46074120070023L175.4609948659263,95.43376606577283L174.2167035711565,103.22469822096127L171.19046901498194,98.41851118308148L169.67093200027622,100.72794853215021L166.15318505460365,101.26252151218466L160.6751480853126,99.8444155042323L160.44500057757648,101.16654128321397L156.87695368208261,99.73690761475677L155.00563844728845,101.64815996049117L154.103533341064,100.28222149100577L153.52768583222064,95.04426480033919L150.45761345311905,93.11585640700571L150.97608779612176,90.32492645084744L148.40999201259393,85.83474421280778L148.8228244789284,81.6650832996346L147.13950969565516,80.62297959696002L143.30051408411902,82.9276296441002L141.07509471520314,80.8051148581576L141.6710067049426,77.79409442216831L143.78354908867223,76.60654469204746L143.02344723662287,72.85094744365233L143.95601929578967,71.91334321225565L146.68864461896075,65.56723918271257L143.47388623235432,64.93415903961932L141.11479024283227,61.90163339378887L138.22987783816242,56.11373981198017L136.78066133424545,54.21399671312804L135.06921706615523,50.097154535500295L135.59793642892873,49.32924796057648L133.25103958630228,43.157731748241986L136.38858131747583,28.526919335244884L157.7262377814504,32.84205721788351L177.0681969504003,36.3859134974698L199.63250086937018,39.81926004354216L217.03445196497682,42.14197897423128L240.76531488957264,44.772734338341365L252.65412524479183,45.85935566238106L248.8673283532965,90.44759710130813Z"></path><text class="state__label" x="194.13979995649166" y="67.88506372963397" dx="0" dy="0">MT</text>\n        </g>\n        <g class="state state-CA">\n            <path class="state__path" d="M46.44350732387551,234.499569838443L48.776279666613846,235.91141956482625L44.50253435400418,235.06682250201135ZM40.371458891080806,233.66853246846938L43.92295188811613,235.57302853999937L41.65642850275083,235.6425848670392ZM59.12201444087941,246.8028876658832L61.14272767175186,249.6528746297596L58.69402128088291,248.575367973261ZM29.106016192856487,107.04474912414764L57.19700375258452,115.20822934171997L73.40315415766264,119.52870743348763L62.27561121883781,162.67271673936295L62.82610427106681,163.79962144618287L81.69267005071578,192.3211578819206L93.00685303096012,208.73017638267015L96.17074663809393,214.05198554232334L105.48960734581868,227.6113691679558L109.80302763166753,234.39385716612674L109.41613036508312,236.341045231002L111.0811099897409,239.01740865528853L111.16357111291586,243.0786013491973L113.7734932239278,245.5270083988189L112.5451698365948,247.31000336512477L109.34981085488951,247.817649630507L108.05173508124838,249.90689155647055L106.85295934702668,255.9760931002545L104.35047093950084,257.33854812127265L103.68140566431296,262.9434826945878L105.82578405460794,263.4490798884352L105.72255192507126,266.25510623135756L102.33515331566258,267.4413692751424L72.76972972848046,263.90636019617557L71.48036019608674,261.58393428887433L72.43985233925702,255.3834056438281L69.68868205768541,249.70898971711762L65.553677639824,244.3443006765882L61.362815897175096,243.10114761910825L62.17571940687753,241.5833070773736L60.72862904068546,238.29714890991244L56.90832306028062,237.4479343339699L53.78064790556107,235.61271843089168L53.131792775624035,232.8339865793638L50.27544849488021,229.9879171538571L45.42380007458752,228.01101296751233L39.964402492072566,226.67066653320637L38.24035464940471,224.73740331553074L39.46137232199243,220.1329105739154L40.49950975491015,216.21806447300855L37.516589880320225,214.10695559940484L39.000611286122194,211.87308042300822L34.68644790620084,206.59239268624708L32.576445612947055,198.2653784419831L30.881531705693533,196.4743864440602L31.16268468961681,190.7754452176904L32.84543670336575,190.99795371900564L33.59433398897568,186.75008761676065L30.8600592719298,185.65312884511115L28.57738230157804,181.45265974414997L29.340334748091948,178.77645385974938L28.621802851415396,176.7519206330379L29.869326878093773,172.39471521867756L31.127904106151902,172.50620247426218L30.277708627471554,175.48843046675586L33.103052228824765,177.69426147278693L33.24334583500655,175.66845414377735L31.25411646056176,170.55771348485018L33.67317805829549,169.5924851799257L31.16064029485642,167.8845673651448L30.398156317856376,172.04978749451664L24.95828811446262,167.08304870616575L26.6123394775056,165.8263049578576L25.563955769938843,160.63193989932506L24.5419346537156,159.75098125200793L20.78571699053049,152.32765942107937L21.770248308794578,150.46515671390023L21.79555881612208,146.1559715892705L23.81029337681099,140.86909599922262L21.89258891146369,134.7249304644953L19.621932596841532,131.20371227512146L19.91902680203725,128.88445799242083L25.875713877026612,121.65665482035638L26.169315037138574,119.33917476076351L28.195819848719054,115.39314122957842L28.74069174135849,110.91412945607999L27.757019653058478,110.11556743451638Z"></path><text class="state__label" x="61.26901855723234" y="190.05892749028894" dx="0" dy="0">CA</text>\n        </g>\n        <g class="state state-AK">\n            <path class="state__path" d="M35.411081144045305,390.06618596799547L35.68794871373703,390.36730176044273L34.438071071648125,390.56077960406583L34.70891742019201,389.68699541441924ZM32.370287126933206,390.3654974043054L32.78567935427203,391.090346993681L33.74055009539988,390.7392001707922L32.7379553481911,391.9215499037807L34.161321487919686,391.4611470353563L33.938697671685006,392.0634837539874L32.655297789190975,392.35381690194527L31.823863516764142,393.17368256564407L30.854027900227514,392.95449505272643L29.018176836173836,393.64640967251364L28.423279589716287,393.24075066957437L28.952864024462265,392.8745588771239L30.81051742144502,392.6092947616593L31.230804890972784,391.6274392862272L32.09176145754443,391.79689904448617L31.021850551611003,390.99651450760143ZM27.292789208873508,393.22339648583045L26.199712134194804,394.05277693104597L24.321431698849764,394.7550678678194L25.998486137723376,392.9098314831004L26.756672593113144,393.0780998485791L26.7120866999675,392.2518648474037L28.06161973374161,391.75799739650245L28.747333701260658,392.2413659502359L28.50859528455502,392.8373025639201ZM-28.69383522064942,374.720620645607L-28.650818595133103,373.71044302659203L-27.375810971131287,374.40512561282117L-26.852619586107437,375.5593252290045L-28.556007640602743,375.1712546705741ZM9.326021783064675,394.38321081923254L11.18360610441291,395.3406668853551L9.462302361055457,395.11274357877005L8.19887724802117,394.5531320270071ZM117.92450010618691,366.0008151542765L118.98421325726153,365.82442268112123L119.42591174445742,365.24160441298847L120.48604181951566,365.7739697819302L121.95917115240263,365.95024667004304L122.26402187555162,366.984234199167L121.5634223376349,367.390720884523L120.10106121308627,366.9181835711892L121.31822570762446,367.6054999212369L122.33436583183992,367.2228256409062L123.10539554990854,368.4356173872255L122.59717615687057,368.8162535808983L120.53408305172215,368.08825421288395L121.23953720132579,369.1230591128237L120.49208164962141,369.7651786711993L117.87876398101793,367.70254344670724L117.67083649529789,366.9283592699089ZM122.57931567640327,364.9582163351938L123.72047980846784,364.6983606877349L125.22963163770225,366.92208632469425L123.83815056394772,365.4140753637237L123.59010739569868,365.6055316986715L125.62060761872905,367.84218813888737L125.58236885994256,368.72232362003615L124.3834249864585,370.6198748203794L123.96956894156696,369.59046050359507L124.21529661589233,368.6794824714863L122.9636041076562,367.2668168666666L122.32490119946604,365.4670750558167L121.38844475041975,364.01446650821066ZM66.13500513901504,384.0959424143753L66.42394521926109,385.04107781489876L65.589618965279,385.1028579284003ZM134.61845126880385,376.2092364300388L135.2420424938055,376.4005261434934L135.1343864418922,377.3724779492886ZM51.789486082339195,386.22432695339324L51.68144727960457,387.32173318117555L50.77413873881122,386.84230733518046L50.97218152547456,385.9480997647757ZM135.37789472222937,376.46975328275073L135.91304469316657,376.71970931802826L136.33446899985034,377.5939369948253L135.64318118217005,377.86638528290945ZM130.95712513198347,377.1792282250398L129.53171882535258,376.5086812520872L130.0544264014326,375.413468207149L129.52635981395412,374.45332347321823L129.11244171588888,375.1946609856643L128.0174948885613,375.1646011579462L128.39901767385868,373.97379385128636L128.00931223942655,373.08391825232616L129.22123298177365,372.84069672389L129.9446209520096,373.73739451916776L131.44989012661597,374.345026912913L132.25545726668122,375.4426943823799L133.21317369942483,375.9924049112604L132.2153147450689,375.9797625086947L133.91183289659344,377.0651202152083L134.3284442980551,376.98048518747265L135.1603012519232,379.72524831863046L134.33289749794082,379.9493907555288L133.7954051234841,379.025931875047L133.01116943165204,379.02746889025303L132.73643081824235,377.8697264801716L130.6866799614209,378.0494695749816ZM36.38389921554552,389.5396465688122L35.88738676120363,390.48651269751883L35.677732103486115,389.80627648610727ZM120.97265059984517,370.00308964944634L121.3584534504536,370.2670547996857L121.48994710398101,371.46446671975576L120.56662830987703,370.031226387412ZM75.11977115279785,374.35521831438336L75.04689019024842,375.46267581976446L75.93329203969247,375.32960647197416L75.36646761511726,376.3948569521851L73.67029446031682,375.95890359626964L74.77452605583993,376.6019007860935L73.80193271238363,378.0015805058023L72.40124467613322,378.2948199754948L70.99734250318039,379.9307158161955L70.38976601624562,379.9578184917203L70.99665358973834,379.0469864114658L71.19629959661748,378.0247377393597L69.98725768802389,379.40407690433784L69.2865362593537,378.68140888752464L69.29582750249325,377.57652444349816L68.50586212064667,376.7945654612196L69.31209117536692,375.6425013110789L70.20407598965082,375.20566835755386L71.29061661272674,375.565543245213L70.99303513509146,374.40527879479237L71.77731700766837,374.04365772293244L72.0772860757269,374.8986933686578L72.56550966276914,374.4248923146307L72.16597752238643,373.54370588012404L74.12834241064489,373.87820051833137L74.2345542922109,374.3185636426429L75.10095141596071,373.5538707551375ZM130.5251941808975,370.92911354598857L129.9351607301868,371.73609129927416L129.2056929001296,371.80084785156333L127.7869496277698,372.7199687875753L127.0831062491603,370.8284926343923L125.81676471049565,370.1536265696374L126.09356806499143,369.6915760825893L128.43613614340103,369.4376568120309L129.11101314882433,370.2050003941387ZM129.64223138707462,372.15200970081685L130.62930219732007,371.88399681161104L130.77647169350703,372.6496245961371L129.63645652230565,372.79280311959144ZM121.18644391699272,368.93706318858017L121.60155196711617,368.5879786532466L123.04077148372443,368.9159230904144L123.28387024974388,369.73718736934313L124.85877657088807,372.5532493411639L125.51741136039163,374.7477826965126L124.96206417947191,374.6832061412884L122.91349886561584,372.40707443029265L121.98330410152803,370.63440228783224L120.92757856613119,369.84356155872376ZM127.08931998883169,374.96182295648174L126.79354895224594,375.05277408482226L126.18671210047023,373.0736440933174L126.83711695629336,373.1041765315967L125.47493718796537,372.1362910268374L125.1131029269788,371.2938125432108L125.74689437602325,370.60885016663224L126.66929468605862,371.5371620887218L127.44956185940741,373.6940725944861L127.15584602753708,373.7856095276746ZM35.920838337762596,341.77656320655416L37.08884748925458,342.2434885620416L36.58123806730453,342.97824024635673L35.36955871856651,342.668565477498L34.6252698252642,343.6275013474869L34.31206433992612,342.7842842558915L33.54024987470925,342.0818527573397L33.105244746765756,341.0891061332609L32.24764135625725,340.44026250112256L30.97207971824767,340.7307328726894L30.26218799076939,339.56369387640103L31.094059442458928,338.703611282575L32.52253485722222,339.7127509869415L33.64043236336618,339.3158418429809L34.32765535245746,339.94367232431347L34.401581399546764,340.673129994245ZM86.98182965538943,359.32844662012826L86.64188305641737,361.5283502406622L86.24644447239761,361.23149638718706L86.39954272885856,359.911654282107ZM41.06998180130687,359.5743012486569L41.20550770473784,360.9188018694954L39.97366982339846,360.9784386736744L39.49359255814586,361.5368554733522L36.82304354989719,359.29731107516307L37.084222298453206,358.4753197269688L37.94902634086654,358.818236475367L38.593917333437275,358.3809607365789L40.30365555601159,358.1700425083009L41.186565343700316,358.9206685416705ZM84.71974096365093,362.7795078585996L83.23950867686796,362.78271467945L83.00281840738283,363.35445734688113L82.72926768698181,362.09806503695825L81.87883237948643,364.62269521362L81.31083004443809,364.49188510397937L80.18007061168457,365.99746210452923L80.06722447189529,365.6433966537179L78.62341546151517,366.90483330085675L77.58269316461814,366.8374070440622L77.22311640138963,367.32144368055054L76.07649776565,366.9167515087114L76.33031420211485,365.9957208254898L78.26121969219821,365.0656478637917L78.40139092888586,364.00737544512646L77.32168177062555,364.90968082538177L76.37160583743207,364.3615218872634L76.60249975234814,362.94230877677717L77.62930326693743,360.96648132174755L77.28793921114084,359.20804640004945L78.26482225198963,358.86283052397897L79.81295000064466,357.5121949270232L80.7421142324885,358.09646643417574L81.70410851501816,357.7034910477923L80.5757984593927,356.80391316437755L80.81179724670076,356.29093852301446L78.95324102635547,356.39344944763155L78.17486653391121,356.8454355612024L77.85023950569234,357.5794596722259L76.96764485900526,357.86367493529724L76.20720255554963,359.24629008444265L74.97527653531363,360.4712560073752L75.35224574916897,360.98738707137045L73.91539707370546,362.09875608932913L74.47449470252198,362.5304572491751L74.12564765323035,363.505956496968L73.30017854224859,363.93477327318374L73.21822386004786,364.71056276711255L71.35973985382896,365.44530663978196L71.45528080028768,366.053552037534L70.61117587157709,366.3033838997113L70.41870297877244,368.21147758851475L71.55648602226493,367.9063615036339L72.80137708487655,369.0862306050581L71.75812800709257,370.2837942391523L71.0858989248913,370.3136054505419L70.89407633169726,371.50271953700695L70.01678129465049,373.02133757362355L68.06012997028883,373.4163710728875L67.95268517652254,374.02286580898397L66.4692768684722,374.5183946952147L66.04479778745873,375.69642911669854L65.25652126813398,375.5634506186589L63.61707795629143,376.97153683519895L64.32350118299405,376.74908958756737L64.39508316658066,377.5532882258437L63.56292290347348,378.3517055647786L62.5455011277161,378.6131233681804L61.6912706623711,379.59609136365003L60.148760677434026,379.98434953932036L59.68320610901461,380.98054442607054L58.46343537457531,380.8765978371605L58.00774219251137,381.56545951960476L58.671520404090685,382.4114877990439L58.19724519946619,383.3484502009624L54.941350114409786,383.8520450979845L54.85902046194706,384.84170363173934L54.08876613857731,385.27440587361565L54.5044382315386,384.0920777771997L54.11453374355399,383.78146198440305L52.129736816314576,384.899954131216L51.75274552941784,385.5280029691301L50.736046223911586,385.17510720447694L49.70657021588272,385.92473234481616L48.87395676523835,385.80409899025517L49.536134247295536,384.60201616345813L48.70296378693325,384.53545238861255L47.4632297184286,386.97126618211234L45.94762006814172,387.1441290604257L45.60066269059642,385.70947433592437L45.61802653074881,387.212817712728L44.60914136645667,387.55206996787L44.21365168280776,386.5248104057083L44.19892564663978,387.4129705095405L43.037653469142924,388.0298943736271L42.26904458441553,388.86552632175784L40.454244020232736,388.6762715077008L39.565661598033884,389.4846338578121L38.289343739781856,389.2775730945866L38.23975865446995,388.26428385276785L39.0245390186884,388.1143940106203L40.09000029589271,386.86234220322376L40.27005120975426,387.0860334179027L42.074433116329885,386.5254312078033L42.69952180416544,386.6450113371874L43.3067203162116,387.6506108285076L43.483989136093086,386.39534526276935L44.79666427975809,386.1589942568616L44.8444748679873,385.8038175586195L45.84487956392843,385.46323491418514L45.915791341060086,384.9163344661519L46.998367454931646,383.8585527843527L48.25619887083053,382.9834005596608L49.8519491189347,382.6941196292177L50.52742624984098,383.18374727799574L51.161169020393714,384.1100053475608L51.2373509089273,383.3690594766905L52.77163143580396,383.6591412545427L51.98915711414138,383.1398867400768L52.568676886122645,381.4497398580343L54.32361876495242,380.2258480587107L55.69363784538381,379.70437659449357L56.86830401981436,378.96507819308994L57.6586911045996,379.2441771391951L57.7580071485285,377.83911759793114L58.63223941162539,376.79143028851536L60.910315200407624,375.3234816701807L60.63105084357212,375.0036152727394L61.069478165660634,372.3979942181493L61.658257664023054,372.31833534281714L61.120542846008696,371.4594022450556L61.553411483791265,370.5964506369754L62.65913501793257,369.62655757399403L62.60354761487327,368.76575714412525L59.76226081552257,369.9120345718168L58.76874856966779,368.9601349995161L59.0356793227837,367.8417782975588L58.22657825220156,368.5062645614543L57.94600649127231,369.73364830321134L58.180199809588196,370.4990392191862L57.28978775951863,370.7661353189403L56.391404953536956,368.7256487841134L55.59474852386684,367.96444279048546L55.1394976399545,368.7849682245928L54.25259459288753,368.00917321231697L53.95335378986013,367.1470379542889L51.32217631717333,368.5140671033875L50.06536958059678,369.37238101412953L50.177405396115816,366.79586585508537L49.6463092456039,365.67317912725645L50.726760828966746,364.5489842835569L49.99540382017898,362.0651126786037L49.49719416065295,360.8597856451883L50.04170036324757,358.7256392498206L49.07812745022153,360.5271130294745L49.016572057757,361.71862860620513L47.17393888624597,362.25262908552384L45.2168057370789,362.19177440136326L44.57304886202721,361.50531753774095L43.792639389970056,359.392510837004L43.01811255273648,359.04062408102516L42.50933395036465,357.69176088509454L43.33751922369113,357.1306338599585L43.701257884075225,356.0413989131384L43.09235262475433,355.88296205769075L43.54155775053148,355.369681770186L42.950692748902696,354.5958107709144L42.17348435980641,354.90949616271035L42.17721670061634,353.8707209455655L41.57935878493687,353.2009811863091L42.12586718882156,352.65333944724824L41.36187354518414,351.9518086877786L42.2626738966132,351.89109202380286L41.70926574261372,351.0315828741164L42.77123337345057,351.02665071149994L42.704331473288775,349.9192805099858L44.632165590900684,347.84114194831886L45.52954433903521,347.62592858153187L45.402116544991515,346.3164647967257L46.78533780893749,344.5810260029066L47.726777654851816,344.47561623450423L49.20758653811858,345.8657431832007L50.821996758187396,345.13764254982283L52.01687247561728,343.6197209029839L52.45012439397445,344.1461126708233L54.44718336481834,344.09746429752244L55.39900033089877,342.8928122403125L55.31624086898556,340.5530759399955L54.21197527840343,338.8781353631442L55.85057926908664,338.5007506090917L55.9069860888525,337.9521372706863L55.15641459039803,336.81927732882974L54.51829694679019,337.5806773412319L54.067269565556366,337.36262650542244L51.928399744332566,338.54465457589345L51.176565622310434,339.36372079396546L51.20396919074588,338.56021985975957L50.587559765882716,338.94934752537813L49.895124680836716,338.15512634848375L48.191402224169174,337.7321486428455L46.43149343238787,338.14565653621383L43.98088280992886,336.92770771710804L43.568916775887175,336.1206538859523L43.86741858744704,335.39155258685827L43.082404495098416,334.08960927440813L44.32726693524441,333.37518071349785L42.175587429520775,332.30607316984197L40.94007106818793,331.08918333018005L41.056293425887134,330.55108674854955L46.67880086076417,328.12811673954894L49.5736096184285,327.44473781600425L50.52977898702317,327.5366054473997L50.89143625065991,328.1180728200662L50.14885788022266,329.5631613529759L50.41817515901586,330.29852518649176L52.600577992321064,330.4383204866327L54.42256846228673,331.02734042285994L55.14616353191325,330.0044303665393L56.33499222088341,330.1351102003032L55.31361509863642,329.1937346802065L54.46584061409995,329.3990540408778L54.57366765213446,328.4988502553901L53.437725526588174,326.33722589218706L54.10212510394602,326.3114547023469L54.59653367915981,328.3079511593703L55.72525006394418,328.8529486222139L54.69123991752639,327.51728755735604L54.94384041520575,326.63525257736126L55.65494825812751,326.19311049962283L55.04406943989859,325.7907515857876L52.99383379888336,325.80813339372196L51.29183681644781,324.9035412616171L51.392073389360476,324.22554217708125L51.00859852870771,322.45034885842927L48.982329654109506,319.98741207856955L47.7294964245729,319.0713640918003L46.561454307766596,317.79500503768406L47.42213925748,317.3201197175462L48.018704021108505,315.2400941552389L49.592883419625096,315.6333473581936L51.64517675187594,315.6119480069516L52.960988376101355,314.984697204263L54.085296605384286,313.68850831150576L54.546709802633714,311.77821511248976L55.658673747892486,310.77692485249435L56.86797738449202,309.3445978174393L57.528672166106425,309.7213991827334L58.787740210314645,309.3138287962909L61.004599490477176,307.217651363215L61.606926906364464,307.48430793696275L64.24807237269067,307.1260406113492L66.45076822386602,304.753516666937L66.79902785930858,305.1970173999243L68.12583977615115,305.7481614822411L68.17559012236568,306.23397439624046L67.35088021866974,307.07403751084996L68.21283987984144,307.2859028784563L69.10275386344634,305.8751252447774L69.8921363187606,306.6654176052534L69.82349029789009,307.4464674825716L70.56752257421473,307.80134644496945L70.94067264043576,307.235336377353L72.17701556724612,306.9851014826829L73.85664745017404,307.3577903187684L73.51109472008208,308.5269008919642L74.65113276705195,308.8734511585972L74.5425107092121,309.4176785237459L76.54645031447254,309.0124375746113L77.75917902336045,309.2445777115409L79.06171204037044,308.8621112208471L81.0112623697066,309.4677809198724L81.82946568767312,310.04591978253376L85.36520145313978,310.07071540493234L86.6040875199337,310.64888404493774L87.57963417453321,310.6514481817882L89.22119852472186,309.47492963260623L90.89461206054914,309.7766509633314L93.56563081090565,311.0834715373992L94.37588643222485,311.1466537956674L103.73612921169075,358.31405024909816L104.8880919490524,358.4766714484191L104.88853469785752,358.0246998794281L106.36185286497256,358.3654742268329L106.90683617079554,357.4266369368489L108.31243989773989,357.0277456169854L108.44048437831607,358.4171409052344L109.81903709522093,359.06474351929626L110.13832022095377,359.61494688948153L113.44703493540092,361.74150493951737L114.32724473333272,363.2874871753062L115.56131550540027,361.6241365605812L116.19331630151119,361.4270531247949L116.06280703087327,359.85801890707336L116.30322838551349,358.9613956473093L118.1162413696197,357.5059783957947L119.52775157128116,358.36378850541064L120.12149617761054,359.7172517573508L121.51873298823278,360.1082093338815L122.5656130779067,361.2638377890472L123.6744631113499,361.6153441108722L125.42496665039332,362.68523874374114L125.21634275219728,362.98423288757823L126.8447177843797,364.55065455611685L130.2836792953504,367.68799121467885L130.19411509181884,368.3599375406842L131.0340830466868,368.33688818309747L131.1295317596257,369.2383161926747L132.01919609939245,369.34139200585827L132.45843519329253,370.2997123632247L133.1028843024893,369.9871892806626L134.72073724480487,370.5848165273116L136.73655207462082,370.73166640822086L136.91846184481886,371.22348003179314L137.82538048310295,371.0033261047685L138.48469193402607,371.87555180607455L138.41692680473366,372.57903710867424L138.92101932779613,373.92179608887795L139.75148095836852,374.934894580889L139.62349542553278,376.39656972995726L138.85698055142106,378.00291364150587L137.99841540953656,378.13979608680216L136.82653636015476,376.45292874797383L137.3146501964044,375.631912635802L136.5161534660947,374.04411040206725L136.8959845795848,375.4023396221272L136.61847155629076,376.49818492367797L135.45897895182623,376.3828308896237L134.41081309400207,375.9310451010803L134.67067986335746,375.40266990901745L133.94735163580586,373.9605807860247L133.32231365347818,375.6638822802469L132.70622403200866,374.8246760875225L133.17813690634918,373.32186867720844L132.78400392884285,372.4944712544237L132.68976016168187,373.8102942527022L132.01121195521932,374.3897910231541L130.66868385312705,372.97627371528506L131.49262829546257,372.2057634395649L131.00795788202845,371.4078066915702L131.24247121498,370.51253999822956L129.34701713139594,369.95293558656175L128.9747607023658,369.14503392455106L126.82069267166412,368.9994632942194L127.04440652227527,368.05824028329044L125.98502672547099,366.36573535740735L124.23140821652814,365.032586466561L123.84130921900098,364.42976638119586L122.4680570217794,364.5875088770784L120.32840761364182,362.1064990466158L119.11171726186959,359.95408199815745L118.85553411670728,360.0852951754083L119.68648915299656,361.94719467257846L120.630601964644,363.141783272619L121.42923056082824,365.1839813653178L120.61357048900786,365.1619962130651L119.60284771860265,364.4446164690265L118.83309502523234,364.91945831262706L118.61410161721693,363.77491359447106L117.96367420273396,362.865007461817L117.48414842532239,363.2836645148685L115.30738649652993,362.5203061242888L115.34826863784662,363.05274200556335L116.63091546542606,363.05638244270546L117.63720116015755,363.8438506820707L118.55361870416837,364.9970350370685L117.34097873680508,365.70018755256723L117.09467250258652,366.28118332951163L113.19339044021766,364.2559899456004L113.06092615457072,363.7189868351813L111.92811698715172,363.0842433577799L108.28995076404905,361.9942618788337L107.2398998814802,361.57219370748896L107.99591657593777,361.0960345913445L107.35613661728485,359.4805557722534L107.18524844088935,359.99910950407485L106.16143992896025,360.98128030640953L104.38723974255922,361.1179700502641L102.9708934163443,360.6332866280355L103.03760245211052,360.00081007105587L102.17295634386072,360.389886224264L99.3323993631679,360.19386584169166L96.69930072210208,361.20787714806556L96.06620472595444,360.71629612428023L93.83892464821466,360.0300963060977L93.9999627721225,359.1979626134467L92.7202413053717,359.9287911318542L92.1977395723625,359.43846343760674L91.19874439739425,359.50750791238204L91.69892114922956,358.38629320437707L90.83228464630355,358.7437513069565L90.58720213174831,358.21585585802893L89.26215582864934,358.5353941718822L89.46000109134792,357.8730450156099L88.83975906292883,357.1625324815512L87.36825266005128,357.73376230379614L86.73141367478078,356.740148041397L86.84596345246942,357.9241340875944L85.44478422960105,358.38696028297204L85.84653282421397,356.85113085798L85.22498930539234,356.9066901353381L85.14499005593598,358.0521113604564L84.30186454290417,358.7611470116887L85.27514591140678,358.5128790901914L85.39974019817166,359.9460183788427L85.62225488818066,359.37107547264293L86.15589667565709,360.2396961998474L85.24829234978361,361.37517690692096L85.79554818198662,361.32759957048813L85.78440220765705,362.24505855101285ZM7.447345873935042,393.1390373625458L8.094693269387605,392.594835827655L8.488770295794268,393.2354557360493L7.994053742351973,394.0584782871932L6.764798492018315,394.1601975338476L4.672568057938747,393.569593942585L6.095176736160582,393.62908038653626ZM-16.96211309109019,385.19276748307897L-17.28262794852995,385.61926796991406L-18.393743270352473,385.2893730872669ZM-2.5619874641443516,392.7067519838557L-1.8707548723737801,391.82107295031733L-1.2988605704974105,392.26218299761547L-2.0584221616016123,393.0074616403297ZM-3.889224134478326,391.9806206745755L-4.540955694166016,392.73126127195803L-4.98492788366751,391.94775930931826L-4.320107128164835,391.81856405548194L-5.024176666473451,391.0819113742351L-4.05875425215622,391.12594126377803ZM-0.6971585461443368,392.62420876167346L0.28859966877097065,392.2470955320776L0.0053162328135698544,393.04859154627707L0.935886177657423,393.1718222718678L0.7193003831233682,393.79314804935734L-0.12258889027954467,393.41047449932853L-1.5129429241712842,393.8750864911435L-1.1141656377073872,392.7659401342238ZM75.65008430917052,372.12978901146266L75.56897150338723,372.74034906067993L73.6324819679275,373.4994616686254L72.35765294166774,373.07226848384676L73.31634337462904,371.8452001299071L73.8999657206837,371.97447996602466L74.35366810729451,370.3898731238234L75.21168330259057,370.09429502109765L74.85208776578058,371.18142424381784L76.21570052777243,371.56058370540006L75.95450279978311,372.59156024155874ZM90.4800847010427,359.6214060425802L90.26113274828,359.31278004807666L91.40150834650517,358.92517963329897ZM24.819648911327803,355.15344305855484L24.14016623790831,354.873125912776L23.505463910524774,353.79543828415467L24.852631074567093,354.7027179476888ZM89.60935354459983,360.8349256331364L89.18245969391032,360.29757194190466L89.64572069317883,359.5224786668197L90.79343812512033,359.94647114403676ZM86.64758876463122,363.5837638064338L86.52228086472272,363.2341622509712L88.15096128947587,360.96333433951435L88.7819685989424,360.84165804370343L87.88934774032772,362.0187868435991L87.61241424182009,362.963747736375ZM51.78612932455559,369.566240407058L51.96430121399737,368.80666559976584L52.97573267547563,368.32842396001394L52.47009930559632,369.49959076226696ZM133.18580260674352,380.5663724375162L131.42212441122834,379.63670659848526L130.76286905621004,378.2856001953288L131.02984558652105,378.0833183868766Z"></path><text class="state__label" x="74.52767912239584" y="342.5884195357982" dx="0" dy="0">AK</text>\n        </g>\n        <g class="state state-NV">\n            <path class="state__path" d="M121.73454647763717,206.52587106900432L120.30704573162268,218.39386181889586L118.5645637154569,220.7291237519645L116.40517484319585,218.52822808402357L111.7476447844407,218.09345412571201L111.87928557203668,221.7663149568649L110.65369814658942,227.92232353017152L111.38538399970341,230.82110252449752L109.80302763166753,234.39385716612674L105.48960734581868,227.6113691679558L96.17074663809393,214.05198554232334L93.00685303096012,208.73017638267015L81.69267005071578,192.3211578819206L62.82610427106681,163.79962144618287L62.27561121883781,162.67271673936295L73.40315415766264,119.52870743348763L98.40855796086129,125.64667056492578L104.89079611759209,127.04403142416152L125.85169145271195,131.6077161168829L136.5661726115712,133.72401756532827L127.39898267315982,181.46240782817745L126.1603310122573,183.57211137535546Z"></path><text class="state__label" x="100.32380875333739" y="166.61780612678226" dx="0" dy="0">NV</text>\n        </g>\n        <g class="state state-OR">\n            <path class="state__path" d="M104.89079611759209,127.04403142416152L98.40855796086129,125.64667056492578L73.40315415766264,119.52870743348763L57.19700375258452,115.20822934171997L29.106016192856487,107.04474912414764L27.923737989832432,101.62137300860729L29.789850461893536,96.88954003119477L29.338890571302784,94.42854069182044L34.379212008510365,87.20104945418939L37.68857057070028,81.5966496817997L40.30962053602207,74.30030208918731L42.15064216826522,68.26007529113713L44.9798441706817,64.09227325419283L47.83584588317075,54.67097604861351L49.73854030298236,49.65965338545766L54.18920361399313,48.863508034831284L56.17982341819783,51.17557361661238L57.764813415128685,50.98694867789402L60.23521414317878,55.638073087948555L59.65454769529515,60.302493140939305L63.99795152866017,62.60964056489354L68.88760989813301,61.612563416578496L71.83981177187343,62.021860435573444L77.57026760011138,64.88464638929281L81.14782032689618,64.37234731137232L84.67852201304308,65.46277984264111L98.16508392756762,64.74556810695003L118.90846028075359,69.70268188828663L119.42185800856399,72.47632034789194L121.7395683358751,73.95537985364035L121.88863008110889,76.72755085310291L118.55797126151637,79.7842072248418L117.61475806906114,82.3192538331408L114.62514753116548,87.14636943631729L113.07675299178305,87.20267806596848L110.74109990087516,90.71981727525474L110.11151238766047,93.49183334541522L113.06164972048381,95.85695459631813L110.93317666822315,100.1580394535473Z"></path><text class="state__label" x="74.66908439382814" y="90.271958825749" dx="0" dy="0">OR</text>\n        </g>\n        <g class="state state-ID">\n            <path class="state__path" d="M168.4628162690703,139.25174895062878L142.30059514974215,134.88907238057277L136.5661726115712,133.72401756532827L125.85169145271195,131.6077161168829L104.89079611759209,127.04403142416152L110.93317666822315,100.1580394535473L113.06164972048381,95.85695459631813L110.11151238766047,93.49183334541522L110.74109990087516,90.71981727525474L113.07675299178305,87.20267806596848L114.62514753116548,87.14636943631729L117.61475806906114,82.3192538331408L118.55797126151637,79.7842072248418L121.88863008110889,76.72755085310291L121.7395683358751,73.95537985364035L119.42185800856399,72.47632034789194L118.90846028075359,69.70268188828663L118.2210316482145,64.39340150438863L126.78655647245782,26.41462203703179L136.38858131747583,28.526919335244884L133.25103958630228,43.157731748241986L135.59793642892873,49.32924796057648L135.06921706615523,50.097154535500295L136.78066133424545,54.21399671312804L138.22987783816242,56.11373981198017L141.11479024283227,61.90163339378887L143.47388623235432,64.93415903961932L146.68864461896075,65.56723918271257L143.95601929578967,71.91334321225565L143.02344723662287,72.85094744365233L143.78354908867223,76.60654469204746L141.6710067049426,77.79409442216831L141.07509471520314,80.8051148581576L143.30051408411902,82.9276296441002L147.13950969565516,80.62297959696002L148.8228244789284,81.6650832996346L148.40999201259393,85.83474421280778L150.97608779612176,90.32492645084744L150.45761345311905,93.11585640700571L153.52768583222064,95.04426480033919L154.103533341064,100.28222149100577L155.00563844728845,101.64815996049117L156.87695368208261,99.73690761475677L160.44500057757648,101.16654128321397L160.6751480853126,99.8444155042323L166.15318505460365,101.26252151218466L169.67093200027622,100.72794853215021L171.19046901498194,98.41851118308148L174.2167035711565,103.22469822096127Z"></path><text class="state__label" x="136.9954408178304" y="98.25510136256071" dx="0" dy="0">ID</text>\n        </g>\n        <g class="state state-WA">\n            <path class="state__path" d="M72.55279958383761,23.314894389615347L71.27020088651324,23.92079596551548L72.8928631381238,27.307659442416025L72.40103296671936,29.03532513110804L70.49371649210104,26.62124302813777L70.05586247336282,23.002270440582038L71.30022112574142,21.251066058527954ZM118.90846028075359,69.70268188828663L98.16508392756762,64.74556810695003L84.67852201304308,65.46277984264111L81.14782032689618,64.37234731137232L77.57026760011138,64.88464638929281L71.83981177187343,62.021860435573444L68.88760989813301,61.612563416578496L63.99795152866017,62.60964056489354L59.65454769529515,60.302493140939305L60.23521414317878,55.638073087948555L57.764813415128685,50.98694867789402L56.17982341819783,51.17557361661238L54.18920361399313,48.863508034831284L49.13447733771659,46.60213492858361L50.18630152215076,43.14651490437893L53.33142277997359,41.55744764834628L50.61534021566791,40.48816045435797L51.000105966665956,37.981768749784806L53.912503277951146,38.37425744255779L51.31759293630097,35.702002046556004L51.199008961961,31.160291797041623L51.757471124063784,25.684517521481666L50.640337792938396,20.8394449604765L51.58747069926869,15.413540943135331L58.38602816797061,21.094711806932196L69.76929468195823,25.275046689888768L69.13771152325643,28.750478729236647L66.20485508989839,31.156176773087736L70.9412466624517,28.943537176790414L67.72874880624045,37.54262126769959L66.12608036174657,36.59187782679567L65.1043780170516,38.82378246928715L67.38291919492207,38.74705550535077L68.29130374788997,36.889445280736595L70.15280017079345,36.93275576376186L70.64123459512064,32.597288280007206L74.26461616439326,27.69704884304167L71.88700186350763,25.640314477607376L72.08246207484285,23.667006541994283L73.91852103093981,23.70480208884169L71.37054803421046,19.729894040540557L73.64435170030367,20.788690066921845L74.46176127877811,16.647497165092545L72.32140032169934,16.43708527065337L73.06341815133976,12.601820824031961L82.50156673627623,15.357934933075967L106.97063046144333,21.71679436188731L126.78655647245782,26.41462203703179L118.2210316482145,64.39340150438863Z"></path><text class="state__label" x="88.47237606116714" y="41.474872557246435" dx="0" dy="0">WA</text>\n        </g>\n        <g class="state state-AZ">\n            <path class="state__path" d="M179.89214600455077,216.14113872123414L168.3903363735582,299.4330422485704L143.0284991847331,295.65219356919465L122.31972977217839,283.71531186744727L100.38024615674487,270.44231838937844L102.33515331566258,267.4413692751424L105.72255192507126,266.25510623135756L105.82578405460794,263.4490798884352L103.68140566431296,262.9434826945878L104.35047093950084,257.33854812127265L106.85295934702668,255.9760931002545L108.05173508124838,249.90689155647055L109.34981085488951,247.817649630507L112.5451698365948,247.31000336512477L113.7734932239278,245.5270083988189L111.16357111291586,243.0786013491973L111.0811099897409,239.01740865528853L109.41613036508312,236.341045231002L109.80302763166753,234.39385716612674L111.38538399970341,230.82110252449752L110.65369814658942,227.92232353017152L111.87928557203668,221.7663149568649L111.7476447844407,218.09345412571201L116.40517484319585,218.52822808402357L118.5645637154569,220.7291237519645L120.30704573162268,218.39386181889586L121.73454647763717,206.52587106900432L134.88719819192482,208.9795339894871L163.33065217409185,213.80687806815433Z"></path><text class="state__label" x="143.08769040231576" y="251.47184091430907" dx="0" dy="0">AZ</text>\n        </g>\n    </g>\n    <g class="state-boxes" transform="translate(645, 85)">\n        <g class="state-box-VT" transform="translate(0, 0)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">VT</text>\n        </g>\n        <g class="state-box-NH" transform="translate(0, 27)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">NH</text>\n        </g>\n        <g class="state-box-MA" transform="translate(0, 54)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">MA</text>\n        </g>\n        <g class="state-box-RI" transform="translate(0, 81)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">RI</text>\n        </g>\n        <g class="state-box-CT" transform="translate(0, 108)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">CT</text>\n        </g>\n        <g class="state-box-NJ" transform="translate(0, 135)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">NJ</text>\n        </g>\n        <g class="state-box-DE" transform="translate(0, 162)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">DE</text>\n        </g>\n        <g class="state-box-MD" transform="translate(0, 189)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">MD</text>\n        </g>\n        <g class="state-box-DC" transform="translate(0, 216)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">DC</text>\n        </g>\n        <g class="state-box-PR" transform="translate(0, 243)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">PR</text>\n        </g>\n        <g class="state-box-PW" transform="translate(0, 270)">\n            <rect class="state-box__background"></rect><text class="state-box__label" x="20" y="15">PW</text>\n        </g>\n    </g>\n</svg>'},function(t,e,n){t.exports={active:"src-views-map-view--active",mapContainer:"src-views-map-view--mapContainer",legendContainer:"src-views-map-view--legendContainer",legendWrapper:"src-views-map-view--legendWrapper",tick:"src-views-map-view--tick",gradient:"src-views-map-view--gradient",hover:"src-views-map-view--hover"}},function(t,e,n){
/**
 * chroma.js - JavaScript library for color conversions
 *
 * Copyright (c) 2011-2018, Gregor Aisch
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -------------------------------------------------------
 *
 * chroma.js includes colors from colorbrewer2.org, which are released under
 * the following license:
 *
 * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,
 * and The Pennsylvania State University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * ------------------------------------------------------
 *
 * Named colors are taken from X11 Color Names.
 * http://www.w3.org/TR/css3-color/#svg-color
 *
 * @preserve
 */
t.exports=function(){"use strict";for(var t=function(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=1),t<e?e:t>n?n:t},e={},n=0,r=["Boolean","Number","String","Function","Array","Date","RegExp","Undefined","Null"];n<r.length;n+=1){var i=r[n];e["[object "+i+"]"]=i.toLowerCase()}var a=function(t){return e[Object.prototype.toString.call(t)]||"object"},o=Math.PI,s={clip_rgb:function(e){e._clipped=!1,e._unclipped=e.slice(0);for(var n=0;n<=3;n++)n<3?((e[n]<0||e[n]>255)&&(e._clipped=!0),e[n]=t(e[n],0,255)):3===n&&(e[n]=t(e[n],0,1));return e},limit:t,type:a,unpack:function(t,e){return void 0===e&&(e=null),t.length>=3?Array.prototype.slice.call(t):"object"==a(t[0])&&e?e.split("").filter(function(e){return void 0!==t[0][e]}).map(function(e){return t[0][e]}):t[0]},last:function(t){if(t.length<2)return null;var e=t.length-1;return"string"==a(t[e])?t[e].toLowerCase():null},PI:o,TWOPI:2*o,PITHIRD:o/3,DEG2RAD:o/180,RAD2DEG:180/o},u={format:{},autodetect:[]},c=s.last,l=s.clip_rgb,f=s.type,p=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if("object"===f(t[0])&&t[0].constructor&&t[0].constructor===this.constructor)return t[0];var n=c(t),r=!1;if(!n){r=!0,u.sorted||(u.autodetect=u.autodetect.sort(function(t,e){return e.p-t.p}),u.sorted=!0);for(var i=0,a=u.autodetect;i<a.length;i+=1){var o=a[i];if(n=o.test.apply(o,t))break}}if(!u.format[n])throw new Error("unknown format: "+t);var s=u.format[n].apply(null,r?t:t.slice(0,-1));this._rgb=l(s),3===this._rgb.length&&this._rgb.push(1)};p.prototype.toString=function(){return"function"==f(this.hex)?this.hex():"["+this._rgb.join(",")+"]"};var d=p,h=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(h.Color,[null].concat(t)))};h.Color=d,h.version="2.0.3";var L=h,v=s.unpack,y=Math.max,m=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=v(t,"rgb"),r=n[0],i=n[1],a=n[2],o=1-y(r/=255,y(i/=255,a/=255)),s=o<1?1/(1-o):0,u=(1-r-o)*s,c=(1-i-o)*s,l=(1-a-o)*s;return[u,c,l,o]},g=s.unpack,b=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=(t=g(t,"cmyk"))[0],r=t[1],i=t[2],a=t[3],o=t.length>4?t[4]:1;return 1===a?[0,0,0,o]:[n>=1?0:255*(1-n)*(1-a),r>=1?0:255*(1-r)*(1-a),i>=1?0:255*(1-i)*(1-a),o]},_=s.unpack,w=s.type;d.prototype.cmyk=function(){return m(this._rgb)},L.cmyk=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["cmyk"])))},u.format.cmyk=b,u.autodetect.push({p:2,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=_(t,"cmyk"),"array"===w(t)&&4===t.length)return"cmyk"}});var x=s.unpack,k=s.last,O=function(t){return Math.round(100*t)/100},E=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=x(t,"hsla"),r=k(t)||"lsa";return n[0]=O(n[0]||0),n[1]=O(100*n[1])+"%",n[2]=O(100*n[2])+"%","hsla"===r||n.length>3&&n[3]<1?(n[3]=n.length>3?n[3]:1,r="hsla"):n.length=3,r+"("+n.join(",")+")"},S=s.unpack,M=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=(t=S(t,"rgba"))[0],r=t[1],i=t[2];n/=255,r/=255,i/=255;var a,o,s=Math.min(n,r,i),u=Math.max(n,r,i),c=(u+s)/2;return u===s?(a=0,o=Number.NaN):a=c<.5?(u-s)/(u+s):(u-s)/(2-u-s),n==u?o=(r-i)/(u-s):r==u?o=2+(i-n)/(u-s):i==u&&(o=4+(n-r)/(u-s)),(o*=60)<0&&(o+=360),t.length>3&&void 0!==t[3]?[o,a,c,t[3]]:[o,a,c]},C=s.unpack,A=s.last,j=Math.round,P=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=C(t,"rgba"),r=A(t)||"rgb";return"hsl"==r.substr(0,3)?E(M(n),r):(n[0]=j(n[0]),n[1]=j(n[1]),n[2]=j(n[2]),("rgba"===r||n.length>3&&n[3]<1)&&(n[3]=n.length>3?n[3]:1,r="rgba"),r+"("+n.slice(0,"rgb"===r?3:4).join(",")+")")},T=/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/,D=/^#?([A-Fa-f0-9]{8})$/,I=function(t){if(t.match(T)){4!==t.length&&7!==t.length||(t=t.substr(1)),3===t.length&&(t=(t=t.split(""))[0]+t[0]+t[1]+t[1]+t[2]+t[2]);var e=parseInt(t,16),n=e>>16,r=e>>8&255,i=255&e;return[n,r,i,1]}if(t.match(D)){9===t.length&&(t=t.substr(1));var a=parseInt(t,16),o=a>>24&255,s=a>>16&255,u=a>>8&255,c=Math.round((255&a)/255*100)/100;return[o,s,u,c]}throw new Error("unknown hex color: "+t)},R=s.unpack,N=Math.round,H=function(){for(var t,e=[],n=arguments.length;n--;)e[n]=arguments[n];var r,i,a,o=(e=R(e,"hsl"))[0],s=e[1],u=e[2];if(0===s)r=i=a=255*u;else{var c=[0,0,0],l=[0,0,0],f=u<.5?u*(1+s):u+s-u*s,p=2*u-f,d=o/360;c[0]=d+1/3,c[1]=d,c[2]=d-1/3;for(var h=0;h<3;h++)c[h]<0&&(c[h]+=1),c[h]>1&&(c[h]-=1),6*c[h]<1?l[h]=p+6*(f-p)*c[h]:2*c[h]<1?l[h]=f:3*c[h]<2?l[h]=p+(f-p)*(2/3-c[h])*6:l[h]=p;t=[N(255*l[0]),N(255*l[1]),N(255*l[2])],r=t[0],i=t[1],a=t[2]}return e.length>3?[r,i,a,e[3]]:[r,i,a,1]},W={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflower:"#6495ed",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",laserlemon:"#ffff54",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrod:"#fafad2",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",maroon2:"#7f0000",maroon3:"#b03060",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",purple2:"#7f007f",purple3:"#a020f0",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"},B=/^rgb\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*\)$/,Z=/^rgba\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*,\s*([01]|[01]?\.\d+)\)$/,F=/^rgb\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/,q=/^rgba\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/,z=/^hsl\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/,U=/^hsla\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/,V=Math.round,Y=function(t){if(t=t.toLowerCase().trim(),W[t])return I(W[t]);var e;if(e=t.match(B)){for(var n=e.slice(1,4),r=0;r<3;r++)n[r]=+n[r];return n[3]=1,n}if(e=t.match(Z)){for(var i=e.slice(1,5),a=0;a<4;a++)i[a]=+i[a];return i}if(e=t.match(F)){for(var o=e.slice(1,4),s=0;s<3;s++)o[s]=V(2.55*o[s]);return o[3]=1,o}if(e=t.match(q)){for(var u=e.slice(1,5),c=0;c<3;c++)u[c]=V(2.55*u[c]);return u[3]=+u[3],u}if(e=t.match(z)){var l=e.slice(1,4);l[1]*=.01,l[2]*=.01;var f=H(l);return f[3]=1,f}if(e=t.match(U)){var p=e.slice(1,4);p[1]*=.01,p[2]*=.01;var d=H(p);return d[3]=+e[4],d}};Y.test=function(t){return B.test(t)||Z.test(t)||F.test(t)||q.test(t)||z.test(t)||U.test(t)};var G=Y,X=s.type;d.prototype.css=function(t){return P(this._rgb,t)},L.css=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["css"])))},u.format.css=G,u.autodetect.push({p:5,test:function(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];if(!e.length&&"string"===X(t)&&G.test(t))return"css"}});var $=s.unpack;u.format.gl=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=$(t,"rgba");return n[0]*=255,n[1]*=255,n[2]*=255,n},L.gl=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["gl"])))},d.prototype.gl=function(){var t=this._rgb;return[t[0]/255,t[1]/255,t[2]/255,t[3]]};var K=s.unpack,J=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n,r=K(t,"rgb"),i=r[0],a=r[1],o=r[2],s=Math.min(i,a,o),u=Math.max(i,a,o),c=u-s,l=100*c/255,f=s/(255-c)*100;return 0===c?n=Number.NaN:(i===u&&(n=(a-o)/c),a===u&&(n=2+(o-i)/c),o===u&&(n=4+(i-a)/c),(n*=60)<0&&(n+=360)),[n,l,f]},Q=s.unpack,tt=Math.floor,et=function(){for(var t,e,n,r,i,a,o=[],s=arguments.length;s--;)o[s]=arguments[s];var u,c,l,f=(o=Q(o,"hcg"))[0],p=o[1],d=o[2];d*=255;var h=255*p;if(0===p)u=c=l=d;else{360===f&&(f=0),f>360&&(f-=360),f<0&&(f+=360);var L=tt(f/=60),v=f-L,y=d*(1-p),m=y+h*(1-v),g=y+h*v,b=y+h;switch(L){case 0:u=(t=[b,g,y])[0],c=t[1],l=t[2];break;case 1:u=(e=[m,b,y])[0],c=e[1],l=e[2];break;case 2:u=(n=[y,b,g])[0],c=n[1],l=n[2];break;case 3:u=(r=[y,m,b])[0],c=r[1],l=r[2];break;case 4:u=(i=[g,y,b])[0],c=i[1],l=i[2];break;case 5:u=(a=[b,y,m])[0],c=a[1],l=a[2]}}return[u,c,l,o.length>3?o[3]:1]},nt=s.unpack,rt=s.type;d.prototype.hcg=function(){return J(this._rgb)},L.hcg=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["hcg"])))},u.format.hcg=et,u.autodetect.push({p:1,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=nt(t,"hcg"),"array"===rt(t)&&3===t.length)return"hcg"}});var it=s.unpack,at=s.last,ot=Math.round,st=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=it(t,"rgba"),r=n[0],i=n[1],a=n[2],o=n[3],s=at(t)||"auto";void 0===o&&(o=1),"auto"===s&&(s=o<1?"rgba":"rgb"),r=ot(r),i=ot(i),a=ot(a);var u=r<<16|i<<8|a,c="000000"+u.toString(16);c=c.substr(c.length-6);var l="0"+ot(255*o).toString(16);switch(l=l.substr(l.length-2),s.toLowerCase()){case"rgba":return"#"+c+l;case"argb":return"#"+l+c;default:return"#"+c}},ut=s.type;d.prototype.hex=function(t){return st(this._rgb,t)},L.hex=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["hex"])))},u.format.hex=I,u.autodetect.push({p:4,test:function(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];if(!e.length&&"string"===ut(t)&&[3,4,6,7,8,9].includes(t.length))return"hex"}});var ct=s.unpack,lt=s.TWOPI,ft=Math.min,pt=Math.sqrt,dt=Math.acos,ht=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n,r=ct(t,"rgb"),i=r[0],a=r[1],o=r[2],s=ft(i/=255,a/=255,o/=255),u=(i+a+o)/3,c=u>0?1-s/u:0;return 0===c?n=NaN:(n=(i-a+(i-o))/2,n/=pt((i-a)*(i-a)+(i-o)*(a-o)),n=dt(n),o>a&&(n=lt-n),n/=lt),[360*n,c,u]},Lt=s.unpack,vt=s.limit,yt=s.TWOPI,mt=s.PITHIRD,gt=Math.cos,bt=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n,r,i,a=(t=Lt(t,"hsi"))[0],o=t[1],s=t[2];return isNaN(a)&&(a=0),isNaN(o)&&(o=0),a>360&&(a-=360),a<0&&(a+=360),(a/=360)<1/3?(i=(1-o)/3,n=(1+o*gt(yt*a)/gt(mt-yt*a))/3,r=1-(i+n)):a<2/3?(n=(1-o)/3,r=(1+o*gt(yt*(a-=1/3))/gt(mt-yt*a))/3,i=1-(n+r)):(r=(1-o)/3,i=(1+o*gt(yt*(a-=2/3))/gt(mt-yt*a))/3,n=1-(r+i)),n=vt(s*n*3),r=vt(s*r*3),i=vt(s*i*3),[255*n,255*r,255*i,t.length>3?t[3]:1]},_t=s.unpack,wt=s.type;d.prototype.hsi=function(){return ht(this._rgb)},L.hsi=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["hsi"])))},u.format.hsi=bt,u.autodetect.push({p:2,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=_t(t,"hsi"),"array"===wt(t)&&3===t.length)return"hsi"}});var xt=s.unpack,kt=s.type;d.prototype.hsl=function(){return M(this._rgb)},L.hsl=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["hsl"])))},u.format.hsl=H,u.autodetect.push({p:2,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=xt(t,"hsl"),"array"===kt(t)&&3===t.length)return"hsl"}});var Ot=s.unpack,Et=Math.min,St=Math.max,Mt=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n,r,i,a=(t=Ot(t,"rgb"))[0],o=t[1],s=t[2],u=Et(a,o,s),c=St(a,o,s),l=c-u;return i=c/255,0===c?(n=Number.NaN,r=0):(r=l/c,a===c&&(n=(o-s)/l),o===c&&(n=2+(s-a)/l),s===c&&(n=4+(a-o)/l),(n*=60)<0&&(n+=360)),[n,r,i]},Ct=s.unpack,At=Math.floor,jt=function(){for(var t,e,n,r,i,a,o=[],s=arguments.length;s--;)o[s]=arguments[s];var u,c,l,f=(o=Ct(o,"hsv"))[0],p=o[1],d=o[2];if(d*=255,0===p)u=c=l=d;else{360===f&&(f=0),f>360&&(f-=360),f<0&&(f+=360);var h=At(f/=60),L=f-h,v=d*(1-p),y=d*(1-p*L),m=d*(1-p*(1-L));switch(h){case 0:u=(t=[d,m,v])[0],c=t[1],l=t[2];break;case 1:u=(e=[y,d,v])[0],c=e[1],l=e[2];break;case 2:u=(n=[v,d,m])[0],c=n[1],l=n[2];break;case 3:u=(r=[v,y,d])[0],c=r[1],l=r[2];break;case 4:u=(i=[m,v,d])[0],c=i[1],l=i[2];break;case 5:u=(a=[d,v,y])[0],c=a[1],l=a[2]}}return[u,c,l,o.length>3?o[3]:1]},Pt=s.unpack,Tt=s.type;d.prototype.hsv=function(){return Mt(this._rgb)},L.hsv=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["hsv"])))},u.format.hsv=jt,u.autodetect.push({p:2,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=Pt(t,"hsv"),"array"===Tt(t)&&3===t.length)return"hsv"}});var Dt={Kn:18,Xn:.95047,Yn:1,Zn:1.08883,t0:.137931034,t1:.206896552,t2:.12841855,t3:.008856452},It=s.unpack,Rt=Math.pow,Nt=function(t){return(t/=255)<=.04045?t/12.92:Rt((t+.055)/1.055,2.4)},Ht=function(t){return t>Dt.t3?Rt(t,1/3):t/Dt.t2+Dt.t0},Wt=function(t,e,n){t=Nt(t),e=Nt(e),n=Nt(n);var r=Ht((.4124564*t+.3575761*e+.1804375*n)/Dt.Xn),i=Ht((.2126729*t+.7151522*e+.072175*n)/Dt.Yn),a=Ht((.0193339*t+.119192*e+.9503041*n)/Dt.Zn);return[r,i,a]},Bt=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=It(t,"rgb"),r=n[0],i=n[1],a=n[2],o=Wt(r,i,a),s=o[0],u=o[1],c=o[2],l=116*u-16;return[l<0?0:l,500*(s-u),200*(u-c)]},Zt=s.unpack,Ft=Math.pow,qt=function(t){return 255*(t<=.00304?12.92*t:1.055*Ft(t,1/2.4)-.055)},zt=function(t){return t>Dt.t1?t*t*t:Dt.t2*(t-Dt.t0)},Ut=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n,r,i,a,o,s,u=(t=Zt(t,"lab"))[0],c=t[1],l=t[2];return r=(u+16)/116,n=isNaN(c)?r:r+c/500,i=isNaN(l)?r:r-l/200,r=Dt.Yn*zt(r),n=Dt.Xn*zt(n),i=Dt.Zn*zt(i),a=qt(3.2404542*n-1.5371385*r-.4985314*i),o=qt(-.969266*n+1.8760108*r+.041556*i),s=qt(.0556434*n-.2040259*r+1.0572252*i),[a,o,s,t.length>3?t[3]:1]},Vt=s.unpack,Yt=s.type;d.prototype.lab=function(){return Bt(this._rgb)},L.lab=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["lab"])))},u.format.lab=Ut,u.autodetect.push({p:2,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=Vt(t,"lab"),"array"===Yt(t)&&3===t.length)return"lab"}});var Gt=s.unpack,Xt=s.RAD2DEG,$t=Math.sqrt,Kt=Math.atan2,Jt=Math.round,Qt=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=Gt(t,"lab"),r=n[0],i=n[1],a=n[2],o=$t(i*i+a*a),s=(Kt(a,i)*Xt+360)%360;return 0===Jt(1e4*o)&&(s=Number.NaN),[r,o,s]},te=s.unpack,ee=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=te(t,"rgb"),r=n[0],i=n[1],a=n[2],o=Bt(r,i,a),s=o[0],u=o[1],c=o[2];return Qt(s,u,c)},ne=s.unpack,re=s.DEG2RAD,ie=Math.sin,ae=Math.cos,oe=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=ne(t,"lch"),r=n[0],i=n[1],a=n[2];return isNaN(a)&&(a=0),[r,ae(a*=re)*i,ie(a)*i]},se=s.unpack,ue=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=(t=se(t,"lch"))[0],r=t[1],i=t[2],a=oe(n,r,i),o=a[0],s=a[1],u=a[2],c=Ut(o,s,u),l=c[0],f=c[1],p=c[2];return[l,f,p,t.length>3?t[3]:1]},ce=s.unpack,le=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=ce(t,"hcl").reverse();return ue.apply(void 0,n)},fe=s.unpack,pe=s.type;d.prototype.lch=function(){return ee(this._rgb)},d.prototype.hcl=function(){return ee(this._rgb).reverse()},L.lch=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["lch"])))},L.hcl=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["hcl"])))},u.format.lch=ue,u.format.hcl=le,["lch","hcl"].forEach(function(t){return u.autodetect.push({p:2,test:function(){for(var e=[],n=arguments.length;n--;)e[n]=arguments[n];if(e=fe(e,t),"array"===pe(e)&&3===e.length)return t}})});var de=s.type;d.prototype.name=function(){for(var t=st(this._rgb,"rgb"),e=0,n=Object.keys(W);e<n.length;e+=1){var r=n[e];if(W[r]===t)return r.toLowerCase()}return t},u.format.named=function(t){if(t=t.toLowerCase(),W[t])return I(W[t]);throw new Error("unknown color name: "+t)},u.autodetect.push({p:5,test:function(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];if(!e.length&&"string"===de(t)&&W[t.toLowerCase()])return"named"}});var he=s.unpack,Le=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=he(t,"rgb"),r=n[0],i=n[1],a=n[2];return(r<<16)+(i<<8)+a},ve=s.type,ye=function(t){if("number"==ve(t)&&t>=0&&t<=16777215){var e=t>>16,n=t>>8&255,r=255&t;return[e,n,r,1]}throw new Error("unknown num color: "+t)},me=s.type;d.prototype.num=function(){return Le(this._rgb)},L.num=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["num"])))},u.format.num=ye,u.autodetect.push({p:5,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(1===t.length&&"number"===me(t[0])&&t[0]>=0&&t[0]<=16777215)return"num"}});var ge=s.unpack,be=s.type,_e=Math.round;d.prototype.rgb=function(t){return void 0===t&&(t=!0),!1===t?this._rgb.slice(0,3):this._rgb.slice(0,3).map(_e)},d.prototype.rgba=function(t){return void 0===t&&(t=!0),this._rgb.slice(0,4).map(function(e,n){return n<3?!1===t?e:_e(e):e})},L.rgb=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["rgb"])))},u.format.rgb=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=ge(t,"rgba");return void 0===n[3]&&(n[3]=1),n},u.autodetect.push({p:3,test:function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];if(t=ge(t,"rgba"),"array"===be(t)&&(3===t.length||4===t.length&&"number"==be(t[3])&&t[3]>=0&&t[3]<=1))return"rgb"}});var we=Math.log,xe=function(t){var e,n,r,i=t/100;return i<66?(e=255,n=-155.25485562709179-.44596950469579133*(n=i-2)+104.49216199393888*we(n),r=i<20?0:.8274096064007395*(r=i-10)-254.76935184120902+115.67994401066147*we(r)):(e=351.97690566805693+.114206453784165*(e=i-55)-40.25366309332127*we(e),n=325.4494125711974+.07943456536662342*(n=i-50)-28.0852963507957*we(n),r=255),[e,n,r,1]},ke=s.unpack,Oe=Math.round,Ee=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];for(var n,r=ke(t,"rgb"),i=r[0],a=r[2],o=1e3,s=4e4;s-o>.4;){var u=xe(n=.5*(s+o));u[2]/u[0]>=a/i?s=n:o=n}return Oe(n)};d.prototype.temp=d.prototype.kelvin=d.prototype.temperature=function(){return Ee(this._rgb)},L.temp=L.kelvin=L.temperature=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return new(Function.prototype.bind.apply(d,[null].concat(t,["temp"])))},u.format.temp=u.format.kelvin=u.format.temperature=xe;var Se=s.type;d.prototype.alpha=function(t,e){return void 0===e&&(e=!1),void 0!==t&&"number"===Se(t)?e?(this._rgb[3]=t,this):new d([this._rgb[0],this._rgb[1],this._rgb[2],t],"rgb"):this._rgb[3]},d.prototype.clipped=function(){return this._rgb._clipped||!1},d.prototype.darken=function(t){void 0===t&&(t=1);var e=this.lab();return e[0]-=Dt.Kn*t,new d(e,"lab").alpha(this.alpha(),!0)},d.prototype.brighten=function(t){return void 0===t&&(t=1),this.darken(-t)},d.prototype.darker=d.prototype.darken,d.prototype.brighter=d.prototype.brighten,d.prototype.get=function(t){var e=t.split("."),n=e[0],r=e[1],i=this[n]();if(r){var a=n.indexOf(r);if(a>-1)return i[a];throw new Error("unknown channel "+r+" in mode "+n)}return i};var Me=s.type,Ce=Math.pow;d.prototype.luminance=function(t){if(void 0!==t&&"number"===Me(t)){if(0===t)return new d([0,0,0,this._rgb[3]],"rgb");if(1===t)return new d([255,255,255,this._rgb[3]],"rgb");var e=this.luminance(),n=20,r=function(e,i){var a=e.interpolate(i,.5,"rgb"),o=a.luminance();return Math.abs(t-o)<1e-7||!n--?a:o>t?r(e,a):r(a,i)},i=(e>t?r(new d([0,0,0]),this):r(this,new d([255,255,255]))).rgb();return new d(i.concat([this._rgb[3]]))}return Ae.apply(void 0,this._rgb.slice(0,3))};var Ae=function(t,e,n){return t=je(t),e=je(e),n=je(n),.2126*t+.7152*e+.0722*n},je=function(t){return(t/=255)<=.03928?t/12.92:Ce((t+.055)/1.055,2.4)},Pe={},Te=s.type,De=function(t,e,n){void 0===n&&(n=.5);for(var r=[],i=arguments.length-3;i-- >0;)r[i]=arguments[i+3];var a=r[0]||"lrgb";if(Pe[a]||r.length||(a=Object.keys(Pe)[0]),!Pe[a])throw new Error("interpolation mode "+a+" is not defined");return"object"!==Te(t)&&(t=new d(t)),"object"!==Te(e)&&(e=new d(e)),Pe[a](t,e,n).alpha(t.alpha()+n*(e.alpha()-t.alpha()))};d.prototype.mix=d.prototype.interpolate=function(t,e){void 0===e&&(e=.5);for(var n=[],r=arguments.length-2;r-- >0;)n[r]=arguments[r+2];return De.apply(void 0,[this,t,e].concat(n))},d.prototype.premultiply=function(t){void 0===t&&(t=!1);var e=this._rgb,n=e[3];return t?(this._rgb=[e[0]*n,e[1]*n,e[2]*n,n],this):new d([e[0]*n,e[1]*n,e[2]*n,n],"rgb")},d.prototype.saturate=function(t){void 0===t&&(t=1);var e=this.lch();return e[1]+=Dt.Kn*t,e[1]<0&&(e[1]=0),new d(e,"lch").alpha(this.alpha(),!0)},d.prototype.desaturate=function(t){return void 0===t&&(t=1),this.saturate(-t)};var Ie=s.type;d.prototype.set=function(t,e,n){void 0===n&&(n=!1);var r=t.split("."),i=r[0],a=r[1],o=this[i]();if(a){var s=i.indexOf(a);if(s>-1){if("string"==Ie(e))switch(e.charAt(0)){case"+":case"-":o[s]+=+e;break;case"*":o[s]*=+e.substr(1);break;case"/":o[s]/=+e.substr(1);break;default:o[s]=+e}else{if("number"!==Ie(e))throw new Error("unsupported value for Color.set");o[s]=e}var u=new d(o,i);return n?(this._rgb=u._rgb,this):u}throw new Error("unknown channel "+a+" in mode "+i)}return o},Pe.rgb=function(t,e,n){var r=t._rgb,i=e._rgb;return new d(r[0]+n*(i[0]-r[0]),r[1]+n*(i[1]-r[1]),r[2]+n*(i[2]-r[2]),"rgb")};var Re=Math.sqrt,Ne=Math.pow;Pe.lrgb=function(t,e,n){var r=t._rgb,i=r[0],a=r[1],o=r[2],s=e._rgb,u=s[0],c=s[1],l=s[2];return new d(Re(Ne(i,2)*(1-n)+Ne(u,2)*n),Re(Ne(a,2)*(1-n)+Ne(c,2)*n),Re(Ne(o,2)*(1-n)+Ne(l,2)*n),"rgb")},Pe.lab=function(t,e,n){var r=t.lab(),i=e.lab();return new d(r[0]+n*(i[0]-r[0]),r[1]+n*(i[1]-r[1]),r[2]+n*(i[2]-r[2]),"lab")};var He=function(t,e,n,r){var i,a,o,s,u,c,l,f,p,h,L,v;return"hsl"===r?(o=t.hsl(),s=e.hsl()):"hsv"===r?(o=t.hsv(),s=e.hsv()):"hcg"===r?(o=t.hcg(),s=e.hcg()):"hsi"===r?(o=t.hsi(),s=e.hsi()):"lch"!==r&&"hcl"!==r||(r="hcl",o=t.hcl(),s=e.hcl()),"h"===r.substr(0,1)&&(u=(i=o)[0],l=i[1],p=i[2],c=(a=s)[0],f=a[1],h=a[2]),isNaN(u)||isNaN(c)?isNaN(u)?isNaN(c)?v=Number.NaN:(v=c,1!=p&&0!=p||"hsv"==r||(L=f)):(v=u,1!=h&&0!=h||"hsv"==r||(L=l)):v=u+n*(c>u&&c-u>180?c-(u+360):c<u&&u-c>180?c+360-u:c-u),void 0===L&&(L=l+n*(f-l)),new d([v,L,p+n*(h-p)],r)},We=function(t,e,n){return He(t,e,n,"lch")};Pe.lch=We,Pe.hcl=We,Pe.num=function(t,e,n){var r=t.num(),i=e.num();return new d(r+n*(i-r),"num")},Pe.hcg=function(t,e,n){return He(t,e,n,"hcg")},Pe.hsi=function(t,e,n){return He(t,e,n,"hsi")},Pe.hsl=function(t,e,n){return He(t,e,n,"hsl")},Pe.hsv=function(t,e,n){return He(t,e,n,"hsv")};var Be=s.clip_rgb,Ze=Math.pow,Fe=Math.sqrt,qe=Math.PI,ze=Math.cos,Ue=Math.sin,Ve=Math.atan2,Ye=function(t){for(var e=t.length,n=1/e,r=[0,0,0,0],i=0,a=t;i<a.length;i+=1){var o=a[i],s=o._rgb;r[0]+=Ze(s[0],2)*n,r[1]+=Ze(s[1],2)*n,r[2]+=Ze(s[2],2)*n,r[3]+=s[3]*n}return r[0]=Fe(r[0]),r[1]=Fe(r[1]),r[2]=Fe(r[2]),r[3]>.9999999&&(r[3]=1),new d(Be(r))},Ge=s.type,Xe=Math.pow,$e=function(t){var e="rgb",n=L("#ccc"),r=0,i=[0,1],a=[],o=[0,0],s=!1,u=[],c=!1,l=0,f=1,p=!1,d={},h=!0,v=1,y=function(t){if((t=t||["#fff","#000"])&&"string"===Ge(t)&&L.brewer&&L.brewer[t.toLowerCase()]&&(t=L.brewer[t.toLowerCase()]),"array"===Ge(t)){1===t.length&&(t=[t[0],t[0]]),t=t.slice(0);for(var e=0;e<t.length;e++)t[e]=L(t[e]);a.length=0;for(var n=0;n<t.length;n++)a.push(n/(t.length-1))}return b(),u=t},m=function(t){return t},g=function(t,r){var i,c;if(null==r&&(r=!1),isNaN(t)||null===t)return n;if(r)c=t;else if(s&&s.length>2){var p=function(t){if(null!=s){for(var e=s.length-1,n=0;n<e&&t>=s[n];)n++;return n-1}return 0}(t);c=p/(s.length-2)}else c=f!==l?(t-l)/(f-l):1;r||(c=m(c)),1!==v&&(c=Xe(c,v)),c=o[0]+c*(1-o[0]-o[1]),c=Math.min(1,Math.max(0,c));var y=Math.floor(1e4*c);if(h&&d[y])i=d[y];else{if("array"===Ge(u))for(var g=0;g<a.length;g++){var b=a[g];if(c<=b){i=u[g];break}if(c>=b&&g===a.length-1){i=u[g];break}if(c>b&&c<a[g+1]){c=(c-b)/(a[g+1]-b),i=L.interpolate(u[g],u[g+1],c,e);break}}else"function"===Ge(u)&&(i=u(c));h&&(d[y]=i)}return i},b=function(){return d={}};y(t);var _=function(t){var e=L(g(t));return c&&e[c]?e[c]():e};return _.classes=function(t){if(null!=t){if("array"===Ge(t))s=t,i=[t[0],t[t.length-1]];else{var e=L.analyze(i);s=0===t?[e.min,e.max]:L.limits(e,"e",t)}return _}return s},_.domain=function(t){if(!arguments.length)return i;l=t[0],f=t[t.length-1],a=[];var e=u.length;if(t.length===e&&l!==f)for(var n=0,r=Array.from(t);n<r.length;n+=1){var o=r[n];a.push((o-l)/(f-l))}else for(var s=0;s<e;s++)a.push(s/(e-1));return i=[l,f],_},_.mode=function(t){return arguments.length?(e=t,b(),_):e},_.range=function(t,e){return y(t),_},_.out=function(t){return c=t,_},_.spread=function(t){return arguments.length?(r=t,_):r},_.correctLightness=function(t){return null==t&&(t=!0),p=t,b(),m=p?function(t){for(var e=g(0,!0).lab()[0],n=g(1,!0).lab()[0],r=e>n,i=g(t,!0).lab()[0],a=e+(n-e)*t,o=i-a,s=0,u=1,c=20;Math.abs(o)>.01&&c-- >0;)r&&(o*=-1),o<0?(s=t,t+=.5*(u-t)):(u=t,t+=.5*(s-t)),i=g(t,!0).lab()[0],o=i-a;return t}:function(t){return t},_},_.padding=function(t){return null!=t?("number"===Ge(t)&&(t=[t,t]),o=t,_):o},_.colors=function(e,n){arguments.length<2&&(n="hex");var r=[];if(0===arguments.length)r=u.slice(0);else if(1===e)r=[_(.5)];else if(e>1){var a=i[0],o=i[1]-a;r=function(t,e,n){for(var r=[],i=t<e,a=n?i?e+1:e-1:e,o=t;i?o<a:o>a;i?o++:o--)r.push(o);return r}(0,e,!1).map(function(t){return _(a+t/(e-1)*o)})}else{t=[];var c=[];if(s&&s.length>2)for(var l=1,f=s.length,p=1<=f;p?l<f:l>f;p?l++:l--)c.push(.5*(s[l-1]+s[l]));else c=i;r=c.map(function(t){return _(t)})}return L[n]&&(r=r.map(function(t){return t[n]()})),r},_.cache=function(t){return null!=t?(h=t,_):h},_.gamma=function(t){return null!=t?(v=t,_):v},_.nodata=function(t){return null!=t?(n=L(t),_):n},_},Ke=function(t){var e,n,r,i,a,o,s;if(2===(t=t.map(function(t){return new d(t)})).length)e=t.map(function(t){return t.lab()}),a=e[0],o=e[1],i=function(t){var e=[0,1,2].map(function(e){return a[e]+t*(o[e]-a[e])});return new d(e,"lab")};else if(3===t.length)n=t.map(function(t){return t.lab()}),a=n[0],o=n[1],s=n[2],i=function(t){var e=[0,1,2].map(function(e){return(1-t)*(1-t)*a[e]+2*(1-t)*t*o[e]+t*t*s[e]});return new d(e,"lab")};else if(4===t.length){var u;r=t.map(function(t){return t.lab()}),a=r[0],o=r[1],s=r[2],u=r[3],i=function(t){var e=[0,1,2].map(function(e){return(1-t)*(1-t)*(1-t)*a[e]+3*(1-t)*(1-t)*t*o[e]+3*(1-t)*t*t*s[e]+t*t*t*u[e]});return new d(e,"lab")}}else if(5===t.length){var c=Ke(t.slice(0,3)),l=Ke(t.slice(2,5));i=function(t){return t<.5?c(2*t):l(2*(t-.5))}}return i},Je=function(t,e,n){if(!Je[n])throw new Error("unknown blend mode "+n);return Je[n](t,e)},Qe=function(t){return function(e,n){var r=L(n).rgb(),i=L(e).rgb();return L.rgb(t(r,i))}},tn=function(t){return function(e,n){var r=[];return r[0]=t(e[0],n[0]),r[1]=t(e[1],n[1]),r[2]=t(e[2],n[2]),r}};Je.normal=Qe(tn(function(t){return t})),Je.multiply=Qe(tn(function(t,e){return t*e/255})),Je.screen=Qe(tn(function(t,e){return 255*(1-(1-t/255)*(1-e/255))})),Je.overlay=Qe(tn(function(t,e){return e<128?2*t*e/255:255*(1-2*(1-t/255)*(1-e/255))})),Je.darken=Qe(tn(function(t,e){return t>e?e:t})),Je.lighten=Qe(tn(function(t,e){return t>e?t:e})),Je.dodge=Qe(tn(function(t,e){return 255===t?255:(t=e/255*255/(1-t/255))>255?255:t})),Je.burn=Qe(tn(function(t,e){return 255*(1-(1-e/255)/(t/255))}));for(var en=Je,nn=s.type,rn=s.clip_rgb,an=s.TWOPI,on=Math.pow,sn=Math.sin,un=Math.cos,cn=Math.floor,ln=Math.random,fn=Math.log,pn=Math.pow,dn=Math.floor,hn=Math.abs,Ln=function(t,e){void 0===e&&(e=null);var n={min:Number.MAX_VALUE,max:-1*Number.MAX_VALUE,sum:0,values:[],count:0};return"object"===a(t)&&(t=Object.values(t)),t.forEach(function(t){e&&"object"===a(t)&&(t=t[e]),null==t||isNaN(t)||(n.values.push(t),n.sum+=t,t<n.min&&(n.min=t),t>n.max&&(n.max=t),n.count+=1)}),n.domain=[n.min,n.max],n.limits=function(t,e){return vn(n,t,e)},n},vn=function(t,e,n){void 0===e&&(e="equal"),void 0===n&&(n=7),"array"==a(t)&&(t=Ln(t));var r=t.min,i=t.max,o=t.values.sort(function(t,e){return t-e});if(1===n)return[r,i];var s=[];if("c"===e.substr(0,1)&&(s.push(r),s.push(i)),"e"===e.substr(0,1)){s.push(r);for(var u=1;u<n;u++)s.push(r+u/n*(i-r));s.push(i)}else if("l"===e.substr(0,1)){if(r<=0)throw new Error("Logarithmic scales are only possible for values > 0");var c=Math.LOG10E*fn(r),l=Math.LOG10E*fn(i);s.push(r);for(var f=1;f<n;f++)s.push(pn(10,c+f/n*(l-c)));s.push(i)}else if("q"===e.substr(0,1)){s.push(r);for(var p=1;p<n;p++){var d=(o.length-1)*p/n,h=dn(d);if(h===d)s.push(o[h]);else{var L=d-h;s.push(o[h]*(1-L)+o[h+1]*L)}}s.push(i)}else if("k"===e.substr(0,1)){var v,y=o.length,m=new Array(y),g=new Array(n),b=!0,_=0,w=null;(w=[]).push(r);for(var x=1;x<n;x++)w.push(r+x/n*(i-r));for(w.push(i);b;){for(var k=0;k<n;k++)g[k]=0;for(var O=0;O<y;O++)for(var E=o[O],S=Number.MAX_VALUE,M=void 0,C=0;C<n;C++){var A=hn(w[C]-E);A<S&&(S=A,M=C),g[M]++,m[O]=M}for(var j=new Array(n),P=0;P<n;P++)j[P]=null;for(var T=0;T<y;T++)v=m[T],null===j[v]?j[v]=o[T]:j[v]+=o[T];for(var D=0;D<n;D++)j[D]*=1/g[D];b=!1;for(var I=0;I<n;I++)if(j[I]!==w[I]){b=!0;break}w=j,++_>200&&(b=!1)}for(var R={},N=0;N<n;N++)R[N]=[];for(var H=0;H<y;H++)v=m[H],R[v].push(o[H]);for(var W=[],B=0;B<n;B++)W.push(R[B][0]),W.push(R[B][R[B].length-1]);W=W.sort(function(t,e){return t-e}),s.push(W[0]);for(var Z=1;Z<W.length;Z+=2){var F=W[Z];isNaN(F)||-1!==s.indexOf(F)||s.push(F)}}return s},yn={analyze:Ln,limits:vn},mn=Math.sqrt,gn=Math.atan2,bn=Math.abs,_n=Math.cos,wn=Math.PI,xn={cool:function(){return $e([L.hsl(180,1,.9),L.hsl(250,.7,.4)])},hot:function(){return $e(["#000","#f00","#ff0","#fff"]).mode("rgb")}},kn={OrRd:["#fff7ec","#fee8c8","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#b30000","#7f0000"],PuBu:["#fff7fb","#ece7f2","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#045a8d","#023858"],BuPu:["#f7fcfd","#e0ecf4","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#810f7c","#4d004b"],Oranges:["#fff5eb","#fee6ce","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#a63603","#7f2704"],BuGn:["#f7fcfd","#e5f5f9","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#006d2c","#00441b"],YlOrBr:["#ffffe5","#fff7bc","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#993404","#662506"],YlGn:["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#006837","#004529"],Reds:["#fff5f0","#fee0d2","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#a50f15","#67000d"],RdPu:["#fff7f3","#fde0dd","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177","#49006a"],Greens:["#f7fcf5","#e5f5e0","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#006d2c","#00441b"],YlGnBu:["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"],Purples:["#fcfbfd","#efedf5","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#54278f","#3f007d"],GnBu:["#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#0868ac","#084081"],Greys:["#ffffff","#f0f0f0","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525","#000000"],YlOrRd:["#ffffcc","#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#bd0026","#800026"],PuRd:["#f7f4f9","#e7e1ef","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#980043","#67001f"],Blues:["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"],PuBuGn:["#fff7fb","#ece2f0","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016c59","#014636"],Viridis:["#440154","#482777","#3f4a8a","#31678e","#26838f","#1f9d8a","#6cce5a","#b6de2b","#fee825"],Spectral:["#9e0142","#d53e4f","#f46d43","#fdae61","#fee08b","#ffffbf","#e6f598","#abdda4","#66c2a5","#3288bd","#5e4fa2"],RdYlGn:["#a50026","#d73027","#f46d43","#fdae61","#fee08b","#ffffbf","#d9ef8b","#a6d96a","#66bd63","#1a9850","#006837"],RdBu:["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#f7f7f7","#d1e5f0","#92c5de","#4393c3","#2166ac","#053061"],PiYG:["#8e0152","#c51b7d","#de77ae","#f1b6da","#fde0ef","#f7f7f7","#e6f5d0","#b8e186","#7fbc41","#4d9221","#276419"],PRGn:["#40004b","#762a83","#9970ab","#c2a5cf","#e7d4e8","#f7f7f7","#d9f0d3","#a6dba0","#5aae61","#1b7837","#00441b"],RdYlBu:["#a50026","#d73027","#f46d43","#fdae61","#fee090","#ffffbf","#e0f3f8","#abd9e9","#74add1","#4575b4","#313695"],BrBG:["#543005","#8c510a","#bf812d","#dfc27d","#f6e8c3","#f5f5f5","#c7eae5","#80cdc1","#35978f","#01665e","#003c30"],RdGy:["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#ffffff","#e0e0e0","#bababa","#878787","#4d4d4d","#1a1a1a"],PuOr:["#7f3b08","#b35806","#e08214","#fdb863","#fee0b6","#f7f7f7","#d8daeb","#b2abd2","#8073ac","#542788","#2d004b"],Set2:["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f","#e5c494","#b3b3b3"],Accent:["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f","#bf5b17","#666666"],Set1:["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628","#f781bf","#999999"],Set3:["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd","#ccebc5","#ffed6f"],Dark2:["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"],Paired:["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99","#b15928"],Pastel2:["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae","#f1e2cc","#cccccc"],Pastel1:["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd","#fddaec","#f2f2f2"]},On=0,En=Object.keys(kn);On<En.length;On+=1){var Sn=En[On];kn[Sn.toLowerCase()]=kn[Sn]}var Mn=kn;return L.average=function(t,e){void 0===e&&(e="lrgb");var n=t.length;if(t=t.map(function(t){return new d(t)}),"lrgb"===e)return Ye(t);for(var r=t.shift(),i=r.get(e),a=[],o=0,s=0,u=0;u<i.length;u++)if(i[u]=i[u]||0,a.push(isNaN(i[u])?0:1),"h"===e.charAt(u)&&!isNaN(i[u])){var c=i[u]/180*qe;o+=ze(c),s+=Ue(c)}var l=r.alpha();t.forEach(function(t){var n=t.get(e);l+=t.alpha();for(var r=0;r<i.length;r++)if(!isNaN(n[r]))if(a[r]++,"h"===e.charAt(r)){var u=n[r]/180*qe;o+=ze(u),s+=Ue(u)}else i[r]+=n[r]});for(var f=0;f<i.length;f++)if("h"===e.charAt(f)){for(var p=Ve(s/a[f],o/a[f])/qe*180;p<0;)p+=360;for(;p>=360;)p-=360;i[f]=p}else i[f]=i[f]/a[f];return l/=n,new d(i,e).alpha(l>.99999?1:l,!0)},L.bezier=function(t){var e=Ke(t);return e.scale=function(){return $e(e)},e},L.blend=en,L.cubehelix=function(t,e,n,r,i){void 0===t&&(t=300),void 0===e&&(e=-1.5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===i&&(i=[0,1]);var a,o=0;"array"===nn(i)?a=i[1]-i[0]:(a=0,i=[i,i]);var s=function(s){var u=an*((t+120)/360+e*s),c=on(i[0]+a*s,r),l=0!==o?n[0]+s*o:n,f=l*c*(1-c)/2,p=un(u),d=sn(u),h=c+f*(-.14861*p+1.78277*d),v=c+f*(-.29227*p-.90649*d),y=c+f*(1.97294*p);return L(rn([255*h,255*v,255*y,1]))};return s.start=function(e){return null==e?t:(t=e,s)},s.rotations=function(t){return null==t?e:(e=t,s)},s.gamma=function(t){return null==t?r:(r=t,s)},s.hue=function(t){return null==t?n:("array"===nn(n=t)?0==(o=n[1]-n[0])&&(n=n[1]):o=0,s)},s.lightness=function(t){return null==t?i:("array"===nn(t)?(i=t,a=t[1]-t[0]):(i=[t,t],a=0),s)},s.scale=function(){return L.scale(s)},s.hue(n),s},L.mix=L.interpolate=De,L.random=function(){for(var t="#",e=0;e<6;e++)t+="0123456789abcdef".charAt(cn(16*ln()));return new d(t,"hex")},L.scale=$e,L.analyze=yn.analyze,L.contrast=function(t,e){t=new d(t),e=new d(e);var n=t.luminance(),r=e.luminance();return n>r?(n+.05)/(r+.05):(r+.05)/(n+.05)},L.deltaE=function(t,e,n,r){void 0===n&&(n=1),void 0===r&&(r=1),t=new d(t),e=new d(e);for(var i=Array.from(t.lab()),a=i[0],o=i[1],s=i[2],u=Array.from(e.lab()),c=u[0],l=u[1],f=u[2],p=mn(o*o+s*s),h=mn(l*l+f*f),L=a<16?.511:.040975*a/(1+.01765*a),v=.0638*p/(1+.0131*p)+.638,y=p<1e-6?0:180*gn(s,o)/wn;y<0;)y+=360;for(;y>=360;)y-=360;var m=y>=164&&y<=345?.56+bn(.2*_n(wn*(y+168)/180)):.36+bn(.4*_n(wn*(y+35)/180)),g=p*p*p*p,b=mn(g/(g+1900)),_=v*(b*m+1-b),w=p-h,x=o-l,k=s-f,O=(a-c)/(n*L),E=w/(r*v);return mn(O*O+E*E+(x*x+k*k-w*w)/(_*_))},L.distance=function(t,e,n){void 0===n&&(n="lab"),t=new d(t),e=new d(e);var r=t.get(n),i=e.get(n),a=0;for(var o in r){var s=(r[o]||0)-(i[o]||0);a+=s*s}return Math.sqrt(a)},L.limits=yn.limits,L.valid=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];try{return new(Function.prototype.bind.apply(d,[null].concat(t))),!0}catch(t){return!1}},L.scales=xn,L.colors=W,L.brewer=Mn,L}()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=f(n(0)),a=f(n(27)),o=n(28),s=f(o),u=n(2),c=f(n(4)),l=f(n(1));function f(t){return t&&t.__esModule?t:{default:t}}var p=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),r(e,[{key:"prerender",value:function(){var t=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.bars=[],this.labels=[],this.barContainers=[],this.pushBars(this.data.primary),this.addChildren([].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(this.bars),[this.createComponent(o.Axis,"div.axis-"+this.data.primary,{renderToSelector:".js-bar-view-"+this.data.primary,data:{styles:a.default,primary:this.data.primary}})])),this.prerendered&&!this.rerender?t:(t.classList.add(a.default.barView,"js-bar-view","js-bar-view-"+this.data.primary),t.appendChild(this.returnTitle(this.data.primary)),t)}},{key:"returnTitle",value:function(t){var e=document.createElement("h2");return e.textContent=this.model.fields.find(function(e){return e.key===t}).text,e.classList.add("section-title"),e}},{key:"pushBars",value:function(t){var e=this;this.model.nestBy[t].forEach(function(n){e.bars.push(e.createComponent(s.default,"div.bar-"+e.app.cleanKey(n.key),{data:{d:n,primary:t},renderToSelector:".js-bar-view-"+t,primary:t}))})}},{key:"init",value:function(){l.default.setSubs([["hoverPrimaryGroup",this.highlightBar.bind(this)],["unHoverPrimaryGroup",this.highlightBar.bind(this)],["view",this.showBarView.bind(this)]]);var t=document.querySelectorAll(".js-innerWrapper-"+this.data.primary);(0,c.default)(t,{followCursor:!0}),t.forEach(function(t){t.addEventListener("click",function(t){t.stopPropagation(),u.stateModule.setState("selectPrimaryGroup.map",this.dataset.key)}),t.addEventListener("mouseenter",function(){u.stateModule.setState("hoverPrimaryGroup",this.dataset.key,{forceChange:!0})}),t.addEventListener("mouseleave",function(){u.stateModule.setState("unHoverPrimaryGroup",this.dataset.key,{forceChange:!0})})})}},{key:"showBarView",value:function(t,e){e===this.data.primary?this.el.classList.add(a.default.active):this.el.classList.remove(a.default.active)}},{key:"highlightBar",value:function(t,e){if(this.data.primary===u.stateModule.getState("view")){var n=".bar-"+this.app.cleanKey(e)+" .js-innerWrapper",r=document.querySelector(n);"hoverPrimaryGroup"===t?r.classList.add("hover"):r.classList.remove("hover")}}}]),e}();e.default=p},function(t,e,n){t.exports={barView:"src-views-bar-view--barView",active:"src-views-bar-view--active"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Axis=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},a=s(n(29)),o=s(n(0));function s(t){return t&&t.__esModule?t:{default:t}}function u(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function f(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var p=function(t){function e(){return c(this,e),l(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return f(e,o.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.prerendered&&!this.rerender)return t;t.classList.add(a.default.barContainer);var n=document.createElement("p");n.classList.add(a.default.label,"js-bar-label");var r=document.createElement("span"),o=this.data.d.key||"Not specified";o=this.model.abbreviations[o]||o,r.textContent=o,n.appendChild(r),this.parent.labels.push(n);var s=document.createElement("div");s.classList.add(a.default.innerWrapper,"js-innerWrapper","js-innerWrapper-"+this.data.primary),s.dataset.tippyContent="<strong>"+this.data.d.values.length+" HIA"+(this.data.d.values.length>1?"s":"")+"</strong><br />Click for details",s.dataset.key=this.data.d.key;var u=document.createElement("div");u.classList.add(a.default.bar),u.style.transform="scaleX("+this.linearScale()+")";var c=document.createElement("div");return c.classList.add(a.default.placeholder),s.appendChild(u),t.appendChild(n),t.appendChild(s),t.appendChild(c),t}},{key:"linearScale",value:function(){var t=Math.max.apply(Math,u(this.model.nestBy[this.data.primary].map(function(t){return t.values.length})));return this.data.d.values.length/t}},{key:"init",value:function(){}},{key:"update",value:function(){}}]),e}();e.default=p;e.Axis=function(t){function e(){return c(this,e),l(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return f(e,o.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.prerendered&&!this.rerender)return t;t.classList.add(a.default.barContainer,a.default.axisContainer);var n=document.createElement("p");n.classList.add(a.default.label);var r=document.createElement("div");r.classList.add(a.default.innerWrapper);var o=document.createElement("div");o.classList.add(a.default.bar,a.default.axisLine);var s=document.createElement("div");s.classList.add(a.default.placeholder);var u=document.createElement("div");u.classList.add(a.default.minMarker),u.textContent="0";var c=document.createElement("div");return c.classList.add(a.default.maxMarker),c.textContent=this.returnMax(),r.appendChild(o),r.appendChild(u),r.appendChild(c),t.appendChild(n),t.appendChild(r),t.appendChild(s),t}},{key:"returnMax",value:function(){return Math.max.apply(Math,u(this.model.nestBy[this.data.primary].map(function(t){return t.values.length})))}},{key:"update",value:function(){}}]),e}()},function(t,e,n){t.exports={barContainer:"src-components-bar--barContainer",label:"src-components-bar--label",innerWrapper:"src-components-bar--innerWrapper",axisContainer:"src-components-bar--axisContainer",bar:"src-components-bar--bar",placeholder:"src-components-bar--placeholder",axisLine:"src-components-bar--axisLine",minMarker:"src-components-bar--minMarker",maxMarker:"src-components-bar--maxMarker"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=l(n(0)),a=l(n(31)),o=l(n(32)),s=l(n(36)),u=l(n(38)),c=l(n(1));function l(t){return t&&t.__esModule?t:{default:t}}var f=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),r(e,[{key:"prerender",value:function(){var t=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.dropdownData=this.setDropdownData("stateOrTerritory"),this.name="WaffleView",this.dropdown=this.createComponent(o.default,"div#dropdown",{renderToSelector:".js-dropdown-inner",data:{label:"Select secondary dimension",data:this.dropdownData.data,type:"selectSecondaryDimension"}}),this.addChildren([this.dropdown,this.createComponent(s.default,"div#waffle",{renderToSelector:".js-waffle-container",data:{primary:"stateOrTerritory"}}),this.createComponent(u.default,"div#legend",{renderToSelector:".js-legend-container",data:{primary:"stateOrTerritory"}})]),this.prerendered&&!this.rerender)return t;t.classList.add(a.default.waffleView),t.appendChild(this.returnHeading("stateOrTerritory")),t.appendChild(this.returnDropdownWrapper("stateOrTerritory"));var n=document.createElement("div");n.classList.add("js-waffle-container");var r=document.createElement("div");r.classList.add("js-legend-container"),n.appendChild(r),t.appendChild(n);var i=document.createElement("p");return i.classList.add(a.default.note),i.textContent="Please note that a single HIA may appear in multiple categories.",t.appendChild(i),t}},{key:"returnHeading",value:function(t){var e=this.model.fields.find(function(e){return e.key===t}).instruct,n=document.createElement("h2");return n.textContent=e,n.classList.add(a.default.instructHeading,"js-instruct-heading"),n}},{key:"returnDropdownWrapper",value:function(){var t=document.createElement("div");t.classList.add(a.default.dropdownWrapper,a.default.hide);var e=document.createElement("div"),n=document.createElement("div"),r=document.createElement("label");return this.children[0].el.querySelector(".js-input-div").id="label-dropdown-"+this.dropdownData.type+"-value",this.children[0].el.setAttribute("aria-labelledby","label-dropdown-"+this.dropdownData.type+" label-dropdown-"+this.dropdownData.type+"-value"),this.children[0].el.querySelector("ul").setAttribute("aria-controls","TODODODODO"),n.classList.add(a.default.dropdownOuter),r.innerText=this.dropdownData.label,r.setAttribute("id","label-dropdown-"+this.dropdownData.type),e.classList.add("js-dropdown-inner",a.default.dropdownInner),n.appendChild(r),n.appendChild(e),t.appendChild(n),t}},{key:"setDropdownData",value:function(t){var e=this;return{label:"Secondary dimension:",data:this.model.fields.find(function(e){return e.key===t}).secondaryDimensions.map(function(t,n){var r=e.model.fields.find(function(e){return e.key===t});return{field:r.key,label:r.heading,isDefaultSelection:0===n}}),type:"selectSecondaryDimension"}}},{key:"init",value:function(){c.default.setSubs([["selectPrimaryGroup",this.toggleHeading.bind(this)],["selectPrimaryGroup",this.toggleDropdown.bind(this)],["selectPrimaryGroup",this.scrollIfNecessary.bind(this)],["view",this.update.bind(this)]])}},{key:"update",value:function(t,e){document.querySelector(".js-instruct-heading").textContent=this.returnHeading(e).textContent,this.dropdownData=this.setDropdownData(e),document.querySelector("."+a.default.dropdownWrapper).innerHTML=this.returnDropdownWrapper(e).innerHTML,this.dropdown=this.createComponent(o.default,"div#dropdown",{renderToSelector:".js-dropdown-inner",data:{label:"Select secondary dimension",data:this.dropdownData.data,type:"selectSecondaryDimension"}}),this.dropdown.init()}},{key:"scrollIfNecessary",value:function(t){var e=t.split(".");e.length>1&&"map"===e[1]&&this.scrollPageIfNecessary()}},{key:"scrollPageIfNecessary",value:function(){var t=document.querySelector(".js-show-details").getBoundingClientRect(),e=t.top-105;t.top>window.innerHeight-100?this.smoothScroll("#pew-app",e).then(this.scrollWaffleIfNecessary()):this.scrollWaffleIfNecessary()}},{key:"scrollWaffleIfNecessary",value:function(){var t=document.querySelector(".js-show-details").offsetTop-document.querySelector(".js-waffle-container-inner").offsetTop;this.smoothScroll(".js-waffle-container-inner",t)}},{key:"smoothScroll",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:200;return Math.easeInOutQuad=function(t,e,n,r){return(t/=r/2)<1?n/2*t*t+e:-n/2*(--t*(t-2)-1)+e},new Promise(function(r){var i=document.querySelector(t),a=i.scrollTop,o=e-a,s=0;!function t(){s+=20;var e=Math.easeInOutQuad(s,a,o,n);i.scrollTop=e,s<n?setTimeout(t,20):setTimeout(function(){r(!0)},20)}()})}},{key:"toggleHeading",value:function(t,e){var n=document.querySelector("."+a.default.instructHeading);e?n.classList.add(a.default.hide):n.classList.remove(a.default.hide)}},{key:"toggleDropdown",value:function(t,e){var n=document.querySelector("."+a.default.dropdownWrapper);e?n.classList.remove(a.default.hide):n.classList.add(a.default.hide)}},{key:"clickHandler",value:function(){}}]),e}();e.default=f},function(t,e,n){t.exports={waffleView:"src-views-waffle-view--waffleView",instructHeading:"src-views-waffle-view--instructHeading",hide:"src-views-waffle-view--hide",dropdownWrapper:"src-views-waffle-view--dropdownWrapper",dropdownOuter:"src-views-waffle-view--dropdownOuter",dropdownInner:"src-views-waffle-view--dropdownInner",label:"src-views-waffle-view--label",sortActive:"src-views-waffle-view--sortActive",note:"src-views-waffle-view--note"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},o=n(33),s=(r=o)&&r.__esModule?r:{default:r},u=n(34),c=n(2);var l=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=[],i=n.data.type;n.data.data.forEach(function(t){r.push({value:t.field,name:t.label,selected:!!t.isDefaultSelection})}),n.data=r.sort(function(t,e){return t.name<e.name?-1:t.name>e.name?1:t.name>=e.name?0:NaN});var a=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments));return a.dropdownType=i,a}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,u.Dropdown),i(e,[{key:"prerender",value:function(){var t=a(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.prerendered&&!this.rerender?t:(t.classList.add(s.default.dropdown,"js-dropdown"),t)}},{key:"onChange",value:function(){c.stateModule.setState(this.dropdownType,this.selectedOption.dataset.value)}},{key:"init",value:function(){a(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this)}}]),e}();e.default=l},function(t,e,n){},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Dropdown=e.TextInput=void 0;var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},a=n(3),o=u(n(0)),s=u(n(35));function u(t){return t&&t.__esModule?t:{default:t}}function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function f(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}e.TextInput=function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"input",n=arguments[1];return c(this,e),l(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n))}return f(e,o.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.prerendered?t:(t.setAttribute("type","text"),t)}},{key:"init",value:function(){}}]),e}(),e.Dropdown=function(t){function e(t,n){c(this,e);var r,i,a=t.split(".")[0].split("#")[0];"div"!==a&&(t.split(".").length>1&&(r=t.split(".")[0].split("#")[0]),t.split("#").length>1&&(i=t.split("#")[0].split(".")[0]),t=(a="div")+(void 0!==i?"#"+i:"")+(void 0!==r?"."+r:""));var o=l(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return o.options=o.el.querySelector("ul"),o.body=document.querySelector("body"),o._isOpen=!1,o}return f(e,o.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.prerendered)return t;t.setAttribute("aria-haspopup","listbox"),t.setAttribute("aria-expanded","false"),t.setAttribute("role","button");var n=a.DOMHelpers.c("div.js-input-div"),r=a.DOMHelpers.c("ul");return r.setAttribute("aria-role","listbox"),this.data.forEach(function(t){var e=a.DOMHelpers.c("li");e.setAttribute("data-value",t.value),e.setAttribute("aria-role","option"),e.innerHTML=t.name,e.id="dropdown-item-"+t.value,t.selected&&(e.setAttribute("aria-selected","true"),e.classList.add("selected"),n.textContent=t.name,r.setAttribute("aria-activedescendant",e.id)),r.appendChild(e)}),t.appendChild(n),t.appendChild(r),t.classList.add(s.default.PCTDropdown),t.setAttribute("tabindex","0"),t}},{key:"init",value:function(){var t=this;this.input=this.el.querySelector(".js-input-div"),this.el.querySelectorAll("li").forEach(function(e){e.addEventListener("click",function(n){n.stopPropagation(),t.itemClickHandler(e)})}),this._selectedOption=this.el.querySelector("li.selected"),this.toBeSelected=this.el.querySelector("li.selected"),this.el.addEventListener("click",this.clickHandler.bind(this)),this.el.addEventListener("keydown",function(e){if(9!==e.keyCode)return[32,38,40].indexOf(e.keyCode)>-1?(e.preventDefault(),void t.spaceAndArrowHandler.call(t,e)):void([13,27].indexOf(e.keyCode>-1)&&t.isOpen&&t.enterAndEscapeHandler.call(t,e));t.tabHandler.call(t,e)})}},{key:"itemClickHandler",value:function(t){this.toBeSelected.classList.remove("selected"),this.toBeSelected.removeAttribute("aria-selected"),this.toBeSelected=t,this.toBeSelected.classList.add("selected"),this.toBeSelected.setAttribute("aria-selected","true"),this.options.setAttribute("aria-activedescendant",t.id),this.selectedOption=this.toBeSelected}},{key:"enterAndEscapeHandler",value:function(t){27===t.keyCode?(this.toBeSelected.classList.remove("selected"),this.selectedOption.classList.add("selected"),this.toBeSelected=this.selectedOption,this.isOpen=!1):this.selectedOption=this.toBeSelected}},{key:"spaceAndArrowHandler",value:function(t){if(32!==t.keyCode)if(this.isOpen){var e=38===t.keyCode?this.toBeSelected.previousElementSibling:this.toBeSelected.nextElementSibling;e&&(this.toBeSelected.classList.remove("selected"),this.toBeSelected=e,this.toBeSelected.classList.add("selected"))}else this.isOpen=!0;else this.isOpen||(this.isOpen=!0)}},{key:"tabHandler",value:function(t){this.isOpen&&t.preventDefault()}},{key:"clickHandler",value:function(t){!this.isOpen&&this.body.UIControlIsOpen||(t.stopPropagation(),this.isOpen=!this.isOpen)}},{key:"isOpen",set:function(t){function e(){this.isOpen=!1}this._isOpen=t,t?(this.el.classList.add(s.default.isOpen),this.el.setAttribute("aria-expanded",!0),this.body.UIControlIsOpen=!0,this.body.addEventListener("click",e.bind(this))):(this.el.classList.remove(s.default.isOpen),this.el.setAttribute("aria-expanded",!1),this.body.UIControlIsOpen=!1,this.body.removeEventListener("click",e.bind(this)))},get:function(){return this._isOpen}},{key:"selectedOption",set:function(t){this._selectedOption=t,this.isOpen=!1,this.input.textContent=this._selectedOption.innerText,this.onChange&&this.onChange()},get:function(){return this._selectedOption}}]),e}()},function(t,e,n){t.exports={PCTDropdown:"submodules-UI-js-inputs--PCTDropdown",isOpen:"submodules-UI-js-inputs--isOpen"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=c(n(0)),a=c(n(37)),o=n(2),s=c(n(1)),u=c(n(4));function c(t){return t&&t.__esModule?t:{default:t}}var l=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),r(e,[{key:"prerender",value:function(){var t=this,n=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.name="Waffle",this.nestedData=this.model.nestBy[this.data.primary],this.secondary=this.model.fields.find(function(e){return e.key===t.data.primary}).secondaryDimensions[0],this.prerendered&&!this.rerender)return n;var r=document.createElement("button");r.classList.add(a.default.showAllDetails),r.textContent=this.updateShowAllDetails(this.data.primary),n.appendChild(r);var i=document.createElement("div");return i.classList.add(a.default.waffleContainer,"js-waffle-container-inner"),this.render().forEach(function(t){i.appendChild(t)}),n.appendChild(i),n}},{key:"render",value:function(){var t=this,e=[];function n(t){var e=this,n=this.model.fields.find(function(t){return t.key===e.secondary});return n.order?""!==t[this.secondary][0]?-n.order.indexOf(t[this.secondary][0]):-9999:this.model.nestBy[this.secondary].find(function(n){return n.key===t[e.secondary][0]}).values.length}return this.nestedData.forEach(function(r){var i=document.createElement("div");i.dataset.group=r.key,i.dataset.count=r.values.length,i.classList.add(a.default.groupDiv,"js-group-"+t.app.cleanKey(r.key)),i.insertAdjacentHTML("afterbegin",'<h2 class="'+a.default.groupDivHeading+'">'+(""!==r.key?r.key:"[blank]")+' &ndash; <span class="'+a.default.itemCount+'">'+r.values.length+"</span></h2>");var o=document.createElement("div");o.classList.add(a.default.itemsContainer),o.style.width=28*Math.ceil(Math.sqrt(r.values.length))+"px",r.values.sort(function(e,r){return n.call(t,r)-n.call(t,e)}),r.values.forEach(function(e){var n=document.createElement("div"),r=t.app.cleanKey(e[t.secondary]),i=t.model.nestBy[t.secondary],s="string"==typeof e[t.secondary]?e[t.secondary]:e[t.secondary][0],u=i.findIndex(function(t){return t.key===s});n.classList.add(a.default.item),n.classList.add(r,a.default[t.app.cleanKey(e.status)],"secondary-"+u),n.dataset.title=e.title,n.dataset.id=e.id,o.appendChild(n)}),i.appendChild(o),e.push(i)}),e}},{key:"updateSecondary",value:function(t,e){var n=document.querySelector("."+a.default.showDetails),r=n?n.dataset.group:null,i=document.querySelector(".js-waffle-container-inner");i.innerHTML="",this.secondary=e,this.render().forEach(function(t){i.appendChild(t)}),r&&document.querySelector(".js-group-"+this.app.cleanKey(r)).classList.add(a.default.showDetails),this.initGroupsAndItems()}},{key:"updatePrimary",value:function(t,e){this.nestedData=this.model.nestBy[e],this.secondary=this.model.fields.find(function(t){return t.key===e}).secondaryDimensions[0];var n=document.querySelector(".js-waffle-container-inner");n.innerHTML="",this.render().forEach(function(t){n.appendChild(t)}),this.initGroupsAndItems()}},{key:"init",value:function(){this.showAllDetails=document.querySelector("."+a.default.showAllDetails),s.default.setSubs([["hoverPrimaryGroup",this.highlightGroup.bind(this)],["unHoverPrimaryGroup",this.highlightGroup.bind(this)],["selectPrimaryGroup",this.showGroupDetails.bind(this)],["showAllDetails",this.toggleShowAll.bind(this)],["selectSecondaryDimension",this.updateSecondary.bind(this)],["view",this.updatePrimary.bind(this)]]),document.querySelector("."+a.default.showAllDetails).addEventListener("click",function(t){t.stopPropagation(),"true"===this.dataset.isOn?(o.stateModule.setState("showAllDetails",!1),this.innerText=this.innerText.replace("Hide","Show"),this.dataset.isOn=!1):(o.stateModule.setState("showAllDetails",!0),this.innerText=this.innerText.replace("Show","Hide"),this.dataset.isOn=!0)}),this.initGroupsAndItems()}},{key:"initGroupsAndItems",value:function(){var t=this;function e(){(this.parentElement.parentElement.classList.contains(a.default.showDetails)||this.parentElement.parentElement.parentElement.classList.contains(a.default.showAll))&&o.stateModule.setState("selectHIA",+this.dataset.id)}function n(){(this.parentElement.parentElement.classList.contains(a.default.showDetails)||this.parentElement.parentElement.parentElement.classList.contains(a.default.showAll))&&this._tippy.show()}function r(){this._tippy.hide()}function i(){this.classList.contains(a.default.showDetails)||this.parentElement.classList.contains(a.default.showAll)||this._tippy.show(),o.stateModule.setState("hoverPrimaryGroup",this.dataset.group,{forceChange:!0})}function s(){this.classList.contains(a.default.showDetails)||this.parentElement.classList.contains(a.default.showAllDetails)||this._tippy.hide(),o.stateModule.setState("unHoverPrimaryGroup",this.dataset.group,{forceChange:!0})}document.querySelectorAll("."+a.default.groupDiv).forEach(function(e){t.setTippys(e),e.addEventListener("mouseenter",i),e.addEventListener("mouseleave",s),e.addEventListener("click",t.clickHandler)}),document.querySelectorAll("."+a.default.item).forEach(function(i){t.setItemTippy(i),i.addEventListener("mouseenter",n),i.addEventListener("mouseleave",r),i.addEventListener("click",e)})}},{key:"toggleShowAll",value:function(t,e){e?document.querySelector("."+a.default.waffleContainer).classList.add(a.default.showAll):document.querySelector("."+a.default.waffleContainer).classList.remove(a.default.showAll)}},{key:"updateShowAllDetails",value:function(t){return"Show details for all "+this.model.fields.find(function(e){return e.key===t}).heading.toLowerCase()}},{key:"showGroupDetails",value:function(t,e){var n=document.querySelector("."+a.default.showDetails);n&&n.classList.remove(a.default.showDetails,"js-show-details");var r="."+a.default.groupDiv+'[data-group="'+e+'"',i=document.querySelector(r);i&&i.classList.add(a.default.showDetails,"js-show-details"),e?document.querySelector("."+a.default.showAllDetails).classList.add(a.default.isVisible):document.querySelector("."+a.default.showAllDetails).classList.remove(a.default.isVisible)}},{key:"setTippys",value:function(t){(0,u.default)(t,{content:"<strong>"+t.dataset.count+" HIA"+(+t.dataset.count>1?"s":"")+"</strong><br />Click for details",trigger:"manual",offset:"0, -100"})}},{key:"setItemTippy",value:function(t){(0,u.default)(t,{content:"<strong>"+t.dataset.title+"</strong><br />Click for details",trigger:"manual"})}},{key:"highlightGroup",value:function(t,e){var n="."+a.default.groupDiv+'[data-group="'+e+'"',r=document.querySelector(n);r&&("hoverPrimaryGroup"===t&&r.classList.add(a.default.isHighlighted),"unHoverPrimaryGroup"===t&&r.classList.remove(a.default.isHighlighted))}},{key:"clickHandler",value:function(t){t.stopPropagation(),o.stateModule.setState("selectPrimaryGroup",this.dataset.group)}}]),e}();e.default=l},function(t,e,n){t.exports={waffleContainer:"src-components-waffle--waffleContainer",groupDiv:"src-components-waffle--groupDiv",isHighlighted:"src-components-waffle--isHighlighted",groupDivHeading:"src-components-waffle--groupDivHeading",itemsContainer:"src-components-waffle--itemsContainer",legendItem:"src-components-waffle--legendItem",item:"src-components-waffle--item",completed:"src-components-waffle--completed",showAll:"src-components-waffle--showAll",showDetails:"src-components-waffle--showDetails",showAllDetails:"src-components-waffle--showAllDetails",isVisible:"src-components-waffle--isVisible"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=s(n(0)),a=s(n(39)),o=s(n(1));function s(t){return t&&t.__esModule?t:{default:t}}var u=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),r(e,[{key:"prerender",value:function(){var t=this,n=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.name="Legend",this.prerendered&&!this.rerender?n:(n.classList.add(a.default.legend,"js-legend"),this.returnUpdatedItems(this.model.fields.find(function(e){return e.key===t.data.primary}).secondaryDimensions[0]).forEach(function(t){n.appendChild(t)}),n)}},{key:"init",value:function(){o.default.setSubs([["selectPrimaryGroup",this.toggleLegend.bind(this)],["selectSecondaryDimension",this.update.bind(this)],["view",this.update.bind(this)]])}},{key:"returnUpdatedItems",value:function(t){var e=this,n=[],r=document.createElement("div");r.classList.add(a.default.legendLabel),r.textContent=this.model.fields.find(function(e){return e.key===t}).heading+": ",n.push(r),this.model.nestBy[t].forEach(function(t,r){var i=document.createElement("div");i.classList.add(a.default.legendGroup);var o=document.createElement("div");o.classList.add(a.default.legendItem,e.app.cleanKey(t.key),"secondary-"+r);var s=document.createElement("span");s.textContent=t.key||"Not specified",i.appendChild(o),i.appendChild(s),n.push(i)});var i=document.createElement("div");return i.classList.add(a.default.boolItem),i.textContent="= In progress",n.push(i),n}},{key:"update",value:function(t,e){var n=this;this.el.innerHTML="","view"===t&&(e=this.model.fields.find(function(t){return t.key===e}).secondaryDimensions[0]),this.returnUpdatedItems(e).forEach(function(t){n.el.appendChild(t)})}},{key:"toggleLegend",value:function(t,e){e?this.el.classList.add(a.default.showLegend):this.el.classList.remove(a.default.showLegend)}}]),e}();e.default=u},function(t,e,n){t.exports={legend:"src-components-legend--legend",showLegend:"src-components-legend--showLegend",legendGroup:"src-components-legend--legendGroup",legendItem:"src-components-legend--legendItem",legendLabel:"src-components-legend--legendLabel",boolItem:"src-components-legend--boolItem"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0},a=c(n(0)),o=c(n(41)),s=n(2),u=c(n(1));function c(t){return t&&t.__esModule?t:{default:t}}function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function f(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function p(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var d=function(t){function e(){return l(this,e),f(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return p(e,a.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.name="DetailsView",this.addChildren([this.createComponent(h,"button#close-button")]),this.prerendered&&!this.rerender)return t;t.classList.add(o.default.detailsView);var n=document.createElement("div");return n.classList.add(o.default.container,"js-details-container"),t.appendChild(n),t}},{key:"init",value:function(){u.default.setSubs([["selectHIA",this.showDetailsHandler.bind(this)],["selectHIA",this.update.bind(this)]]),this.el.addEventListener("click",this.clickHandler),this.app.worker.onmessage=function(t){console.log(t),document.getElementById("hia-title-link").setAttribute("href",t.data[0]),document.getElementById("hia-language").textContent=t.data[1]}}},{key:"showDetailsHandler",value:function(t,e){this.isOpen=!!e}},{key:"clickHandler",value:function(t){t.stopPropagation()}},{key:"update",value:function(t,e){if(e){var n=this.model.data.find(function(t){return t.id===e}),r=isNaN(parseInt(n.publicationDate))?n.publicationDate:parseInt(n.publicationDate),i='<h2 class="'+o.default.detailsHeading+'"><a target="_blank" id="hia-title-link">'+n.title+"</a></h2>\n                        <p><b>Date:</b> "+r+"</p>\n                        <p>"+n.description+'</p>\n                        <div class="'+o.default.columnsWrapper+'">\n                            \n                                <p><b>Source:</b> '+n.authorOrSource+"</p>\n                                <p><b>Location:</b> "+n.stateOrTerritory+"</p>\n                            \n                            \n                                <p><b>Status:</b> "+n.status+'</p>\n                                <p><b>Language:</b> <span id="hia-language"></span></p>\n                            \n                        </div>\n\n\n        ';document.querySelector(".js-details-container").innerHTML=i,this.app.worker.postMessage(n.title)}}},{key:"isOpen",get:function(){return this._isOpen},set:function(t){this._isOpen=t,t?this.el.classList.add(o.default.isOpen):this.el.classList.remove(o.default.isOpen)}}]),e}();e.default=d;var h=function(t){function e(){return l(this,e),f(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return p(e,a.default),r(e,[{key:"prerender",value:function(){var t=i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.name="CloseButton",this.prerendered&&!this.rerender?t:(t.classList.add(o.default.closeButton),t)}},{key:"init",value:function(){this.el.addEventListener("click",this.clickHandler,!0)}},{key:"clickHandler",value:function(t){t.stopPropagation(),s.stateModule.setState("selectHIA",null)}}]),e}()},function(t,e,n){t.exports={detailsView:"src-views-details-view--detailsView",isOpen:"src-views-details-view--isOpen",columnsWrapper:"src-views-details-view--columnsWrapper",container:"src-views-details-view--container",closeButton:"src-views-details-view--closeButton",detailsHeading:"src-views-details-view--detailsHeading"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=s(n(0)),a=s(n(43)),o=s(n(1));function s(t){return t&&t.__esModule?t:{default:t}}var u=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default),r(e,[{key:"prerender",value:function(){var t=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in i)return i.value;var o=i.get;return void 0!==o?o.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.name="Mask",this.prerendered&&!this.rerender?t:(t.classList.add(a.default.mask),t)}},{key:"init",value:function(){o.default.setSubs([["selectHIA",this.activate.bind(this)]]),this.el.addEventListener("click",this.clickHandler)}},{key:"activate",value:function(t,e){e?this.el.classList.add(a.default.isActivated):this.el.classList.remove(a.default.isActivated)}},{key:"clickHandler",value:function(t){t.stopPropagation()}}]),e}();e.default=u},function(t,e,n){t.exports={mask:"src-views-mask-view--mask",isActivated:"src-views-mask-view--isActivated"}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=n(45),s=(r=o)&&r.__esModule?r:{default:r};var u=function(){function t(e,n){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.selector=e,this.el=document.querySelector(e),this.views=[],Object.keys(n).forEach(function(t){r[t]=n[t]})}return a(t,[{key:"init",value:function(t){this.needsRouter&&(this.router=new s.default,this.router.init(t)),this.disableHoverOnTouch()}},{key:"disableHoverOnTouch",value:function(){var t=!1,e=document.body,n=0;function r(){new Date-n<500||t||(e.classList.add("has-hover"),t=!0)}document.addEventListener("touchstart",function(){n=new Date},!0),document.addEventListener("touchstart",function(){t&&(e.classList.remove("has-hover"),t=!1)},!0),document.addEventListener("mousemove",r,!0),r()}},{key:"createComponent",value:function(t,e,n){var r=Object.create({app:this.app?this.app:this,children:[],data:null,model:this.model,parent:this,rerenderOnDataMismatch:!1,createComponent:this.createComponent,renderToSelector:this.selector});if(null!==n&&"object"===(void 0===n?"undefined":i(n)))for(var a in n)n.hasOwnProperty(a)&&(r[a]=n[a]);return new t(e,r)}}]),t}();e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return i(t,[{key:"init",value:function(t){var e=this;if(void 0===t||"object"!==(void 0===t?"undefined":r(t)))throw"router.init method requires a config object as parameter 1";if("function"!=typeof t.encode||"function"!=typeof t.decode||!Array.isArray(t.views)||"object"!==r(t.PS))throw"routerOptions object needs encode, decode, views, and PS properties. encode and decode must be functions; views is an array of views from the app; PS needs to be the PubSub setter.";this.stateObj={},this.hashState=t.encode,this.decodeHash=t.decode,this.viewPromises=t.views.map(function(t){return t.isReady}),this.PS=t.PS,Promise.all(this.viewPromises).then(function(){e.decodeHash()}),this.PS.setSubs(t.subscriptions.map(function(t){return[t,function(t,n){e.hashChange.call(e,t,n)}]}))}},{key:"hashChange",value:function(t,e){this.setStateObj(t,e),this.hashState(),this.replaceState()}},{key:"setStateObj",value:function(t,e){this.stateObj[t]=e}},{key:"replaceState",value:function(){window.history.replaceState(this.stateObj,"",this.hashString)}}]),t}();e.default=a},function(t,e,n){},function(t,e,n){},function(t,e,n){"use strict";n.r(e);function r(){}function i(t,e){var n=new r;if(t instanceof r)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var i,a=-1,o=t.length;if(null==e)for(;++a<o;)n.set(a,t[a]);else for(;++a<o;)n.set(e(i=t[a],a,t),i)}else if(t)for(var s in t)n.set(s,t[s]);return n}r.prototype=i.prototype={constructor:r,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var a=i,o=function(){var t,e,n,r=[],i=[];function o(n,i,s,u){if(i>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var c,l,f,p=-1,d=n.length,h=r[i++],L=a(),v=s();++p<d;)(f=L.get(c=h(l=n[p])+""))?f.push(l):L.set(c,[l]);return L.each(function(t,e){u(v,e,o(t,i,s,u))}),v}return n={object:function(t){return o(t,0,s,u)},map:function(t){return o(t,0,c,l)},entries:function(t){return function t(n,a){if(++a>r.length)return n;var o,s=i[a-1];return null!=e&&a>=r.length?o=n.entries():(o=[],n.each(function(e,n){o.push({key:n,values:t(e,a)})})),null!=s?o.sort(function(t,e){return s(t.key,e.key)}):o}(o(t,0,c,l),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return i[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function s(){return{}}function u(t,e,n){t[e]=n}function c(){return a()}function l(t,e,n){t.set(e,n)}function f(){}var p=a.prototype;function d(t,e){var n=new f;if(t instanceof f)t.each(function(t){n.add(t)});else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}f.prototype=d.prototype={constructor:f,has:p.has,add:function(t){return this["$"+(t+="")]=t,this},remove:p.remove,clear:p.clear,values:p.keys,size:p.size,empty:p.empty,each:p.each};var h=d,L=function(t){var e=[];for(var n in t)e.push(n);return e},v=function(t){var e=[];for(var n in t)e.push(t[n]);return e},y=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e};n.d(e,"nest",function(){return o}),n.d(e,"set",function(){return h}),n.d(e,"map",function(){return a}),n.d(e,"keys",function(){return L}),n.d(e,"values",function(){return v}),n.d(e,"entries",function(){return y})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9VSS1qcy9lbGVtZW50L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wdWJzdWItc2V0dGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdGF0ZWZ1bC1kZWFkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3N1Ym1vZHVsZXMvVVRJTFMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpcHB5LmpzL2VzbS9pbmRleC5hbGwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wdWJzdWItanMvc3JjL3B1YnN1Yi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tZW51L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wb3BwZXIuanMvZGlzdC9lc20vcG9wcGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGlhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXBhcGFyc2UvcGFwYXBhcnNlLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2xvZGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvbWVudS12aWV3L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9tZW51LXZpZXcvc3R5bGVzLnNjc3M/ZDg0ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tZW51L3N0eWxlcy5zY3NzPzcxZmUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3NlY3Rpb24tdmlldy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc2VjdGlvbi12aWV3L3N0eWxlcy5zY3NzPzZlMzkiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL21hcC12aWV3L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9tYXAtdmlldy9tYXAuc3ZnIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9tYXAtdmlldy9zdHlsZXMuc2Nzcz8wMzc4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jaHJvbWEtanMvY2hyb21hLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9iYXItdmlldy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvYmFyLXZpZXcvc3R5bGVzLnNjc3M/ZmMzZiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9iYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmFyL3N0eWxlcy5zY3NzPzJjYWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3dhZmZsZS12aWV3L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy93YWZmbGUtdmlldy9zdHlsZXMuc2Nzcz83ZDEzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Ryb3Bkb3duL2luZGV4LmpzIiwid2VicGFjazovLy8uL3N1Ym1vZHVsZXMvVUktanMvaW5wdXRzL2lucHV0cy5qcyIsIndlYnBhY2s6Ly8vLi9zdWJtb2R1bGVzL1VJLWpzL2lucHV0cy9zdHlsZXMuc2Nzcz80YzY0Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dhZmZsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy93YWZmbGUvc3R5bGVzLnNjc3M/NzdmYiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9sZWdlbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbGVnZW5kL3N0eWxlcy5zY3NzP2Y5NTQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2RldGFpbHMtdmlldy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvZGV0YWlscy12aWV3L3N0eWxlcy5zY3NzP2M1OWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL21hc2stdmlldy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvbWFzay12aWV3L3N0eWxlcy5zY3NzPzE2YjYiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9QQ1RBcHAtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9ST1VUUi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9uZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfVXRpbHMiLCJFbGVtZW50Iiwic2VsZWN0b3IiLCJvcHRpb25zIiwiX3RoaXMiLCJ0aGlzIiwiX2NsYXNzQ2FsbENoZWNrIiwibW9kZWwiLCJwYXJlbnQiLCJhcHAiLCJyZW5kZXJUb1NlbGVjdG9yIiwiY29udGFpbmVyIiwiJGQiLCJxIiwiY2hpbGRyZW4iLCJyZXJlbmRlciIsInJlcmVuZGVyT25EYXRhTWlzbWF0Y2giLCJpc01pc21hdGNoZWQiLCJkYXRhIiwiY3JlYXRlQ29tcG9uZW50IiwiZWwiLCJwcmVyZW5kZXIiLCJhcmd1bWVudHMiLCJpc1JlYWR5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0aGVuIiwiZm9yRWFjaCIsImNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJwcmVyZW5kZXJlZCIsImNoaWxkcmVuQXJyYXkiLCJfY2hpbGRyZW4iLCJfYXBwJHZpZXdzIiwicHVzaCIsImFwcGx5IiwiX3RvQ29uc3VtYWJsZUFycmF5Iiwidmlld3MiLCJleGlzdGluZyIsImlubmVySFRNTCIsIlB1YlN1YiIsInN1YnNjcmlwdGlvbnMiLCJsb2dTdWJzIiwiY29uc29sZSIsImxvZyIsInNldFN1YnMiLCJzdWJzQXJyYXkiLCJwYWlyIiwidG9waWMiLCJmblJlZiIsInN1YnNjcmliZSIsImNhbmNlbFN1YiIsInRva2VuIiwiaW5kZXgiLCJpbmRleE9mIiwidW5zdWJzY3JpYmUiLCJzcGxpY2UiLCJzdGF0ZSIsIl9sb2dTdGF0ZSIsIkFycmF5IiwiY29tcGFyZSIsInRlc3RBcnIiLCJsZW5ndGgiLCJzdGF0ZU1vZHVsZSIsImxvZ1N0YXRlIiwiZ2V0U3RhdGUiLCJ1bmRlZmluZWQiLCJnZXRQcmV2aW91c1N0YXRlIiwic2V0U3RhdGUiLCJwdWJsaXNoIiwic3RhdGVDaGFuZ2VkIiwiaXNBcnJheSIsImZvcmNlQ2hhbmdlIiwidW5zaGlmdCIsIkdUTVB1c2giLCJldmVudExhYmVsIiwiZGF0YUxheWVyIiwid2luZG93IiwiZXZlbnQiLCJldmVudERhdGEiLCJwdWJsaXNoV2luZG93UmVzaXplIiwiUyIsInJlc2l6ZVRpbWVvdXQiLCJkZWxheSIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRUaW1lb3V0IiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIkZhZGVJblRleHQiLCJIVE1MRWxlbWVudCIsImZhZGVPdXRDb250ZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiZmFkZUluQ29udGVudCIsImNvbnRlbnQiLCJkdXJhdGlvblMiLCJzdHlsZSIsInRyYW5zaXRpb24iLCJkdXJhdGlvblN0ciIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZHVyYXRpb24iLCJwYXJzZUZsb2F0IiwicmVtb3ZlIiwiU3RyaW5nSGVscGVycyIsIlN0cmluZyIsImNsZWFuU3RyaW5nIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwicmVtb3ZlVW5kZXJzY29yZXMiLCJ1bmRvQ2FtZWxDYXNlIiwiZG9DYW1lbENhc2UiLCJ3b3JkIiwidG9VcHBlckNhc2UiLCJ0cnVuYyIsInVzZVdvcmRCb3VuZGFyeSIsInN1YlN0cmluZyIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwiaGFzaENvZGUiLCJoYXNoIiwiY2hhckNvZGVBdCIsIkRPTUhlbHBlcnMiLCJjbGFzc1N0cmluZ3MiLCJtYXRjaCIsImlkU3RyaW5nIiwiZWxTdHJpbmciLCJjcmVhdGVFbGVtZW50Iiwia2xhc3MiLCJzZXRBdHRyaWJ1dGUiLCJxdWVyeVNlbGVjdG9yIiwicWEiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsInBvcHBlcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJzb3VyY2UiLCJpc0Jyb3dzZXIiLCJ1YSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImlzSUUiLCJ0ZXN0IiwiaXNVQ0Jyb3dzZXIiLCJpc0lPUyIsInBsYXRmb3JtIiwiTVNTdHJlYW0iLCJkZWZhdWx0UHJvcHMiLCJhMTF5IiwiYWxsb3dIVE1MIiwiYW5pbWF0ZUZpbGwiLCJhbmltYXRpb24iLCJhcHBlbmRUbyIsImJvZHkiLCJhcmlhIiwiYXJyb3ciLCJhcnJvd1R5cGUiLCJib3VuZGFyeSIsImRpc3RhbmNlIiwiZmxpcCIsImZsaXBCZWhhdmlvciIsImZsaXBPblVwZGF0ZSIsImZvbGxvd0N1cnNvciIsImhpZGVPbkNsaWNrIiwiaWdub3JlQXR0cmlidXRlcyIsImluZXJ0aWEiLCJpbnRlcmFjdGl2ZSIsImludGVyYWN0aXZlQm9yZGVyIiwiaW50ZXJhY3RpdmVEZWJvdW5jZSIsImxhenkiLCJtYXhXaWR0aCIsIm11bHRpcGxlIiwib2Zmc2V0Iiwib25IaWRkZW4iLCJvbkhpZGUiLCJvbk1vdW50Iiwib25TaG93Iiwib25TaG93biIsIm9uVHJpZ2dlciIsInBsYWNlbWVudCIsInBvcHBlck9wdGlvbnMiLCJyb2xlIiwic2hvd09uSW5pdCIsInNpemUiLCJzdGlja3kiLCJ0aGVtZSIsInRvdWNoIiwidG91Y2hIb2xkIiwidHJpZ2dlciIsInRyaWdnZXJUYXJnZXQiLCJ1cGRhdGVEdXJhdGlvbiIsIndhaXQiLCJ6SW5kZXgiLCJQT1BQRVJfSU5TVEFOQ0VfREVQRU5ERU5DSUVTIiwiZWxlbWVudFByb3RvIiwibWF0Y2hlcyIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiYXJyYXlGcm9tIiwic2xpY2UiLCJjbG9zZXN0IiwiZWxlbWVudCIsImNsb3Nlc3RDYWxsYmFjayIsImNhbGxiYWNrIiwicGFyZW50RWxlbWVudCIsIlBBU1NJVkUiLCJwYXNzaXZlIiwiUEFERElORyIsIlBMQUNFTUVOVF9BVFRSSUJVVEUiLCJPVVRfT0ZfQk9VTkRBUklFU19BVFRSSUJVVEUiLCJJT1NfQ0xBU1MiLCJBQ1RJVkVfQ0xBU1MiLCJQT1BQRVJfQ0xBU1MiLCJUT09MVElQX0NMQVNTIiwiQ09OVEVOVF9DTEFTUyIsIkJBQ0tEUk9QX0NMQVNTIiwiQVJST1dfQ0xBU1MiLCJST1VORF9BUlJPV19DTEFTUyIsIlBPUFBFUl9TRUxFQ1RPUiIsImNvbmNhdCIsIlRPT0xUSVBfU0VMRUNUT1IiLCJDT05URU5UX1NFTEVDVE9SIiwiQkFDS0RST1BfU0VMRUNUT1IiLCJBUlJPV19TRUxFQ1RPUiIsIlJPVU5EX0FSUk9XX1NFTEVDVE9SIiwiaXNVc2luZ1RvdWNoIiwib25Eb2N1bWVudFRvdWNoIiwicGVyZm9ybWFuY2UiLCJvbkRvY3VtZW50TW91c2VNb3ZlIiwibGFzdE1vdXNlTW92ZVRpbWUiLCJub3ciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25XaW5kb3dCbHVyIiwiYWN0aXZlRWxlbWVudCIsImJsdXIiLCJfdGlwcHkiLCJrZXlzIiwib2JqIiwiZ2V0VmFsdWUiLCJkZWZhdWx0VmFsdWUiLCJ2IiwiZGVib3VuY2UiLCJmbiIsIm1zIiwidGltZW91dElkIiwiX2FyZ3VtZW50cyIsImNsZWFyVGltZW91dCIsImdldE1vZGlmaWVyIiwibW9kaWZpZXJzIiwiaW5jbHVkZXMiLCJhIiwiYiIsImlzUmVhbEVsZW1lbnQiLCJpc1Npbmd1bGFyIiwiaW52b2tlV2l0aEFyZ3NPclJldHVybiIsImFyZ3MiLCJzZXRGbGlwTW9kaWZpZXJFbmFibGVkIiwiZmlsdGVyIiwiZW5hYmxlZCIsImRpdiIsInNldFRyYW5zaXRpb25EdXJhdGlvbiIsImVscyIsInRyYW5zaXRpb25EdXJhdGlvbiIsInNldFZpc2liaWxpdHlTdGF0ZSIsImV2YWx1YXRlUHJvcHMiLCJyZWZlcmVuY2UiLCJwcm9wcyIsIm91dCIsInJlZHVjZSIsImFjYyIsInZhbHVlQXNTdHJpbmciLCJnZXRBdHRyaWJ1dGUiLCJ0cmltIiwiSlNPTiIsInBhcnNlIiwiZSIsImdldERhdGFBdHRyaWJ1dGVPcHRpb25zIiwidmFsaWRhdGVPcHRpb25zIiwib3B0aW9uIiwiRXJyb3IiLCJzZXRJbm5lckhUTUwiLCJodG1sIiwic2V0Q29udGVudCIsImNvbnRlbnRFbCIsImdldENoaWxkcmVuIiwicG9wcGVyIiwidG9vbHRpcCIsImJhY2tkcm9wIiwiYWRkSW5lcnRpYSIsImNyZWF0ZUFycm93RWxlbWVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUJhY2tkcm9wRWxlbWVudCIsImFkZEludGVyYWN0aXZlIiwidXBkYXRlVHJhbnNpdGlvbkVuZExpc3RlbmVyIiwiYWN0aW9uIiwibGlzdGVuZXIiLCJldmVudE5hbWUiLCJ3ZWJraXRUcmFuc2l0aW9uIiwiZ2V0QmFzaWNQbGFjZW1lbnQiLCJmdWxsUGxhY2VtZW50Iiwic3BsaXQiLCJ1cGRhdGVUaGVtZSIsInRoZW1lTmFtZSIsImNyZWF0ZVBvcHBlckVsZW1lbnQiLCJpZCIsInVwZGF0ZVBvcHBlckVsZW1lbnQiLCJwcmV2UHJvcHMiLCJuZXh0UHJvcHMiLCJfZ2V0Q2hpbGRyZW4iLCJyZW1vdmVBdHRyaWJ1dGUiLCJyZW1vdmVDaGlsZCIsInJlcGxhY2VDaGlsZCIsInJlbW92ZUludGVyYWN0aXZlIiwicmVtb3ZlSW5lcnRpYSIsImlkQ291bnRlciIsImNyZWF0ZVRpcHB5IiwiY29sbGVjdGlvblByb3BzIiwibGFzdFRyaWdnZXJFdmVudFR5cGUiLCJsYXN0TW91c2VNb3ZlRXZlbnQiLCJzaG93VGltZW91dElkIiwiaGlkZVRpbWVvdXRJZCIsImFuaW1hdGlvbkZyYW1lSWQiLCJjdXJyZW50UGFyZW50Tm9kZSIsInByZXZpb3VzUGxhY2VtZW50IiwiY3VycmVudE1vdW50Q2FsbGJhY2siLCJjdXJyZW50VHJhbnNpdGlvbkVuZExpc3RlbmVyIiwiY3VycmVudENvbXB1dGVkUGFkZGluZyIsImlzU2NoZWR1bGVkVG9TaG93Iiwid2FzVmlzaWJsZUR1cmluZ1ByZXZpb3VzVXBkYXRlIiwiaGFzTW91bnRDYWxsYmFja1J1biIsImxpc3RlbmVycyIsImRlYm91bmNlZE9uTW91c2VNb3ZlIiwib25Nb3VzZU1vdmUiLCJwb3BwZXJDaGlsZHJlbiIsImluc3RhbmNlIiwicG9wcGVySW5zdGFuY2UiLCJpc0VuYWJsZWQiLCJpc1Zpc2libGUiLCJpc0Rlc3Ryb3llZCIsImlzTW91bnRlZCIsImlzU2hvd24iLCJjbGVhckRlbGF5VGltZW91dHMiLCJzZXQiLCJzaG93IiwiaGlkZSIsImVuYWJsZSIsImRpc2FibGUiLCJkZXN0cm95IiwiZGVzdHJveVRhcmdldEluc3RhbmNlcyIsInJlbW92ZVRyaWdnZXJzRnJvbVJlZmVyZW5jZSIsImFkZFRyaWdnZXJzVG9SZWZlcmVuY2UiLCJjcmVhdGVQb3BwZXJJbnN0YW5jZSIsInNjaGVkdWxlU2hvdyIsImdldEV2ZW50TGlzdGVuZXJzVGFyZ2V0IiwiaGFzQXR0cmlidXRlIiwicmVtb3ZlRm9sbG93Q3Vyc29yTGlzdGVuZXIiLCJwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yIiwiY2xlYW51cE9sZE1vdXNlTGlzdGVuZXJzIiwic2NoZWR1bGVIaWRlIiwiYWRkRG9jdW1lbnRDbGlja0xpc3RlbmVyIiwib25Eb2N1bWVudENsaWNrIiwiZ2V0VHJhbnNpdGlvbmFibGVFbGVtZW50cyIsImhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yIiwib25UcmFuc2l0aW9uRW5kIiwib24iLCJldmVudFR5cGUiLCJoYW5kbGVyIiwib25Nb3VzZUxlYXZlIiwib25EZWxlZ2F0ZVNob3ciLCJvbkRlbGVnYXRlSGlkZSIsIm9uQmx1ciIsIl9yZWYiLCJnZXRDb3JyZWN0ZWRQYWRkaW5nIiwiX2xhc3RNb3VzZU1vdmVFdmVudCIsImNsaWVudFgiLCJjbGllbnRZIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImlzSG9yaXpvbnRhbCIsImlzVmVydGljYWwiLCJpc1ZlcnRpY2FsUGxhY2VtZW50IiwiaXNIb3Jpem9udGFsUGxhY2VtZW50IiwicGFkZGluZyIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsIngiLCJNYXRoIiwibWF4IiwieSIsIm1pbiIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIndpZHRoIiwiaGVpZ2h0Iiwic2NoZWR1bGVVcGRhdGUiLCJpc0V2ZW50TGlzdGVuZXJTdG9wcGVkIiwidHlwZSIsIk1vdXNlRXZlbnQiLCJpc0N1cnNvck92ZXJQb3BwZXIiLCJpc0N1cnNvck92ZXJSZWZlcmVuY2UiLCJwb3BwZXJQbGFjZW1lbnQiLCJwb3BwZXJSZWN0IiwiZXhjZWVkc1RvcCIsImV4Y2VlZHNCb3R0b20iLCJleGNlZWRzTGVmdCIsImV4Y2VlZHNSaWdodCIsImlzQ3Vyc29yT3V0c2lkZUludGVyYWN0aXZlQm9yZGVyIiwicmVsYXRlZFRhcmdldCIsImNvbnRhaW5zIiwic3VwcG9ydHNUb3VjaCIsImlzVG91Y2hFdmVudCIsInJ1bk1vdW50Q2FsbGJhY2siLCJvZmZzZXRIZWlnaHQiLCJyZWZsb3ciLCJfaW5zdGFuY2UkcG9wcGVyQ2hpbGQiLCJwcmV2ZW50T3ZlcmZsb3dNb2RpZmllciIsImFwcGx5TXV0YXRpb25zIiwiZmxpcHBlZCIsImF0dHJpYnV0ZXMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJiYXNpY1BsYWNlbWVudCIsInN0eWxlcyIsImlzUGFkZGluZ051bWJlciIsImNvbXB1dGVkUGFkZGluZyIsImNvbmZpZyIsImV2ZW50c0VuYWJsZWQiLCJwcmV2ZW50T3ZlcmZsb3ciLCJib3VuZGFyaWVzRWxlbWVudCIsImJlaGF2aW9yIiwib25DcmVhdGUiLCJvblVwZGF0ZSIsInNob3VsZEF2b2lkQ2FsbGluZ09uVHJpZ2dlciIsInRhcmdldEVsIiwiY3JlYXRlRGVsZWdhdGVDaGlsZFRpcHB5IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzb21lIiwicHJvcCIsImVuYWJsZUV2ZW50TGlzdGVuZXJzIiwidXBkYXRlIiwidmlzaWJpbGl0eSIsInRyYW5zaXRpb25hYmxlRWxlbWVudHMiLCJ0cmFuc2l0aW9uRGVsYXkiLCJyb3VuZCIsInVwZGF0ZVBvc2l0aW9uIiwib25UcmFuc2l0aW9uZWRJbiIsInNob3VsZEVuYWJsZUxpc3RlbmVycyIsIm1hcmdpbiIsInBhcmVudE5vZGUiLCJtb3VudCIsIm9uVHJhbnNpdGlvbmVkT3V0IiwiZGlzYWJsZUV2ZW50TGlzdGVuZXJzIiwiZ2xvYmFsRXZlbnRMaXN0ZW5lcnNCb3VuZCIsInRpcHB5IiwidGFyZ2V0cyIsInRvU3RyaW5nIiwidmlydHVhbFJlZmVyZW5jZSIsInBvbHlmaWxscyIsImlzVmlydHVhbCIsImNsYXNzTmFtZXMiLCJwb2x5ZmlsbEVsZW1lbnRQcm90b3R5cGVQcm9wZXJ0aWVzIiwiaW5zdGFuY2VzIiwiTm9kZUxpc3QiLCJnZXRBcnJheU9mRWxlbWVudHMiLCJ2ZXJzaW9uIiwiZGVmYXVsdHMiLCJzZXREZWZhdWx0cyIsInBhcnRpYWxEZWZhdWx0cyIsImhpZGVBbGwiLCJleGNsdWRlZFJlZmVyZW5jZU9ySW5zdGFuY2UiLCJleGNsdWRlIiwiaXNFeGNsdWRlZCIsImdyb3VwIiwiX3JlZiRkZWxheSIsIl9yZWYkZHVyYXRpb24iLCJpc0FueVRpcHB5T3BlbiIsInNldElzQW55VGlwcHlPcGVuIiwidXBkYXRlSW5zdGFuY2VzIiwiX29yaWdpbmFsUHJvcHMiLCJjc3MiLCJ0ZXh0Q29udGVudCIsImhlYWQiLCJmaXJzdENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiaW5qZWN0Q1NTIiwiZyIsIkZ1bmN0aW9uIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJyb290IiwiZmFjdG9yeSIsImRlZmluZSIsIm1lc3NhZ2VzIiwibGFzdFVpZCIsImhhc0tleXMiLCJjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyIsInN1YnNjcmliZXIiLCJtZXNzYWdlIiwiZXgiLCJ0aHJvd0V4Y2VwdGlvbiIsImNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMiLCJkZWxpdmVyTWVzc2FnZSIsIm9yaWdpbmFsTWVzc2FnZSIsIm1hdGNoZWRNZXNzYWdlIiwiaW1tZWRpYXRlRXhjZXB0aW9ucyIsInN1YnNjcmliZXJzIiwiY2FsbFN1YnNjcmliZXIiLCJzeW5jIiwiZGVsaXZlciIsInBvc2l0aW9uIiwiY3JlYXRlRGVsaXZlcnlGdW5jdGlvbiIsImhhc1N1YnNjcmliZXJzIiwiZm91bmQiLCJCb29sZWFuIiwibWVzc2FnZUhhc1N1YnNjcmliZXJzIiwicHVibGlzaFN5bmMiLCJmdW5jIiwic3Vic2NyaWJlT25jZSIsImNsZWFyQWxsU3Vic2NyaXB0aW9ucyIsImNsZWFyU3Vic2NyaXB0aW9ucyIsImlzVG9waWMiLCJkZXNjZW5kYW50VG9waWNFeGlzdHMiLCJpc1Rva2VuIiwiaXNGdW5jdGlvbiIsInJlc3VsdCIsImFtZCIsIl9zdGF0ZWZ1bERlYWQiLCJNZW51IiwidmlldyIsImxpc3QiLCJtZW51TGlzdCIsInNlY3Rpb25zIiwiZmllbGRzIiwiZiIsImlzU2Vjb25kYXJ5T25seSIsInNlY3Rpb24iLCJ3cmFwcGVyIiwibmF2SXRlbVdyYXBwZXIiLCJpdGVtIiwibmF2TGluayIsImhyZWYiLCJoZWFkaW5nIiwidGV4dCIsImV4dHJhSXRlbSIsInBsYWNlaG9sZGVyTWVudUl0ZW0iLCJwcmV2ZW50RGVmYXVsdCIsImNsaWNrSGFuZGxlciIsImtleUNvZGUiLCJjb250ZXh0IiwiZGF0YXNldCIsImdsb2JhbCIsImxvbmdlclRpbWVvdXRCcm93c2VycyIsInRpbWVvdXREdXJhdGlvbiIsImNhbGxlZCIsInNjaGVkdWxlZCIsImZ1bmN0aW9uVG9DaGVjayIsImdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSIsIm5vZGVUeXBlIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiZ2V0UGFyZW50Tm9kZSIsIm5vZGVOYW1lIiwiaG9zdCIsImdldFNjcm9sbFBhcmVudCIsIl9nZXRTdHlsZUNvbXB1dGVkUHJvcCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiaXNJRTExIiwiTVNJbnB1dE1ldGhvZENvbnRleHQiLCJkb2N1bWVudE1vZGUiLCJpc0lFMTAiLCJnZXRPZmZzZXRQYXJlbnQiLCJub09mZnNldFBhcmVudCIsIm9mZnNldFBhcmVudCIsIm5leHRFbGVtZW50U2libGluZyIsImdldFJvb3QiLCJub2RlIiwiZmluZENvbW1vbk9mZnNldFBhcmVudCIsImVsZW1lbnQxIiwiZWxlbWVudDIiLCJvcmRlciIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTm9kZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsInN0YXJ0IiwiZW5kIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImVsZW1lbnQxcm9vdCIsImdldFNjcm9sbCIsInVwcGVyU2lkZSIsInNjcm9sbGluZ0VsZW1lbnQiLCJnZXRCb3JkZXJzU2l6ZSIsImF4aXMiLCJzaWRlQSIsInNpZGVCIiwiZ2V0U2l6ZSIsImNvbXB1dGVkU3R5bGUiLCJwYXJzZUludCIsImdldFdpbmRvd1NpemVzIiwiY2xhc3NDYWxsQ2hlY2siLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImdldENsaWVudFJlY3QiLCJvZmZzZXRzIiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsInNpemVzIiwiaG9yaXpTY3JvbGxiYXIiLCJvZmZzZXRXaWR0aCIsInZlcnRTY3JvbGxiYXIiLCJnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUiLCJmaXhlZFBvc2l0aW9uIiwiaXNIVE1MIiwiY2hpbGRyZW5SZWN0IiwicGFyZW50UmVjdCIsInNjcm9sbFBhcmVudCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsInN1YnRyYWN0IiwibW9kaWZpZXIiLCJpbmNsdWRlU2Nyb2xsIiwiZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudCIsImdldEJvdW5kYXJpZXMiLCJib3VuZGFyaWVzIiwiZXhjbHVkZVNjcm9sbCIsInJlbGF0aXZlT2Zmc2V0IiwiZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlIiwiYm91bmRhcmllc05vZGUiLCJpc0ZpeGVkIiwiX2dldFdpbmRvd1NpemVzIiwiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJyZWZSZWN0IiwicmVjdHMiLCJzb3J0ZWRBcmVhcyIsIm1hcCIsImFyZWEiLCJzb3J0IiwiZmlsdGVyZWRBcmVhcyIsIl9yZWYyIiwiY29tcHV0ZWRQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJnZXRSZWZlcmVuY2VPZmZzZXRzIiwiZ2V0T3V0ZXJTaXplcyIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblJpZ2h0IiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJtYXRjaGVkIiwiZ2V0UG9wcGVyT2Zmc2V0cyIsInJlZmVyZW5jZU9mZnNldHMiLCJwb3BwZXJPZmZzZXRzIiwiaXNIb3JpeiIsIm1haW5TaWRlIiwic2Vjb25kYXJ5U2lkZSIsIm1lYXN1cmVtZW50Iiwic2Vjb25kYXJ5TWVhc3VyZW1lbnQiLCJmaW5kIiwiYXJyIiwiY2hlY2siLCJydW5Nb2RpZmllcnMiLCJlbmRzIiwiZmluZEluZGV4IiwiY3VyIiwid2FybiIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwiZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lIiwicHJlZml4ZXMiLCJ1cHBlclByb3AiLCJjaGFyQXQiLCJwcmVmaXgiLCJ0b0NoZWNrIiwiZ2V0V2luZG93Iiwic2V0dXBFdmVudExpc3RlbmVycyIsInVwZGF0ZUJvdW5kIiwic2Nyb2xsRWxlbWVudCIsImF0dGFjaFRvU2Nyb2xsUGFyZW50cyIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJpc051bWVyaWMiLCJpc05hTiIsImlzRmluaXRlIiwic2V0U3R5bGVzIiwidW5pdCIsImlzRmlyZWZveCIsImlzTW9kaWZpZXJSZXF1aXJlZCIsInJlcXVlc3RpbmdOYW1lIiwicmVxdWVzdGVkTmFtZSIsInJlcXVlc3RpbmciLCJpc1JlcXVpcmVkIiwiX3JlcXVlc3RpbmciLCJyZXF1ZXN0ZWQiLCJwbGFjZW1lbnRzIiwidmFsaWRQbGFjZW1lbnRzIiwiY2xvY2t3aXNlIiwiY291bnRlciIsInJldmVyc2UiLCJCRUhBVklPUlMiLCJGTElQIiwiQ0xPQ0tXSVNFIiwiQ09VTlRFUkNMT0NLV0lTRSIsInBhcnNlT2Zmc2V0IiwiYmFzZVBsYWNlbWVudCIsInVzZUhlaWdodCIsImZyYWdtZW50cyIsImZyYWciLCJkaXZpZGVyIiwic2VhcmNoIiwic3BsaXRSZWdleCIsIm9wcyIsIm9wIiwibWVyZ2VXaXRoUHJldmlvdXMiLCJzdHIiLCJ0b1ZhbHVlIiwiaW5kZXgyIiwiRGVmYXVsdHMiLCJwb3NpdGlvbkZpeGVkIiwicmVtb3ZlT25EZXN0cm95Iiwic2hpZnQiLCJzaGlmdHZhcmlhdGlvbiIsIl9kYXRhJG9mZnNldHMiLCJzaWRlIiwic2hpZnRPZmZzZXRzIiwidHJhbnNmb3JtUHJvcCIsInBvcHBlclN0eWxlcyIsInRyYW5zZm9ybSIsInByaW9yaXR5IiwicHJpbWFyeSIsImVzY2FwZVdpdGhSZWZlcmVuY2UiLCJzZWNvbmRhcnkiLCJrZWVwVG9nZXRoZXIiLCJmbG9vciIsIm9wU2lkZSIsIl9kYXRhJG9mZnNldHMkYXJyb3ciLCJhcnJvd0VsZW1lbnQiLCJsZW4iLCJzaWRlQ2FwaXRhbGl6ZWQiLCJhbHRTaWRlIiwiYXJyb3dFbGVtZW50U2l6ZSIsImNlbnRlciIsInBvcHBlck1hcmdpblNpZGUiLCJwb3BwZXJCb3JkZXJTaWRlIiwic2lkZVZhbHVlIiwib3JpZ2luYWxQbGFjZW1lbnQiLCJwbGFjZW1lbnRPcHBvc2l0ZSIsImZsaXBPcmRlciIsInN0ZXAiLCJyZWZPZmZzZXRzIiwib3ZlcmxhcHNSZWYiLCJvdmVyZmxvd3NMZWZ0Iiwib3ZlcmZsb3dzUmlnaHQiLCJvdmVyZmxvd3NUb3AiLCJvdmVyZmxvd3NCb3R0b20iLCJvdmVyZmxvd3NCb3VuZGFyaWVzIiwiZmxpcHBlZFZhcmlhdGlvbkJ5UmVmIiwiZmxpcFZhcmlhdGlvbnMiLCJmbGlwcGVkVmFyaWF0aW9uQnlDb250ZW50IiwiZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQiLCJmbGlwcGVkVmFyaWF0aW9uIiwiZ2V0T3Bwb3NpdGVWYXJpYXRpb24iLCJpbm5lciIsInN1YnRyYWN0TGVuZ3RoIiwiYm91bmQiLCJjb21wdXRlU3R5bGUiLCJsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24iLCJncHVBY2NlbGVyYXRpb24iLCJvZmZzZXRQYXJlbnRSZWN0Iiwic2hvdWxkUm91bmQiLCJub1JvdW5kIiwicmVmZXJlbmNlV2lkdGgiLCJwb3BwZXJXaWR0aCIsImlzVmFyaWF0aW9uIiwiaG9yaXpvbnRhbFRvSW50ZWdlciIsInZlcnRpY2FsVG9JbnRlZ2VyIiwiZ2V0Um91bmRlZE9mZnNldHMiLCJkZXZpY2VQaXhlbFJhdGlvIiwicHJlZml4ZWRQcm9wZXJ0eSIsIndpbGxDaGFuZ2UiLCJpbnZlcnRUb3AiLCJpbnZlcnRMZWZ0IiwieC1wbGFjZW1lbnQiLCJhcnJvd1N0eWxlcyIsImFwcGx5U3R5bGUiLCJvbkxvYWQiLCJtb2RpZmllck9wdGlvbnMiLCJQb3BwZXIiLCJpc0NyZWF0ZWQiLCJqcXVlcnkiLCJVdGlscyIsIlBvcHBlclV0aWxzIiwiX2hpYSIsIkFwcCIsIkhJQSIsIm5lZWRzUm91dGVyIiwiSVNfUFJFUkVOREVSSU5HIiwiaW5pdCIsImQzIiwieWVhckJ1Y2tldHMiLCJzdGF0ZUFiYnJldmlhdGlvbnMiLCJhYmJyZXZpYXRpb25zIiwibmVzdEJ5IiwiZ2V0UnVudGltZURhdGEiLCJyZXNvbHZlV3JhcHBlciIsInJlamVjdFdyYXBwZXIiLCJQYXBhIiwiYmVmb3JlRmlyc3RDaHVuayIsImNodW5rIiwiZWFjaCIsImpvaW4iLCJjbGVhbkhlYWRlclJvdyIsImNvbXBsZXRlIiwicmVzdWx0cyIsImRvd25sb2FkIiwiZXJyb3IiLCJmaWxlIiwiaGVhZGVyIiwic2tpcEVtcHR5TGluZXMiLCJoZWFkZXJOYW1lIiwic3BsaXRUb0FycmF5IiwiYWRkRGF0ZUJ1Y2tldHMiLCJwdWJsaWNhdGlvbkRhdGUiLCJkYXRlQnVja2V0IiwidGhyZXNob2xkIiwiUENUQXBwIiwiX3RoaXMyIiwic3RyaW5naWZ5IiwibmVzdERhdGEiLCJwdXNoVmlld3MiLCJhbGwiLCJvblZpZXdzUmVhZHkiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJfdGhpczMiLCJ3b3JrZXIiLCJXb3JrZXIiLCJfZ2V0IiwiX19wcm90b19fIiwiZ2V0UHJvdG90eXBlT2YiLCJib2R5RXZlbnRMaXN0ZW5lckJpbmQiLCJib2R5RXZlbnRMaXN0ZW5lckhhbmRsZXIiLCJQUyIsImRhdGFIYXNoIiwiTWVudVZpZXciLCJTZWN0aW9uVmlldyIsIkRldGFpbHNWaWV3IiwiTWFza1ZpZXciLCJfdGhpczUiLCJmaWVsZHNUaGF0TmVlZFRvQmVBcnJheXMiLCJmaWVsZCIsImVudHJpZXMiLCJfdGhpczQiLCJuZXN0IiwidmFsdWVzIiwiYXJyYXkiLCJfZCIsIl8iLCJjbG9uZURlZXAiLCJtc2ciLCJib2R5Q2xpY2tDbGVhciIsIlVJQ29udHJvbElzT3BlbiIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsInNlbGYiLCJwb3N0TWVzc2FnZSIsImxvY2F0aW9uIiwiaCIsInUiLCJrIiwiZHluYW1pY1R5cGluZyIsInoiLCJkeW5hbWljVHlwaW5nRnVuY3Rpb24iLCJXT1JLRVJTX1NVUFBPUlRFRCIsIlNDUklQVF9QQVRIIiwib25tZXNzYWdlIiwidXNlclN0ZXAiLCJ1c2VyQ2h1bmsiLCJ1c2VyQ29tcGxldGUiLCJ1c2VyRXJyb3IiLCJpbnB1dCIsIndvcmtlcklkIiwiTk9ERV9TVFJFQU1fSU5QVVQiLCJyZWFkYWJsZSIsInJlYWQiLCJGaWxlIiwic3RyZWFtIiwidW5wYXJzZSIsImRlbGltaXRlciIsIkJBRF9ERUxJTUlURVJTIiwicXVvdGVzIiwibmV3bGluZSIsInF1b3RlQ2hhciIsIlJlZ0V4cCIsIk0iLCJtZXRhIiwiY29uc3RydWN0b3IiLCJEYXRlIiwiUkVDT1JEX1NFUCIsImZyb21DaGFyQ29kZSIsIlVOSVRfU0VQIiwiQllURV9PUkRFUl9NQVJLIiwiTG9jYWxDaHVua1NpemUiLCJSZW1vdGVDaHVua1NpemUiLCJEZWZhdWx0RGVsaW1pdGVyIiwiUGFyc2VyIiwiUGFyc2VySGFuZGxlIiwiTmV0d29ya1N0cmVhbWVyIiwiRmlsZVN0cmVhbWVyIiwiU3RyaW5nU3RyZWFtZXIiLCJSZWFkYWJsZVN0cmVhbVN0cmVhbWVyIiwialF1ZXJ5IiwiYXR0ciIsIkZpbGVSZWFkZXIiLCJmaWxlcyIsImlucHV0RWxlbSIsImluc3RhbmNlQ29uZmlnIiwiZXh0ZW5kIiwiYmVmb3JlIiwicmVhc29uIiwiX2hhbmRsZSIsIl9maW5pc2hlZCIsIl9jb21wbGV0ZWQiLCJfaW5wdXQiLCJfYmFzZUluZGV4IiwiX3BhcnRpYWxMaW5lIiwiX3Jvd0NvdW50IiwiX3N0YXJ0IiwiX25leHRDaHVuayIsImlzRmlyc3RDaHVuayIsIl9jb21wbGV0ZVJlc3VsdHMiLCJlcnJvcnMiLCJFIiwiY2h1bmtTaXplIiwic3RyZWFtZXIiLCJfY29uZmlnIiwicGFyc2VDaHVuayIsInBhdXNlZCIsImFib3J0ZWQiLCJjdXJzb3IiLCJzdWJzdHJpbmciLCJwcmV2aWV3IiwiV09SS0VSX0lEIiwiZmluaXNoZWQiLCJfc2VuZEVycm9yIiwiX3JlYWRDaHVuayIsIl9jaHVua0xvYWRlZCIsIlhNTEh0dHBSZXF1ZXN0Iiwid2l0aENyZWRlbnRpYWxzIiwib25sb2FkIiwidyIsIm9uZXJyb3IiLCJfY2h1bmtFcnJvciIsIm9wZW4iLCJkb3dubG9hZFJlcXVlc3RIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJzdGF0dXMiLCJyZWFkeVN0YXRlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwid2Via2l0U2xpY2UiLCJtb3pTbGljZSIsIkZpbGVSZWFkZXJTeW5jIiwicmVhZEFzVGV4dCIsImVuY29kaW5nIiwicGF1c2UiLCJyZXN1bWUiLCJfc3RyZWFtRGF0YSIsIl9zdHJlYW1FbmQiLCJfc3RyZWFtRXJyb3IiLCJfY2hlY2tJc0ZpbmlzaGVkIiwiX3N0cmVhbUNsZWFuVXAiLCJyZW1vdmVMaXN0ZW5lciIsImFib3J0IiwidHJpbUhlYWRlcnMiLCJjb2RlIiwicm93IiwiY29tbWVudHMiLCJhYnMiLCJzdWNjZXNzZnVsIiwiYmVzdERlbGltaXRlciIsImdldENoYXJJbmRleCIsIk8iLCJUIiwiSSIsIkEiLCJEIiwiZmFzdE1vZGUiLCJMIiwiZXNjYXBlQ2hhciIsIlAiLCJGIiwiQyIsIlIiLCJsaW5lYnJlYWsiLCJ0cnVuY2F0ZWQiLCJ0ZXJtaW5hdGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNyYyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJDT1JFX0VSUk9SX1RFWFQiLCJGVU5DX0VSUk9SX1RFWFQiLCJIQVNIX1VOREVGSU5FRCIsIk1BWF9NRU1PSVpFX1NJWkUiLCJQTEFDRUhPTERFUiIsIkNMT05FX0RFRVBfRkxBRyIsIkNMT05FX0ZMQVRfRkxBRyIsIkNMT05FX1NZTUJPTFNfRkxBRyIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsIldSQVBfQklORF9GTEFHIiwiV1JBUF9CSU5EX0tFWV9GTEFHIiwiV1JBUF9DVVJSWV9CT1VORF9GTEFHIiwiV1JBUF9DVVJSWV9GTEFHIiwiV1JBUF9DVVJSWV9SSUdIVF9GTEFHIiwiV1JBUF9QQVJUSUFMX0ZMQUciLCJXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyIsIldSQVBfQVJZX0ZMQUciLCJXUkFQX1JFQVJHX0ZMQUciLCJXUkFQX0ZMSVBfRkxBRyIsIkRFRkFVTFRfVFJVTkNfTEVOR1RIIiwiREVGQVVMVF9UUlVOQ19PTUlTU0lPTiIsIkhPVF9DT1VOVCIsIkhPVF9TUEFOIiwiTEFaWV9GSUxURVJfRkxBRyIsIkxBWllfTUFQX0ZMQUciLCJJTkZJTklUWSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNQVhfSU5URUdFUiIsIk5BTiIsIk1BWF9BUlJBWV9MRU5HVEgiLCJNQVhfQVJSQVlfSU5ERVgiLCJIQUxGX01BWF9BUlJBWV9MRU5HVEgiLCJ3cmFwRmxhZ3MiLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJhc3luY1RhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZG9tRXhjVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwibnVsbFRhZyIsIm9iamVjdFRhZyIsInByb3h5VGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwidW5kZWZpbmVkVGFnIiwid2Vha01hcFRhZyIsIndlYWtTZXRUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVFbXB0eVN0cmluZ0xlYWRpbmciLCJyZUVtcHR5U3RyaW5nTWlkZGxlIiwicmVFbXB0eVN0cmluZ1RyYWlsaW5nIiwicmVFc2NhcGVkSHRtbCIsInJlVW5lc2NhcGVkSHRtbCIsInJlSGFzRXNjYXBlZEh0bWwiLCJyZUhhc1VuZXNjYXBlZEh0bWwiLCJyZUVzY2FwZSIsInJlRXZhbHVhdGUiLCJyZUludGVycG9sYXRlIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsInJlUHJvcE5hbWUiLCJyZVJlZ0V4cENoYXIiLCJyZUhhc1JlZ0V4cENoYXIiLCJyZVRyaW0iLCJyZVRyaW1TdGFydCIsInJlVHJpbUVuZCIsInJlV3JhcENvbW1lbnQiLCJyZVdyYXBEZXRhaWxzIiwicmVTcGxpdERldGFpbHMiLCJyZUFzY2lpV29yZCIsInJlRXNjYXBlQ2hhciIsInJlRXNUZW1wbGF0ZSIsInJlRmxhZ3MiLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNIb3N0Q3RvciIsInJlSXNPY3RhbCIsInJlSXNVaW50IiwicmVMYXRpbiIsInJlTm9NYXRjaCIsInJlVW5lc2NhcGVkU3RyaW5nIiwicnNDb21ib1JhbmdlIiwicnNDb21ib01hcmtzUmFuZ2UiLCJyc0JyZWFrUmFuZ2UiLCJyc01hdGhPcFJhbmdlIiwicnNBc3RyYWwiLCJyc0JyZWFrIiwicnNDb21ibyIsInJzRGlnaXRzIiwicnNEaW5nYmF0IiwicnNMb3dlciIsInJzTWlzYyIsInJzRml0eiIsInJzTm9uQXN0cmFsIiwicnNSZWdpb25hbCIsInJzU3VyclBhaXIiLCJyc1VwcGVyIiwicnNNaXNjTG93ZXIiLCJyc01pc2NVcHBlciIsInJlT3B0TW9kIiwicnNTZXEiLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsIlxcIiwiJyIsIlxuIiwiXHIiLCLigKgiLCLigKkiLCJmcmVlUGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsImZyZWVFeHBvcnRzIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsInRoaXNBcmciLCJhcnJheUFnZ3JlZ2F0b3IiLCJzZXR0ZXIiLCJpdGVyYXRlZSIsImFjY3VtdWxhdG9yIiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwicHJlZGljYXRlIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiYXJyYXlQdXNoIiwiYXJyYXlSZWR1Y2UiLCJpbml0QWNjdW0iLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXlTb21lIiwiYXNjaWlTaXplIiwiYmFzZVByb3BlcnR5IiwiYmFzZUZpbmRLZXkiLCJjb2xsZWN0aW9uIiwiZWFjaEZ1bmMiLCJiYXNlRmluZEluZGV4IiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0Iiwic3RyaWN0SW5kZXhPZiIsImJhc2VJc05hTiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VNZWFuIiwiYmFzZVN1bSIsImJhc2VQcm9wZXJ0eU9mIiwiYmFzZVJlZHVjZSIsImN1cnJlbnQiLCJiYXNlVGltZXMiLCJiYXNlVW5hcnkiLCJiYXNlVmFsdWVzIiwiY2FjaGVIYXMiLCJjYWNoZSIsImhhcyIsImNoYXJzU3RhcnRJbmRleCIsInN0clN5bWJvbHMiLCJjaHJTeW1ib2xzIiwiY2hhcnNFbmRJbmRleCIsImRlYnVyckxldHRlciIsIsOAIiwiw4EiLCLDgiIsIsODIiwiw4QiLCLDhSIsIsOgIiwiw6EiLCLDoiIsIsOjIiwiw6QiLCLDpSIsIsOHIiwiw6ciLCLDkCIsIsOwIiwiw4giLCLDiSIsIsOKIiwiw4siLCLDqCIsIsOpIiwiw6oiLCLDqyIsIsOMIiwiw40iLCLDjiIsIsOPIiwiw6wiLCLDrSIsIsOuIiwiw68iLCLDkSIsIsOxIiwiw5IiLCLDkyIsIsOUIiwiw5UiLCLDliIsIsOYIiwiw7IiLCLDsyIsIsO0Iiwiw7UiLCLDtiIsIsO4Iiwiw5kiLCLDmiIsIsObIiwiw5wiLCLDuSIsIsO6Iiwiw7siLCLDvCIsIsOdIiwiw70iLCLDvyIsIsOGIiwiw6YiLCLDniIsIsO+Iiwiw58iLCLEgCIsIsSCIiwixIQiLCLEgSIsIsSDIiwixIUiLCLEhiIsIsSIIiwixIoiLCLEjCIsIsSHIiwixIkiLCLEiyIsIsSNIiwixI4iLCLEkCIsIsSPIiwixJEiLCLEkiIsIsSUIiwixJYiLCLEmCIsIsSaIiwixJMiLCLElSIsIsSXIiwixJkiLCLEmyIsIsScIiwixJ4iLCLEoCIsIsSiIiwixJ0iLCLEnyIsIsShIiwixKMiLCLEpCIsIsSmIiwixKUiLCLEpyIsIsSoIiwixKoiLCLErCIsIsSuIiwixLAiLCLEqSIsIsSrIiwixK0iLCLEryIsIsSxIiwixLQiLCLEtSIsIsS2IiwixLciLCLEuCIsIsS5IiwixLsiLCLEvSIsIsS/IiwixYEiLCLEuiIsIsS8IiwixL4iLCLFgCIsIsWCIiwixYMiLCLFhSIsIsWHIiwixYoiLCLFhCIsIsWGIiwixYgiLCLFiyIsIsWMIiwixY4iLCLFkCIsIsWNIiwixY8iLCLFkSIsIsWUIiwixZYiLCLFmCIsIsWVIiwixZciLCLFmSIsIsWaIiwixZwiLCLFniIsIsWgIiwixZsiLCLFnSIsIsWfIiwixaEiLCLFoiIsIsWkIiwixaYiLCLFoyIsIsWlIiwixaciLCLFqCIsIsWqIiwixawiLCLFriIsIsWwIiwixbIiLCLFqSIsIsWrIiwixa0iLCLFryIsIsWxIiwixbMiLCLFtCIsIsW1IiwixbYiLCLFtyIsIsW4IiwixbkiLCLFuyIsIsW9IiwixboiLCLFvCIsIsW+IiwixLIiLCLEsyIsIsWSIiwixZMiLCLFiSIsIsW/IiwiZXNjYXBlSHRtbENoYXIiLCImIiwiPCIsIj4iLCJcIiIsImVzY2FwZVN0cmluZ0NoYXIiLCJjaHIiLCJoYXNVbmljb2RlIiwic3RyaW5nIiwibWFwVG9BcnJheSIsIm92ZXJBcmciLCJhcmciLCJyZXBsYWNlSG9sZGVycyIsInBsYWNlaG9sZGVyIiwic2V0VG9BcnJheSIsInNldFRvUGFpcnMiLCJzdHJpbmdTaXplIiwibGFzdEluZGV4IiwidW5pY29kZVNpemUiLCJzdHJpbmdUb0FycmF5IiwidW5pY29kZVRvQXJyYXkiLCJhc2NpaVRvQXJyYXkiLCJ1bmVzY2FwZUh0bWxDaGFyIiwiJmFtcDsiLCImbHQ7IiwiJmd0OyIsIiZxdW90OyIsIiYjMzk7IiwicnVuSW5Db250ZXh0IiwidWlkIiwicGljayIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJtYXNrU3JjS2V5IiwiZXhlYyIsIklFX1BST1RPIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RDdG9yU3RyaW5nIiwib2xkRGFzaCIsInJlSXNOYXRpdmUiLCJCdWZmZXIiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJvYmplY3RDcmVhdGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzeW1JdGVyYXRvciIsIml0ZXJhdG9yIiwic3ltVG9TdHJpbmdUYWciLCJnZXROYXRpdmUiLCJjdHhDbGVhclRpbWVvdXQiLCJjdHhOb3ciLCJjdHhTZXRUaW1lb3V0IiwibmF0aXZlQ2VpbCIsImNlaWwiLCJuYXRpdmVGbG9vciIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJuYXRpdmVJc0J1ZmZlciIsImlzQnVmZmVyIiwibmF0aXZlSXNGaW5pdGUiLCJuYXRpdmVKb2luIiwibmF0aXZlS2V5cyIsIm5hdGl2ZU1heCIsIm5hdGl2ZU1pbiIsIm5hdGl2ZU5vdyIsIm5hdGl2ZVBhcnNlSW50IiwibmF0aXZlUmFuZG9tIiwicmFuZG9tIiwibmF0aXZlUmV2ZXJzZSIsIkRhdGFWaWV3IiwiTWFwIiwiU2V0IiwiV2Vha01hcCIsIm5hdGl2ZUNyZWF0ZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsIkxhenlXcmFwcGVyIiwiTG9kYXNoV3JhcHBlciIsIndyYXBwZXJDbG9uZSIsImJhc2VDcmVhdGUiLCJwcm90byIsImlzT2JqZWN0IiwiYmFzZUxvZGFzaCIsImNoYWluQWxsIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiY2xlYXIiLCJlbnRyeSIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsIlN0YWNrIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0FyZ3VtZW50cyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXNJbmRleCIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiY29weUFycmF5IiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImVxIiwiYmFzZUFzc2lnblZhbHVlIiwiYXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImFzc29jSW5kZXhPZiIsImJhc2VBZ2dyZWdhdG9yIiwiYmFzZUVhY2giLCJiYXNlQXNzaWduIiwiY29weU9iamVjdCIsImJhc2VBdCIsInNraXAiLCJudW1iZXIiLCJsb3dlciIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJzdGFjayIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsImluaXRDbG9uZUFycmF5IiwidGFnIiwiZ2V0VGFnIiwiaXNGdW5jIiwiY2xvbmVCdWZmZXIiLCJpbml0Q2xvbmVPYmplY3QiLCJnZXRTeW1ib2xzSW4iLCJjb3B5U3ltYm9sc0luIiwia2V5c0luIiwiYmFzZUFzc2lnbkluIiwiZ2V0U3ltYm9scyIsImNvcHlTeW1ib2xzIiwic3ltYm9sIiwicmVnZXhwIiwiQ3RvciIsImNsb25lQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiY2xvbmVEYXRhVmlldyIsImNsb25lVHlwZWRBcnJheSIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiZ2V0QWxsS2V5c0luIiwiZ2V0QWxsS2V5cyIsImJhc2VDb25mb3Jtc1RvIiwiYmFzZURlbGF5IiwiYmFzZURpZmZlcmVuY2UiLCJpc0NvbW1vbiIsInZhbHVlc0xlbmd0aCIsIm91dGVyIiwiY29tcHV0ZWQiLCJ2YWx1ZXNJbmRleCIsInRlbXBsYXRlU2V0dGluZ3MiLCJlc2NhcGUiLCJldmFsdWF0ZSIsImludGVycG9sYXRlIiwidmFyaWFibGUiLCJpbXBvcnRzIiwicG9wIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiYmFzZUVhY2hSaWdodCIsImJhc2VGb3JPd25SaWdodCIsImJhc2VFdmVyeSIsImJhc2VFeHRyZW11bSIsImlzU3ltYm9sIiwiYmFzZUZpbHRlciIsImJhc2VGbGF0dGVuIiwiZGVwdGgiLCJpc1N0cmljdCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsImJhc2VGb3JSaWdodCIsImJhc2VGdW5jdGlvbnMiLCJiYXNlR2V0IiwicGF0aCIsImNhc3RQYXRoIiwidG9LZXkiLCJiYXNlR2V0QWxsS2V5cyIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJiYXNlR2V0VGFnIiwiaXNPd24iLCJ1bm1hc2tlZCIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwiYmFzZUd0Iiwib3RoZXIiLCJiYXNlSGFzIiwiYmFzZUhhc0luIiwiYmFzZUludGVyc2VjdGlvbiIsImFycmF5cyIsIm90aExlbmd0aCIsIm90aEluZGV4IiwiY2FjaGVzIiwibWF4TGVuZ3RoIiwiSW5maW5pdHkiLCJzZWVuIiwiYmFzZUludm9rZSIsImxhc3QiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlSXNFcXVhbCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiYmFzZUlzTmF0aXZlIiwiYmFzZUl0ZXJhdGVlIiwiaWRlbnRpdHkiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiYmFzZU1hdGNoZXMiLCJiYXNlS2V5cyIsImlzUHJvdG90eXBlIiwiYmFzZUtleXNJbiIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJiYXNlTHQiLCJiYXNlTWFwIiwiaXNBcnJheUxpa2UiLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiaGFzSW4iLCJiYXNlTWVyZ2UiLCJzcmNJbmRleCIsIm1lcmdlRnVuYyIsInNhZmVHZXQiLCJuZXdWYWx1ZSIsImlzVHlwZWQiLCJpc0FycmF5TGlrZU9iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ0b1BsYWluT2JqZWN0IiwiYmFzZU1lcmdlRGVlcCIsImJhc2VOdGgiLCJiYXNlT3JkZXJCeSIsIml0ZXJhdGVlcyIsIm9yZGVycyIsImdldEl0ZXJhdGVlIiwiY29tcGFyZXIiLCJiYXNlU29ydEJ5IiwiY3JpdGVyaWEiLCJvYmpDcml0ZXJpYSIsIm90aENyaXRlcmlhIiwib3JkZXJzTGVuZ3RoIiwiY29tcGFyZUFzY2VuZGluZyIsImNvbXBhcmVNdWx0aXBsZSIsImJhc2VQaWNrQnkiLCJiYXNlU2V0IiwiYmFzZVB1bGxBbGwiLCJiYXNlUHVsbEF0IiwiaW5kZXhlcyIsInByZXZpb3VzIiwiYmFzZVVuc2V0IiwiYmFzZVJlcGVhdCIsImJhc2VSZXN0Iiwic2V0VG9TdHJpbmciLCJvdmVyUmVzdCIsImJhc2VTYW1wbGUiLCJiYXNlU2FtcGxlU2l6ZSIsIm5lc3RlZCIsImJhc2VTZXREYXRhIiwiYmFzZVNldFRvU3RyaW5nIiwiY29uc3RhbnQiLCJiYXNlU2h1ZmZsZSIsImJhc2VTbGljZSIsImJhc2VTb21lIiwiYmFzZVNvcnRlZEluZGV4IiwicmV0SGlnaGVzdCIsImxvdyIsImhpZ2giLCJtaWQiLCJiYXNlU29ydGVkSW5kZXhCeSIsInZhbElzTmFOIiwidmFsSXNOdWxsIiwidmFsSXNTeW1ib2wiLCJ2YWxJc1VuZGVmaW5lZCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm90aElzUmVmbGV4aXZlIiwib3RoSXNTeW1ib2wiLCJzZXRMb3ciLCJiYXNlU29ydGVkVW5pcSIsImJhc2VUb051bWJlciIsImJhc2VUb1N0cmluZyIsImJhc2VVbmlxIiwiY3JlYXRlU2V0Iiwic2VlbkluZGV4IiwiYmFzZVVwZGF0ZSIsInVwZGF0ZXIiLCJiYXNlV2hpbGUiLCJpc0Ryb3AiLCJiYXNlV3JhcHBlclZhbHVlIiwiYWN0aW9ucyIsImJhc2VYb3IiLCJiYXNlWmlwT2JqZWN0IiwiYXNzaWduRnVuYyIsInZhbHNMZW5ndGgiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdEZ1bmN0aW9uIiwic3RyaW5nVG9QYXRoIiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJjb3B5IiwiYXJyYXlCdWZmZXIiLCJ0eXBlZEFycmF5IiwidmFsSXNEZWZpbmVkIiwidmFsSXNSZWZsZXhpdmUiLCJjb21wb3NlQXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJob2xkZXJzTGVuZ3RoIiwibGVmdEluZGV4IiwibGVmdExlbmd0aCIsInJhbmdlTGVuZ3RoIiwiaXNVbmN1cnJpZWQiLCJjb21wb3NlQXJnc1JpZ2h0IiwiaG9sZGVyc0luZGV4IiwicmlnaHRJbmRleCIsInJpZ2h0TGVuZ3RoIiwiaXNOZXciLCJjcmVhdGVBZ2dyZWdhdG9yIiwiaW5pdGlhbGl6ZXIiLCJjcmVhdGVBc3NpZ25lciIsImFzc2lnbmVyIiwic291cmNlcyIsImd1YXJkIiwiaXNJdGVyYXRlZUNhbGwiLCJpdGVyYWJsZSIsImNyZWF0ZUNhc2VGaXJzdCIsIm1ldGhvZE5hbWUiLCJ0cmFpbGluZyIsImNyZWF0ZUNvbXBvdW5kZXIiLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1IiwiZ2V0RnVuY05hbWUiLCJmdW5jTmFtZSIsImdldERhdGEiLCJpc0xhemlhYmxlIiwicGxhbnQiLCJjcmVhdGVIeWJyaWQiLCJwYXJ0aWFsc1JpZ2h0IiwiaG9sZGVyc1JpZ2h0IiwiYXJnUG9zIiwiYXJ5IiwiYXJpdHkiLCJpc0FyeSIsImlzQmluZCIsImlzQmluZEtleSIsImlzRmxpcCIsImdldEhvbGRlciIsImhvbGRlcnNDb3VudCIsImNvdW50SG9sZGVycyIsIm5ld0hvbGRlcnMiLCJjcmVhdGVSZWN1cnJ5IiwiYXJyTGVuZ3RoIiwib2xkQXJyYXkiLCJyZW9yZGVyIiwiY3JlYXRlSW52ZXJ0ZXIiLCJ0b0l0ZXJhdGVlIiwiYmFzZUludmVydGVyIiwiY3JlYXRlTWF0aE9wZXJhdGlvbiIsIm9wZXJhdG9yIiwiY3JlYXRlT3ZlciIsImFycmF5RnVuYyIsImNyZWF0ZVBhZGRpbmciLCJjaGFycyIsImNoYXJzTGVuZ3RoIiwidG9GaW5pdGUiLCJiYXNlUmFuZ2UiLCJjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uIiwidG9OdW1iZXIiLCJ3cmFwRnVuYyIsImlzQ3VycnkiLCJuZXdEYXRhIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsImNyZWF0ZVJvdW5kIiwicHJlY2lzaW9uIiwidG9JbnRlZ2VyIiwibm9vcCIsImNyZWF0ZVRvUGFpcnMiLCJiYXNlVG9QYWlycyIsImNyZWF0ZVdyYXAiLCJzcmNCaXRtYXNrIiwibmV3Qml0bWFzayIsImlzQ29tYm8iLCJtZXJnZURhdGEiLCJjcmVhdGVDdXJyeSIsImNyZWF0ZVBhcnRpYWwiLCJjcmVhdGVCaW5kIiwiY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiIsImN1c3RvbURlZmF1bHRzTWVyZ2UiLCJjdXN0b21PbWl0Q2xvbmUiLCJhcnJWYWx1ZSIsImZsYXR0ZW4iLCJvdGhlckZ1bmMiLCJzdHViQXJyYXkiLCJoYXNQYXRoIiwiaGFzRnVuYyIsImlzTGVuZ3RoIiwiQXJyYXlCdWZmZXIiLCJjdG9yU3RyaW5nIiwiaXNNYXNrYWJsZSIsInN0dWJGYWxzZSIsIm90aGVyQXJncyIsInNob3J0T3V0IiwiZGV0YWlscyIsImluc2VydFdyYXBEZXRhaWxzIiwidXBkYXRlV3JhcERldGFpbHMiLCJnZXRXcmFwRGV0YWlscyIsImNvdW50IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwicmFuZCIsIm1lbW9pemUiLCJtZW1vaXplQ2FwcGVkIiwicXVvdGUiLCJjbG9uZSIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRMYXN0SW5kZXgiLCJpbnRlcnNlY3Rpb24iLCJtYXBwZWQiLCJpbnRlcnNlY3Rpb25CeSIsImludGVyc2VjdGlvbldpdGgiLCJwdWxsIiwicHVsbEFsbCIsInB1bGxBdCIsInVuaW9uIiwidW5pb25CeSIsInVuaW9uV2l0aCIsInVuemlwIiwidW56aXBXaXRoIiwid2l0aG91dCIsInhvciIsInhvckJ5IiwieG9yV2l0aCIsInppcCIsInppcFdpdGgiLCJjaGFpbiIsImludGVyY2VwdG9yIiwid3JhcHBlckF0IiwiY291bnRCeSIsImZpbmRMYXN0IiwiZm9yRWFjaFJpZ2h0IiwiZ3JvdXBCeSIsImludm9rZU1hcCIsImtleUJ5IiwicGFydGl0aW9uIiwic29ydEJ5IiwiYmluZEtleSIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsImludm9rZUZ1bmMiLCJ0aW1lIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0aW1lckV4cGlyZWQiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwibGVhZGluZ0VkZ2UiLCJjYW5jZWwiLCJmbHVzaCIsImRlZmVyIiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwibmVnYXRlIiwib3ZlckFyZ3MiLCJ0cmFuc2Zvcm1zIiwiZnVuY3NMZW5ndGgiLCJwYXJ0aWFsIiwicGFydGlhbFJpZ2h0IiwicmVhcmciLCJndCIsImd0ZSIsImlzRXJyb3IiLCJpc0ludGVnZXIiLCJpc051bWJlciIsImlzU3RyaW5nIiwibHQiLCJsdGUiLCJ0b0FycmF5IiwibmV4dCIsImRvbmUiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnQiLCJpbnZlcnRCeSIsImludm9rZSIsIm1lcmdlIiwib21pdCIsImJhc2VQaWNrIiwicGlja0J5IiwidG9QYWlycyIsInRvUGFpcnNJbiIsImNhbWVsQ2FzZSIsImNhcGl0YWxpemUiLCJ1cHBlckZpcnN0Iiwia2ViYWJDYXNlIiwibG93ZXJDYXNlIiwibG93ZXJGaXJzdCIsInNuYWtlQ2FzZSIsInN0YXJ0Q2FzZSIsInVwcGVyQ2FzZSIsInBhdHRlcm4iLCJoYXNVbmljb2RlV29yZCIsInVuaWNvZGVXb3JkcyIsImFzY2lpV29yZHMiLCJhdHRlbXB0IiwiYmluZEFsbCIsIm1ldGhvZE5hbWVzIiwiZmxvdyIsImZsb3dSaWdodCIsIm1ldGhvZCIsIm1ldGhvZE9mIiwibWl4aW4iLCJvdmVyIiwib3ZlckV2ZXJ5Iiwib3ZlclNvbWUiLCJiYXNlUHJvcGVydHlEZWVwIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsIm1pbnVlbmQiLCJzdWJ0cmFoZW5kIiwiYWZ0ZXIiLCJjYXN0QXJyYXkiLCJjb21wYWN0IiwiY29uZCIsImNvbmZvcm1zIiwiYmFzZUNvbmZvcm1zIiwicHJvcGVydGllcyIsImN1cnJ5IiwiY3VycnlSaWdodCIsImRyb3AiLCJkcm9wUmlnaHQiLCJkcm9wUmlnaHRXaGlsZSIsImRyb3BXaGlsZSIsImZpbGwiLCJiYXNlRmlsbCIsImZsYXRNYXAiLCJmbGF0TWFwRGVlcCIsImZsYXRNYXBEZXB0aCIsImZsYXR0ZW5EZWVwIiwiZmxhdHRlbkRlcHRoIiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJpbml0aWFsIiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsIm1hdGNoZXNQcm9wZXJ0eSIsIm50aEFyZyIsIm9taXRCeSIsIm9uY2UiLCJvcmRlckJ5IiwicHJvcGVydHlPZiIsInB1bGxBbGxCeSIsInB1bGxBbGxXaXRoIiwicmVzdCIsInNhbXBsZVNpemUiLCJzZXRXaXRoIiwic2h1ZmZsZSIsInNvcnRlZFVuaXEiLCJzb3J0ZWRVbmlxQnkiLCJzZXBhcmF0b3IiLCJsaW1pdCIsInNwcmVhZCIsInRhaWwiLCJ0YWtlIiwidGFrZVJpZ2h0IiwidGFrZVJpZ2h0V2hpbGUiLCJ0YWtlV2hpbGUiLCJ0YXAiLCJ0aHJvdHRsZSIsInRvUGF0aCIsImlzQXJyTGlrZSIsInVuYXJ5IiwidW5pcSIsInVuaXFCeSIsInVuaXFXaXRoIiwidW5zZXQiLCJ1cGRhdGVXaXRoIiwidmFsdWVzSW4iLCJ3cmFwIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZFdpdGgiLCJjbGFtcCIsImNsb25lRGVlcFdpdGgiLCJjbG9uZVdpdGgiLCJjb25mb3Jtc1RvIiwiZGVmYXVsdFRvIiwiZW5kc1dpdGgiLCJlc2NhcGVSZWdFeHAiLCJldmVyeSIsImZpbmRLZXkiLCJmaW5kTGFzdEtleSIsImZvckluIiwiZm9ySW5SaWdodCIsImZvck93biIsImZvck93blJpZ2h0IiwiaW5SYW5nZSIsImJhc2VJblJhbmdlIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFbXB0eSIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc051bGwiLCJpc1NhZmVJbnRlZ2VyIiwiaXNVbmRlZmluZWQiLCJpc1dlYWtNYXAiLCJpc1dlYWtTZXQiLCJzdHJpY3RMYXN0SW5kZXhPZiIsIm1heEJ5IiwibWVhbiIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsIm5vQ29uZmxpY3QiLCJwYWQiLCJzdHJMZW5ndGgiLCJwYWRFbmQiLCJwYWRTdGFydCIsInJhZGl4IiwiZmxvYXRpbmciLCJ0ZW1wIiwicmVkdWNlUmlnaHQiLCJyZXBlYXQiLCJzYW1wbGUiLCJzb3J0ZWRJbmRleCIsInNvcnRlZEluZGV4QnkiLCJzb3J0ZWRJbmRleE9mIiwic29ydGVkTGFzdEluZGV4Iiwic29ydGVkTGFzdEluZGV4QnkiLCJzb3J0ZWRMYXN0SW5kZXhPZiIsInN0YXJ0c1dpdGgiLCJzdW0iLCJzdW1CeSIsInRlbXBsYXRlIiwic2V0dGluZ3MiLCJpc0VzY2FwaW5nIiwiaXNFdmFsdWF0aW5nIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwicmVEZWxpbWl0ZXJzIiwic291cmNlVVJMIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsInRpbWVzIiwidG9Mb3dlciIsInRvU2FmZUludGVnZXIiLCJ0b1VwcGVyIiwidHJpbUVuZCIsInRyaW1TdGFydCIsInRydW5jYXRlIiwib21pc3Npb24iLCJuZXdFbmQiLCJ1bmVzY2FwZSIsInVuaXF1ZUlkIiwiZWFjaFJpZ2h0IiwiZmlyc3QiLCJWRVJTSU9OIiwiaXNGaWx0ZXIiLCJ0YWtlTmFtZSIsImRyb3BOYW1lIiwiY2hlY2tJdGVyYXRlZSIsImlzVGFrZXIiLCJsb2Rhc2hGdW5jIiwicmV0VW53cmFwcGVkIiwiaXNMYXp5IiwidXNlTGF6eSIsImlzSHlicmlkIiwiaXNVbndyYXBwZWQiLCJvbmx5TGF6eSIsImNoYWluTmFtZSIsImRpciIsImlzUmlnaHQiLCJnZXRWaWV3IiwiaXRlckxlbmd0aCIsInRha2VDb3VudCIsIml0ZXJJbmRleCIsImNvbW1pdCIsIndyYXBwZWQiLCJ0b0pTT04iLCJtZW51IiwiTWFpbk1lbnUiLCJhZGRDaGlsZHJlbiIsIm1lbnVWaWV3IiwiaGlkZVNlY3Rpb24iLCJkaXNwbGF5IiwiYWN0aXZlIiwiYmFyVmlld3MiLCJCYXJWaWV3IiwiVG9wTWVudSIsIk1hcFZpZXciLCJXYWZmbGVWaWV3Iiwic2VjdGlvblZpZXciLCJzaG93U2VjdGlvbkJpbmQiLCJzaG93U2VjdGlvbiIsImJsdXJTZWN0aW9uIiwiaXNCbHVycmVkIiwiaW5kaWNhdGVBY3RpdmVTZWN0aW9uIiwibGluayIsImdyYWRpZW50IiwidmFsdWVzQXJyYXkiLCJzdGF0ZU9yVGVycml0b3J5IiwiZ2V0TWF4Q291bnQiLCJ0aXRsZSIsIm1hcENvbnRhaW5lciIsInByZXJlbmRlck1hcCIsImxlZ2VuZCIsInByZXJlbmRlckxlZ2VuZCIsIm1hcE5vdGUiLCJtYXBTVkciLCJjb2xvclNjYWxlIiwiY2hyb21hIiwic2NhbGUiLCJkb21haW4iLCJtYXhMZWdlbmQiLCJzdGF0ZUdyb3VwIiwic3RhdGVCb3giLCJsYWJlbCIsImZvbnRXZWlnaHQiLCJzdHJva2UiLCJsZWdlbmRDb250YWluZXIiLCJsZWdlbmRXcmFwcGVyIiwiZ3JhZCIsImJhY2tncm91bmQiLCJ0aWNrIiwibWF4Q291bnQiLCJoaWdobGlnaHRTdGF0ZSIsInRvZ2dsZUFjdGl2ZSIsInNldFRpcHB5cyIsInN0YXRlQ2xpY2tIYW5kbGVyIiwic3RhdGVDb2RlIiwiYm94IiwiaG92ZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJzZXRUaXBweSIsIl90aXBweTIiLCJkZWZhdWx0IiwiY2xhc3NUb1R5cGUiLCJQSSIsInV0aWxzIiwiY2xpcF9yZ2IiLCJyZ2IiLCJfY2xpcHBlZCIsIl91bmNsaXBwZWQiLCJ1bnBhY2siLCJrZXlPcmRlciIsIlRXT1BJIiwiUElUSElSRCIsIkRFRzJSQUQiLCJSQUQyREVHIiwiZm9ybWF0IiwiYXV0b2RldGVjdCIsImxhc3QkMSIsImNsaXBfcmdiJDEiLCJ0eXBlJDEiLCJDb2xvciIsInNvcnRlZCIsImNoayIsIl9yZ2IiLCJoZXgiLCJDb2xvcl8xIiwiY2hyb21hXzEiLCJ1bnBhY2skMSIsInJnYjJjbXlrXzEiLCJyZWYiLCJ1bnBhY2skMiIsImNteWsycmdiXzEiLCJhbHBoYSIsInVucGFjayQzIiwidHlwZSQyIiwiY215ayIsInVucGFjayQ0IiwibGFzdCQyIiwicm5kIiwiaHNsMmNzc18xIiwiaHNsYSIsInVucGFjayQ1IiwicmdiMmhzbF8xIiwiTnVtYmVyIiwiTmFOIiwidW5wYWNrJDYiLCJsYXN0JDMiLCJyZ2IyY3NzXzEiLCJyZ2JhIiwiUkVfSEVYIiwiUkVfSEVYQSIsImhleDJyZ2JfMSIsInUkMSIsInIkMSIsImckMSIsImIkMSIsInVucGFjayQ3Iiwicm91bmQkMSIsImhzbDJyZ2JfMSIsInQzIiwidDIiLCJ0MSIsImhfIiwidzNjeDExXzEiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXIiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGFzZXJsZW1vbiIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZCIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1hcm9vbjIiLCJtYXJvb24zIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInB1cnBsZTIiLCJwdXJwbGUzIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiUkVfUkdCIiwiUkVfUkdCQSIsIlJFX1JHQl9QQ1QiLCJSRV9SR0JBX1BDVCIsIlJFX0hTTCIsIlJFX0hTTEEiLCJyb3VuZCQyIiwiY3NzMnJnYiIsInJnYiQxIiwiaSQxIiwicmdiJDIiLCJpJDIiLCJyZ2IkMyIsImkkMyIsImhzbCIsInJnYiQ0IiwiaHNsJDEiLCJyZ2IkNSIsImNzczJyZ2JfMSIsInR5cGUkMyIsInVucGFjayQ4IiwiZ2wiLCJ1bnBhY2skOSIsInJnYjJoY2dfMSIsImRlbHRhIiwiX2ciLCJ1bnBhY2skYSIsImhjZzJyZ2JfMSIsImFzc2lnbiQxIiwiYXNzaWduJDIiLCJhc3NpZ24kMyIsImFzc2lnbiQ0IiwiYXNzaWduJDUiLCJfYyIsInVucGFjayRiIiwidHlwZSQ0IiwiaGNnIiwidW5wYWNrJGMiLCJsYXN0JDQiLCJyb3VuZCQzIiwicmdiMmhleF8xIiwiaHhhIiwidHlwZSQ1IiwidW5wYWNrJGQiLCJzcXJ0IiwiYWNvcyIsInJnYjJoc2lfMSIsIm1pbl8iLCJ1bnBhY2skZSIsImxpbWl0JDEiLCJUV09QSSQxIiwiY29zIiwiaHNpMnJnYl8xIiwidW5wYWNrJGYiLCJ0eXBlJDYiLCJoc2kiLCJ1bnBhY2skZyIsInR5cGUkNyIsInVucGFjayRoIiwibWluJDEiLCJtYXgkMSIsInJnYjJoc3YiLCJtYXhfIiwidW5wYWNrJGkiLCJmbG9vciQxIiwiaHN2MnJnYl8xIiwidW5wYWNrJGoiLCJ0eXBlJDgiLCJoc3YiLCJsYWJDb25zdGFudHMiLCJLbiIsIlhuIiwiWW4iLCJabiIsInQwIiwidW5wYWNrJGsiLCJwb3ciLCJyZ2JfeHl6IiwieHl6X2xhYiIsInJnYjJ4eXoiLCJyZ2IybGFiXzEiLCJyZWYkMSIsInVucGFjayRsIiwicG93JDEiLCJ4eXpfcmdiIiwibGFiX3h5eiIsImxhYjJyZ2JfMSIsImJfIiwidW5wYWNrJG0iLCJ0eXBlJDkiLCJsYWIiLCJ1bnBhY2skbiIsInNxcnQkMSIsImF0YW4yIiwicm91bmQkNCIsImxhYjJsY2hfMSIsInVucGFjayRvIiwicmdiMmxjaF8xIiwidW5wYWNrJHAiLCJzaW4iLCJjb3MkMSIsImxjaDJsYWJfMSIsInVucGFjayRxIiwibGNoMnJnYl8xIiwidW5wYWNrJHIiLCJoY2wycmdiXzEiLCJoY2wiLCJ1bnBhY2skcyIsInR5cGUkYSIsImxjaCIsInR5cGUkYiIsIm5hbWVkIiwidW5wYWNrJHQiLCJyZ2IybnVtXzEiLCJ0eXBlJGMiLCJudW0ycmdiXzEiLCJudW0iLCJ0eXBlJGQiLCJ1bnBhY2skdSIsInR5cGUkZSIsInJvdW5kJDUiLCJ0ZW1wZXJhdHVyZTJyZ2JfMSIsImtlbHZpbiIsInVucGFjayR2Iiwicm91bmQkNiIsInJnYjJ0ZW1wZXJhdHVyZV8xIiwibWluVGVtcCIsIm1heFRlbXAiLCJ0ZW1wZXJhdHVyZSIsInR5cGUkZiIsIm11dGF0ZSIsImNsaXBwZWQiLCJkYXJrZW4iLCJhbW91bnQiLCJicmlnaHRlbiIsImRhcmtlciIsImJyaWdodGVyIiwibWMiLCJjaGFubmVsIiwidHlwZSRnIiwicG93JDIiLCJsdW1pbmFuY2UiLCJsdW0iLCJjdXJfbHVtIiwibWF4X2l0ZXIiLCJsbSIsInJnYjJsdW1pbmFuY2UiLCJsdW1pbmFuY2VfeCIsImludGVycG9sYXRvciIsInR5cGUkaCIsIm1peCIsImNvbDEiLCJjb2wyIiwicHJlbXVsdGlwbHkiLCJzYXR1cmF0ZSIsImRlc2F0dXJhdGUiLCJ0eXBlJGkiLCJ4eXowIiwieHl6MSIsInNxcnQkMiIsInBvdyQzIiwibHJnYiIsIngxIiwieTEiLCJ6MSIsIngyIiwieTIiLCJ6MiIsIl9oc3giLCJodWUwIiwiaHVlMSIsInNhdDAiLCJzYXQxIiwibGJ2MCIsImxidjEiLCJzYXQiLCJodWUiLCJsY2gkMSIsImMxIiwiYzIiLCJjbGlwX3JnYiQyIiwicG93JDQiLCJzcXJ0JDMiLCJQSSQxIiwiY29zJDIiLCJzaW4kMSIsImF0YW4yJDEiLCJfYXZlcmFnZV9scmdiIiwiY29sb3JzIiwieHl6IiwiY29sIiwidHlwZSRqIiwicG93JDUiLCJfbW9kZSIsIl9uYWNvbCIsIl9zcHJlYWQiLCJfZG9tYWluIiwiX3BvcyIsIl9wYWRkaW5nIiwiX2NsYXNzZXMiLCJfY29sb3JzIiwiX291dCIsIl9taW4iLCJfbWF4IiwiX2NvcnJlY3RMaWdodG5lc3MiLCJfY29sb3JDYWNoZSIsIl91c2VDYWNoZSIsIl9nYW1tYSIsInNldENvbG9ycyIsImJyZXdlciIsImMkMSIsInJlc2V0Q2FjaGUiLCJ0bWFwIiwiZ2V0Q29sb3IiLCJ2YWwiLCJieXBhc3NNYXAiLCJnZXRDbGFzcyIsImNsYXNzZXMiLCJhbmFseXplIiwibGltaXRzIiwiZnJvbSIsIl9tIiwiX28iLCJjb3JyZWN0TGlnaHRuZXNzIiwiTDAiLCJMMSIsInBvbCIsIkxfYWN0dWFsIiwiTF9pZGVhbCIsIkxfZGlmZiIsIm51bUNvbG9ycyIsImRtIiwiZGQiLCJpbmNsdXNpdmUiLCJhc2NlbmRpbmciLCJfX3JhbmdlX18iLCJzYW1wbGVzIiwiYXNjIiwiZ2FtbWEiLCJub2RhdGEiLCJiZXppZXIiLCJsYWIwIiwibGFiMSIsImxhYjIiLCJsYWIzIiwiSTAiLCJJMSIsImJsZW5kIiwiYmxlbmRfZiIsImMwIiwibm9ybWFsIiwic2NyZWVuIiwib3ZlcmxheSIsImxpZ2h0ZW4iLCJkb2RnZSIsImJ1cm4iLCJibGVuZF8xIiwidHlwZSRrIiwiY2xpcF9yZ2IkMyIsIlRXT1BJJDIiLCJwb3ckNiIsInNpbiQyIiwiY29zJDMiLCJmbG9vciQyIiwibG9nJDEiLCJwb3ckNyIsImZsb29yJDMiLCJNQVhfVkFMVUUiLCJtaW5fbG9nIiwiTE9HMTBFIiwibWF4X2xvZyIsInBiIiwicHIiLCJjbHVzdGVyIiwiYXNzaWdubWVudHMiLCJjbHVzdGVyU2l6ZXMiLCJuYl9pdGVycyIsImNlbnRyb2lkcyIsImoiLCJpJDQiLCJtaW5kaXN0IiwiYmVzdCIsImokMSIsImRpc3QiLCJuZXdDZW50cm9pZHMiLCJqJDIiLCJpJDUiLCJqJDMiLCJqJDQiLCJrQ2x1c3RlcnMiLCJqJDUiLCJpJDYiLCJ0bXBLTWVhbnNCcmVha3MiLCJqJDYiLCJpJDciLCJhbmFseXplXzEiLCJzcXJ0JDQiLCJhdGFuMiQyIiwiYWJzJDEiLCJjb3MkNCIsIlBJJDIiLCJzY2FsZXMiLCJjb29sIiwiaG90IiwiY29sb3JicmV3ZXIiLCJPclJkIiwiUHVCdSIsIkJ1UHUiLCJPcmFuZ2VzIiwiQnVHbiIsIllsT3JCciIsIllsR24iLCJSZWRzIiwiUmRQdSIsIkdyZWVucyIsIllsR25CdSIsIlB1cnBsZXMiLCJHbkJ1IiwiR3JleXMiLCJZbE9yUmQiLCJQdVJkIiwiQmx1ZXMiLCJQdUJ1R24iLCJWaXJpZGlzIiwiU3BlY3RyYWwiLCJSZFlsR24iLCJSZEJ1IiwiUGlZRyIsIlBSR24iLCJSZFlsQnUiLCJCckJHIiwiUmRHeSIsIlB1T3IiLCJTZXQyIiwiQWNjZW50IiwiU2V0MSIsIlNldDMiLCJEYXJrMiIsIlBhaXJlZCIsIlBhc3RlbDIiLCJQYXN0ZWwxIiwibGlzdCQxIiwiY29sb3JicmV3ZXJfMSIsImF2ZXJhZ2UiLCJjbnQiLCJkeCIsImR5IiwieHl6MiIsIkEkMSIsImN1YmVoZWxpeCIsInJvdGF0aW9ucyIsImxpZ2h0bmVzcyIsImRsIiwiZGgiLCJmcmFjdCIsImFtcCIsImNvc19hIiwic2luX2EiLCJjb250cmFzdCIsImwxIiwibDIiLCJkZWx0YUUiLCJhMSIsImIxIiwiTDIiLCJhMiIsImIyIiwic2wiLCJzYyIsImgxIiwiYzQiLCJzaCIsImRlbEMiLCJkZWxBIiwiZGVsQiIsInYxIiwidjIiLCJzdW1fc3EiLCJ2YWxpZCIsIl9iYXIiLCJiYXJWaWV3IiwiYmFycyIsImxhYmVscyIsImJhckNvbnRhaW5lcnMiLCJwdXNoQmFycyIsIkF4aXMiLCJyZXR1cm5UaXRsZSIsIkJhciIsImNsZWFuS2V5IiwiaGlnaGxpZ2h0QmFyIiwic2hvd0JhclZpZXciLCJpbm5lcldyYXBwZXJzIiwiYmFyIiwiYmFyQ29udGFpbmVyIiwic3BhbiIsImlubmVyV3JhcHBlciIsInRpcHB5Q29udGVudCIsImxpbmVhclNjYWxlIiwiYXhpc0NvbnRhaW5lciIsImF4aXNMaW5lIiwibWluTWFya2VyIiwibWF4TWFya2VyIiwicmV0dXJuTWF4IiwiZHJvcGRvd25EYXRhIiwic2V0RHJvcGRvd25EYXRhIiwiZHJvcGRvd24iLCJUaGlzRHJvcGRvd24iLCJXYWZmbGUiLCJMZWdlbmQiLCJ3YWZmbGVWaWV3IiwicmV0dXJuSGVhZGluZyIsInJldHVybkRyb3Bkb3duV3JhcHBlciIsIndhZmZsZUNvbnRhaW5lciIsIm5vdGUiLCJwcmltYXJ5RGltZW5zaW9uIiwiaW5zdHJ1Y3QiLCJpbnN0cnVjdEhlYWRpbmciLCJkcm9wZG93bldyYXBwZXIiLCJkcm9wZG93bklubmVyIiwiZHJvcGRvd25PdXRlciIsImRyb3Bkb3duTGFiZWwiLCJpbm5lclRleHQiLCJzZWNvbmRhcnlEaW1lbnNpb25zIiwiZl8iLCJpc0RlZmF1bHRTZWxlY3Rpb24iLCJ0b2dnbGVIZWFkaW5nIiwidG9nZ2xlRHJvcGRvd24iLCJzY3JvbGxJZk5lY2Vzc2FyeSIsInNjcm9sbFBhZ2VJZk5lY2Vzc2FyeSIsInRvIiwic21vb3RoU2Nyb2xsIiwic2Nyb2xsV2FmZmxlSWZOZWNlc3NhcnkiLCJvZmZzZXRUb3AiLCJlYXNlSW5PdXRRdWFkIiwiY3VycmVudFRpbWUiLCJhbmltYXRlU2Nyb2xsIiwic29ydEFjdGl2ZSIsIl9zdHlsZXMiLCJfaW5wdXRzIiwiX2RhdGEiLCJkcm9wZG93blR5cGUiLCJzZWxlY3RlZCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiRHJvcGRvd24iLCJzZWxlY3RlZE9wdGlvbiIsIlRleHRJbnB1dCIsIl9pc09wZW4iLCJvcHRpb25zTGlzdCIsIlBDVERyb3Bkb3duIiwiaXRlbUNsaWNrSGFuZGxlciIsIl9zZWxlY3RlZE9wdGlvbiIsInRvQmVTZWxlY3RlZCIsInNwYWNlQW5kQXJyb3dIYW5kbGVyIiwiaXNPcGVuIiwiZW50ZXJBbmRFc2NhcGVIYW5kbGVyIiwidGFiSGFuZGxlciIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJib29sIiwiYm9keUNsaWNrSGFuZGxlciIsIm9uQ2hhbmdlIiwibmVzdGVkRGF0YSIsInNob3dBbGxEZXRhaWxzIiwidXBkYXRlU2hvd0FsbERldGFpbHMiLCJyZW5kZXIiLCJncm91cHMiLCJyZXR1cm5NYXRjaGluZ1ZhbHVlc0xlbmd0aCIsImFiIiwiZ3JvdXBEaXYiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJncm91cERpdkhlYWRpbmciLCJpdGVtQ291bnQiLCJpdGVtc0NvbnRhaW5lciIsIml0ZW1EaXYiLCJjbGVhblNlY29uZGFyeSIsIm1hdGNoaW5nU3RyaW5nIiwiaW5kZXhPZlNlY29uZGFyeVZhbHVlIiwibm9kZVNob3dpbmdEZXRhaWxzIiwic2hvd0RldGFpbHMiLCJncm91cFNob3dpbmdEZXRhaWxzIiwiaW5pdEdyb3Vwc0FuZEl0ZW1zIiwiaGlnaGxpZ2h0R3JvdXAiLCJzaG93R3JvdXBEZXRhaWxzIiwidG9nZ2xlU2hvd0FsbCIsInVwZGF0ZVNlY29uZGFyeSIsInVwZGF0ZVByaW1hcnkiLCJpc09uIiwic2hvd0FsbCIsIml0ZW1Nb3VzZWVudGVyIiwiaXRlbU1vdXNlbGVhdmUiLCJhbm5vdW5jZU1vdXNlRW50ZXIiLCJhbm5vdW5jZU1vdXNlTGVhdmUiLCJzZXRJdGVtVGlwcHkiLCJjdXJyZW50RGV0YWlscyIsImlzSGlnaGxpZ2h0ZWQiLCJsZWdlbmRJdGVtIiwiY29tcGxldGVkIiwicmV0dXJuVXBkYXRlZEl0ZW1zIiwidG9nZ2xlTGVnZW5kIiwic2Vjb25kYXJ5RGltZW5zaW9uIiwiaXRlbXMiLCJsZWdlbmRMYWJlbCIsImxlZ2VuZEdyb3VwIiwiYm9vbEl0ZW0iLCJzaG93TGVnZW5kIiwiQ2xvc2VCdXR0b24iLCJkZXRhaWxzVmlldyIsInNob3dEZXRhaWxzSGFuZGxlciIsImdldEVsZW1lbnRCeUlkIiwiZGF0ZSIsImRldGFpbHNIZWFkaW5nIiwiZGVzY3JpcHRpb24iLCJjb2x1bW5zV3JhcHBlciIsImF1dGhvck9yU291cmNlIiwiY2xvc2VCdXR0b24iLCJNYXNrIiwibWFzayIsImFjdGl2YXRlIiwiaXNBY3RpdmF0ZWQiLCJfUm91dGVyIiwicm91dGVyT3B0aW9ucyIsInJvdXRlciIsIlJvdXRlciIsImRpc2FibGVIb3Zlck9uVG91Y2giLCJoYXNIb3ZlckNsYXNzIiwibGFzdFRvdWNoVGltZSIsImVuYWJsZUhvdmVyIiwiY29tcG9uZW50IiwiX29wdGlvbnMiLCJfdHlwZW9mIiwiZW5jb2RlIiwiZGVjb2RlIiwic3RhdGVPYmoiLCJoYXNoU3RhdGUiLCJkZWNvZGVIYXNoIiwidmlld1Byb21pc2VzIiwiaGFzaENoYW5nZSIsInNldFN0YXRlT2JqIiwicmVwbGFjZVN0YXRlIiwiaGlzdG9yeSIsImhhc2hTdHJpbmciLCJlbXB0eSIsInNyY19tYXAiLCJzcmNfbmVzdCIsInNvcnRWYWx1ZXMiLCJyb2xsdXAiLCJzb3J0S2V5cyIsImNyZWF0ZVJlc3VsdCIsInNldFJlc3VsdCIsImtleVZhbHVlIiwidmFsdWVzQnlLZXkiLCJjcmVhdGVPYmplY3QiLCJzZXRPYmplY3QiLCJjcmVhdGVNYXAiLCJzZXRNYXAiLCJzb3J0S2V5Iiwic3JjX3NldCIsInNyY19rZXlzIiwic3JjX3ZhbHVlcyIsInNyY19lbnRyaWVzIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxD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QUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxLQUFBQyxJQUFBLEtBQ0FDLElBQUEsS0FBQUMsSUFBQSxLQUNBQyxJQUFBLEtBRUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLEtBQUFDLElBQUEsS0FDQUMsSUFBQSxLQUFBQyxJQUFBLEtBQ0FDLElBQUEsS0FBQUMsSUFBQSxNQXV0QkFDLEdBQUE1TSxHQW50QkEsQ0FDQTZNLElBQUEsUUFDQUMsSUFBQSxPQUNBQyxJQUFBLE9BQ0FDLElBQUEsU0FDQWhSLElBQUEsVUF1dEJBLFNBQUFpUixHQUFBQyxHQUNBLFdBQUFwUixHQUFBb1IsR0FzQkEsU0FBQUMsR0FBQUMsR0FDQSxPQUFBNVIsR0FBQTErQixLQUFBc3dDLEdBc0NBLFNBQUFDLEdBQUF4d0IsR0FDQSxJQUFBNWxCLEdBQUEsRUFDQStkLEVBQUF6ZCxNQUFBc2xCLEVBQUF0ZCxNQUtBLE9BSEFzZCxFQUFBdG5CLFFBQUEsU0FBQTNDLEVBQUFNLEdBQ0E4aEIsSUFBQS9kLEdBQUEsQ0FBQS9ELEVBQUFOLEtBRUFvaUIsRUFXQSxTQUFBczRCLEdBQUE5NEIsRUFBQStOLEdBQ0EsZ0JBQUFnckIsR0FDQSxPQUFBLzRCLEVBQUErTixFQUFBZ3JCLEtBYUEsU0FBQUMsR0FBQWpqQixFQUFBa2pCLEdBTUEsSUFMQSxJQUFBeDJDLEdBQUEsRUFDQVMsRUFBQTZ5QixFQUFBN3lCLE9BQ0E4bUMsRUFBQSxFQUNBeHBCLEVBQUEsS0FFQS9kLEVBQUFTLEdBQUEsQ0FDQSxJQUFBOUUsRUFBQTIzQixFQUFBdHpCLEdBQ0FyRSxJQUFBNjZDLEdBQUE3NkMsSUFBQW1oQyxJQUNBeEosRUFBQXR6QixHQUFBODhCLEVBQ0EvZSxFQUFBd3BCLEtBQUF2bkMsR0FHQSxPQUFBK2QsRUFVQSxTQUFBMDRCLEdBQUFsa0MsR0FDQSxJQUFBdlMsR0FBQSxFQUNBK2QsRUFBQXpkLE1BQUFpUyxFQUFBakssTUFLQSxPQUhBaUssRUFBQWpVLFFBQUEsU0FBQTNDLEdBQ0FvaUIsSUFBQS9kLEdBQUFyRSxJQUVBb2lCLEVBVUEsU0FBQTI0QixHQUFBbmtDLEdBQ0EsSUFBQXZTLEdBQUEsRUFDQStkLEVBQUF6ZCxNQUFBaVMsRUFBQWpLLE1BS0EsT0FIQWlLLEVBQUFqVSxRQUFBLFNBQUEzQyxHQUNBb2lCLElBQUEvZCxHQUFBLENBQUFyRSxPQUVBb2lCLEVBb0RBLFNBQUE0NEIsR0FBQVIsR0FDQSxPQUFBRCxHQUFBQyxHQWtDQSxTQUFBQSxHQUNBLElBQUFwNEIsRUFBQXNtQixHQUFBdVMsVUFBQSxFQUNBLEtBQUF2UyxHQUFBeCtCLEtBQUFzd0MsTUFDQXA0QixFQUVBLE9BQUFBLEVBdENBODRCLENBQUFWLEdBQ0FqTyxHQUFBaU8sR0FVQSxTQUFBVyxHQUFBWCxHQUNBLE9BQUFELEdBQUFDLEdBb0NBLFNBQUFBLEdBQ0EsT0FBQUEsRUFBQTF4QyxNQUFBNC9CLEtBQUEsR0FwQ0EwUyxDQUFBWixHQWhrQkEsU0FBQUEsR0FDQSxPQUFBQSxFQUFBdG1DLE1BQUEsSUFna0JBbW5DLENBQUFiLEdBVUEsSUFBQWMsR0FBQWxPLEdBLzZCQSxDQUNBbU8sUUFBVSxJQUNWQyxPQUFTLElBQ1RDLE9BQVMsSUFDVEMsU0FBVyxJQUNYQyxRQUFVLE1BZy9CVixJQTB6ZUE5akIsR0ExemVBLFNBQUErakIsRUFBQWg0QixHQUlBLElBNkJBaTRCLEVBN0JBbDNDLEdBSEFpZixFQUFBLE1BQUFBLEVBQUEzRCxHQUFBNFgsR0FBQXJaLFNBQUF5QixHQUFBeGdCLFNBQUFta0IsRUFBQWlVLEdBQUFpa0IsS0FBQTc3QixHQUFBNm9CLE1BR0Fua0MsTUFDQTIxQixFQUFBMVcsRUFBQTBXLEtBQ0F6bkIsR0FBQStRLEVBQUEvUSxNQUNBZ04sR0FBQStELEVBQUEvRCxTQUNBbkcsR0FBQWtLLEVBQUFsSyxLQUNBamEsR0FBQW1rQixFQUFBbmtCLE9BQ0F5NkIsR0FBQXRXLEVBQUFzVyxPQUNBdnlCLEdBQUFpYyxFQUFBamMsT0FDQTRmLEdBQUEzRCxFQUFBMkQsVUFHQXcwQixHQUFBcDNDLEVBQUFoRSxVQUNBcTdDLEdBQUFuOEIsR0FBQWxmLFVBQ0FzN0MsR0FBQXg4QyxHQUFBa0IsVUFHQXU3QyxHQUFBdDRCLEVBQUEsc0JBR0F1NEIsR0FBQUgsR0FBQWwrQixTQUdBbGQsR0FBQXE3QyxHQUFBcjdDLGVBR0FvVSxHQUFBLEVBR0FvbkMsSUFDQVAsRUFBQSxTQUFBUSxLQUFBSCxPQUFBaHNDLE1BQUFnc0MsR0FBQWhzQyxLQUFBb3NDLFVBQUEsS0FDQSxpQkFBQVQsRUFBQSxHQVFBVSxHQUFBTixHQUFBbitCLFNBR0EwK0IsR0FBQUwsR0FBQWo5QyxLQUFBTyxJQUdBZzlDLEdBQUF4OEIsR0FBQTRYLEVBR0E2a0IsR0FBQXhpQixHQUFBLElBQ0FpaUIsR0FBQWo5QyxLQUFBMEIsSUFBQWlILFFBQUFpK0IsR0FBQSxRQUNBaitCLFFBQUEsdUVBSUE4MEMsR0FBQTVTLEdBQUFubUIsRUFBQSs0QixPQUFBejNDLEVBQ0FwRixHQUFBOGpCLEVBQUE5akIsT0FDQTg4QyxHQUFBaDVCLEVBQUFnNUIsV0FDQUMsR0FBQUYsTUFBQUUsWUFBQTMzQyxFQUNBNDNDLEdBQUFwQyxHQUFBajdDLEdBQUFrM0IsZUFBQWwzQixJQUNBczlDLEdBQUF0OUMsR0FBQVksT0FDQTI4QyxHQUFBZixHQUFBZSxxQkFDQXg0QyxHQUFBdTNDLEdBQUF2M0MsT0FDQXk0QyxHQUFBbjlDLE1BQUFvOUMsbUJBQUFoNEMsRUFDQWk0QyxHQUFBcjlDLE1BQUFzOUMsU0FBQWw0QyxFQUNBbTRDLEdBQUF2OUMsTUFBQUMsWUFBQW1GLEVBRUF4RixHQUFBLFdBQ0EsSUFDQSxJQUFBa2lCLEVBQUEwN0IsR0FBQTc5QyxHQUFBLGtCQUVBLE9BREFtaUIsRUFBQSxHQUFlLE9BQ2ZBLEVBQ08sTUFBQW5QLEtBTFAsR0FTQThxQyxHQUFBMzVCLEVBQUFoVCxlQUFBcVAsR0FBQXJQLGNBQUFnVCxFQUFBaFQsYUFDQTRzQyxHQUFBbGpCLEtBQUExcUIsTUFBQXFRLEdBQUFxYSxLQUFBMXFCLEtBQUEwcUIsRUFBQTFxQixJQUNBNnRDLEdBQUE3NUIsRUFBQXZkLGFBQUE0WixHQUFBNVosWUFBQXVkLEVBQUF2ZCxXQUdBcTNDLEdBQUFoa0MsR0FBQWlrQyxLQUNBQyxHQUFBbGtDLEdBQUF1VyxNQUNBNHRCLEdBQUFwK0MsR0FBQXErQyxzQkFDQUMsR0FBQXBCLE1BQUFxQixTQUFBOTRDLEVBQ0ErNEMsR0FBQXI2QixFQUFBbUosU0FDQW14QixHQUFBbkMsR0FBQWpuQixLQUNBcXBCLEdBQUF6RCxHQUFBajdDLEdBQUF5USxLQUFBelEsSUFDQTIrQyxHQUFBMWtDLEdBQUFDLElBQ0Ewa0MsR0FBQTNrQyxHQUFBRyxJQUNBeWtDLEdBQUFoa0IsRUFBQTFxQixJQUNBMnVDLEdBQUEzNkIsRUFBQXVELFNBQ0FxM0IsR0FBQTlrQyxHQUFBK2tDLE9BQ0FDLEdBQUEzQyxHQUFBanVCLFFBR0E2d0IsR0FBQXJCLEdBQUExNUIsRUFBQSxZQUNBZzdCLEdBQUF0QixHQUFBMTVCLEVBQUEsT0FDQXJoQixHQUFBKzZDLEdBQUExNUIsRUFBQSxXQUNBaTdCLEdBQUF2QixHQUFBMTVCLEVBQUEsT0FDQWs3QixHQUFBeEIsR0FBQTE1QixFQUFBLFdBQ0FtN0IsR0FBQXpCLEdBQUE3OUMsR0FBQSxVQUdBdS9DLEdBQUFGLElBQUEsSUFBQUEsR0FHQUcsR0FBQSxHQUdBQyxHQUFBQyxHQUFBUixJQUNBUyxHQUFBRCxHQUFBUCxJQUNBUyxHQUFBRixHQUFBNThDLElBQ0ErOEMsR0FBQUgsR0FBQU4sSUFDQVUsR0FBQUosR0FBQUwsSUFHQVUsR0FBQTEvQyxNQUFBYSxVQUFBdUUsRUFDQXU2QyxHQUFBRCxNQUFBRSxRQUFBeDZDLEVBQ0F5NkMsR0FBQUgsTUFBQTFoQyxTQUFBNVksRUF5SEEsU0FBQTA2QyxHQUFBNS9DLEdBQ0EsR0FBQTYvQyxHQUFBNy9DLEtBQUF1RixHQUFBdkYsbUJBQUE4L0MsSUFBQSxDQUNBLEdBQUE5L0MsYUFBQSsvQyxHQUNBLE9BQUEvL0MsRUFFQSxHQUFBWSxHQUFBMUIsS0FBQWMsRUFBQSxlQUNBLE9BQUFnZ0QsR0FBQWhnRCxHQUdBLFdBQUErL0MsR0FBQS8vQyxHQVdBLElBQUFpZ0QsR0FBQSxXQUNBLFNBQUF4L0MsS0FDQSxnQkFBQXkvQyxHQUNBLElBQUFDLEdBQUFELEdBQ0EsU0FFQSxHQUFBbkQsR0FDQSxPQUFBQSxHQUFBbUQsR0FFQXovQyxFQUFBRSxVQUFBdS9DLEVBQ0EsSUFBQTk5QixFQUFBLElBQUEzaEIsRUFFQSxPQURBQSxFQUFBRSxVQUFBdUUsRUFDQWtkLEdBWkEsR0FxQkEsU0FBQWcrQixNQVdBLFNBQUFMLEdBQUEvL0MsRUFBQXFnRCxHQUNBai9DLEtBQUFrL0MsWUFBQXRnRCxFQUNBb0IsS0FBQW0vQyxZQUFBLEdBQ0FuL0MsS0FBQW8vQyxZQUFBSCxFQUNBai9DLEtBQUFxL0MsVUFBQSxFQUNBci9DLEtBQUFzL0MsV0FBQXg3QyxFQWdGQSxTQUFBNDZDLEdBQUE5L0MsR0FDQW9CLEtBQUFrL0MsWUFBQXRnRCxFQUNBb0IsS0FBQW0vQyxZQUFBLEdBQ0FuL0MsS0FBQXUvQyxRQUFBLEVBQ0F2L0MsS0FBQXcvQyxjQUFBLEVBQ0F4L0MsS0FBQXkvQyxjQUFBLEdBQ0F6L0MsS0FBQTAvQyxjQUFBamUsRUFDQXpoQyxLQUFBMi9DLFVBQUEsR0FnSEEsU0FBQUMsR0FBQXpwQixHQUNBLElBQUFsekIsR0FBQSxFQUNBUyxFQUFBLE1BQUF5eUIsRUFBQSxFQUFBQSxFQUFBenlCLE9BR0EsSUFEQTFELEtBQUE2L0MsVUFDQTU4QyxFQUFBUyxHQUFBLENBQ0EsSUFBQW84QyxFQUFBM3BCLEVBQUFsekIsR0FDQWpELEtBQUF3VixJQUFBc3FDLEVBQUEsR0FBQUEsRUFBQSxLQWlHQSxTQUFBQyxHQUFBNXBCLEdBQ0EsSUFBQWx6QixHQUFBLEVBQ0FTLEVBQUEsTUFBQXl5QixFQUFBLEVBQUFBLEVBQUF6eUIsT0FHQSxJQURBMUQsS0FBQTYvQyxVQUNBNThDLEVBQUFTLEdBQUEsQ0FDQSxJQUFBbzhDLEVBQUEzcEIsRUFBQWx6QixHQUNBakQsS0FBQXdWLElBQUFzcUMsRUFBQSxHQUFBQSxFQUFBLEtBOEdBLFNBQUFFLEdBQUE3cEIsR0FDQSxJQUFBbHpCLEdBQUEsRUFDQVMsRUFBQSxNQUFBeXlCLEVBQUEsRUFBQUEsRUFBQXp5QixPQUdBLElBREExRCxLQUFBNi9DLFVBQ0E1OEMsRUFBQVMsR0FBQSxDQUNBLElBQUFvOEMsRUFBQTNwQixFQUFBbHpCLEdBQ0FqRCxLQUFBd1YsSUFBQXNxQyxFQUFBLEdBQUFBLEVBQUEsS0FpR0EsU0FBQUcsR0FBQTNwQixHQUNBLElBQUFyekIsR0FBQSxFQUNBUyxFQUFBLE1BQUE0eUIsRUFBQSxFQUFBQSxFQUFBNXlCLE9BR0EsSUFEQTFELEtBQUFrZ0QsU0FBQSxJQUFBRixLQUNBLzhDLEVBQUFTLEdBQ0ExRCxLQUFBMEYsSUFBQTR3QixFQUFBcnpCLElBNkNBLFNBQUFrOUMsR0FBQWhxQixHQUNBLElBQUF0MUIsRUFBQWIsS0FBQWtnRCxTQUFBLElBQUFILEdBQUE1cEIsR0FDQW4yQixLQUFBdUwsS0FBQTFLLEVBQUEwSyxLQXFHQSxTQUFBNjBDLEdBQUF4aEQsRUFBQXloRCxHQUNBLElBQUFDLEVBQUFuOEMsR0FBQXZGLEdBQ0EyaEQsR0FBQUQsR0FBQUUsR0FBQTVoRCxHQUNBNmhELEdBQUFILElBQUFDLEdBQUEzRCxHQUFBaCtDLEdBQ0E4aEQsR0FBQUosSUFBQUMsSUFBQUUsR0FBQTVXLEdBQUFqckMsR0FDQStoRCxFQUFBTCxHQUFBQyxHQUFBRSxHQUFBQyxFQUNBMS9CLEVBQUEyL0IsRUFBQXhVLEdBQUF2dEMsRUFBQThFLE9BQUE2QyxJQUFBLEdBQ0E3QyxFQUFBc2QsRUFBQXRkLE9BRUEsUUFBQXhFLEtBQUFOLEdBQ0F5aEQsSUFBQTdnRCxHQUFBMUIsS0FBQWMsRUFBQU0sSUFDQXloRCxJQUVBLFVBQUF6aEQsR0FFQXVoRCxJQUFBLFVBQUF2aEQsR0FBQSxVQUFBQSxJQUVBd2hELElBQUEsVUFBQXhoRCxHQUFBLGNBQUFBLEdBQUEsY0FBQUEsSUFFQTBoRCxHQUFBMWhELEVBQUF3RSxLQUVBc2QsRUFBQWxmLEtBQUE1QyxHQUdBLE9BQUE4aEIsRUFVQSxTQUFBNi9CLEdBQUF0cUIsR0FDQSxJQUFBN3lCLEVBQUE2eUIsRUFBQTd5QixPQUNBLE9BQUFBLEVBQUE2eUIsRUFBQXVxQixHQUFBLEVBQUFwOUMsRUFBQSxJQUFBSSxFQVdBLFNBQUFpOUMsR0FBQXhxQixFQUFBbjNCLEdBQ0EsT0FBQTRoRCxHQUFBQyxHQUFBMXFCLEdBQUEycUIsR0FBQTloRCxFQUFBLEVBQUFtM0IsRUFBQTd5QixTQVVBLFNBQUF5OUMsR0FBQTVxQixHQUNBLE9BQUF5cUIsR0FBQUMsR0FBQTFxQixJQVlBLFNBQUE2cUIsR0FBQS9oRCxFQUFBSCxFQUFBTixJQUNBQSxJQUFBa0YsR0FBQXU5QyxHQUFBaGlELEVBQUFILEdBQUFOLE1BQ0FBLElBQUFrRixHQUFBNUUsS0FBQUcsSUFDQWlpRCxHQUFBamlELEVBQUFILEVBQUFOLEdBY0EsU0FBQTJpRCxHQUFBbGlELEVBQUFILEVBQUFOLEdBQ0EsSUFBQTRpRCxFQUFBbmlELEVBQUFILEdBQ0FNLEdBQUExQixLQUFBdUIsRUFBQUgsSUFBQW1pRCxHQUFBRyxFQUFBNWlELEtBQ0FBLElBQUFrRixHQUFBNUUsS0FBQUcsSUFDQWlpRCxHQUFBamlELEVBQUFILEVBQUFOLEdBWUEsU0FBQTZpRCxHQUFBbHJCLEVBQUFyM0IsR0FFQSxJQURBLElBQUF3RSxFQUFBNnlCLEVBQUE3eUIsT0FDQUEsS0FDQSxHQUFBMjlDLEdBQUE5cUIsRUFBQTd5QixHQUFBLEdBQUF4RSxHQUNBLE9BQUF3RSxFQUdBLFNBY0EsU0FBQWcrQyxHQUFBcFcsRUFBQXRCLEVBQUFDLEVBQUFDLEdBSUEsT0FIQXlYLEdBQUFyVyxFQUFBLFNBQUExc0MsRUFBQU0sRUFBQW9zQyxHQUNBdEIsRUFBQUUsRUFBQXRyQyxFQUFBcXJDLEVBQUFyckMsR0FBQTBzQyxLQUVBcEIsRUFZQSxTQUFBMFgsR0FBQXZpRCxFQUFBbUosR0FDQSxPQUFBbkosR0FBQXdpRCxHQUFBcjVDLEVBQUFzRyxHQUFBdEcsR0FBQW5KLEdBeUJBLFNBQUFpaUQsR0FBQWppRCxFQUFBSCxFQUFBTixHQUNBLGFBQUFNLEdBQUFaLEdBQ0FBLEdBQUFlLEVBQUFILEVBQUEsQ0FDQXFuQixjQUFBLEVBQ0Fob0IsWUFBQSxFQUNBSyxRQUNBNG5CLFVBQUEsSUFHQW5uQixFQUFBSCxHQUFBTixFQVlBLFNBQUFrakQsR0FBQXppRCxFQUFBdWYsR0FNQSxJQUxBLElBQUEzYixHQUFBLEVBQ0FTLEVBQUFrYixFQUFBbGIsT0FDQXNkLEVBQUF6ZCxFQUFBRyxHQUNBcStDLEVBQUEsTUFBQTFpRCxJQUVBNEQsRUFBQVMsR0FDQXNkLEVBQUEvZCxHQUFBOCtDLEVBQUFqK0MsRUFBQXRGLEdBQUFhLEVBQUF1ZixFQUFBM2IsSUFFQSxPQUFBK2QsRUFZQSxTQUFBa2dDLEdBQUFjLEVBQUFDLEVBQUFDLEdBU0EsT0FSQUYsT0FDQUUsSUFBQXArQyxJQUNBaytDLEtBQUFFLEVBQUFGLEVBQUFFLEdBRUFELElBQUFuK0MsSUFDQWsrQyxLQUFBQyxFQUFBRCxFQUFBQyxJQUdBRCxFQW1CQSxTQUFBRyxHQUFBdmpELEVBQUF3akQsRUFBQUMsRUFBQW5qRCxFQUFBRyxFQUFBaWpELEdBQ0EsSUFBQXRoQyxFQUNBdWhDLEVBQUFILEVBQUFwaUIsRUFDQXdpQixFQUFBSixFQUFBbmlCLEVBQ0F3aUIsRUFBQUwsRUFBQWxpQixFQUtBLEdBSEFtaUIsSUFDQXJoQyxFQUFBM2hCLEVBQUFnakQsRUFBQXpqRCxFQUFBTSxFQUFBRyxFQUFBaWpELEdBQUFELEVBQUF6akQsSUFFQW9pQixJQUFBbGQsRUFDQSxPQUFBa2QsRUFFQSxJQUFBKzlCLEdBQUFuZ0QsR0FDQSxPQUFBQSxFQUVBLElBQUEwaEQsRUFBQW44QyxHQUFBdkYsR0FDQSxHQUFBMGhELEdBRUEsR0FEQXQvQixFQTY3R0EsU0FBQXVWLEdBQ0EsSUFBQTd5QixFQUFBNnlCLEVBQUE3eUIsT0FDQXNkLEVBQUEsSUFBQXVWLEVBQUEwQyxZQUFBdjFCLEdBT0EsT0FKQUEsR0FBQSxpQkFBQTZ5QixFQUFBLElBQUEvMkIsR0FBQTFCLEtBQUF5NEIsRUFBQSxXQUNBdlYsRUFBQS9kLE1BQUFzekIsRUFBQXR6QixNQUNBK2QsRUFBQWlYLE1BQUExQixFQUFBMEIsT0FFQWpYLEVBdDhHQTBoQyxDQUFBOWpELElBQ0EyakQsRUFDQSxPQUFBdEIsR0FBQXJpRCxFQUFBb2lCLE9BRU8sQ0FDUCxJQUFBMmhDLEVBQUFDLEdBQUFoa0QsR0FDQWlrRCxFQUFBRixHQUFBdmdCLEdBQUF1Z0IsR0FBQXRnQixFQUVBLEdBQUF1YSxHQUFBaCtDLEdBQ0EsT0FBQWtrRCxHQUFBbGtELEVBQUEyakQsR0FFQSxHQUFBSSxHQUFBbGdCLEdBQUFrZ0IsR0FBQTlnQixHQUFBZ2hCLElBQUF4akQsR0FFQSxHQURBMmhCLEVBQUF3aEMsR0FBQUssRUFBQSxHQUEwQ0UsR0FBQW5rRCxJQUMxQzJqRCxFQUNBLE9BQUFDLEVBaW5FQSxTQUFBaDZDLEVBQUFuSixHQUNBLE9BQUF3aUQsR0FBQXI1QyxFQUFBdzZDLEdBQUF4NkMsR0FBQW5KLEdBam5FQTRqRCxDQUFBcmtELEVBbkhBLFNBQUFTLEVBQUFtSixHQUNBLE9BQUFuSixHQUFBd2lELEdBQUFyNUMsRUFBQTA2QyxHQUFBMTZDLEdBQUFuSixHQWtIQThqRCxDQUFBbmlDLEVBQUFwaUIsSUFvbUVBLFNBQUE0SixFQUFBbkosR0FDQSxPQUFBd2lELEdBQUFyNUMsRUFBQTQ2QyxHQUFBNTZDLEdBQUFuSixHQXBtRUFna0QsQ0FBQXprRCxFQUFBZ2pELEdBQUE1Z0MsRUFBQXBpQixRQUVTLENBQ1QsSUFBQWlwQyxHQUFBOGEsR0FDQSxPQUFBdGpELEVBQUFULEVBQUEsR0FFQW9pQixFQTQ4R0EsU0FBQTNoQixFQUFBc2pELEVBQUFKLEdBQ0EsSUF2bERBZSxFQWJBQyxFQUNBdmlDLEVBbW1EQXdpQyxFQUFBbmtELEVBQUE0NUIsWUFDQSxPQUFBMHBCLEdBQ0EsS0FBQXpmLEdBQ0EsT0FBQXVnQixHQUFBcGtELEdBRUEsS0FBQTJpQyxFQUNBLEtBQUFDLEVBQ0EsV0FBQXVoQixHQUFBbmtELEdBRUEsS0FBQThqQyxHQUNBLE9BMW5EQSxTQUFBdWdCLEVBQUFuQixHQUNBLElBQUFvQixFQUFBcEIsRUFBQWtCLEdBQUFDLEVBQUFDLFFBQUFELEVBQUFDLE9BQ0EsV0FBQUQsRUFBQXpxQixZQUFBMHFCLEVBQUFELEVBQUFFLFdBQUFGLEVBQUFHLFlBd25EQUMsQ0FBQXprRCxFQUFBa2pELEdBRUEsS0FBQW5mLEdBQUEsS0FBQUMsR0FDQSxLQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FBQUMsR0FDQSxLQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FBQUMsR0FBQSxLQUFBQyxHQUNBLE9BQUFtZ0IsR0FBQTFrRCxFQUFBa2pELEdBRUEsS0FBQWpnQixFQUNBLFdBQUFraEIsRUFFQSxLQUFBamhCLEVBQ0EsS0FBQU0sR0FDQSxXQUFBMmdCLEVBQUFua0QsR0FFQSxLQUFBc2pDLEdBQ0EsT0E1bkRBM2hCLEVBQUEsSUFEQXVpQyxFQTZuREFsa0QsR0E1bkRBNDVCLFlBQUFzcUIsRUFBQS82QyxPQUFBNjhCLEdBQUE0VixLQUFBc0ksS0FDQTFKLFVBQUEwSixFQUFBMUosVUFDQTc0QixFQTRuREEsS0FBQTRoQixHQUNBLFdBQUE0Z0IsRUFFQSxLQUFBMWdCLEdBQ0EsT0F0bkRBd2dCLEVBc25EQWprRCxFQXJuREFnL0MsR0FBQWhnRCxHQUFBZ2dELEdBQUF2Z0QsS0FBQXdsRCxJQUFBLElBdjNEQVUsQ0FBQXBsRCxFQUFBK2pELEVBQUFKLElBSUFELE1BQUEsSUFBQW5DLElBQ0EsSUFBQThELEVBQUEzQixFQUFBOWpELElBQUFJLEdBQ0EsR0FBQXFsRCxFQUNBLE9BQUFBLEVBSUEsR0FGQTNCLEVBQUE5c0MsSUFBQTVXLEVBQUFvaUIsR0FFQTJvQixHQUFBL3FDLEdBS0EsT0FKQUEsRUFBQTJDLFFBQUEsU0FBQTJpRCxHQUNBbGpDLEVBQUF0YixJQUFBeThDLEdBQUErQixFQUFBOUIsRUFBQUMsRUFBQTZCLEVBQUF0bEQsRUFBQTBqRCxNQUdBdGhDLEVBR0EsR0FBQXVvQixHQUFBM3FDLEdBS0EsT0FKQUEsRUFBQTJDLFFBQUEsU0FBQTJpRCxFQUFBaGxELEdBQ0E4aEIsRUFBQXhMLElBQUF0VyxFQUFBaWpELEdBQUErQixFQUFBOUIsRUFBQUMsRUFBQW5qRCxFQUFBTixFQUFBMGpELE1BR0F0aEMsRUFHQSxJQUlBcFEsRUFBQTB2QyxFQUFBeDhDLEdBSkEyK0MsRUFDQUQsRUFBQTJCLEdBQUFDLEdBQ0E1QixFQUFBVSxHQUFBcDBDLElBRUFsUSxHQVNBLE9BUkF1ckMsR0FBQXY1QixHQUFBaFMsRUFBQSxTQUFBc2xELEVBQUFobEQsR0FDQTBSLElBRUFzekMsRUFBQXRsRCxFQURBTSxFQUFBZ2xELElBSUEzQyxHQUFBdmdDLEVBQUE5aEIsRUFBQWlqRCxHQUFBK0IsRUFBQTlCLEVBQUFDLEVBQUFuakQsRUFBQU4sRUFBQTBqRCxNQUVBdGhDLEVBeUJBLFNBQUFxakMsR0FBQWhsRCxFQUFBbUosRUFBQW9JLEdBQ0EsSUFBQWxOLEVBQUFrTixFQUFBbE4sT0FDQSxTQUFBckUsRUFDQSxPQUFBcUUsRUFHQSxJQURBckUsRUFBQWhCLEdBQUFnQixHQUNBcUUsS0FBQSxDQUNBLElBQUF4RSxFQUFBMFIsRUFBQWxOLEdBQ0E0bUMsRUFBQTloQyxFQUFBdEosR0FDQU4sRUFBQVMsRUFBQUgsR0FFQSxHQUFBTixJQUFBa0YsS0FBQTVFLEtBQUFHLEtBQUFpckMsRUFBQTFyQyxHQUNBLFNBR0EsU0FhQSxTQUFBMGxELEdBQUE5akMsRUFBQXpVLEVBQUFrRSxHQUNBLHNCQUFBdVEsRUFDQSxVQUFBMkYsR0FBQXlaLEdBRUEsT0FBQTM2QixHQUFBLFdBQW9DdWIsRUFBQXplLE1BQUErQixFQUFBbU0sSUFBK0JsRSxHQWNuRSxTQUFBdzRDLEdBQUFodUIsRUFBQUQsRUFBQTJULEVBQUFXLEdBQ0EsSUFBQTNuQyxHQUFBLEVBQ0EwTSxFQUFBODZCLEdBQ0ErWixHQUFBLEVBQ0E5Z0QsRUFBQTZ5QixFQUFBN3lCLE9BQ0FzZCxFQUFBLEdBQ0F5akMsRUFBQW51QixFQUFBNXlCLE9BRUEsSUFBQUEsRUFDQSxPQUFBc2QsRUFFQWlwQixJQUNBM1QsRUFBQXVVLEdBQUF2VSxFQUFBOFYsR0FBQW5DLEtBRUFXLEdBQ0FqN0IsRUFBQWc3QixHQUNBNlosR0FBQSxHQUVBbHVCLEVBQUE1eUIsUUFBQWc4QixJQUNBL3ZCLEVBQUEyOEIsR0FDQWtZLEdBQUEsRUFDQWx1QixFQUFBLElBQUEycEIsR0FBQTNwQixJQUVBb3VCLEVBQ0EsT0FBQXpoRCxFQUFBUyxHQUFBLENBQ0EsSUFBQTlFLEVBQUEyM0IsRUFBQXR6QixHQUNBMGhELEVBQUEsTUFBQTFhLEVBQUFyckMsRUFBQXFyQyxFQUFBcnJDLEdBR0EsR0FEQUEsRUFBQWdzQyxHQUFBLElBQUFoc0MsSUFBQSxFQUNBNGxELEdBQUFHLEtBQUEsQ0FFQSxJQURBLElBQUFDLEVBQUFILEVBQ0FHLEtBQ0EsR0FBQXR1QixFQUFBc3VCLEtBQUFELEVBQ0EsU0FBQUQsRUFHQTFqQyxFQUFBbGYsS0FBQWxELFFBRUErUSxFQUFBMm1CLEVBQUFxdUIsRUFBQS9aLElBQ0E1cEIsRUFBQWxmLEtBQUFsRCxHQUdBLE9BQUFvaUIsRUF2a0NBdzlCLEdBQUFxRyxpQkFBQSxDQVFBQyxPQUFBMWdCLEdBUUEyZ0IsU0FBQTFnQixHQVFBMmdCLFlBQUExZ0IsR0FRQTJnQixTQUFBLEdBUUFDLFFBQUEsQ0FRQXp1QixFQUFBK25CLEtBS0FBLEdBQUFqL0MsVUFBQXkvQyxHQUFBei9DLFVBQ0FpL0MsR0FBQWovQyxVQUFBMDVCLFlBQUF1bEIsR0FFQUcsR0FBQXAvQyxVQUFBcy9DLEdBQUFHLEdBQUF6L0MsV0FDQW8vQyxHQUFBcC9DLFVBQUEwNUIsWUFBQTBsQixHQXNIQUQsR0FBQW4vQyxVQUFBcy9DLEdBQUFHLEdBQUF6L0MsV0FDQW0vQyxHQUFBbi9DLFVBQUEwNUIsWUFBQXlsQixHQW9HQWtCLEdBQUFyZ0QsVUFBQXNnRCxNQXZFQSxXQUNBNy9DLEtBQUFrZ0QsU0FBQXZDLE1BQUEsU0FDQTM5QyxLQUFBdUwsS0FBQSxHQXNFQXEwQyxHQUFBcmdELFVBQUEsT0F6REEsU0FBQUwsR0FDQSxJQUFBOGhCLEVBQUFoaEIsS0FBQXdzQyxJQUFBdHRDLFdBQUFjLEtBQUFrZ0QsU0FBQWhoRCxHQUVBLE9BREFjLEtBQUF1TCxNQUFBeVYsRUFBQSxJQUNBQSxHQXVEQTQrQixHQUFBcmdELFVBQUFmLElBM0NBLFNBQUFVLEdBQ0EsSUFBQTJCLEVBQUFiLEtBQUFrZ0QsU0FDQSxHQUFBdkMsR0FBQSxDQUNBLElBQUEzOEIsRUFBQW5nQixFQUFBM0IsR0FDQSxPQUFBOGhCLElBQUE2ZSxFQUFBLzdCLEVBQUFrZCxFQUVBLE9BQUF4aEIsR0FBQTFCLEtBQUErQyxFQUFBM0IsR0FBQTJCLEVBQUEzQixHQUFBNEUsR0FzQ0E4N0MsR0FBQXJnRCxVQUFBaXRDLElBMUJBLFNBQUF0dEMsR0FDQSxJQUFBMkIsRUFBQWIsS0FBQWtnRCxTQUNBLE9BQUF2QyxHQUFBOThDLEVBQUEzQixLQUFBNEUsRUFBQXRFLEdBQUExQixLQUFBK0MsRUFBQTNCLElBeUJBMGdELEdBQUFyZ0QsVUFBQWlXLElBWkEsU0FBQXRXLEVBQUFOLEdBQ0EsSUFBQWlDLEVBQUFiLEtBQUFrZ0QsU0FHQSxPQUZBbGdELEtBQUF1TCxNQUFBdkwsS0FBQXdzQyxJQUFBdHRDLEdBQUEsSUFDQTJCLEVBQUEzQixHQUFBeStDLElBQUEvK0MsSUFBQWtGLEVBQUErN0IsRUFBQWpoQyxFQUNBb0IsTUF5SEErL0MsR0FBQXhnRCxVQUFBc2dELE1BcEZBLFdBQ0E3L0MsS0FBQWtnRCxTQUFBLEdBQ0FsZ0QsS0FBQXVMLEtBQUEsR0FtRkF3MEMsR0FBQXhnRCxVQUFBLE9BdkVBLFNBQUFMLEdBQ0EsSUFBQTJCLEVBQUFiLEtBQUFrZ0QsU0FDQWo5QyxFQUFBdytDLEdBQUE1Z0QsRUFBQTNCLEdBRUEsUUFBQStELEVBQUEsSUFJQUEsR0FEQXBDLEVBQUE2QyxPQUFBLEVBRUE3QyxFQUFBc2tELE1BRUEvaEQsR0FBQXRGLEtBQUErQyxFQUFBb0MsRUFBQSxLQUVBakQsS0FBQXVMLEtBQ0EsS0EwREF3MEMsR0FBQXhnRCxVQUFBZixJQTlDQSxTQUFBVSxHQUNBLElBQUEyQixFQUFBYixLQUFBa2dELFNBQ0FqOUMsRUFBQXcrQyxHQUFBNWdELEVBQUEzQixHQUVBLE9BQUErRCxFQUFBLEVBQUFhLEVBQUFqRCxFQUFBb0MsR0FBQSxJQTJDQTg4QyxHQUFBeGdELFVBQUFpdEMsSUEvQkEsU0FBQXR0QyxHQUNBLE9BQUF1aUQsR0FBQXpoRCxLQUFBa2dELFNBQUFoaEQsSUFBQSxHQStCQTZnRCxHQUFBeGdELFVBQUFpVyxJQWxCQSxTQUFBdFcsRUFBQU4sR0FDQSxJQUFBaUMsRUFBQWIsS0FBQWtnRCxTQUNBajlDLEVBQUF3K0MsR0FBQTVnRCxFQUFBM0IsR0FRQSxPQU5BK0QsRUFBQSxLQUNBakQsS0FBQXVMLEtBQ0ExSyxFQUFBaUIsS0FBQSxDQUFBNUMsRUFBQU4sS0FFQWlDLEVBQUFvQyxHQUFBLEdBQUFyRSxFQUVBb0IsTUEyR0FnZ0QsR0FBQXpnRCxVQUFBc2dELE1BdEVBLFdBQ0E3L0MsS0FBQXVMLEtBQUEsRUFDQXZMLEtBQUFrZ0QsU0FBQSxDQUNBNTRDLEtBQUEsSUFBQXM0QyxHQUNBLzJCLElBQUEsSUFBQTIwQixJQUFBdUMsSUFDQTNHLE9BQUEsSUFBQXdHLEtBa0VBSSxHQUFBemdELFVBQUEsT0FyREEsU0FBQUwsR0FDQSxJQUFBOGhCLEVBQUFva0MsR0FBQXBsRCxLQUFBZCxHQUFBLE9BQUFBLEdBRUEsT0FEQWMsS0FBQXVMLE1BQUF5VixFQUFBLElBQ0FBLEdBbURBZy9CLEdBQUF6Z0QsVUFBQWYsSUF2Q0EsU0FBQVUsR0FDQSxPQUFBa21ELEdBQUFwbEQsS0FBQWQsR0FBQVYsSUFBQVUsSUF1Q0E4Z0QsR0FBQXpnRCxVQUFBaXRDLElBM0JBLFNBQUF0dEMsR0FDQSxPQUFBa21ELEdBQUFwbEQsS0FBQWQsR0FBQXN0QyxJQUFBdHRDLElBMkJBOGdELEdBQUF6Z0QsVUFBQWlXLElBZEEsU0FBQXRXLEVBQUFOLEdBQ0EsSUFBQWlDLEVBQUF1a0QsR0FBQXBsRCxLQUFBZCxHQUNBcU0sRUFBQTFLLEVBQUEwSyxLQUlBLE9BRkExSyxFQUFBMlUsSUFBQXRXLEVBQUFOLEdBQ0FvQixLQUFBdUwsTUFBQTFLLEVBQUEwSyxRQUFBLElBQ0F2TCxNQTJEQWlnRCxHQUFBMWdELFVBQUFtRyxJQUFBdTZDLEdBQUExZ0QsVUFBQXVDLEtBbkJBLFNBQUFsRCxHQUVBLE9BREFvQixLQUFBa2dELFNBQUExcUMsSUFBQTVXLEVBQUFpaEMsR0FDQTcvQixNQWtCQWlnRCxHQUFBMWdELFVBQUFpdEMsSUFOQSxTQUFBNXRDLEdBQ0EsT0FBQW9CLEtBQUFrZ0QsU0FBQTFULElBQUE1dEMsSUF1R0F1aEQsR0FBQTVnRCxVQUFBc2dELE1BM0VBLFdBQ0E3L0MsS0FBQWtnRCxTQUFBLElBQUFILEdBQ0EvL0MsS0FBQXVMLEtBQUEsR0EwRUE0MEMsR0FBQTVnRCxVQUFBLE9BOURBLFNBQUFMLEdBQ0EsSUFBQTJCLEVBQUFiLEtBQUFrZ0QsU0FDQWwvQixFQUFBbmdCLEVBQUEsT0FBQTNCLEdBR0EsT0FEQWMsS0FBQXVMLEtBQUExSyxFQUFBMEssS0FDQXlWLEdBMERBbS9CLEdBQUE1Z0QsVUFBQWYsSUE5Q0EsU0FBQVUsR0FDQSxPQUFBYyxLQUFBa2dELFNBQUExaEQsSUFBQVUsSUE4Q0FpaEQsR0FBQTVnRCxVQUFBaXRDLElBbENBLFNBQUF0dEMsR0FDQSxPQUFBYyxLQUFBa2dELFNBQUExVCxJQUFBdHRDLElBa0NBaWhELEdBQUE1Z0QsVUFBQWlXLElBckJBLFNBQUF0VyxFQUFBTixHQUNBLElBQUFpQyxFQUFBYixLQUFBa2dELFNBQ0EsR0FBQXIvQyxhQUFBay9DLEdBQUEsQ0FDQSxJQUFBc0YsRUFBQXhrRCxFQUFBcS9DLFNBQ0EsSUFBQTFDLElBQUE2SCxFQUFBM2hELE9BQUFnOEIsRUFBQSxFQUdBLE9BRkEybEIsRUFBQXZqRCxLQUFBLENBQUE1QyxFQUFBTixJQUNBb0IsS0FBQXVMLE9BQUExSyxFQUFBMEssS0FDQXZMLEtBRUFhLEVBQUFiLEtBQUFrZ0QsU0FBQSxJQUFBRixHQUFBcUYsR0FJQSxPQUZBeGtELEVBQUEyVSxJQUFBdFcsRUFBQU4sR0FDQW9CLEtBQUF1TCxLQUFBMUssRUFBQTBLLEtBQ0F2TCxNQTRjQSxJQUFBMmhELEdBQUEyRCxHQUFBQyxJQVVBQyxHQUFBRixHQUFBRyxJQUFBLEdBV0EsU0FBQUMsR0FBQXBhLEVBQUFoQixHQUNBLElBQUF0cEIsR0FBQSxFQUtBLE9BSkEyZ0MsR0FBQXJXLEVBQUEsU0FBQTFzQyxFQUFBcUUsRUFBQXFvQyxHQUVBLE9BREF0cUIsSUFBQXNwQixFQUFBMXJDLEVBQUFxRSxFQUFBcW9DLEtBR0F0cUIsRUFhQSxTQUFBMmtDLEdBQUFwdkIsRUFBQTBULEVBQUFXLEdBSUEsSUFIQSxJQUFBM25DLEdBQUEsRUFDQVMsRUFBQTZ5QixFQUFBN3lCLFNBRUFULEVBQUFTLEdBQUEsQ0FDQSxJQUFBOUUsRUFBQTIzQixFQUFBdHpCLEdBQ0FpcEMsRUFBQWpDLEVBQUFyckMsR0FFQSxTQUFBc3RDLElBQUF5WSxJQUFBN2dELEVBQ0Fvb0MsT0FBQTBaLEdBQUExWixHQUNBdEIsRUFBQXNCLEVBQUF5WSxJQUVBLElBQUFBLEVBQUF6WSxFQUNBbHJCLEVBQUFwaUIsRUFHQSxPQUFBb2lCLEVBdUNBLFNBQUE2a0MsR0FBQXZhLEVBQUFoQixHQUNBLElBQUF0cEIsRUFBQSxHQU1BLE9BTEEyZ0MsR0FBQXJXLEVBQUEsU0FBQTFzQyxFQUFBcUUsRUFBQXFvQyxHQUNBaEIsRUFBQTFyQyxFQUFBcUUsRUFBQXFvQyxJQUNBdHFCLEVBQUFsZixLQUFBbEQsS0FHQW9pQixFQWNBLFNBQUE4a0MsR0FBQXZ2QixFQUFBd3ZCLEVBQUF6YixFQUFBMGIsRUFBQWhsQyxHQUNBLElBQUEvZCxHQUFBLEVBQ0FTLEVBQUE2eUIsRUFBQTd5QixPQUtBLElBSEE0bUMsTUFBQTJiLElBQ0FqbEMsTUFBQSxNQUVBL2QsRUFBQVMsR0FBQSxDQUNBLElBQUE5RSxFQUFBMjNCLEVBQUF0ekIsR0FDQThpRCxFQUFBLEdBQUF6YixFQUFBMXJDLEdBQ0FtbkQsRUFBQSxFQUVBRCxHQUFBbG5ELEVBQUFtbkQsRUFBQSxFQUFBemIsRUFBQTBiLEVBQUFobEMsR0FFQThwQixHQUFBOXBCLEVBQUFwaUIsR0FFU29uRCxJQUNUaGxDLElBQUF0ZCxRQUFBOUUsR0FHQSxPQUFBb2lCLEVBY0EsSUFBQWtsQyxHQUFBQyxLQVlBQyxHQUFBRCxJQUFBLEdBVUEsU0FBQVosR0FBQWxtRCxFQUFBNHFDLEdBQ0EsT0FBQTVxQyxHQUFBNm1ELEdBQUE3bUQsRUFBQTRxQyxFQUFBbjdCLElBV0EsU0FBQTIyQyxHQUFBcG1ELEVBQUE0cUMsR0FDQSxPQUFBNXFDLEdBQUErbUQsR0FBQS9tRCxFQUFBNHFDLEVBQUFuN0IsSUFZQSxTQUFBdTNDLEdBQUFobkQsRUFBQXVSLEdBQ0EsT0FBQTI1QixHQUFBMzVCLEVBQUEsU0FBQTFSLEdBQ0EsT0FBQTZoQixHQUFBMWhCLEVBQUFILE1BWUEsU0FBQW9uRCxHQUFBam5ELEVBQUFrbkQsR0FNQSxJQUhBLElBQUF0akQsRUFBQSxFQUNBUyxHQUhBNmlELEVBQUFDLEdBQUFELEVBQUFsbkQsSUFHQXFFLE9BRUEsTUFBQXJFLEdBQUE0RCxFQUFBUyxHQUNBckUsSUFBQW9uRCxHQUFBRixFQUFBdGpELE9BRUEsT0FBQUEsTUFBQVMsRUFBQXJFLEVBQUF5RSxFQWNBLFNBQUE0aUQsR0FBQXJuRCxFQUFBc25ELEVBQUFDLEdBQ0EsSUFBQTVsQyxFQUFBMmxDLEVBQUF0bkQsR0FDQSxPQUFBOEUsR0FBQTlFLEdBQUEyaEIsRUFBQThwQixHQUFBOXBCLEVBQUE0bEMsRUFBQXZuRCxJQVVBLFNBQUF3bkQsR0FBQWpvRCxHQUNBLGFBQUFBLEVBQ0FBLElBQUFrRixFQUFBaS9CLEdBQUFQLEVBRUF5WixVQUFBNTlDLEdBQUFPLEdBcTJGQSxTQUFBQSxHQUNBLElBQUFrb0QsRUFBQXRuRCxHQUFBMUIsS0FBQWMsRUFBQXE5QyxJQUNBMEcsRUFBQS9qRCxFQUFBcTlDLElBRUEsSUFDQXI5QyxFQUFBcTlDLElBQUFuNEMsRUFDQSxJQUFBaWpELEdBQUEsRUFDTyxNQUFBMTFDLElBRVAsSUFBQTJQLEVBQUFtNkIsR0FBQXI5QyxLQUFBYyxHQVFBLE9BUEFtb0QsSUFDQUQsRUFDQWxvRCxFQUFBcTlDLElBQUEwRyxTQUVBL2pELEVBQUFxOUMsS0FHQWo3QixFQXIzRkFnbUMsQ0FBQXBvRCxHQXk0R0EsU0FBQUEsR0FDQSxPQUFBdThDLEdBQUFyOUMsS0FBQWMsR0F6NEdBcW9ELENBQUFyb0QsR0FZQSxTQUFBc29ELEdBQUF0b0QsRUFBQXVvRCxHQUNBLE9BQUF2b0QsRUFBQXVvRCxFQVdBLFNBQUFDLEdBQUEvbkQsRUFBQUgsR0FDQSxhQUFBRyxHQUFBRyxHQUFBMUIsS0FBQXVCLEVBQUFILEdBV0EsU0FBQW1vRCxHQUFBaG9ELEVBQUFILEdBQ0EsYUFBQUcsR0FBQUgsS0FBQWIsR0FBQWdCLEdBMEJBLFNBQUFpb0QsR0FBQUMsRUFBQXRkLEVBQUFXLEdBU0EsSUFSQSxJQUFBajdCLEVBQUFpN0IsRUFBQUQsR0FBQUYsR0FDQS9tQyxFQUFBNmpELEVBQUEsR0FBQTdqRCxPQUNBOGpELEVBQUFELEVBQUE3akQsT0FDQStqRCxFQUFBRCxFQUNBRSxFQUFBbmtELEVBQUFpa0QsR0FDQUcsRUFBQUMsSUFDQTVtQyxFQUFBLEdBRUF5bUMsS0FBQSxDQUNBLElBQUFseEIsRUFBQWd4QixFQUFBRSxHQUNBQSxHQUFBeGQsSUFDQTFULEVBQUFzVSxHQUFBdFUsRUFBQTZWLEdBQUFuQyxLQUVBMGQsRUFBQTFLLEdBQUExbUIsRUFBQTd5QixPQUFBaWtELEdBQ0FELEVBQUFELElBQUE3YyxJQUFBWCxHQUFBdm1DLEdBQUEsS0FBQTZ5QixFQUFBN3lCLFFBQUEsS0FDQSxJQUFBdThDLEdBQUF3SCxHQUFBbHhCLEdBQ0F6eUIsRUFFQXl5QixFQUFBZ3hCLEVBQUEsR0FFQSxJQUFBdGtELEdBQUEsRUFDQTRrRCxFQUFBSCxFQUFBLEdBRUFoRCxFQUNBLE9BQUF6aEQsRUFBQVMsR0FBQXNkLEVBQUF0ZCxPQUFBaWtELEdBQUEsQ0FDQSxJQUFBL29ELEVBQUEyM0IsRUFBQXR6QixHQUNBMGhELEVBQUExYSxJQUFBcnJDLEtBR0EsR0FEQUEsRUFBQWdzQyxHQUFBLElBQUFoc0MsSUFBQSxJQUNBaXBELEVBQ0F2YixHQUFBdWIsRUFBQWxELEdBQ0FoMUMsRUFBQXFSLEVBQUEyakMsRUFBQS9aLElBQ0EsQ0FFQSxJQURBNmMsRUFBQUQsSUFDQUMsR0FBQSxDQUNBLElBQUFsYixFQUFBbWIsRUFBQUQsR0FDQSxLQUFBbGIsRUFDQUQsR0FBQUMsRUFBQW9ZLEdBQ0FoMUMsRUFBQTQzQyxFQUFBRSxHQUFBOUMsRUFBQS9aLElBRUEsU0FBQThaLEVBR0FtRCxHQUNBQSxFQUFBL2xELEtBQUE2aUQsR0FFQTNqQyxFQUFBbGYsS0FBQWxELElBR0EsT0FBQW9pQixFQStCQSxTQUFBOG1DLEdBQUF6b0QsRUFBQWtuRCxFQUFBdDJDLEdBR0EsSUFBQXVRLEVBQUEsT0FEQW5oQixFQUFBYyxHQUFBZCxFQURBa25ELEVBQUFDLEdBQUFELEVBQUFsbkQsS0FFQUEsSUFBQW9uRCxHQUFBc0IsR0FBQXhCLEtBQ0EsYUFBQS9sQyxFQUFBMWMsRUFBQS9CLEdBQUF5ZSxFQUFBbmhCLEVBQUE0USxHQVVBLFNBQUErM0MsR0FBQXBwRCxHQUNBLE9BQUE2L0MsR0FBQTcvQyxJQUFBaW9ELEdBQUFqb0QsSUFBQWlqQyxFQXVDQSxTQUFBb21CLEdBQUFycEQsRUFBQXVvRCxFQUFBL0UsRUFBQUMsRUFBQUMsR0FDQSxPQUFBMWpELElBQUF1b0QsSUFHQSxNQUFBdm9ELEdBQUEsTUFBQXVvRCxJQUFBMUksR0FBQTcvQyxLQUFBNi9DLEdBQUEwSSxHQUNBdm9ELE1BQUF1b0QsS0FtQkEsU0FBQTluRCxFQUFBOG5ELEVBQUEvRSxFQUFBQyxFQUFBNkYsRUFBQTVGLEdBQ0EsSUFBQTZGLEVBQUFoa0QsR0FBQTlFLEdBQ0Erb0QsRUFBQWprRCxHQUFBZ2pELEdBQ0FrQixFQUFBRixFQUFBcm1CLEVBQUE4Z0IsR0FBQXZqRCxHQUNBaXBELEVBQUFGLEVBQUF0bUIsRUFBQThnQixHQUFBdUUsR0FLQW9CLEdBSEFGLEtBQUF4bUIsRUFBQVksRUFBQTRsQixJQUdBNWxCLEVBQ0ErbEIsR0FIQUYsS0FBQXptQixFQUFBWSxFQUFBNmxCLElBR0E3bEIsRUFDQWdtQixFQUFBSixHQUFBQyxFQUVBLEdBQUFHLEdBQUE3TCxHQUFBdjlDLEdBQUEsQ0FDQSxJQUFBdTlDLEdBQUF1SyxHQUNBLFNBRUFnQixHQUFBLEVBQ0FJLEdBQUEsRUFFQSxHQUFBRSxJQUFBRixFQUVBLE9BREFqRyxNQUFBLElBQUFuQyxJQUNBZ0ksR0FBQXRlLEdBQUF4cUMsR0FDQXFwRCxHQUFBcnBELEVBQUE4bkQsRUFBQS9FLEVBQUFDLEVBQUE2RixFQUFBNUYsR0F5MEVBLFNBQUFqakQsRUFBQThuRCxFQUFBeEUsRUFBQVAsRUFBQUMsRUFBQTZGLEVBQUE1RixHQUNBLE9BQUFLLEdBQ0EsS0FBQXhmLEdBQ0EsR0FBQTlqQyxFQUFBd2tELFlBQUFzRCxFQUFBdEQsWUFDQXhrRCxFQUFBdWtELFlBQUF1RCxFQUFBdkQsV0FDQSxTQUVBdmtELElBQUFza0QsT0FDQXdELElBQUF4RCxPQUVBLEtBQUF6Z0IsR0FDQSxRQUFBN2pDLEVBQUF3a0QsWUFBQXNELEVBQUF0RCxhQUNBcUUsRUFBQSxJQUFBMU0sR0FBQW44QyxHQUFBLElBQUFtOEMsR0FBQTJMLEtBS0EsS0FBQW5sQixFQUNBLEtBQUFDLEVBQ0EsS0FBQU0sRUFHQSxPQUFBOGUsSUFBQWhpRCxHQUFBOG5ELEdBRUEsS0FBQWhsQixFQUNBLE9BQUE5aUMsRUFBQW5CLE1BQUFpcEQsRUFBQWpwRCxNQUFBbUIsRUFBQWdnQixTQUFBOG5DLEVBQUE5bkMsUUFFQSxLQUFBc2pCLEdBQ0EsS0FBQUUsR0FJQSxPQUFBeGpDLEdBQUE4bkQsRUFBQSxHQUVBLEtBQUE3a0IsRUFDQSxJQUFBcW1CLEVBQUF0UCxHQUVBLEtBQUF6VyxHQUNBLElBQUFnbUIsRUFBQXhHLEVBQUFqaUIsRUFHQSxHQUZBd29CLE1BQUFqUCxJQUVBcjZDLEVBQUFrTSxNQUFBNDdDLEVBQUE1N0MsT0FBQXE5QyxFQUNBLFNBR0EsSUFBQTNFLEVBQUEzQixFQUFBOWpELElBQUFhLEdBQ0EsR0FBQTRrRCxFQUNBLE9BQUFBLEdBQUFrRCxFQUVBL0UsR0FBQWhpQixFQUdBa2lCLEVBQUE5c0MsSUFBQW5XLEVBQUE4bkQsR0FDQSxJQUFBbm1DLEVBQUEwbkMsR0FBQUMsRUFBQXRwRCxHQUFBc3BELEVBQUF4QixHQUFBL0UsRUFBQUMsRUFBQTZGLEVBQUE1RixHQUVBLE9BREFBLEVBQUEsT0FBQWpqRCxHQUNBMmhCLEVBRUEsS0FBQThoQixHQUNBLEdBQUF1YixHQUNBLE9BQUFBLEdBQUF2Z0QsS0FBQXVCLElBQUFnL0MsR0FBQXZnRCxLQUFBcXBELEdBR0EsU0F0NEVBMEIsQ0FBQXhwRCxFQUFBOG5ELEVBQUFrQixFQUFBakcsRUFBQUMsRUFBQTZGLEVBQUE1RixHQUVBLEtBQUFGLEVBQUFqaUIsR0FBQSxDQUNBLElBQUEyb0IsRUFBQVAsR0FBQS9vRCxHQUFBMUIsS0FBQXVCLEVBQUEsZUFDQTBwRCxFQUFBUCxHQUFBaHBELEdBQUExQixLQUFBcXBELEVBQUEsZUFFQSxHQUFBMkIsR0FBQUMsRUFBQSxDQUNBLElBQUFDLEVBQUFGLEVBQUF6cEQsRUFBQVQsUUFBQVMsRUFDQTRwRCxFQUFBRixFQUFBNUIsRUFBQXZvRCxRQUFBdW9ELEVBR0EsT0FEQTdFLE1BQUEsSUFBQW5DLElBQ0ErSCxFQUFBYyxFQUFBQyxFQUFBN0csRUFBQUMsRUFBQUMsSUFHQSxRQUFBbUcsSUFHQW5HLE1BQUEsSUFBQW5DLElBcTRFQSxTQUFBOWdELEVBQUE4bkQsRUFBQS9FLEVBQUFDLEVBQUE2RixFQUFBNUYsR0FDQSxJQUFBc0csRUFBQXhHLEVBQUFqaUIsRUFDQStvQixFQUFBOUUsR0FBQS9rRCxHQUNBOHBELEVBQUFELEVBQUF4bEQsT0FFQThqRCxFQURBcEQsR0FBQStDLEdBQ0F6akQsT0FFQSxHQUFBeWxELEdBQUEzQixJQUFBb0IsRUFDQSxTQUdBLElBREEsSUFBQTNsRCxFQUFBa21ELEVBQ0FsbUQsS0FBQSxDQUNBLElBQUEvRCxFQUFBZ3FELEVBQUFqbUQsR0FDQSxLQUFBMmxELEVBQUExcEQsS0FBQWlvRCxFQUFBM25ELEdBQUExQixLQUFBcXBELEVBQUFqb0QsSUFDQSxTQUlBLElBQUEra0QsRUFBQTNCLEVBQUE5akQsSUFBQWEsR0FDQSxHQUFBNGtELEdBQUEzQixFQUFBOWpELElBQUEyb0QsR0FDQSxPQUFBbEQsR0FBQWtELEVBRUEsSUFBQW5tQyxHQUFBLEVBQ0FzaEMsRUFBQTlzQyxJQUFBblcsRUFBQThuRCxHQUNBN0UsRUFBQTlzQyxJQUFBMnhDLEVBQUE5bkQsR0FHQSxJQURBLElBQUErcEQsRUFBQVIsSUFDQTNsRCxFQUFBa21ELEdBQUEsQ0FDQWpxRCxFQUFBZ3FELEVBQUFqbUQsR0FDQSxJQUFBdStDLEVBQUFuaUQsRUFBQUgsR0FDQW1xRCxFQUFBbEMsRUFBQWpvRCxHQUVBLEdBQUFtakQsRUFDQSxJQUFBaUgsRUFBQVYsRUFDQXZHLEVBQUFnSCxFQUFBN0gsRUFBQXRpRCxFQUFBaW9ELEVBQUE5bkQsRUFBQWlqRCxHQUNBRCxFQUFBYixFQUFBNkgsRUFBQW5xRCxFQUFBRyxFQUFBOG5ELEVBQUE3RSxHQUdBLEtBQUFnSCxJQUFBeGxELEVBQ0EwOUMsSUFBQTZILEdBQUFuQixFQUFBMUcsRUFBQTZILEVBQUFqSCxFQUFBQyxFQUFBQyxHQUNBZ0gsR0FDQSxDQUNBdG9DLEdBQUEsRUFDQSxNQUVBb29DLE1BQUEsZUFBQWxxRCxHQUVBLEdBQUE4aEIsSUFBQW9vQyxFQUFBLENBQ0EsSUFBQUcsRUFBQWxxRCxFQUFBNDVCLFlBQ0F1d0IsRUFBQXJDLEVBQUFsdUIsWUFHQXN3QixHQUFBQyxHQUNBLGdCQUFBbnFELEdBQUEsZ0JBQUE4bkQsS0FDQSxtQkFBQW9DLG1CQUNBLG1CQUFBQyxxQkFDQXhvQyxHQUFBLEdBS0EsT0FGQXNoQyxFQUFBLE9BQUFqakQsR0FDQWlqRCxFQUFBLE9BQUE2RSxHQUNBbm1DLEVBajhFQXlvQyxDQUFBcHFELEVBQUE4bkQsRUFBQS9FLEVBQUFDLEVBQUE2RixFQUFBNUYsSUEzREFvSCxDQUFBOXFELEVBQUF1b0QsRUFBQS9FLEVBQUFDLEVBQUE0RixHQUFBM0YsSUFtRkEsU0FBQXFILEdBQUF0cUQsRUFBQW1KLEVBQUFvaEQsRUFBQXZILEdBQ0EsSUFBQXAvQyxFQUFBMm1ELEVBQUFsbUQsT0FDQUEsRUFBQVQsRUFDQTRtRCxHQUFBeEgsRUFFQSxTQUFBaGpELEVBQ0EsT0FBQXFFLEVBR0EsSUFEQXJFLEVBQUFoQixHQUFBZ0IsR0FDQTRELEtBQUEsQ0FDQSxJQUFBcEMsRUFBQStvRCxFQUFBM21ELEdBQ0EsR0FBQTRtRCxHQUFBaHBELEVBQUEsR0FDQUEsRUFBQSxLQUFBeEIsRUFBQXdCLEVBQUEsTUFDQUEsRUFBQSxLQUFBeEIsR0FFQSxTQUdBLE9BQUE0RCxFQUFBUyxHQUFBLENBRUEsSUFBQXhFLEdBREEyQixFQUFBK29ELEVBQUEzbUQsSUFDQSxHQUNBdStDLEVBQUFuaUQsRUFBQUgsR0FDQTRxRCxFQUFBanBELEVBQUEsR0FFQSxHQUFBZ3BELEdBQUFocEQsRUFBQSxJQUNBLEdBQUEyZ0QsSUFBQTE5QyxLQUFBNUUsS0FBQUcsR0FDQSxhQUVTLENBQ1QsSUFBQWlqRCxFQUFBLElBQUFuQyxHQUNBLEdBQUFrQyxFQUNBLElBQUFyaEMsRUFBQXFoQyxFQUFBYixFQUFBc0ksRUFBQTVxRCxFQUFBRyxFQUFBbUosRUFBQTg1QyxHQUVBLEtBQUF0aEMsSUFBQWxkLEVBQ0Fta0QsR0FBQTZCLEVBQUF0SSxFQUFBcmhCLEVBQUFDLEVBQUFpaUIsRUFBQUMsR0FDQXRoQyxHQUVBLFVBSUEsU0FXQSxTQUFBK29DLEdBQUFuckQsR0FDQSxTQUFBbWdELEdBQUFuZ0QsS0FvNEZBNGhCLEVBcDRGQTVoQixFQXE0RkFvOEMsVUFBQXg2QixNQWw0RkFPLEdBQUFuaUIsR0FBQTA4QyxHQUFBOVYsSUFDQTE4QixLQUFBaTFDLEdBQUFuL0MsSUFnNEZBLElBQUE0aEIsRUFwMUZBLFNBQUF3cEMsR0FBQXByRCxHQUdBLHlCQUFBQSxFQUNBQSxFQUVBLE1BQUFBLEVBQ0FxckQsR0FFQSxpQkFBQXJyRCxFQUNBdUYsR0FBQXZGLEdBQ0FzckQsR0FBQXRyRCxFQUFBLEdBQUFBLEVBQUEsSUFDQXVyRCxHQUFBdnJELEdBRUFVLEdBQUFWLEdBVUEsU0FBQXdyRCxHQUFBL3FELEdBQ0EsSUFBQWdyRCxHQUFBaHJELEdBQ0EsT0FBQTA5QyxHQUFBMTlDLEdBRUEsSUFBQTJoQixFQUFBLEdBQ0EsUUFBQTloQixLQUFBYixHQUFBZ0IsR0FDQUcsR0FBQTFCLEtBQUF1QixFQUFBSCxJQUFBLGVBQUFBLEdBQ0E4aEIsRUFBQWxmLEtBQUE1QyxHQUdBLE9BQUE4aEIsRUFVQSxTQUFBc3BDLEdBQUFqckQsR0FDQSxJQUFBMC9DLEdBQUExL0MsR0FDQSxPQW84RkEsU0FBQUEsR0FDQSxJQUFBMmhCLEVBQUEsR0FDQSxTQUFBM2hCLEVBQ0EsUUFBQUgsS0FBQWIsR0FBQWdCLEdBQ0EyaEIsRUFBQWxmLEtBQUE1QyxHQUdBLE9BQUE4aEIsRUEzOEZBdXBDLENBQUFsckQsR0FFQSxJQUFBbXJELEVBQUFILEdBQUFockQsR0FDQTJoQixFQUFBLEdBRUEsUUFBQTloQixLQUFBRyxHQUNBLGVBQUFILElBQUFzckQsR0FBQWhyRCxHQUFBMUIsS0FBQXVCLEVBQUFILEtBQ0E4aEIsRUFBQWxmLEtBQUE1QyxHQUdBLE9BQUE4aEIsRUFZQSxTQUFBeXBDLEdBQUE3ckQsRUFBQXVvRCxHQUNBLE9BQUF2b0QsRUFBQXVvRCxFQVdBLFNBQUF1RCxHQUFBcGYsRUFBQXJCLEdBQ0EsSUFBQWhuQyxHQUFBLEVBQ0ErZCxFQUFBMnBDLEdBQUFyZixHQUFBL25DLEVBQUErbkMsRUFBQTVuQyxRQUFBLEdBS0EsT0FIQWkrQyxHQUFBclcsRUFBQSxTQUFBMXNDLEVBQUFNLEVBQUFvc0MsR0FDQXRxQixJQUFBL2QsR0FBQWduQyxFQUFBcnJDLEVBQUFNLEVBQUFvc0MsS0FFQXRxQixFQVVBLFNBQUFtcEMsR0FBQTNoRCxHQUNBLElBQUFvaEQsRUFBQWdCLEdBQUFwaUQsR0FDQSxVQUFBb2hELEVBQUFsbUQsUUFBQWttRCxFQUFBLE1BQ0FpQixHQUFBakIsRUFBQSxNQUFBQSxFQUFBLE9BRUEsU0FBQXZxRCxHQUNBLE9BQUFBLElBQUFtSixHQUFBbWhELEdBQUF0cUQsRUFBQW1KLEVBQUFvaEQsSUFZQSxTQUFBTSxHQUFBM0QsRUFBQXVELEdBQ0EsT0FBQWdCLEdBQUF2RSxJQUFBd0UsR0FBQWpCLEdBQ0FlLEdBQUFwRSxHQUFBRixHQUFBdUQsR0FFQSxTQUFBenFELEdBQ0EsSUFBQW1pRCxFQUFBaGpELEdBQUFhLEVBQUFrbkQsR0FDQSxPQUFBL0UsSUFBQTE5QyxHQUFBMDlDLElBQUFzSSxFQUNBa0IsR0FBQTNyRCxFQUFBa25ELEdBQ0EwQixHQUFBNkIsRUFBQXRJLEVBQUFyaEIsRUFBQUMsSUFlQSxTQUFBNnFCLEdBQUE1ckQsRUFBQW1KLEVBQUEwaUQsRUFBQTdJLEVBQUFDLEdBQ0FqakQsSUFBQW1KLEdBR0EwOUMsR0FBQTE5QyxFQUFBLFNBQUFzaEQsRUFBQTVxRCxHQUNBLEdBQUE2L0MsR0FBQStLLEdBQ0F4SCxNQUFBLElBQUFuQyxJQStCQSxTQUFBOWdELEVBQUFtSixFQUFBdEosRUFBQWdzRCxFQUFBQyxFQUFBOUksRUFBQUMsR0FDQSxJQUFBZCxFQUFBNEosR0FBQS9yRCxFQUFBSCxHQUNBNHFELEVBQUFzQixHQUFBNWlELEVBQUF0SixHQUNBK2tELEVBQUEzQixFQUFBOWpELElBQUFzckQsR0FFQSxHQUFBN0YsRUFDQTdDLEdBQUEvaEQsRUFBQUgsRUFBQStrRCxPQURBLENBSUEsSUFBQW9ILEVBQUFoSixFQUNBQSxFQUFBYixFQUFBc0ksRUFBQTVxRCxFQUFBLEdBQUFHLEVBQUFtSixFQUFBODVDLEdBQ0F4K0MsRUFFQTBnRCxFQUFBNkcsSUFBQXZuRCxFQUVBLEdBQUEwZ0QsRUFBQSxDQUNBLElBQUFsRSxFQUFBbjhDLEdBQUEybEQsR0FDQXJKLEdBQUFILEdBQUExRCxHQUFBa04sR0FDQXdCLEdBQUFoTCxJQUFBRyxHQUFBNVcsR0FBQWlnQixHQUVBdUIsRUFBQXZCLEVBQ0F4SixHQUFBRyxHQUFBNkssRUFDQW5uRCxHQUFBcTlDLEdBQ0E2SixFQUFBN0osRUFFQStKLEdBQUEvSixHQUNBNkosRUFBQXBLLEdBQUFPLEdBRUFmLEdBQ0ErRCxHQUFBLEVBQ0E2RyxFQUFBdkksR0FBQWdILEdBQUEsSUFFQXdCLEdBQ0E5RyxHQUFBLEVBQ0E2RyxFQUFBdEgsR0FBQStGLEdBQUEsSUFHQXVCLEVBQUEsR0FHQUcsR0FBQTFCLElBQUF0SixHQUFBc0osSUFDQXVCLEVBQUE3SixFQUNBaEIsR0FBQWdCLEdBQ0E2SixFQUFBSSxHQUFBakssR0FFQXpDLEdBQUF5QyxLQUFBemdDLEdBQUF5Z0MsS0FDQTZKLEVBQUF0SSxHQUFBK0csS0FJQXRGLEdBQUEsRUFHQUEsSUFFQWxDLEVBQUE5c0MsSUFBQXMwQyxFQUFBdUIsR0FDQUYsRUFBQUUsRUFBQXZCLEVBQUFvQixFQUFBN0ksRUFBQUMsR0FDQUEsRUFBQSxPQUFBd0gsSUFFQTFJLEdBQUEvaEQsRUFBQUgsRUFBQW1zRCxJQXpGQUssQ0FBQXJzRCxFQUFBbUosRUFBQXRKLEVBQUFnc0QsRUFBQUQsR0FBQTVJLEVBQUFDLE9BRUEsQ0FDQSxJQUFBK0ksRUFBQWhKLEVBQ0FBLEVBQUErSSxHQUFBL3JELEVBQUFILEdBQUE0cUQsRUFBQTVxRCxFQUFBLEdBQUFHLEVBQUFtSixFQUFBODVDLEdBQ0F4K0MsRUFFQXVuRCxJQUFBdm5ELElBQ0F1bkQsRUFBQXZCLEdBRUExSSxHQUFBL2hELEVBQUFILEVBQUFtc0QsS0FFT25JLElBd0ZQLFNBQUF5SSxHQUFBcDFCLEVBQUFuM0IsR0FDQSxJQUFBc0UsRUFBQTZ5QixFQUFBN3lCLE9BQ0EsR0FBQUEsRUFJQSxPQUFBazlDLEdBREF4aEQsS0FBQSxFQUFBc0UsRUFBQSxFQUNBQSxHQUFBNnlCLEVBQUFuM0IsR0FBQTBFLEVBWUEsU0FBQThuRCxHQUFBdGdCLEVBQUF1Z0IsRUFBQUMsR0FDQSxJQUFBN29ELEdBQUEsRUFVQSxPQVRBNG9ELEVBQUFoaEIsR0FBQWdoQixFQUFBbm9ELE9BQUFtb0QsRUFBQSxDQUFBNUIsSUFBQTdkLEdBQUEyZixPQWh2RkEsU0FBQXgxQixFQUFBeTFCLEdBQ0EsSUFBQXRvRCxFQUFBNnlCLEVBQUE3eUIsT0FHQSxJQURBNnlCLEVBQUF4TixLQUFBaWpDLEdBQ0F0b0QsS0FDQTZ5QixFQUFBN3lCLEdBQUE2eUIsRUFBQTd5QixHQUFBOUUsTUFFQSxPQUFBMjNCLEVBa3ZGQTAxQixDQVBBdkIsR0FBQXBmLEVBQUEsU0FBQTFzQyxFQUFBTSxFQUFBb3NDLEdBSUEsT0FBZ0I0Z0IsU0FIaEJyaEIsR0FBQWdoQixFQUFBLFNBQUE1aEIsR0FDQSxPQUFBQSxFQUFBcnJDLEtBRWdCcUUsVUFBQXJFLFdBR2hCLFNBQUFTLEVBQUE4bkQsR0FDQSxPQW00QkEsU0FBQTluRCxFQUFBOG5ELEVBQUEyRSxHQU9BLElBTkEsSUFBQTdvRCxHQUFBLEVBQ0FrcEQsRUFBQTlzRCxFQUFBNnNELFNBQ0FFLEVBQUFqRixFQUFBK0UsU0FDQXhvRCxFQUFBeW9ELEVBQUF6b0QsT0FDQTJvRCxFQUFBUCxFQUFBcG9ELFNBRUFULEVBQUFTLEdBQUEsQ0FDQSxJQUFBc2QsRUFBQXNyQyxHQUFBSCxFQUFBbHBELEdBQUFtcEQsRUFBQW5wRCxJQUNBLEdBQUErZCxFQUFBLENBQ0EsR0FBQS9kLEdBQUFvcEQsRUFDQSxPQUFBcnJDLEVBRUEsSUFBQXlELEVBQUFxbkMsRUFBQTdvRCxHQUNBLE9BQUErZCxHQUFBLFFBQUF5RCxHQUFBLE1BVUEsT0FBQXBsQixFQUFBNEQsTUFBQWtrRCxFQUFBbGtELE1BMzVCQXNwRCxDQUFBbHRELEVBQUE4bkQsRUFBQTJFLEtBNEJBLFNBQUFVLEdBQUFudEQsRUFBQXVmLEVBQUEwckIsR0FLQSxJQUpBLElBQUFybkMsR0FBQSxFQUNBUyxFQUFBa2IsRUFBQWxiLE9BQ0FzZCxFQUFBLEtBRUEvZCxFQUFBUyxHQUFBLENBQ0EsSUFBQTZpRCxFQUFBM25DLEVBQUEzYixHQUNBckUsRUFBQTBuRCxHQUFBam5ELEVBQUFrbkQsR0FFQWpjLEVBQUExckMsRUFBQTJuRCxJQUNBa0csR0FBQXpyQyxFQUFBd2xDLEdBQUFELEVBQUFsbkQsR0FBQVQsR0FHQSxPQUFBb2lCLEVBMkJBLFNBQUEwckMsR0FBQW4yQixFQUFBRCxFQUFBMlQsRUFBQVcsR0FDQSxJQUFBMW5DLEVBQUEwbkMsRUFBQWlCLEdBQUFuQixHQUNBem5DLEdBQUEsRUFDQVMsRUFBQTR5QixFQUFBNXlCLE9BQ0Fta0QsRUFBQXR4QixFQVFBLElBTkFBLElBQUFELElBQ0FBLEVBQUEycUIsR0FBQTNxQixJQUVBMlQsSUFDQTRkLEVBQUFoZCxHQUFBdFUsRUFBQTZWLEdBQUFuQyxPQUVBaG5DLEVBQUFTLEdBS0EsSUFKQSxJQUFBK25DLEVBQUEsRUFDQTdzQyxFQUFBMDNCLEVBQUFyekIsR0FDQTBoRCxFQUFBMWEsSUFBQXJyQyxNQUVBNnNDLEVBQUF2b0MsRUFBQTJrRCxFQUFBbEQsRUFBQWxaLEVBQUFiLEtBQUEsR0FDQWlkLElBQUF0eEIsR0FDQW56QixHQUFBdEYsS0FBQStwRCxFQUFBcGMsRUFBQSxHQUVBcm9DLEdBQUF0RixLQUFBeTRCLEVBQUFrVixFQUFBLEdBR0EsT0FBQWxWLEVBWUEsU0FBQW8yQixHQUFBcDJCLEVBQUFxMkIsR0FJQSxJQUhBLElBQUFscEQsRUFBQTZ5QixFQUFBcTJCLEVBQUFscEQsT0FBQSxFQUNBbTJDLEVBQUFuMkMsRUFBQSxFQUVBQSxLQUFBLENBQ0EsSUFBQVQsRUFBQTJwRCxFQUFBbHBELEdBQ0EsR0FBQUEsR0FBQW0yQyxHQUFBNTJDLElBQUE0cEQsRUFBQSxDQUNBLElBQUFBLEVBQUE1cEQsRUFDQTI5QyxHQUFBMzlDLEdBQ0FHLEdBQUF0RixLQUFBeTRCLEVBQUF0ekIsRUFBQSxHQUVBNnBELEdBQUF2MkIsRUFBQXR6QixJQUlBLE9BQUFzekIsRUFZQSxTQUFBdXFCLEdBQUFtQixFQUFBQyxHQUNBLE9BQUFELEVBQUF6RixHQUFBWSxNQUFBOEUsRUFBQUQsRUFBQSxJQWtDQSxTQUFBOEssR0FBQTNULEVBQUFoNkMsR0FDQSxJQUFBNGhCLEVBQUEsR0FDQSxJQUFBbzRCLEdBQUFoNkMsRUFBQSxHQUFBQSxFQUFBa2lDLEVBQ0EsT0FBQXRnQixFQUlBLEdBQ0E1aEIsRUFBQSxJQUNBNGhCLEdBQUFvNEIsSUFFQWg2QyxFQUFBbzlDLEdBQUFwOUMsRUFBQSxNQUVBZzZDLFlBRU9oNkMsR0FFUCxPQUFBNGhCLEVBV0EsU0FBQWdzQyxHQUFBeHNDLEVBQUFxRSxHQUNBLE9BQUFvb0MsR0FBQUMsR0FBQTFzQyxFQUFBcUUsRUFBQW9sQyxJQUFBenBDLEVBQUEsSUFVQSxTQUFBMnNDLEdBQUE3aEIsR0FDQSxPQUFBdVYsR0FBQXZxQixHQUFBZ1YsSUFXQSxTQUFBOGhCLEdBQUE5aEIsRUFBQWxzQyxHQUNBLElBQUFtM0IsRUFBQUQsR0FBQWdWLEdBQ0EsT0FBQTBWLEdBQUF6cUIsRUFBQTJxQixHQUFBOWhELEVBQUEsRUFBQW0zQixFQUFBN3lCLFNBYUEsU0FBQStvRCxHQUFBcHRELEVBQUFrbkQsRUFBQTNuRCxFQUFBeWpELEdBQ0EsSUFBQXRELEdBQUExL0MsR0FDQSxPQUFBQSxFQVNBLElBTEEsSUFBQTRELEdBQUEsRUFDQVMsR0FIQTZpRCxFQUFBQyxHQUFBRCxFQUFBbG5ELElBR0FxRSxPQUNBbTJDLEVBQUFuMkMsRUFBQSxFQUNBMnBELEVBQUFodUQsRUFFQSxNQUFBZ3VELEtBQUFwcUQsRUFBQVMsR0FBQSxDQUNBLElBQUF4RSxFQUFBdW5ELEdBQUFGLEVBQUF0akQsSUFDQW9vRCxFQUFBenNELEVBRUEsR0FBQXFFLEdBQUE0MkMsRUFBQSxDQUNBLElBQUEySCxFQUFBNkwsRUFBQW51RCxJQUNBbXNELEVBQUFoSixJQUFBYixFQUFBdGlELEVBQUFtdUQsR0FBQXZwRCxLQUNBQSxJQUNBdW5ELEVBQUF0TSxHQUFBeUMsR0FDQUEsRUFDQVosR0FBQTJGLEVBQUF0akQsRUFBQSxXQUdBcytDLEdBQUE4TCxFQUFBbnVELEVBQUFtc0QsR0FDQWdDLElBQUFudUQsR0FFQSxPQUFBRyxFQVdBLElBQUFpdUQsR0FBQTFQLEdBQUEsU0FBQXA5QixFQUFBM2YsR0FFQSxPQURBKzhDLEdBQUFwb0MsSUFBQWdMLEVBQUEzZixHQUNBMmYsR0FGQXlwQyxHQWFBc0QsR0FBQWp2RCxHQUFBLFNBQUFraUIsRUFBQTQ0QixHQUNBLE9BQUE5NkMsR0FBQWtpQixFQUFBLFlBQ0ErRixjQUFBLEVBQ0Fob0IsWUFBQSxFQUNBSyxNQUFBNHVELEdBQUFwVSxHQUNBNXlCLFVBQUEsS0FMQXlqQyxHQWdCQSxTQUFBd0QsR0FBQW5pQixHQUNBLE9BQUEwVixHQUFBMXFCLEdBQUFnVixJQVlBLFNBQUFvaUIsR0FBQW4zQixFQUFBMVIsRUFBQUMsR0FDQSxJQUFBN2hCLEdBQUEsRUFDQVMsRUFBQTZ5QixFQUFBN3lCLE9BRUFtaEIsRUFBQSxJQUNBQSxLQUFBbmhCLEVBQUEsRUFBQUEsRUFBQW1oQixJQUVBQyxJQUFBcGhCLElBQUFvaEIsR0FDQSxJQUNBQSxHQUFBcGhCLEdBRUFBLEVBQUFtaEIsRUFBQUMsRUFBQSxFQUFBQSxFQUFBRCxJQUFBLEVBQ0FBLEtBQUEsRUFHQSxJQURBLElBQUE3RCxFQUFBemQsRUFBQUcsS0FDQVQsRUFBQVMsR0FDQXNkLEVBQUEvZCxHQUFBc3pCLEVBQUF0ekIsRUFBQTRoQixHQUVBLE9BQUE3RCxFQVlBLFNBQUEyc0MsR0FBQXJpQixFQUFBaEIsR0FDQSxJQUFBdHBCLEVBTUEsT0FKQTJnQyxHQUFBclcsRUFBQSxTQUFBMXNDLEVBQUFxRSxFQUFBcW9DLEdBRUEsUUFEQXRxQixFQUFBc3BCLEVBQUExckMsRUFBQXFFLEVBQUFxb0MsUUFHQXRxQixFQWVBLFNBQUE0c0MsR0FBQXIzQixFQUFBMzNCLEVBQUFpdkQsR0FDQSxJQUFBQyxFQUFBLEVBQ0FDLEVBQUEsTUFBQXgzQixFQUFBdTNCLEVBQUF2M0IsRUFBQTd5QixPQUVBLG9CQUFBOUUsU0FBQW12RCxHQUFBcHNCLEVBQUEsQ0FDQSxLQUFBbXNCLEVBQUFDLEdBQUEsQ0FDQSxJQUFBQyxFQUFBRixFQUFBQyxJQUFBLEVBQ0FwSixFQUFBcHVCLEVBQUF5M0IsR0FFQSxPQUFBckosSUFBQWlCLEdBQUFqQixLQUNBa0osRUFBQWxKLEdBQUEvbEQsRUFBQStsRCxFQUFBL2xELEdBQ0FrdkQsRUFBQUUsRUFBQSxFQUVBRCxFQUFBQyxFQUdBLE9BQUFELEVBRUEsT0FBQUUsR0FBQTEzQixFQUFBMzNCLEVBQUFxckQsR0FBQTRELEdBZ0JBLFNBQUFJLEdBQUExM0IsRUFBQTMzQixFQUFBcXJDLEVBQUE0akIsR0FDQWp2RCxFQUFBcXJDLEVBQUFyckMsR0FTQSxJQVBBLElBQUFrdkQsRUFBQSxFQUNBQyxFQUFBLE1BQUF4M0IsRUFBQSxFQUFBQSxFQUFBN3lCLE9BQ0F3cUQsRUFBQXR2RCxLQUNBdXZELEVBQUEsT0FBQXZ2RCxFQUNBd3ZELEVBQUF4SSxHQUFBaG5ELEdBQ0F5dkQsRUFBQXp2RCxJQUFBa0YsRUFFQWdxRCxFQUFBQyxHQUFBLENBQ0EsSUFBQUMsRUFBQXhSLElBQUFzUixFQUFBQyxHQUFBLEdBQ0FwSixFQUFBMWEsRUFBQTFULEVBQUF5M0IsSUFDQU0sRUFBQTNKLElBQUE3Z0QsRUFDQXlxRCxFQUFBLE9BQUE1SixFQUNBNkosRUFBQTdKLEtBQ0E4SixFQUFBN0ksR0FBQWpCLEdBRUEsR0FBQXVKLEVBQ0EsSUFBQVEsRUFBQWIsR0FBQVcsT0FFQUUsRUFEU0wsRUFDVEcsSUFBQVgsR0FBQVMsR0FDU0gsRUFDVEssR0FBQUYsSUFBQVQsSUFBQVUsR0FDU0gsRUFDVEksR0FBQUYsSUFBQUMsSUFBQVYsSUFBQVksSUFDU0YsSUFBQUUsSUFHVFosRUFBQWxKLEdBQUEvbEQsRUFBQStsRCxFQUFBL2xELEdBRUE4dkQsRUFDQVosRUFBQUUsRUFBQSxFQUVBRCxFQUFBQyxFQUdBLE9BQUEvUSxHQUFBOFEsRUFBQXJzQixHQVlBLFNBQUFpdEIsR0FBQXA0QixFQUFBMFQsR0FNQSxJQUxBLElBQUFobkMsR0FBQSxFQUNBUyxFQUFBNnlCLEVBQUE3eUIsT0FDQThtQyxFQUFBLEVBQ0F4cEIsRUFBQSxLQUVBL2QsRUFBQVMsR0FBQSxDQUNBLElBQUE5RSxFQUFBMjNCLEVBQUF0ekIsR0FDQTBoRCxFQUFBMWEsSUFBQXJyQyxLQUVBLElBQUFxRSxJQUFBbytDLEdBQUFzRCxFQUFBa0QsR0FBQSxDQUNBLElBQUFBLEVBQUFsRCxFQUNBM2pDLEVBQUF3cEIsS0FBQSxJQUFBNXJDLEVBQUEsRUFBQUEsR0FHQSxPQUFBb2lCLEVBV0EsU0FBQTR0QyxHQUFBaHdELEdBQ0EsdUJBQUFBLEVBQ0FBLEVBRUFnbkQsR0FBQWhuRCxHQUNBNGlDLEdBRUE1aUMsRUFXQSxTQUFBaXdELEdBQUFqd0QsR0FFQSxvQkFBQUEsRUFDQSxPQUFBQSxFQUVBLEdBQUF1RixHQUFBdkYsR0FFQSxPQUFBaXNDLEdBQUFqc0MsRUFBQWl3RCxJQUFBLEdBRUEsR0FBQWpKLEdBQUFobkQsR0FDQSxPQUFBMi9DLE1BQUF6Z0QsS0FBQWMsR0FBQSxHQUVBLElBQUFvaUIsRUFBQXBpQixFQUFBLEdBQ0EsV0FBQW9pQixHQUFBLEVBQUFwaUIsSUFBQXlpQyxFQUFBLEtBQUFyZ0IsRUFZQSxTQUFBOHRDLEdBQUF2NEIsRUFBQTBULEVBQUFXLEdBQ0EsSUFBQTNuQyxHQUFBLEVBQ0EwTSxFQUFBODZCLEdBQ0EvbUMsRUFBQTZ5QixFQUFBN3lCLE9BQ0E4Z0QsR0FBQSxFQUNBeGpDLEVBQUEsR0FDQTZtQyxFQUFBN21DLEVBRUEsR0FBQTRwQixFQUNBNFosR0FBQSxFQUNBNzBDLEVBQUFnN0IsUUFFQSxHQUFBam5DLEdBQUFnOEIsRUFBQSxDQUNBLElBQUFscUIsRUFBQXkwQixFQUFBLEtBQUE4a0IsR0FBQXg0QixHQUNBLEdBQUEvZ0IsRUFDQSxPQUFBa2tDLEdBQUFsa0MsR0FFQWd2QyxHQUFBLEVBQ0E3MEMsRUFBQTI4QixHQUNBdWIsRUFBQSxJQUFBNUgsUUFHQTRILEVBQUE1ZCxFQUFBLEdBQUFqcEIsRUFFQTBqQyxFQUNBLE9BQUF6aEQsRUFBQVMsR0FBQSxDQUNBLElBQUE5RSxFQUFBMjNCLEVBQUF0ekIsR0FDQTBoRCxFQUFBMWEsSUFBQXJyQyxLQUdBLEdBREFBLEVBQUFnc0MsR0FBQSxJQUFBaHNDLElBQUEsRUFDQTRsRCxHQUFBRyxLQUFBLENBRUEsSUFEQSxJQUFBcUssRUFBQW5ILEVBQUFua0QsT0FDQXNyRCxLQUNBLEdBQUFuSCxFQUFBbUgsS0FBQXJLLEVBQ0EsU0FBQUQsRUFHQXphLEdBQ0E0ZCxFQUFBL2xELEtBQUE2aUQsR0FFQTNqQyxFQUFBbGYsS0FBQWxELFFBRUErUSxFQUFBazRDLEVBQUFsRCxFQUFBL1osS0FDQWlkLElBQUE3bUMsR0FDQTZtQyxFQUFBL2xELEtBQUE2aUQsR0FFQTNqQyxFQUFBbGYsS0FBQWxELElBR0EsT0FBQW9pQixFQVdBLFNBQUE4ckMsR0FBQXp0RCxFQUFBa25ELEdBR0EsY0FEQWxuRCxFQUFBYyxHQUFBZCxFQURBa25ELEVBQUFDLEdBQUFELEVBQUFsbkQsYUFFQUEsRUFBQW9uRCxHQUFBc0IsR0FBQXhCLEtBYUEsU0FBQTBJLEdBQUE1dkQsRUFBQWtuRCxFQUFBMkksRUFBQTdNLEdBQ0EsT0FBQW9LLEdBQUFwdEQsRUFBQWtuRCxFQUFBMkksRUFBQTVJLEdBQUFqbkQsRUFBQWtuRCxJQUFBbEUsR0FjQSxTQUFBOE0sR0FBQTU0QixFQUFBK1QsRUFBQThrQixFQUFBMWpCLEdBSUEsSUFIQSxJQUFBaG9DLEVBQUE2eUIsRUFBQTd5QixPQUNBVCxFQUFBeW9DLEVBQUFob0MsR0FBQSxHQUVBZ29DLEVBQUF6b0MsUUFBQVMsSUFDQTRtQyxFQUFBL1QsRUFBQXR6QixLQUFBc3pCLEtBRUEsT0FBQTY0QixFQUNBMUIsR0FBQW4zQixFQUFBbVYsRUFBQSxFQUFBem9DLEVBQUF5b0MsRUFBQXpvQyxFQUFBLEVBQUFTLEdBQ0FncUQsR0FBQW4zQixFQUFBbVYsRUFBQXpvQyxFQUFBLElBQUF5b0MsRUFBQWhvQyxFQUFBVCxHQWFBLFNBQUFvc0QsR0FBQXp3RCxFQUFBMHdELEdBQ0EsSUFBQXR1QyxFQUFBcGlCLEVBSUEsT0FIQW9pQixhQUFBMDlCLEtBQ0ExOUIsSUFBQXBpQixTQUVBbXNDLEdBQUF1a0IsRUFBQSxTQUFBdHVDLEVBQUF4TyxHQUNBLE9BQUFBLEVBQUFnTyxLQUFBemUsTUFBQXlRLEVBQUFzM0IsUUFBQWdCLEdBQUEsQ0FBQTlwQixHQUFBeE8sRUFBQXZDLFFBQ08rUSxHQWFQLFNBQUF1dUMsR0FBQWhJLEVBQUF0ZCxFQUFBVyxHQUNBLElBQUFsbkMsRUFBQTZqRCxFQUFBN2pELE9BQ0EsR0FBQUEsRUFBQSxFQUNBLE9BQUFBLEVBQUFvckQsR0FBQXZILEVBQUEsT0FLQSxJQUhBLElBQUF0a0QsR0FBQSxFQUNBK2QsRUFBQXpkLEVBQUFHLEtBRUFULEVBQUFTLEdBSUEsSUFIQSxJQUFBNnlCLEVBQUFneEIsRUFBQXRrRCxHQUNBd2tELEdBQUEsSUFFQUEsRUFBQS9qRCxHQUNBK2pELEdBQUF4a0QsSUFDQStkLEVBQUEvZCxHQUFBc2hELEdBQUF2akMsRUFBQS9kLElBQUFzekIsRUFBQWd4QixFQUFBRSxHQUFBeGQsRUFBQVcsSUFJQSxPQUFBa2tCLEdBQUFoSixHQUFBOWtDLEVBQUEsR0FBQWlwQixFQUFBVyxHQVlBLFNBQUE0a0IsR0FBQTUrQyxFQUFBMGxCLEVBQUFtNUIsR0FNQSxJQUxBLElBQUF4c0QsR0FBQSxFQUNBUyxFQUFBa04sRUFBQWxOLE9BQ0Fnc0QsRUFBQXA1QixFQUFBNXlCLE9BQ0FzZCxFQUFBLEtBRUEvZCxFQUFBUyxHQUFBLENBQ0EsSUFBQTlFLEVBQUFxRSxFQUFBeXNELEVBQUFwNUIsRUFBQXJ6QixHQUFBYSxFQUNBMnJELEVBQUF6dUMsRUFBQXBRLEVBQUEzTixHQUFBckUsR0FFQSxPQUFBb2lCLEVBVUEsU0FBQTJ1QyxHQUFBL3dELEdBQ0EsT0FBQTJzRCxHQUFBM3NELEtBQUEsR0FVQSxTQUFBZ3hELEdBQUFoeEQsR0FDQSx5QkFBQUEsSUFBQXFyRCxHQVdBLFNBQUF6RCxHQUFBNW5ELEVBQUFTLEdBQ0EsT0FBQThFLEdBQUF2RixHQUNBQSxFQUVBa3NELEdBQUFsc0QsRUFBQVMsR0FBQSxDQUFBVCxHQUFBaXhELEdBQUFuekMsR0FBQTlkLElBWUEsSUFBQWt4RCxHQUFBOUMsR0FXQSxTQUFBK0MsR0FBQXg1QixFQUFBMVIsRUFBQUMsR0FDQSxJQUFBcGhCLEVBQUE2eUIsRUFBQTd5QixPQUVBLE9BREFvaEIsTUFBQWhoQixFQUFBSixFQUFBb2hCLEdBQ0FELEdBQUFDLEdBQUFwaEIsRUFBQTZ5QixFQUFBbTNCLEdBQUFuM0IsRUFBQTFSLEVBQUFDLEdBU0EsSUFBQXRWLEdBQUEyc0MsSUFBQSxTQUFBanBDLEdBQ0EsT0FBQTJMLEdBQUFyUCxhQUFBMEQsSUFXQSxTQUFBNHZDLEdBQUFhLEVBQUFwQixHQUNBLEdBQUFBLEVBQ0EsT0FBQW9CLEVBQUFsM0MsUUFFQSxJQUFBL0ksRUFBQWlnRCxFQUFBamdELE9BQ0FzZCxFQUFBeTZCLE1BQUEvM0MsR0FBQSxJQUFBaWdELEVBQUExcUIsWUFBQXYxQixHQUdBLE9BREFpZ0QsRUFBQXFNLEtBQUFodkMsR0FDQUEsRUFVQSxTQUFBeWlDLEdBQUF3TSxHQUNBLElBQUFqdkMsRUFBQSxJQUFBaXZDLEVBQUFoM0IsWUFBQWczQixFQUFBcE0sWUFFQSxPQURBLElBQUFySSxHQUFBeDZCLEdBQUF4TCxJQUFBLElBQUFnbUMsR0FBQXlVLElBQ0FqdkMsRUFnREEsU0FBQStpQyxHQUFBbU0sRUFBQTNOLEdBQ0EsSUFBQW9CLEVBQUFwQixFQUFBa0IsR0FBQXlNLEVBQUF2TSxRQUFBdU0sRUFBQXZNLE9BQ0EsV0FBQXVNLEVBQUFqM0IsWUFBQTBxQixFQUFBdU0sRUFBQXRNLFdBQUFzTSxFQUFBeHNELFFBV0EsU0FBQTRvRCxHQUFBMXRELEVBQUF1b0QsR0FDQSxHQUFBdm9ELElBQUF1b0QsRUFBQSxDQUNBLElBQUFnSixFQUFBdnhELElBQUFrRixFQUNBcXFELEVBQUEsT0FBQXZ2RCxFQUNBd3hELEVBQUF4eEQsS0FDQXd2RCxFQUFBeEksR0FBQWhuRCxHQUVBMHZELEVBQUFuSCxJQUFBcmpELEVBQ0F5cUQsRUFBQSxPQUFBcEgsRUFDQXFILEVBQUFySCxLQUNBc0gsRUFBQTdJLEdBQUF1QixHQUVBLElBQUFvSCxJQUFBRSxJQUFBTCxHQUFBeHZELEVBQUF1b0QsR0FDQWlILEdBQUFFLEdBQUFFLElBQUFELElBQUFFLEdBQ0FOLEdBQUFHLEdBQUFFLElBQ0EyQixHQUFBM0IsSUFDQTRCLEVBQ0EsU0FFQSxJQUFBakMsSUFBQUMsSUFBQUssR0FBQTd2RCxFQUFBdW9ELEdBQ0FzSCxHQUFBMEIsR0FBQUMsSUFBQWpDLElBQUFDLEdBQ0FHLEdBQUE0QixHQUFBQyxJQUNBOUIsR0FBQThCLElBQ0E1QixFQUNBLFNBR0EsU0F1REEsU0FBQTZCLEdBQUFwZ0QsRUFBQXFnRCxFQUFBQyxFQUFBQyxHQVVBLElBVEEsSUFBQUMsR0FBQSxFQUNBQyxFQUFBemdELEVBQUF2TSxPQUNBaXRELEVBQUFKLEVBQUE3c0QsT0FDQWt0RCxHQUFBLEVBQ0FDLEVBQUFQLEVBQUE1c0QsT0FDQW90RCxFQUFBOVQsR0FBQTBULEVBQUFDLEVBQUEsR0FDQTN2QyxFQUFBemQsRUFBQXN0RCxFQUFBQyxHQUNBQyxHQUFBUCxJQUVBSSxFQUFBQyxHQUNBN3ZDLEVBQUE0dkMsR0FBQU4sRUFBQU0sR0FFQSxPQUFBSCxFQUFBRSxJQUNBSSxHQUFBTixFQUFBQyxLQUNBMXZDLEVBQUF1dkMsRUFBQUUsSUFBQXhnRCxFQUFBd2dELElBR0EsS0FBQUssS0FDQTl2QyxFQUFBNHZDLEtBQUEzZ0QsRUFBQXdnRCxLQUVBLE9BQUF6dkMsRUFjQSxTQUFBZ3dDLEdBQUEvZ0QsRUFBQXFnRCxFQUFBQyxFQUFBQyxHQVdBLElBVkEsSUFBQUMsR0FBQSxFQUNBQyxFQUFBemdELEVBQUF2TSxPQUNBdXRELEdBQUEsRUFDQU4sRUFBQUosRUFBQTdzRCxPQUNBd3RELEdBQUEsRUFDQUMsRUFBQWIsRUFBQTVzRCxPQUNBb3RELEVBQUE5VCxHQUFBMFQsRUFBQUMsRUFBQSxHQUNBM3ZDLEVBQUF6ZCxFQUFBdXRELEVBQUFLLEdBQ0FKLEdBQUFQLElBRUFDLEVBQUFLLEdBQ0E5dkMsRUFBQXl2QyxHQUFBeGdELEVBQUF3Z0QsR0FHQSxJQURBLElBQUE3bEQsRUFBQTZsRCxJQUNBUyxFQUFBQyxHQUNBbndDLEVBQUFwVyxFQUFBc21ELEdBQUFaLEVBQUFZLEdBRUEsT0FBQUQsRUFBQU4sSUFDQUksR0FBQU4sRUFBQUMsS0FDQTF2QyxFQUFBcFcsRUFBQTJsRCxFQUFBVSxJQUFBaGhELEVBQUF3Z0QsTUFHQSxPQUFBenZDLEVBV0EsU0FBQWlnQyxHQUFBejRDLEVBQUErdEIsR0FDQSxJQUFBdHpCLEdBQUEsRUFDQVMsRUFBQThFLEVBQUE5RSxPQUdBLElBREE2eUIsTUFBQWh6QixFQUFBRyxNQUNBVCxFQUFBUyxHQUNBNnlCLEVBQUF0ekIsR0FBQXVGLEVBQUF2RixHQUVBLE9BQUFzekIsRUFhQSxTQUFBc3JCLEdBQUFyNUMsRUFBQW9JLEVBQUF2UixFQUFBZ2pELEdBQ0EsSUFBQStPLEdBQUEveEQsRUFDQUEsTUFBQSxJQUtBLElBSEEsSUFBQTRELEdBQUEsRUFDQVMsRUFBQWtOLEVBQUFsTixTQUVBVCxFQUFBUyxHQUFBLENBQ0EsSUFBQXhFLEVBQUEwUixFQUFBM04sR0FFQW9vRCxFQUFBaEosRUFDQUEsRUFBQWhqRCxFQUFBSCxHQUFBc0osRUFBQXRKLEtBQUFHLEVBQUFtSixHQUNBMUUsRUFFQXVuRCxJQUFBdm5ELElBQ0F1bkQsRUFBQTdpRCxFQUFBdEosSUFFQWt5RCxFQUNBOVAsR0FBQWppRCxFQUFBSCxFQUFBbXNELEdBRUE5SixHQUFBbGlELEVBQUFILEVBQUFtc0QsR0FHQSxPQUFBaHNELEVBbUNBLFNBQUFneUQsR0FBQXJuQixFQUFBc25CLEdBQ0EsZ0JBQUFobUIsRUFBQXJCLEdBQ0EsSUFBQXpwQixFQUFBcmMsR0FBQW1uQyxHQUFBdkIsR0FBQTJYLEdBQ0F4WCxFQUFBb25CLE1BQUEsR0FFQSxPQUFBOXdDLEVBQUE4cUIsRUFBQXRCLEVBQUEraEIsR0FBQTloQixFQUFBLEdBQUFDLElBV0EsU0FBQXFuQixHQUFBQyxHQUNBLE9BQUF4RSxHQUFBLFNBQUEzdEQsRUFBQW95RCxHQUNBLElBQUF4dUQsR0FBQSxFQUNBUyxFQUFBK3RELEVBQUEvdEQsT0FDQTIrQyxFQUFBMytDLEVBQUEsRUFBQSt0RCxFQUFBL3RELEVBQUEsR0FBQUksRUFDQTR0RCxFQUFBaHVELEVBQUEsRUFBQSt0RCxFQUFBLEdBQUEzdEQsRUFXQSxJQVRBdStDLEVBQUFtUCxFQUFBOXRELE9BQUEsc0JBQUEyK0MsR0FDQTMrQyxJQUFBMitDLEdBQ0F2K0MsRUFFQTR0RCxHQUFBQyxHQUFBRixFQUFBLEdBQUFBLEVBQUEsR0FBQUMsS0FDQXJQLEVBQUEzK0MsRUFBQSxFQUFBSSxFQUFBdStDLEVBQ0EzK0MsRUFBQSxHQUVBckUsRUFBQWhCLEdBQUFnQixLQUNBNEQsRUFBQVMsR0FBQSxDQUNBLElBQUE4RSxFQUFBaXBELEVBQUF4dUQsR0FDQXVGLEdBQ0FncEQsRUFBQW55RCxFQUFBbUosRUFBQXZGLEVBQUFvL0MsR0FHQSxPQUFBaGpELElBWUEsU0FBQWltRCxHQUFBL1osRUFBQUcsR0FDQSxnQkFBQUosRUFBQXJCLEdBQ0EsU0FBQXFCLEVBQ0EsT0FBQUEsRUFFQSxJQUFBcWYsR0FBQXJmLEdBQ0EsT0FBQUMsRUFBQUQsRUFBQXJCLEdBTUEsSUFKQSxJQUFBdm1DLEVBQUE0bkMsRUFBQTVuQyxPQUNBVCxFQUFBeW9DLEVBQUFob0MsR0FBQSxFQUNBa3VELEVBQUF2ekQsR0FBQWl0QyxJQUVBSSxFQUFBem9DLFFBQUFTLEtBQ0EsSUFBQXVtQyxFQUFBMm5CLEVBQUEzdUQsS0FBQTJ1RCxLQUlBLE9BQUF0bUIsR0FXQSxTQUFBNmEsR0FBQXphLEdBQ0EsZ0JBQUFyc0MsRUFBQTRxQyxFQUFBMGMsR0FNQSxJQUxBLElBQUExakQsR0FBQSxFQUNBMnVELEVBQUF2ekQsR0FBQWdCLEdBQ0F1UixFQUFBKzFDLEVBQUF0bkQsR0FDQXFFLEVBQUFrTixFQUFBbE4sT0FFQUEsS0FBQSxDQUNBLElBQUF4RSxFQUFBMFIsRUFBQTg2QixFQUFBaG9DLElBQUFULEdBQ0EsUUFBQWduQyxFQUFBMm5CLEVBQUExeUQsS0FBQTB5RCxHQUNBLE1BR0EsT0FBQXZ5RCxHQWdDQSxTQUFBd3lELEdBQUFDLEdBQ0EsZ0JBQUExWSxHQUdBLElBQUExTSxFQUFBeU0sR0FGQUMsRUFBQTE4QixHQUFBMDhCLElBR0FXLEdBQUFYLEdBQ0F0MUMsRUFFQW8xQyxFQUFBeE0sRUFDQUEsRUFBQSxHQUNBME0sRUFBQXJ1QixPQUFBLEdBRUFnbkMsRUFBQXJsQixFQUNBcWpCLEdBQUFyakIsRUFBQSxHQUFBaFosS0FBQSxJQUNBMGxCLEVBQUEzc0MsTUFBQSxHQUVBLE9BQUF5c0MsRUFBQTRZLEtBQUFDLEdBV0EsU0FBQUMsR0FBQW5sRCxHQUNBLGdCQUFBdXNDLEdBQ0EsT0FBQXJPLEdBQUFrbkIsR0FBQUMsR0FBQTlZLEdBQUEzeUMsUUFBQTJnQyxHQUFBLEtBQUF2NkIsRUFBQSxLQVlBLFNBQUFzbEQsR0FBQTNPLEdBQ0Esa0JBSUEsSUFBQXZ6QyxFQUFBaFAsVUFDQSxPQUFBZ1AsRUFBQXZNLFFBQ0Esa0JBQUE4L0MsRUFDQSxrQkFBQUEsRUFBQXZ6QyxFQUFBLElBQ0Esa0JBQUF1ekMsRUFBQXZ6QyxFQUFBLEdBQUFBLEVBQUEsSUFDQSxrQkFBQXV6QyxFQUFBdnpDLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQ0Esa0JBQUF1ekMsRUFBQXZ6QyxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQ0Esa0JBQUF1ekMsRUFBQXZ6QyxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFDQSxrQkFBQXV6QyxFQUFBdnpDLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQ0Esa0JBQUF1ekMsRUFBQXZ6QyxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBRUEsSUFBQW1pRCxFQUFBdlQsR0FBQTJFLEVBQUFqa0QsV0FDQXloQixFQUFBd2lDLEVBQUF6aEQsTUFBQXF3RCxFQUFBbmlELEdBSUEsT0FBQTh1QyxHQUFBLzlCLEtBQUFveEMsR0FnREEsU0FBQUMsR0FBQUMsR0FDQSxnQkFBQWhuQixFQUFBaEIsRUFBQW1CLEdBQ0EsSUFBQW1tQixFQUFBdnpELEdBQUFpdEMsR0FDQSxJQUFBcWYsR0FBQXJmLEdBQUEsQ0FDQSxJQUFBckIsRUFBQThoQixHQUFBemhCLEVBQUEsR0FDQWdCLEVBQUF4OEIsR0FBQXc4QixHQUNBaEIsRUFBQSxTQUFBcHJDLEdBQXFDLE9BQUErcUMsRUFBQTJuQixFQUFBMXlELEtBQUEweUQsSUFFckMsSUFBQTN1RCxFQUFBcXZELEVBQUFobkIsRUFBQWhCLEVBQUFtQixHQUNBLE9BQUF4b0MsR0FBQSxFQUFBMnVELEVBQUEzbkIsRUFBQXFCLEVBQUFyb0MsTUFBQWEsR0FXQSxTQUFBeXVELEdBQUE3bUIsR0FDQSxPQUFBOG1CLEdBQUEsU0FBQUMsR0FDQSxJQUFBL3VELEVBQUErdUQsRUFBQS91RCxPQUNBVCxFQUFBUyxFQUNBZ3ZELEVBQUEvVCxHQUFBcC9DLFVBQUFvekQsS0FLQSxJQUhBam5CLEdBQ0ErbUIsRUFBQS9sQyxVQUVBenBCLEtBQUEsQ0FDQSxJQUFBdWQsRUFBQWl5QyxFQUFBeHZELEdBQ0Esc0JBQUF1ZCxFQUNBLFVBQUEyRixHQUFBeVosR0FFQSxHQUFBOHlCLElBQUE5d0MsR0FBQSxXQUFBZ3hDLEdBQUFweUMsR0FDQSxJQUFBb0IsRUFBQSxJQUFBKzhCLEdBQUEsT0FJQSxJQURBMTdDLEVBQUEyZSxFQUFBM2UsRUFBQVMsSUFDQVQsRUFBQVMsR0FBQSxDQUdBLElBQUFtdkQsRUFBQUQsR0FGQXB5QyxFQUFBaXlDLEVBQUF4dkQsSUFHQXBDLEVBQUEsV0FBQWd5RCxFQUFBQyxHQUFBdHlDLEdBQUExYyxFQU1BOGQsRUFKQS9nQixHQUFBa3lELEdBQUFseUQsRUFBQSxLQUNBQSxFQUFBLEtBQUErL0IsRUFBQUosRUFBQUUsRUFBQUcsS0FDQWhnQyxFQUFBLEdBQUE2QyxRQUFBLEdBQUE3QyxFQUFBLEdBRUErZ0IsRUFBQWd4QyxHQUFBL3hELEVBQUEsS0FBQWtCLE1BQUE2ZixFQUFBL2dCLEVBQUEsSUFFQSxHQUFBMmYsRUFBQTljLFFBQUFxdkQsR0FBQXZ5QyxHQUNBb0IsRUFBQWl4QyxLQUNBanhDLEVBQUErd0MsS0FBQW55QyxHQUdBLGtCQUNBLElBQUF2USxFQUFBaFAsVUFDQXJDLEVBQUFxUixFQUFBLEdBRUEsR0FBQTJSLEdBQUEsR0FBQTNSLEVBQUF2TSxRQUFBUyxHQUFBdkYsR0FDQSxPQUFBZ2pCLEVBQUFveEMsTUFBQXAwRCxXQUtBLElBSEEsSUFBQXFFLEVBQUEsRUFDQStkLEVBQUF0ZCxFQUFBK3VELEVBQUF4dkQsR0FBQWxCLE1BQUEvQixLQUFBaVEsR0FBQXJSLElBRUFxRSxFQUFBUyxHQUNBc2QsRUFBQXl4QyxFQUFBeHZELEdBQUFuRixLQUFBa0MsS0FBQWdoQixHQUVBLE9BQUFBLEtBd0JBLFNBQUFpeUMsR0FBQXp5QyxFQUFBNGhDLEVBQUF0WSxFQUFBd21CLEVBQUFDLEVBQUEyQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBQUFDLEVBQUFuUixFQUFBeGhCLEVBQ0E0eUIsRUFBQXBSLEVBQUEvaEIsRUFDQW96QixFQUFBclIsRUFBQTloQixFQUNBa3dCLEVBQUFwTyxHQUFBNWhCLEVBQUFDLEdBQ0FpekIsRUFBQXRSLEVBQUF0aEIsRUFDQTBpQixFQUFBaVEsRUFBQTN2RCxFQUFBcXVELEdBQUEzeEMsR0E2Q0EsT0EzQ0EsU0FBQW9CLElBS0EsSUFKQSxJQUFBbGUsRUFBQXpDLFVBQUF5QyxPQUNBdU0sRUFBQTFNLEVBQUFHLEdBQ0FULEVBQUFTLEVBRUFULEtBQ0FnTixFQUFBaE4sR0FBQWhDLFVBQUFnQyxHQUVBLEdBQUF1dEQsRUFDQSxJQUFBL1csRUFBQWthLEdBQUEveEMsR0FDQWd5QyxFQTEvSEEsU0FBQXI5QixFQUFBa2pCLEdBSUEsSUFIQSxJQUFBLzFDLEVBQUE2eUIsRUFBQTd5QixPQUNBc2QsRUFBQSxFQUVBdGQsS0FDQTZ5QixFQUFBN3lCLEtBQUErMUMsS0FDQXo0QixFQUdBLE9BQUFBLEVBaS9IQTZ5QyxDQUFBNWpELEVBQUF3cEMsR0FTQSxHQVBBNlcsSUFDQXJnRCxFQUFBb2dELEdBQUFwZ0QsRUFBQXFnRCxFQUFBQyxFQUFBQyxJQUVBMEMsSUFDQWpqRCxFQUFBK2dELEdBQUEvZ0QsRUFBQWlqRCxFQUFBQyxFQUFBM0MsSUFFQTlzRCxHQUFBa3dELEVBQ0FwRCxHQUFBOXNELEVBQUE0dkQsRUFBQSxDQUNBLElBQUFRLEVBQUF0YSxHQUFBdnBDLEVBQUF3cEMsR0FDQSxPQUFBc2EsR0FDQXZ6QyxFQUFBNGhDLEVBQUE2USxHQUFBcnhDLEVBQUE2M0IsWUFBQTNQLEVBQ0E3NUIsRUFBQTZqRCxFQUFBVixFQUFBQyxFQUFBQyxFQUFBNXZELEdBR0EsSUFBQTB1RCxFQUFBb0IsRUFBQTFwQixFQUFBOXBDLEtBQ0FvUCxFQUFBcWtELEVBQUFyQixFQUFBNXhDLEtBY0EsT0FaQTljLEVBQUF1TSxFQUFBdk0sT0FDQTB2RCxFQUNBbmpELEVBODNDQSxTQUFBc21CLEVBQUFxMkIsR0FLQSxJQUpBLElBQUFvSCxFQUFBejlCLEVBQUE3eUIsT0FDQUEsRUFBQXU1QyxHQUFBMlAsRUFBQWxwRCxPQUFBc3dELEdBQ0FDLEVBQUFoVCxHQUFBMXFCLEdBRUE3eUIsS0FBQSxDQUNBLElBQUFULEVBQUEycEQsRUFBQWxwRCxHQUNBNnlCLEVBQUE3eUIsR0FBQWs5QyxHQUFBMzlDLEVBQUErd0QsR0FBQUMsRUFBQWh4RCxHQUFBYSxFQUVBLE9BQUF5eUIsRUF2NENBMjlCLENBQUFqa0QsRUFBQW1qRCxHQUNTTSxHQUFBaHdELEVBQUEsR0FDVHVNLEVBQUF5YyxVQUVBNm1DLEdBQUFGLEVBQUEzdkQsSUFDQXVNLEVBQUF2TSxPQUFBMnZELEdBRUFyekQsYUFBQTZlLElBQUE3ZSxnQkFBQTRoQixJQUNBeFMsRUFBQW8wQyxHQUFBMk8sR0FBQS9pRCxJQUVBQSxFQUFBck4sTUFBQXF3RCxFQUFBbmlELElBYUEsU0FBQWtrRCxHQUFBbnFCLEVBQUFvcUIsR0FDQSxnQkFBQS8wRCxFQUFBNHFDLEdBQ0EsT0E1OURBLFNBQUE1cUMsRUFBQTJxQyxFQUFBQyxFQUFBQyxHQUlBLE9BSEFxYixHQUFBbG1ELEVBQUEsU0FBQVQsRUFBQU0sRUFBQUcsR0FDQTJxQyxFQUFBRSxFQUFBRCxFQUFBcnJDLEdBQUFNLEVBQUFHLEtBRUE2cUMsRUF3OURBbXFCLENBQUFoMUQsRUFBQTJxQyxFQUFBb3FCLEVBQUFucUIsR0FBQSxLQVlBLFNBQUFxcUIsR0FBQUMsRUFBQXRsRCxHQUNBLGdCQUFBclEsRUFBQXVvRCxHQUNBLElBQUFubUMsRUFDQSxHQUFBcGlCLElBQUFrRixHQUFBcWpELElBQUFyakQsRUFDQSxPQUFBbUwsRUFLQSxHQUhBclEsSUFBQWtGLElBQ0FrZCxFQUFBcGlCLEdBRUF1b0QsSUFBQXJqRCxFQUFBLENBQ0EsR0FBQWtkLElBQUFsZCxFQUNBLE9BQUFxakQsRUFFQSxpQkFBQXZvRCxHQUFBLGlCQUFBdW9ELEdBQ0F2b0QsRUFBQWl3RCxHQUFBandELEdBQ0F1b0QsRUFBQTBILEdBQUExSCxLQUVBdm9ELEVBQUFnd0QsR0FBQWh3RCxHQUNBdW9ELEVBQUF5SCxHQUFBekgsSUFFQW5tQyxFQUFBdXpDLEVBQUEzMUQsRUFBQXVvRCxHQUVBLE9BQUFubUMsR0FXQSxTQUFBd3pDLEdBQUFDLEdBQ0EsT0FBQWpDLEdBQUEsU0FBQTNHLEdBRUEsT0FEQUEsRUFBQWhoQixHQUFBZ2hCLEVBQUF6ZixHQUFBMmYsT0FDQWlCLEdBQUEsU0FBQS84QyxHQUNBLElBQUE2NUIsRUFBQTlwQyxLQUNBLE9BQUF5MEQsRUFBQTVJLEVBQUEsU0FBQTVoQixHQUNBLE9BQUFsb0MsR0FBQWtvQyxFQUFBSCxFQUFBNzVCLFNBZUEsU0FBQXlrRCxHQUFBaHhELEVBQUFpeEQsR0FHQSxJQUFBQyxHQUZBRCxNQUFBN3dELEVBQUEsSUFBQStxRCxHQUFBOEYsSUFFQWp4RCxPQUNBLEdBQUFreEQsRUFBQSxFQUNBLE9BQUFBLEVBQUE3SCxHQUFBNEgsRUFBQWp4RCxHQUFBaXhELEVBRUEsSUFBQTN6QyxFQUFBK3JDLEdBQUE0SCxFQUFBclksR0FBQTU0QyxFQUFBazJDLEdBQUErYSxLQUNBLE9BQUF4YixHQUFBd2IsR0FDQTVFLEdBQUFoVyxHQUFBLzRCLEdBQUEsRUFBQXRkLEdBQUFnd0IsS0FBQSxJQUNBMVMsRUFBQXZVLE1BQUEsRUFBQS9JLEdBNkNBLFNBQUFzaEIsR0FBQTBtQixHQUNBLGdCQUFBN21CLEVBQUFDLEVBQUE4SyxHQWFBLE9BWkFBLEdBQUEsaUJBQUFBLEdBQUEraEMsR0FBQTlzQyxFQUFBQyxFQUFBOEssS0FDQTlLLEVBQUE4SyxFQUFBOXJCLEdBR0ErZ0IsRUFBQWd3QyxHQUFBaHdDLEdBQ0FDLElBQUFoaEIsR0FDQWdoQixFQUFBRCxFQUNBQSxFQUFBLEdBRUFDLEVBQUErdkMsR0FBQS92QyxHQXI3Q0EsU0FBQUQsRUFBQUMsRUFBQThLLEVBQUE4YixHQUtBLElBSkEsSUFBQXpvQyxHQUFBLEVBQ0FTLEVBQUFzNUMsR0FBQVYsSUFBQXgzQixFQUFBRCxJQUFBK0ssR0FBQSxPQUNBNU8sRUFBQXpkLEVBQUFHLEdBRUFBLEtBQ0FzZCxFQUFBMHFCLEVBQUFob0MsSUFBQVQsR0FBQTRoQixFQUNBQSxHQUFBK0ssRUFFQSxPQUFBNU8sRUErNkNBOHpDLENBQUFqd0MsRUFBQUMsRUFEQThLLE1BQUE5ckIsRUFBQStnQixFQUFBQyxFQUFBLEtBQUErdkMsR0FBQWpsQyxHQUNBOGIsSUFXQSxTQUFBcXBCLEdBQUFSLEdBQ0EsZ0JBQUEzMUQsRUFBQXVvRCxHQUtBLE1BSkEsaUJBQUF2b0QsR0FBQSxpQkFBQXVvRCxJQUNBdm9ELEVBQUFvMkQsR0FBQXAyRCxHQUNBdW9ELEVBQUE2TixHQUFBN04sSUFFQW9OLEVBQUEzMUQsRUFBQXVvRCxJQXFCQSxTQUFBNE0sR0FBQXZ6QyxFQUFBNGhDLEVBQUE2UyxFQUFBeGIsRUFBQTNQLEVBQUF3bUIsRUFBQUMsRUFBQTZDLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQTRCLEVBQUE5UyxFQUFBNWhCLEVBTUE0aEIsR0FBQThTLEVBQUF4MEIsRUFBQUMsR0FDQXloQixLQUFBOFMsRUFBQXYwQixFQUFBRCxJQUVBSCxJQUNBNmhCLEtBQUEvaEIsRUFBQUMsSUFFQSxJQUFBNjBCLEVBQUEsQ0FDQTMwQyxFQUFBNGhDLEVBQUF0WSxFQVZBb3JCLEVBQUE1RSxFQUFBeHNELEVBRkFveEQsRUFBQTNFLEVBQUF6c0QsRUFHQW94RCxFQUFBcHhELEVBQUF3c0QsRUFGQTRFLEVBQUFweEQsRUFBQXlzRCxFQVlBNkMsRUFBQUMsRUFBQUMsR0FHQXR5QyxFQUFBaTBDLEVBQUFsekQsTUFBQStCLEVBQUFxeEQsR0FLQSxPQUpBcEMsR0FBQXZ5QyxJQUNBNDBDLEdBQUFwMEMsRUFBQW0wQyxHQUVBbjBDLEVBQUF5NEIsY0FDQTRiLEdBQUFyMEMsRUFBQVIsRUFBQTRoQyxHQVVBLFNBQUFrVCxHQUFBeEQsR0FDQSxJQUFBdHhDLEVBQUFsSSxHQUFBdzVDLEdBQ0EsZ0JBQUE5UCxFQUFBdVQsR0FHQSxHQUZBdlQsRUFBQWdULEdBQUFoVCxHQUNBdVQsRUFBQSxNQUFBQSxFQUFBLEVBQUF0WSxHQUFBdVksR0FBQUQsR0FBQSxLQUNBLENBR0EsSUFBQTV5RCxHQUFBK1osR0FBQXNsQyxHQUFBLEtBQUFsdkMsTUFBQSxLQUlBLFNBREFuUSxHQUFBK1osR0FGQThELEVBQUE3ZCxFQUFBLFNBQUFBLEVBQUEsR0FBQTR5RCxLQUVBLEtBQUF6aUQsTUFBQSxNQUNBLFNBQUFuUSxFQUFBLEdBQUE0eUQsSUFFQSxPQUFBLzBDLEVBQUF3aEMsSUFXQSxJQUFBK00sR0FBQXRSLElBQUEsRUFBQS9ELEdBQUEsSUFBQStELEdBQUEsWUFBQXBjLEVBQUEsU0FBQS9LLEdBQ0EsV0FBQW1uQixHQUFBbm5CLElBREFtL0IsR0FXQSxTQUFBQyxHQUFBL08sR0FDQSxnQkFBQXRuRCxHQUNBLElBQUFzakQsRUFBQUMsR0FBQXZqRCxHQUNBLE9BQUFzakQsR0FBQXJnQixFQUNBK1csR0FBQWg2QyxHQUVBc2pELEdBQUEvZixHQUNBK1csR0FBQXQ2QyxHQXozSUEsU0FBQUEsRUFBQXVSLEdBQ0EsT0FBQWk2QixHQUFBajZCLEVBQUEsU0FBQTFSLEdBQ0EsT0FBQUEsRUFBQUcsRUFBQUgsTUF5M0lBeTJELENBQUF0MkQsRUFBQXNuRCxFQUFBdG5ELEtBNkJBLFNBQUF1MkQsR0FBQXAxQyxFQUFBNGhDLEVBQUF0WSxFQUFBd21CLEVBQUFDLEVBQUE2QyxFQUFBQyxFQUFBQyxHQUNBLElBQUFHLEVBQUFyUixFQUFBOWhCLEVBQ0EsSUFBQW16QixHQUFBLG1CQUFBanpDLEVBQ0EsVUFBQTJGLEdBQUF5WixHQUVBLElBQUFsOEIsRUFBQTRzRCxJQUFBNXNELE9BQUEsRUFTQSxHQVJBQSxJQUNBMCtDLEtBQUExaEIsRUFBQUMsR0FDQTJ2QixFQUFBQyxFQUFBenNELEdBRUF1dkQsTUFBQXZ2RCxFQUFBdXZELEVBQUFyVyxHQUFBd1ksR0FBQW5DLEdBQUEsR0FDQUMsTUFBQXh2RCxFQUFBd3ZELEVBQUFrQyxHQUFBbEMsR0FDQTV2RCxHQUFBNnNELElBQUE3c0QsT0FBQSxFQUVBMCtDLEVBQUF6aEIsRUFBQSxDQUNBLElBQUF1eUIsRUFBQTVDLEVBQ0E2QyxFQUFBNUMsRUFFQUQsRUFBQUMsRUFBQXpzRCxFQUVBLElBQUFqRCxFQUFBNHlELEVBQUEzdkQsRUFBQWd2RCxHQUFBdHlDLEdBRUEyMEMsRUFBQSxDQUNBMzBDLEVBQUE0aEMsRUFBQXRZLEVBQUF3bUIsRUFBQUMsRUFBQTJDLEVBQUFDLEVBQ0FDLEVBQUFDLEVBQUFDLEdBa0JBLEdBZkF6eUQsR0F5NkJBLFNBQUFBLEVBQUEySCxHQUNBLElBQUE0NUMsRUFBQXZoRCxFQUFBLEdBQ0FnMUQsRUFBQXJ0RCxFQUFBLEdBQ0FzdEQsRUFBQTFULEVBQUF5VCxFQUNBclIsRUFBQXNSLEdBQUF6MUIsRUFBQUMsRUFBQU0sR0FFQW0xQixFQUNBRixHQUFBajFCLEdBQUF3aEIsR0FBQTVoQixHQUNBcTFCLEdBQUFqMUIsR0FBQXdoQixHQUFBdmhCLEdBQUFoZ0MsRUFBQSxHQUFBNkMsUUFBQThFLEVBQUEsSUFDQXF0RCxJQUFBajFCLEVBQUFDLElBQUFyNEIsRUFBQSxHQUFBOUUsUUFBQThFLEVBQUEsSUFBQTQ1QyxHQUFBNWhCLEVBR0EsSUFBQWdrQixJQUFBdVIsRUFDQSxPQUFBbDFELEVBR0FnMUQsRUFBQXgxQixJQUNBeC9CLEVBQUEsR0FBQTJILEVBQUEsR0FFQXN0RCxHQUFBMVQsRUFBQS9oQixFQUFBLEVBQUFFLEdBR0EsSUFBQTNoQyxFQUFBNEosRUFBQSxHQUNBLEdBQUE1SixFQUFBLENBQ0EsSUFBQTB4RCxFQUFBenZELEVBQUEsR0FDQUEsRUFBQSxHQUFBeXZELEVBQUFELEdBQUFDLEVBQUExeEQsRUFBQTRKLEVBQUEsSUFBQTVKLEVBQ0FpQyxFQUFBLEdBQUF5dkQsRUFBQTlXLEdBQUEzNEMsRUFBQSxHQUFBay9CLEdBQUF2M0IsRUFBQSxJQUdBNUosRUFBQTRKLEVBQUEsTUFFQThuRCxFQUFBenZELEVBQUEsR0FDQUEsRUFBQSxHQUFBeXZELEVBQUFVLEdBQUFWLEVBQUExeEQsRUFBQTRKLEVBQUEsSUFBQTVKLEVBQ0FpQyxFQUFBLEdBQUF5dkQsRUFBQTlXLEdBQUEzNEMsRUFBQSxHQUFBay9CLEdBQUF2M0IsRUFBQSxLQUdBNUosRUFBQTRKLEVBQUEsTUFFQTNILEVBQUEsR0FBQWpDLEdBR0FpM0QsRUFBQWoxQixJQUNBLy9CLEVBQUEsU0FBQUEsRUFBQSxHQUFBMkgsRUFBQSxHQUFBeTBDLEdBQUFwOEMsRUFBQSxHQUFBMkgsRUFBQSxLQUdBLE1BQUEzSCxFQUFBLEtBQ0FBLEVBQUEsR0FBQTJILEVBQUEsSUFHQTNILEVBQUEsR0FBQTJILEVBQUEsR0FDQTNILEVBQUEsR0FBQWkxRCxFQTE5QkFFLENBQUFiLEVBQUF0MEQsR0FFQTJmLEVBQUEyMEMsRUFBQSxHQUNBL1MsRUFBQStTLEVBQUEsR0FDQXJyQixFQUFBcXJCLEVBQUEsR0FDQTdFLEVBQUE2RSxFQUFBLEdBQ0E1RSxFQUFBNEUsRUFBQSxLQUNBN0IsRUFBQTZCLEVBQUEsR0FBQUEsRUFBQSxLQUFBcnhELEVBQ0EydkQsRUFBQSxFQUFBanpDLEVBQUE5YyxPQUNBczVDLEdBQUFtWSxFQUFBLEdBQUF6eEQsRUFBQSxLQUVBMCtDLEdBQUE1aEIsRUFBQUMsS0FDQTJoQixLQUFBNWhCLEVBQUFDLElBRUEyaEIsTUFBQS9oQixFQUdBcmYsRUFET29oQyxHQUFBNWhCLEdBQUE0aEIsR0FBQTNoQixFQXBnQlAsU0FBQWpnQixFQUFBNGhDLEVBQUFrUixHQUNBLElBQUE5UCxFQUFBMk8sR0FBQTN4QyxHQXdCQSxPQXRCQSxTQUFBb0IsSUFNQSxJQUxBLElBQUFsZSxFQUFBekMsVUFBQXlDLE9BQ0F1TSxFQUFBMU0sRUFBQUcsR0FDQVQsRUFBQVMsRUFDQSsxQyxFQUFBa2EsR0FBQS94QyxHQUVBM2UsS0FDQWdOLEVBQUFoTixHQUFBaEMsVUFBQWdDLEdBRUEsSUFBQXN0RCxFQUFBN3NELEVBQUEsR0FBQXVNLEVBQUEsS0FBQXdwQyxHQUFBeHBDLEVBQUF2TSxFQUFBLEtBQUErMUMsRUFDQSxHQUNBRCxHQUFBdnBDLEVBQUF3cEMsR0FHQSxPQURBLzFDLEdBQUE2c0QsRUFBQTdzRCxRQUNBNHZELEVBQ0FTLEdBQ0F2ekMsRUFBQTRoQyxFQUFBNlEsR0FBQXJ4QyxFQUFBNjNCLFlBQUEzMUMsRUFDQW1NLEVBQUFzZ0QsRUFBQXpzRCxJQUFBd3ZELEVBQUE1dkQsR0FHQTNCLEdBREEvQixhQUFBNmUsSUFBQTdlLGdCQUFBNGhCLEVBQUE0aEMsRUFBQWhqQyxFQUNBeGdCLEtBQUFpUSxJQThlQWdtRCxDQUFBejFDLEVBQUE0aEMsRUFBQWtSLEdBQ09sUixHQUFBMWhCLEdBQUEwaEIsSUFBQS9oQixFQUFBSyxJQUFBNnZCLEVBQUE3c0QsT0FHUHV2RCxHQUFBbHhELE1BQUErQixFQUFBcXhELEdBOU9BLFNBQUEzMEMsRUFBQTRoQyxFQUFBdFksRUFBQXdtQixHQUNBLElBQUFrRCxFQUFBcFIsRUFBQS9oQixFQUNBbWpCLEVBQUEyTyxHQUFBM3hDLEdBa0JBLE9BaEJBLFNBQUFvQixJQVFBLElBUEEsSUFBQTZ1QyxHQUFBLEVBQ0FDLEVBQUF6dkQsVUFBQXlDLE9BQ0FrdEQsR0FBQSxFQUNBQyxFQUFBUCxFQUFBNXNELE9BQ0F1TSxFQUFBMU0sRUFBQXN0RCxFQUFBSCxHQUNBdGhELEVBQUFwUCxhQUFBNmUsSUFBQTdlLGdCQUFBNGhCLEVBQUE0aEMsRUFBQWhqQyxJQUVBb3dDLEVBQUFDLEdBQ0E1Z0QsRUFBQTJnRCxHQUFBTixFQUFBTSxHQUVBLEtBQUFGLEtBQ0F6Z0QsRUFBQTJnRCxLQUFBM3ZELFlBQUF3dkQsR0FFQSxPQUFBMXVELEdBQUFxTixFQUFBb2tELEVBQUExcEIsRUFBQTlwQyxLQUFBaVEsSUEwTkFpbUQsQ0FBQTExQyxFQUFBNGhDLEVBQUF0WSxFQUFBd21CLFFBSkEsSUFBQXR2QyxFQWhtQkEsU0FBQVIsRUFBQTRoQyxFQUFBdFksR0FDQSxJQUFBMHBCLEVBQUFwUixFQUFBL2hCLEVBQ0FtakIsRUFBQTJPLEdBQUEzeEMsR0FNQSxPQUpBLFNBQUFvQixJQUVBLE9BREE1aEIsYUFBQTZlLElBQUE3ZSxnQkFBQTRoQixFQUFBNGhDLEVBQUFoakMsR0FDQXplLE1BQUF5eEQsRUFBQTFwQixFQUFBOXBDLEtBQUFpQixZQTBsQkFrMUQsQ0FBQTMxQyxFQUFBNGhDLEVBQUF0WSxHQVNBLE9BQUF1ckIsSUFEQXgwRCxFQUFBeXNELEdBQUE4SCxJQUNBcDBDLEVBQUFtMEMsR0FBQTMwQyxFQUFBNGhDLEdBZUEsU0FBQWdVLEdBQUE1VSxFQUFBc0ksRUFBQTVxRCxFQUFBRyxHQUNBLE9BQUFtaUQsSUFBQTE5QyxHQUNBdTlDLEdBQUFHLEVBQUEzRyxHQUFBMzdDLE1BQUFNLEdBQUExQixLQUFBdUIsRUFBQUgsR0FDQTRxRCxFQUVBdEksRUFpQkEsU0FBQTZVLEdBQUE3VSxFQUFBc0ksRUFBQTVxRCxFQUFBRyxFQUFBbUosRUFBQTg1QyxHQU9BLE9BTkF2RCxHQUFBeUMsSUFBQXpDLEdBQUErSyxLQUVBeEgsRUFBQTlzQyxJQUFBczBDLEVBQUF0SSxHQUNBeUosR0FBQXpKLEVBQUFzSSxFQUFBaG1ELEVBQUF1eUQsR0FBQS9ULEdBQ0FBLEVBQUEsT0FBQXdILElBRUF0SSxFQVlBLFNBQUE4VSxHQUFBMTNELEdBQ0EsT0FBQTRzRCxHQUFBNXNELEdBQUFrRixFQUFBbEYsRUFnQkEsU0FBQThwRCxHQUFBbnlCLEVBQUE0d0IsRUFBQS9FLEVBQUFDLEVBQUE2RixFQUFBNUYsR0FDQSxJQUFBc0csRUFBQXhHLEVBQUFqaUIsRUFDQTZ6QixFQUFBejlCLEVBQUE3eUIsT0FDQThqRCxFQUFBTCxFQUFBempELE9BRUEsR0FBQXN3RCxHQUFBeE0sS0FBQW9CLEdBQUFwQixFQUFBd00sR0FDQSxTQUdBLElBQUEvUCxFQUFBM0IsRUFBQTlqRCxJQUFBKzNCLEdBQ0EsR0FBQTB0QixHQUFBM0IsRUFBQTlqRCxJQUFBMm9ELEdBQ0EsT0FBQWxELEdBQUFrRCxFQUVBLElBQUFsa0QsR0FBQSxFQUNBK2QsR0FBQSxFQUNBNm1DLEVBQUF6RixFQUFBaGlCLEVBQUEsSUFBQTZmLEdBQUFuOEMsRUFNQSxJQUpBdytDLEVBQUE5c0MsSUFBQStnQixFQUFBNHdCLEdBQ0E3RSxFQUFBOXNDLElBQUEyeEMsRUFBQTV3QixLQUdBdHpCLEVBQUErd0QsR0FBQSxDQUNBLElBQUF1QyxFQUFBaGdDLEVBQUF0ekIsR0FDQW9tRCxFQUFBbEMsRUFBQWxrRCxHQUVBLEdBQUFvL0MsRUFDQSxJQUFBaUgsRUFBQVYsRUFDQXZHLEVBQUFnSCxFQUFBa04sRUFBQXR6RCxFQUFBa2tELEVBQUE1d0IsRUFBQStyQixHQUNBRCxFQUFBa1UsRUFBQWxOLEVBQUFwbUQsRUFBQXN6QixFQUFBNHdCLEVBQUE3RSxHQUVBLEdBQUFnSCxJQUFBeGxELEVBQUEsQ0FDQSxHQUFBd2xELEVBQ0EsU0FFQXRvQyxHQUFBLEVBQ0EsTUFHQSxHQUFBNm1DLEdBQ0EsSUFBQTNjLEdBQUFpYyxFQUFBLFNBQUFrQyxFQUFBNUIsR0FDQSxJQUFBbmIsR0FBQXViLEVBQUFKLEtBQ0E4TyxJQUFBbE4sR0FBQW5CLEVBQUFxTyxFQUFBbE4sRUFBQWpILEVBQUFDLEVBQUFDLElBQ0EsT0FBQXVGLEVBQUEvbEQsS0FBQTJsRCxLQUVlLENBQ2Z6bUMsR0FBQSxFQUNBLFlBRVMsR0FDVHUxQyxJQUFBbE4sSUFDQW5CLEVBQUFxTyxFQUFBbE4sRUFBQWpILEVBQUFDLEVBQUFDLEdBQ0EsQ0FDQXRoQyxHQUFBLEVBQ0EsT0FLQSxPQUZBc2hDLEVBQUEsT0FBQS9yQixHQUNBK3JCLEVBQUEsT0FBQTZFLEdBQ0FubUMsRUF5S0EsU0FBQXd4QyxHQUFBaHlDLEdBQ0EsT0FBQXlzQyxHQUFBQyxHQUFBMXNDLEVBQUExYyxFQUFBMHlELElBQUFoMkMsRUFBQSxJQVVBLFNBQUE0akMsR0FBQS9rRCxHQUNBLE9BQUFxbkQsR0FBQXJuRCxFQUFBeVAsR0FBQXMwQyxJQVdBLFNBQUFlLEdBQUE5a0QsR0FDQSxPQUFBcW5ELEdBQUFybkQsRUFBQTZqRCxHQUFBRixJQVVBLElBQUE4UCxHQUFBbFYsR0FBQSxTQUFBcDlCLEdBQ0EsT0FBQW85QixHQUFBcC9DLElBQUFnaUIsSUFEQWkxQyxHQVdBLFNBQUE3QyxHQUFBcHlDLEdBS0EsSUFKQSxJQUFBUSxFQUFBUixFQUFBdGlCLEtBQUEsR0FDQXE0QixFQUFBc25CLEdBQUE3OEIsR0FDQXRkLEVBQUFsRSxHQUFBMUIsS0FBQSsvQyxHQUFBNzhCLEdBQUF1VixFQUFBN3lCLE9BQUEsRUFFQUEsS0FBQSxDQUNBLElBQUE3QyxFQUFBMDFCLEVBQUE3eUIsR0FDQSt5RCxFQUFBNTFELEVBQUEyZixLQUNBLFNBQUFpMkMsTUFBQWoyQyxFQUNBLE9BQUEzZixFQUFBM0MsS0FHQSxPQUFBOGlCLEVBVUEsU0FBQTJ5QyxHQUFBbnpDLEdBRUEsT0FEQWhoQixHQUFBMUIsS0FBQTBnRCxHQUFBLGVBQUFBLEdBQUFoK0IsR0FDQWk1QixZQWNBLFNBQUFzUyxLQUNBLElBQUEvcUMsRUFBQXc5QixHQUFBdlUsYUFFQSxPQURBanBCLE1BQUFpcEIsR0FBQStmLEdBQUFocEMsRUFDQS9mLFVBQUF5QyxPQUFBc2QsRUFBQS9mLFVBQUEsR0FBQUEsVUFBQSxJQUFBK2YsRUFXQSxTQUFBb2tDLEdBQUF2OEIsRUFBQTNwQixHQUNBLElBZ1lBTixFQUNBb2EsRUFqWUFuWSxFQUFBZ29CLEVBQUFxM0IsU0FDQSxPQWlZQSxXQURBbG5DLFNBREFwYSxFQS9YQU0sS0FpWUEsVUFBQThaLEdBQUEsVUFBQUEsR0FBQSxXQUFBQSxFQUNBLGNBQUFwYSxFQUNBLE9BQUFBLEdBbFlBaUMsRUFBQSxpQkFBQTNCLEVBQUEsaUJBQ0EyQixFQUFBZ29CLElBVUEsU0FBQStoQyxHQUFBdnJELEdBSUEsSUFIQSxJQUFBMmhCLEVBQUFsUyxHQUFBelAsR0FDQXFFLEVBQUFzZCxFQUFBdGQsT0FFQUEsS0FBQSxDQUNBLElBQUF4RSxFQUFBOGhCLEVBQUF0ZCxHQUNBOUUsRUFBQVMsRUFBQUgsR0FFQThoQixFQUFBdGQsR0FBQSxDQUFBeEUsRUFBQU4sRUFBQW1zRCxHQUFBbnNELElBRUEsT0FBQW9pQixFQVdBLFNBQUFrN0IsR0FBQTc4QyxFQUFBSCxHQUNBLElBQUFOLEVBbnZKQSxTQUFBUyxFQUFBSCxHQUNBLGFBQUFHLEVBQUF5RSxFQUFBekUsRUFBQUgsR0FrdkpBOFAsQ0FBQTNQLEVBQUFILEdBQ0EsT0FBQTZxRCxHQUFBbnJELEtBQUFrRixFQXFDQSxJQUFBcy9DLEdBQUEzRyxHQUFBLFNBQUFwOUMsR0FDQSxhQUFBQSxFQUNBLElBRUFBLEVBQUFoQixHQUFBZ0IsR0FDQWtyQyxHQUFBa1MsR0FBQXA5QyxHQUFBLFNBQUFpa0QsR0FDQSxPQUFBMUgsR0FBQTk5QyxLQUFBdUIsRUFBQWlrRCxPQU5Bb1QsR0FpQkExVCxHQUFBdkcsR0FBQSxTQUFBcDlDLEdBRUEsSUFEQSxJQUFBMmhCLEVBQUEsR0FDQTNoQixHQUNBeXJDLEdBQUE5cEIsRUFBQW9pQyxHQUFBL2pELElBQ0FBLEVBQUFxOEMsR0FBQXI4QyxHQUVBLE9BQUEyaEIsR0FOQTAxQyxHQWdCQTlULEdBQUFpRSxHQTJFQSxTQUFBOFAsR0FBQXQzRCxFQUFBa25ELEVBQUFxUSxHQU9BLElBSkEsSUFBQTN6RCxHQUFBLEVBQ0FTLEdBSEE2aUQsRUFBQUMsR0FBQUQsRUFBQWxuRCxJQUdBcUUsT0FDQXNkLEdBQUEsSUFFQS9kLEVBQUFTLEdBQUEsQ0FDQSxJQUFBeEUsRUFBQXVuRCxHQUFBRixFQUFBdGpELElBQ0EsS0FBQStkLEVBQUEsTUFBQTNoQixHQUFBdTNELEVBQUF2M0QsRUFBQUgsSUFDQSxNQUVBRyxJQUFBSCxHQUVBLE9BQUE4aEIsS0FBQS9kLEdBQUFTLEVBQ0FzZCxLQUVBdGQsRUFBQSxNQUFBckUsRUFBQSxFQUFBQSxFQUFBcUUsU0FDQW16RCxHQUFBbnpELElBQUFrOUMsR0FBQTFoRCxFQUFBd0UsS0FDQVMsR0FBQTlFLElBQUFtaEQsR0FBQW5oRCxJQTZCQSxTQUFBMGpELEdBQUExakQsR0FDQSx5QkFBQUEsRUFBQTQ1QixhQUFBb3hCLEdBQUFockQsR0FFQSxHQURBdy9DLEdBQUFuRCxHQUFBcjhDLElBOEVBLFNBQUE0bUQsR0FBQXJuRCxHQUNBLE9BQUF1RixHQUFBdkYsSUFBQTRoRCxHQUFBNWhELE9BQ0FpOUMsSUFBQWo5QyxLQUFBaTlDLEtBV0EsU0FBQStFLEdBQUFoaUQsRUFBQThFLEdBQ0EsSUFBQXNWLFNBQUFwYSxFQUdBLFNBRkE4RSxFQUFBLE1BQUFBLEVBQUE0OUIsRUFBQTU5QixLQUdBLFVBQUFzVixHQUNBLFVBQUFBLEdBQUEwc0IsR0FBQTU4QixLQUFBbEssS0FDQUEsR0FBQSxHQUFBQSxFQUFBLE1BQUFBLEVBQUE4RSxFQWFBLFNBQUFpdUQsR0FBQS95RCxFQUFBcUUsRUFBQTVELEdBQ0EsSUFBQTAvQyxHQUFBMS9DLEdBQ0EsU0FFQSxJQUFBMlosU0FBQS9WLEVBQ0EsbUJBQUErVixFQUNBMnhDLEdBQUF0ckQsSUFBQXVoRCxHQUFBMzlDLEVBQUE1RCxFQUFBcUUsUUFDQSxVQUFBc1YsR0FBQS9WLEtBQUE1RCxJQUVBZ2lELEdBQUFoaUQsRUFBQTRELEdBQUFyRSxHQWFBLFNBQUFrc0QsR0FBQWxzRCxFQUFBUyxHQUNBLEdBQUE4RSxHQUFBdkYsR0FDQSxTQUVBLElBQUFvYSxTQUFBcGEsRUFDQSxrQkFBQW9hLEdBQUEsVUFBQUEsR0FBQSxXQUFBQSxHQUNBLE1BQUFwYSxJQUFBZ25ELEdBQUFobkQsS0FHQTRsQyxHQUFBMTdCLEtBQUFsSyxLQUFBMmxDLEdBQUF6N0IsS0FBQWxLLElBQ0EsTUFBQVMsR0FBQVQsS0FBQVAsR0FBQWdCLEdBeUJBLFNBQUEwekQsR0FBQXZ5QyxHQUNBLElBQUFxeUMsRUFBQUQsR0FBQXB5QyxHQUNBMm1DLEVBQUEzSSxHQUFBcVUsR0FFQSxzQkFBQTFMLEtBQUEwTCxLQUFBblUsR0FBQW4vQyxXQUNBLFNBRUEsR0FBQWloQixJQUFBMm1DLEVBQ0EsU0FFQSxJQUFBdG1ELEVBQUFpeUQsR0FBQTNMLEdBQ0EsUUFBQXRtRCxHQUFBMmYsSUFBQTNmLEVBQUEsSUE3U0EwOEMsSUFBQXFGLEdBQUEsSUFBQXJGLEdBQUEsSUFBQXVaLFlBQUEsTUFBQTN6QixJQUNBcWEsSUFBQW9GLEdBQUEsSUFBQXBGLEtBQUFsYixHQUNBbmhDLElBOXpMQSxvQkE4ekxBeWhELEdBQUF6aEQsR0FBQUMsWUFDQXE4QyxJQUFBbUYsR0FBQSxJQUFBbkYsS0FBQTdhLElBQ0E4YSxJQUFBa0YsR0FBQSxJQUFBbEYsS0FBQTFhLE1BQ0E0ZixHQUFBLFNBQUFoa0QsR0FDQSxJQUFBb2lCLEVBQUE2bEMsR0FBQWpvRCxHQUNBNGtELEVBQUF4aUMsR0FBQXloQixFQUFBN2pDLEVBQUFxNkIsWUFBQW4xQixFQUNBaXpELEVBQUF2VCxFQUFBekYsR0FBQXlGLEdBQUEsR0FFQSxHQUFBdVQsRUFDQSxPQUFBQSxHQUNBLEtBQUFqWixHQUFBLE9BQUEzYSxHQUNBLEtBQUE2YSxHQUFBLE9BQUExYixFQUNBLEtBQUEyYixHQUFBLE1BMTBMQSxtQkEyMExBLEtBQUFDLEdBQUEsT0FBQXRiLEdBQ0EsS0FBQXViLEdBQUEsT0FBQW5iLEdBR0EsT0FBQWhpQixJQStTQSxJQUFBZzJDLEdBQUFsYyxHQUFBLzVCLEdBQUFrMkMsR0FTQSxTQUFBNU0sR0FBQXpyRCxHQUNBLElBQUE0a0QsRUFBQTVrRCxLQUFBcTZCLFlBR0EsT0FBQXI2QixLQUZBLG1CQUFBNGtELEtBQUFqa0QsV0FBQXM3QyxJQWFBLFNBQUFrUSxHQUFBbnNELEdBQ0EsT0FBQUEsT0FBQW1nRCxHQUFBbmdELEdBWUEsU0FBQWlzRCxHQUFBM3JELEVBQUE0cUQsR0FDQSxnQkFBQXpxRCxHQUNBLGFBQUFBLEdBR0FBLEVBQUFILEtBQUE0cUQsSUFDQUEsSUFBQWhtRCxHQUFBNUUsS0FBQWIsR0FBQWdCLEtBc0lBLFNBQUE2dEQsR0FBQTFzQyxFQUFBcUUsRUFBQTBKLEdBRUEsT0FEQTFKLEVBQUFtNEIsR0FBQW40QixJQUFBL2dCLEVBQUEwYyxFQUFBOWMsT0FBQSxFQUFBbWhCLEVBQUEsR0FDQSxXQU1BLElBTEEsSUFBQTVVLEVBQUFoUCxVQUNBZ0MsR0FBQSxFQUNBUyxFQUFBczVDLEdBQUEvc0MsRUFBQXZNLE9BQUFtaEIsRUFBQSxHQUNBMFIsRUFBQWh6QixFQUFBRyxLQUVBVCxFQUFBUyxHQUNBNnlCLEVBQUF0ekIsR0FBQWdOLEVBQUE0VSxFQUFBNWhCLEdBRUFBLEdBQUEsRUFFQSxJQURBLElBQUFpMEQsRUFBQTN6RCxFQUFBc2hCLEVBQUEsS0FDQTVoQixFQUFBNGhCLEdBQ0FxeUMsRUFBQWowRCxHQUFBZ04sRUFBQWhOLEdBR0EsT0FEQWkwRCxFQUFBcnlDLEdBQUEwSixFQUFBZ0ksR0FDQXgwQixHQUFBeWUsRUFBQXhnQixLQUFBazNELElBWUEsU0FBQS8yRCxHQUFBZCxFQUFBa25ELEdBQ0EsT0FBQUEsRUFBQTdpRCxPQUFBLEVBQUFyRSxFQUFBaW5ELEdBQUFqbkQsRUFBQXF1RCxHQUFBbkgsRUFBQSxPQWlDQSxTQUFBNkUsR0FBQS9yRCxFQUFBSCxHQUNBLGdCQUFBQSxFQUlBLE9BQUFHLEVBQUFILEdBaUJBLElBQUFrMkQsR0FBQStCLEdBQUE3SixJQVVBcm9ELEdBQUFvM0MsSUFBQSxTQUFBNzdCLEVBQUF6VSxHQUNBLE9BQUE4UyxHQUFBNVosV0FBQXViLEVBQUF6VSxJQVdBa2hELEdBQUFrSyxHQUFBNUosSUFZQSxTQUFBOEgsR0FBQXp6QyxFQUFBalIsRUFBQXl4QyxHQUNBLElBQUE1NUMsRUFBQW1JLEVBQUEsR0FDQSxPQUFBczhDLEdBQUFyckMsRUF0YkEsU0FBQXBaLEVBQUE0dUQsR0FDQSxJQUFBMXpELEVBQUEwekQsRUFBQTF6RCxPQUNBLElBQUFBLEVBQ0EsT0FBQThFLEVBRUEsSUFBQXF4QyxFQUFBbjJDLEVBQUEsRUFHQSxPQUZBMHpELEVBQUF2ZCxJQUFBbjJDLEVBQUEsV0FBQTB6RCxFQUFBdmQsR0FDQXVkLElBQUExakMsS0FBQWh3QixFQUFBLFlBQ0E4RSxFQUFBL0IsUUFBQXMrQixHQUFBLHVCQUE2Q3F5QixFQUFBLFVBOGE3Q0MsQ0FBQTd1RCxFQXFIQSxTQUFBNHVELEVBQUFoVixHQU9BLE9BTkFqWSxHQUFBdkksRUFBQSxTQUFBai9CLEdBQ0EsSUFBQS9ELEVBQUEsS0FBQStELEVBQUEsR0FDQXkvQyxFQUFBei9DLEVBQUEsS0FBQThuQyxHQUFBMnNCLEVBQUF4NEQsSUFDQXc0RCxFQUFBdDFELEtBQUFsRCxLQUdBdzRELEVBQUFydUMsT0E1SEF1dUMsQ0FsakJBLFNBQUE5dUQsR0FDQSxJQUFBZCxFQUFBYyxFQUFBZCxNQUFBczlCLElBQ0EsT0FBQXQ5QixJQUFBLEdBQUFvTCxNQUFBbXlCLElBQUEsR0FnakJBc3lCLENBQUEvdUQsR0FBQTQ1QyxLQVlBLFNBQUErVSxHQUFBMzJDLEdBQ0EsSUFBQWczQyxFQUFBLEVBQ0FDLEVBQUEsRUFFQSxrQkFDQSxJQUFBQyxFQUFBeGEsS0FDQXlhLEVBQUF6MkIsR0FBQXcyQixFQUFBRCxHQUdBLEdBREFBLEVBQUFDLEVBQ0FDLEVBQUEsR0FDQSxLQUFBSCxHQUFBdjJCLEVBQ0EsT0FBQWhnQyxVQUFBLFFBR0F1MkQsRUFBQSxFQUVBLE9BQUFoM0MsRUFBQXplLE1BQUErQixFQUFBN0MsWUFZQSxTQUFBKy9DLEdBQUF6cUIsRUFBQWhyQixHQUNBLElBQUF0SSxHQUFBLEVBQ0FTLEVBQUE2eUIsRUFBQTd5QixPQUNBbTJDLEVBQUFuMkMsRUFBQSxFQUdBLElBREE2SCxNQUFBekgsRUFBQUosRUFBQTZILElBQ0F0SSxFQUFBc0ksR0FBQSxDQUNBLElBQUFxc0QsRUFBQTlXLEdBQUE3OUMsRUFBQTQyQyxHQUNBajdDLEVBQUEyM0IsRUFBQXFoQyxHQUVBcmhDLEVBQUFxaEMsR0FBQXJoQyxFQUFBdHpCLEdBQ0FzekIsRUFBQXR6QixHQUFBckUsRUFHQSxPQURBMjNCLEVBQUE3eUIsT0FBQTZILEVBQ0FnckIsRUFVQSxJQUFBczVCLEdBblRBLFNBQUFydkMsR0FDQSxJQUFBUSxFQUFBNjJDLEdBQUFyM0MsRUFBQSxTQUFBdGhCLEdBSUEsT0FIQXF0QyxFQUFBaGhDLE9BQUF1MEIsR0FDQXlNLEVBQUFzVCxRQUVBM2dELElBR0FxdEMsRUFBQXZyQixFQUFBdXJCLE1BQ0EsT0FBQXZyQixFQTBTQTgyQyxDQUFBLFNBQUExZSxHQUNBLElBQUFwNEIsRUFBQSxHQU9BLE9BTkEsS0FBQW80QixFQUFBN3hDLFdBQUEsSUFDQXlaLEVBQUFsZixLQUFBLElBRUFzM0MsRUFBQTN5QyxRQUFBZytCLEdBQUEsU0FBQS84QixFQUFBczZDLEVBQUErVixFQUFBN3dELEdBQ0E4WixFQUFBbGYsS0FBQWkyRCxFQUFBN3dELEVBQUFULFFBQUEwK0IsR0FBQSxNQUFBNmMsR0FBQXQ2QyxLQUVBc1osSUFVQSxTQUFBeWxDLEdBQUE3bkQsR0FDQSxvQkFBQUEsR0FBQWduRCxHQUFBaG5ELEdBQ0EsT0FBQUEsRUFFQSxJQUFBb2lCLEVBQUFwaUIsRUFBQSxHQUNBLFdBQUFvaUIsR0FBQSxFQUFBcGlCLElBQUF5aUMsRUFBQSxLQUFBcmdCLEVBVUEsU0FBQSs4QixHQUFBdjlCLEdBQ0EsU0FBQUEsRUFBQSxDQUNBLElBQ0EsT0FBQXU2QixHQUFBajlDLEtBQUEwaUIsR0FDUyxNQUFBblAsSUFDVCxJQUNBLE9BQUFtUCxFQUFBLEdBQ1MsTUFBQW5QLEtBRVQsU0E0QkEsU0FBQXV0QyxHQUFBaDlCLEdBQ0EsR0FBQUEsYUFBQTg4QixHQUNBLE9BQUE5OEIsRUFBQW8yQyxRQUVBLElBQUFoM0MsRUFBQSxJQUFBMjlCLEdBQUEvOEIsRUFBQXM5QixZQUFBdDlCLEVBQUF3OUIsV0FJQSxPQUhBcCtCLEVBQUFtK0IsWUFBQThCLEdBQUFyL0IsRUFBQXU5QixhQUNBbitCLEVBQUFxK0IsVUFBQXo5QixFQUFBeTlCLFVBQ0FyK0IsRUFBQXMrQixXQUFBMTlCLEVBQUEwOUIsV0FDQXQrQixFQXNJQSxJQUFBaTNDLEdBQUFqTCxHQUFBLFNBQUF6MkIsRUFBQUQsR0FDQSxPQUFBaTFCLEdBQUFoMUIsR0FDQWd1QixHQUFBaHVCLEVBQUF1dkIsR0FBQXh2QixFQUFBLEVBQUFpMUIsSUFBQSxJQUNBLEtBNkJBMk0sR0FBQWxMLEdBQUEsU0FBQXoyQixFQUFBRCxHQUNBLElBQUEyVCxFQUFBOGQsR0FBQXp4QixHQUlBLE9BSEFpMUIsR0FBQXRoQixLQUNBQSxFQUFBbm1DLEdBRUF5bkQsR0FBQWgxQixHQUNBZ3VCLEdBQUFodUIsRUFBQXV2QixHQUFBeHZCLEVBQUEsRUFBQWkxQixJQUFBLEdBQUFRLEdBQUE5aEIsRUFBQSxJQUNBLEtBMEJBa3VCLEdBQUFuTCxHQUFBLFNBQUF6MkIsRUFBQUQsR0FDQSxJQUFBc1UsRUFBQW1kLEdBQUF6eEIsR0FJQSxPQUhBaTFCLEdBQUEzZ0IsS0FDQUEsRUFBQTltQyxHQUVBeW5ELEdBQUFoMUIsR0FDQWd1QixHQUFBaHVCLEVBQUF1dkIsR0FBQXh2QixFQUFBLEVBQUFpMUIsSUFBQSxHQUFBem5ELEVBQUE4bUMsR0FDQSxLQXNPQSxTQUFBcmdCLEdBQUFnTSxFQUFBK1QsRUFBQW1CLEdBQ0EsSUFBQS9uQyxFQUFBLE1BQUE2eUIsRUFBQSxFQUFBQSxFQUFBN3lCLE9BQ0EsSUFBQUEsRUFDQSxTQUVBLElBQUFULEVBQUEsTUFBQXdvQyxFQUFBLEVBQUErcEIsR0FBQS9wQixHQUlBLE9BSEF4b0MsRUFBQSxJQUNBQSxFQUFBKzVDLEdBQUF0NUMsRUFBQVQsRUFBQSxJQUVBdW9DLEdBQUFqVixFQUFBdzFCLEdBQUF6aEIsRUFBQSxHQUFBcm5DLEdBc0NBLFNBQUFtMUQsR0FBQTdoQyxFQUFBK1QsRUFBQW1CLEdBQ0EsSUFBQS9uQyxFQUFBLE1BQUE2eUIsRUFBQSxFQUFBQSxFQUFBN3lCLE9BQ0EsSUFBQUEsRUFDQSxTQUVBLElBQUFULEVBQUFTLEVBQUEsRUFPQSxPQU5BK25DLElBQUEzbkMsSUFDQWIsRUFBQXV5RCxHQUFBL3BCLEdBQ0F4b0MsRUFBQXdvQyxFQUFBLEVBQ0F1UixHQUFBdDVDLEVBQUFULEVBQUEsR0FDQWc2QyxHQUFBaDZDLEVBQUFTLEVBQUEsSUFFQThuQyxHQUFBalYsRUFBQXcxQixHQUFBemhCLEVBQUEsR0FBQXJuQyxHQUFBLEdBaUJBLFNBQUF1ekQsR0FBQWpnQyxHQUVBLE9BREEsTUFBQUEsS0FBQTd5QixPQUNBb2lELEdBQUF2dkIsRUFBQSxNQWdHQSxTQUFBblksR0FBQW1ZLEdBQ0EsT0FBQUEsS0FBQTd5QixPQUFBNnlCLEVBQUEsR0FBQXp5QixFQTBFQSxJQUFBdTBELEdBQUFyTCxHQUFBLFNBQUF6RixHQUNBLElBQUErUSxFQUFBenRCLEdBQUEwYyxFQUFBb0ksSUFDQSxPQUFBMkksRUFBQTUwRCxRQUFBNDBELEVBQUEsS0FBQS9RLEVBQUEsR0FDQUQsR0FBQWdSLEdBQ0EsS0EwQkFDLEdBQUF2TCxHQUFBLFNBQUF6RixHQUNBLElBQUF0ZCxFQUFBOGQsR0FBQVIsR0FDQStRLEVBQUF6dEIsR0FBQTBjLEVBQUFvSSxJQU9BLE9BTEExbEIsSUFBQThkLEdBQUF1USxHQUNBcnVCLEVBQUFubUMsRUFFQXcwRCxFQUFBblQsTUFFQW1ULEVBQUE1MEQsUUFBQTQwRCxFQUFBLEtBQUEvUSxFQUFBLEdBQ0FELEdBQUFnUixFQUFBdk0sR0FBQTloQixFQUFBLElBQ0EsS0F3QkF1dUIsR0FBQXhMLEdBQUEsU0FBQXpGLEdBQ0EsSUFBQTNjLEVBQUFtZCxHQUFBUixHQUNBK1EsRUFBQXp0QixHQUFBMGMsRUFBQW9JLElBTUEsT0FKQS9rQixFQUFBLG1CQUFBQSxJQUFBOW1DLElBRUF3MEQsRUFBQW5ULE1BRUFtVCxFQUFBNTBELFFBQUE0MEQsRUFBQSxLQUFBL1EsRUFBQSxHQUNBRCxHQUFBZ1IsRUFBQXgwRCxFQUFBOG1DLEdBQ0EsS0FvQ0EsU0FBQW1kLEdBQUF4eEIsR0FDQSxJQUFBN3lCLEVBQUEsTUFBQTZ5QixFQUFBLEVBQUFBLEVBQUE3eUIsT0FDQSxPQUFBQSxFQUFBNnlCLEVBQUE3eUIsRUFBQSxHQUFBSSxFQXVGQSxJQUFBMjBELEdBQUF6TCxHQUFBMEwsSUFzQkEsU0FBQUEsR0FBQW5pQyxFQUFBRCxHQUNBLE9BQUFDLEtBQUE3eUIsUUFBQTR5QixLQUFBNXlCLE9BQ0FncEQsR0FBQW4yQixFQUFBRCxHQUNBQyxFQXFGQSxJQUFBb2lDLEdBQUFuRyxHQUFBLFNBQUFqOEIsRUFBQXEyQixHQUNBLElBQUFscEQsRUFBQSxNQUFBNnlCLEVBQUEsRUFBQUEsRUFBQTd5QixPQUNBc2QsRUFBQThnQyxHQUFBdnJCLEVBQUFxMkIsR0FNQSxPQUpBRCxHQUFBcDJCLEVBQUFzVSxHQUFBK2hCLEVBQUEsU0FBQTNwRCxHQUNBLE9BQUEyOUMsR0FBQTM5QyxFQUFBUyxJQUFBVCxNQUNPOGxCLEtBQUF1akMsS0FFUHRyQyxJQTJFQSxTQUFBMEwsR0FBQTZKLEdBQ0EsYUFBQUEsSUFBQSttQixHQUFBeC9DLEtBQUF5NEIsR0FrYUEsSUFBQXFpQyxHQUFBNUwsR0FBQSxTQUFBekYsR0FDQSxPQUFBdUgsR0FBQWhKLEdBQUF5QixFQUFBLEVBQUFnRSxJQUFBLE1BMEJBc04sR0FBQTdMLEdBQUEsU0FBQXpGLEdBQ0EsSUFBQXRkLEVBQUE4ZCxHQUFBUixHQUlBLE9BSEFnRSxHQUFBdGhCLEtBQ0FBLEVBQUFubUMsR0FFQWdyRCxHQUFBaEosR0FBQXlCLEVBQUEsRUFBQWdFLElBQUEsR0FBQVEsR0FBQTloQixFQUFBLE1Bd0JBNnVCLEdBQUE5TCxHQUFBLFNBQUF6RixHQUNBLElBQUEzYyxFQUFBbWQsR0FBQVIsR0FFQSxPQURBM2MsRUFBQSxtQkFBQUEsSUFBQTltQyxFQUNBZ3JELEdBQUFoSixHQUFBeUIsRUFBQSxFQUFBZ0UsSUFBQSxHQUFBem5ELEVBQUE4bUMsS0FnR0EsU0FBQW11QixHQUFBeGlDLEdBQ0EsSUFBQUEsTUFBQTd5QixPQUNBLFNBRUEsSUFBQUEsRUFBQSxFQU9BLE9BTkE2eUIsRUFBQWdVLEdBQUFoVSxFQUFBLFNBQUE1WSxHQUNBLEdBQUE0dEMsR0FBQTV0QyxHQUVBLE9BREFqYSxFQUFBczVDLEdBQUFyL0IsRUFBQWphLFdBQ0EsSUFHQXlvQyxHQUFBem9DLEVBQUEsU0FBQVQsR0FDQSxPQUFBNG5DLEdBQUF0VSxFQUFBNlUsR0FBQW5vQyxNQXlCQSxTQUFBKzFELEdBQUF6aUMsRUFBQTBULEdBQ0EsSUFBQTFULE1BQUE3eUIsT0FDQSxTQUVBLElBQUFzZCxFQUFBKzNDLEdBQUF4aUMsR0FDQSxhQUFBMFQsRUFDQWpwQixFQUVBNnBCLEdBQUE3cEIsRUFBQSxTQUFBckQsR0FDQSxPQUFBNWIsR0FBQWtvQyxFQUFBbm1DLEVBQUE2WixLQXdCQSxJQUFBczdDLEdBQUFqTSxHQUFBLFNBQUF6MkIsRUFBQUQsR0FDQSxPQUFBaTFCLEdBQUFoMUIsR0FDQWd1QixHQUFBaHVCLEVBQUFELEdBQ0EsS0FxQkE0aUMsR0FBQWxNLEdBQUEsU0FBQXpGLEdBQ0EsT0FBQWdJLEdBQUFobEIsR0FBQWdkLEVBQUFnRSxPQTBCQTROLEdBQUFuTSxHQUFBLFNBQUF6RixHQUNBLElBQUF0ZCxFQUFBOGQsR0FBQVIsR0FJQSxPQUhBZ0UsR0FBQXRoQixLQUNBQSxFQUFBbm1DLEdBRUF5ckQsR0FBQWhsQixHQUFBZ2QsRUFBQWdFLElBQUFRLEdBQUE5aEIsRUFBQSxNQXdCQW12QixHQUFBcE0sR0FBQSxTQUFBekYsR0FDQSxJQUFBM2MsRUFBQW1kLEdBQUFSLEdBRUEsT0FEQTNjLEVBQUEsbUJBQUFBLElBQUE5bUMsRUFDQXlyRCxHQUFBaGxCLEdBQUFnZCxFQUFBZ0UsSUFBQXpuRCxFQUFBOG1DLEtBbUJBeXVCLEdBQUFyTSxHQUFBK0wsSUE2REEsSUFBQU8sR0FBQXRNLEdBQUEsU0FBQXpGLEdBQ0EsSUFBQTdqRCxFQUFBNmpELEVBQUE3akQsT0FDQXVtQyxFQUFBdm1DLEVBQUEsRUFBQTZqRCxFQUFBN2pELEVBQUEsR0FBQUksRUFHQSxPQURBbW1DLEVBQUEsbUJBQUFBLEdBQUFzZCxFQUFBcEMsTUFBQWxiLEdBQUFubUMsRUFDQWsxRCxHQUFBelIsRUFBQXRkLEtBa0NBLFNBQUFzdkIsR0FBQTM2RCxHQUNBLElBQUFvaUIsRUFBQXc5QixHQUFBNS9DLEdBRUEsT0FEQW9pQixFQUFBbytCLFdBQUEsRUFDQXArQixFQXNEQSxTQUFBMnhDLEdBQUEvekQsRUFBQTQ2RCxHQUNBLE9BQUFBLEVBQUE1NkQsR0FtQkEsSUFBQTY2RCxHQUFBakgsR0FBQSxTQUFBNXpDLEdBQ0EsSUFBQWxiLEVBQUFrYixFQUFBbGIsT0FDQW1oQixFQUFBbmhCLEVBQUFrYixFQUFBLEtBQ0FoZ0IsRUFBQW9CLEtBQUFrL0MsWUFDQXNhLEVBQUEsU0FBQW42RCxHQUEwQyxPQUFBeWlELEdBQUF6aUQsRUFBQXVmLElBRTFDLFFBQUFsYixFQUFBLEdBQUExRCxLQUFBbS9DLFlBQUF6N0MsU0FDQTlFLGFBQUE4L0MsSUFBQWtDLEdBQUEvN0IsS0FHQWptQixJQUFBNk4sTUFBQW9ZLE1BQUFuaEIsRUFBQSxPQUNBeTdDLFlBQUFyOUMsS0FBQSxDQUNBMGUsS0FBQW15QyxHQUNBMWlELEtBQUEsQ0FBQXVwRCxHQUNBMXZCLFFBQUFobUMsSUFFQSxJQUFBNjZDLEdBQUEvL0MsRUFBQW9CLEtBQUFvL0MsV0FBQXVULEtBQUEsU0FBQXA4QixHQUlBLE9BSEE3eUIsSUFBQTZ5QixFQUFBN3lCLFFBQ0E2eUIsRUFBQXowQixLQUFBZ0MsR0FFQXl5QixLQVpBdjJCLEtBQUEyeUQsS0FBQTZHLEtBK1BBLElBQUFFLEdBQUFySSxHQUFBLFNBQUFyd0MsRUFBQXBpQixFQUFBTSxHQUNBTSxHQUFBMUIsS0FBQWtqQixFQUFBOWhCLEtBQ0E4aEIsRUFBQTloQixHQUVBb2lELEdBQUF0Z0MsRUFBQTloQixFQUFBLEtBbUlBLElBQUFnckIsR0FBQW1vQyxHQUFBOW5DLElBcUJBb3ZDLEdBQUF0SCxHQUFBK0YsSUEyR0EsU0FBQTcyRCxHQUFBK3BDLEVBQUFyQixHQUVBLE9BREE5bEMsR0FBQW1uQyxHQUFBbkIsR0FBQXdYLElBQ0FyVyxFQUFBeWdCLEdBQUE5aEIsRUFBQSxJQXVCQSxTQUFBMnZCLEdBQUF0dUIsRUFBQXJCLEdBRUEsT0FEQTlsQyxHQUFBbW5DLEdBQUFsQixHQUFBb2IsSUFDQWxhLEVBQUF5Z0IsR0FBQTloQixFQUFBLElBMEJBLElBQUE0dkIsR0FBQXhJLEdBQUEsU0FBQXJ3QyxFQUFBcGlCLEVBQUFNLEdBQ0FNLEdBQUExQixLQUFBa2pCLEVBQUE5aEIsR0FDQThoQixFQUFBOWhCLEdBQUE0QyxLQUFBbEQsR0FFQTBpRCxHQUFBdGdDLEVBQUE5aEIsRUFBQSxDQUFBTixNQXNFQSxJQUFBazdELEdBQUE5TSxHQUFBLFNBQUExaEIsRUFBQWliLEVBQUF0MkMsR0FDQSxJQUFBaE4sR0FBQSxFQUNBNC9DLEVBQUEsbUJBQUEwRCxFQUNBdmxDLEVBQUEycEMsR0FBQXJmLEdBQUEvbkMsRUFBQStuQyxFQUFBNW5DLFFBQUEsR0FLQSxPQUhBaStDLEdBQUFyVyxFQUFBLFNBQUExc0MsR0FDQW9pQixJQUFBL2QsR0FBQTQvQyxFQUFBOWdELEdBQUF3a0QsRUFBQTNuRCxFQUFBcVIsR0FBQTYzQyxHQUFBbHBELEVBQUEybkQsRUFBQXQyQyxLQUVBK1EsSUErQkErNEMsR0FBQTFJLEdBQUEsU0FBQXJ3QyxFQUFBcGlCLEVBQUFNLEdBQ0FvaUQsR0FBQXRnQyxFQUFBOWhCLEVBQUFOLEtBNkNBLFNBQUFpcUIsR0FBQXlpQixFQUFBckIsR0FFQSxPQURBOWxDLEdBQUFtbkMsR0FBQVQsR0FBQTZmLElBQ0FwZixFQUFBeWdCLEdBQUE5aEIsRUFBQSxJQWtGQSxJQUFBK3ZCLEdBQUEzSSxHQUFBLFNBQUFyd0MsRUFBQXBpQixFQUFBTSxHQUNBOGhCLEVBQUE5aEIsRUFBQSxLQUFBNEMsS0FBQWxELElBQ0ssV0FBYyxnQkFtU25CLElBQUFxN0QsR0FBQWpOLEdBQUEsU0FBQTFoQixFQUFBdWdCLEdBQ0EsU0FBQXZnQixFQUNBLFNBRUEsSUFBQTVuQyxFQUFBbW9ELEVBQUFub0QsT0FNQSxPQUxBQSxFQUFBLEdBQUFpdUQsR0FBQXJtQixFQUFBdWdCLEVBQUEsR0FBQUEsRUFBQSxJQUNBQSxFQUFBLEdBQ09ub0QsRUFBQSxHQUFBaXVELEdBQUE5RixFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxNQUNQQSxFQUFBLENBQUFBLEVBQUEsS0FFQUQsR0FBQXRnQixFQUFBd2EsR0FBQStGLEVBQUEsU0FxQkFyOUMsR0FBQTR0QyxJQUFBLFdBQ0EsT0FBQXY5QixHQUFBcWEsS0FBQTFxQixPQTBEQSxTQUFBNmtELEdBQUE3eUMsRUFBQXBoQixFQUFBc3lELEdBR0EsT0FGQXR5RCxFQUFBc3lELEVBQUE1dEQsRUFBQTFFLEVBQ0FBLEVBQUFvaEIsR0FBQSxNQUFBcGhCLEVBQUFvaEIsRUFBQTljLE9BQUF0RSxFQUNBdzJELEdBQUFwMUMsRUFBQW9nQixFQUFBOThCLFFBQUExRSxHQW9CQSxTQUFBbTdCLEdBQUFuN0IsRUFBQW9oQixHQUNBLElBQUFRLEVBQ0Esc0JBQUFSLEVBQ0EsVUFBQTJGLEdBQUF5WixHQUdBLE9BREF4Z0MsRUFBQW8yRCxHQUFBcDJELEdBQ0EsV0FPQSxRQU5BQSxFQUFBLElBQ0E0aEIsRUFBQVIsRUFBQXplLE1BQUEvQixLQUFBaUIsWUFFQTdCLEdBQUEsSUFDQW9oQixFQUFBMWMsR0FFQWtkLEdBdUNBLElBQUE3aEIsR0FBQTZ0RCxHQUFBLFNBQUF4c0MsRUFBQXNwQixFQUFBd21CLEdBQ0EsSUFBQWxPLEVBQUEvaEIsRUFDQSxHQUFBaXdCLEVBQUE1c0QsT0FBQSxDQUNBLElBQUE2c0QsRUFBQS9XLEdBQUE4VyxFQUFBcUQsR0FBQXgwRCxLQUNBaWpELEdBQUExaEIsRUFFQSxPQUFBazFCLEdBQUFwMUMsRUFBQTRoQyxFQUFBdFksRUFBQXdtQixFQUFBQyxLQWdEQTJKLEdBQUFsTixHQUFBLFNBQUEzdEQsRUFBQUgsRUFBQW94RCxHQUNBLElBQUFsTyxFQUFBL2hCLEVBQUFDLEVBQ0EsR0FBQWd3QixFQUFBNXNELE9BQUEsQ0FDQSxJQUFBNnNELEVBQUEvVyxHQUFBOFcsRUFBQXFELEdBQUF1RyxLQUNBOVgsR0FBQTFoQixFQUVBLE9BQUFrMUIsR0FBQTEyRCxFQUFBa2pELEVBQUEvaUQsRUFBQWl4RCxFQUFBQyxLQXNKQSxTQUFBcGhELEdBQUFxUixFQUFBelUsRUFBQWpNLEdBQ0EsSUFBQXE2RCxFQUNBQyxFQUNBQyxFQUNBcjVDLEVBQ0FzNUMsRUFDQUMsRUFDQUMsRUFBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQTNJLEdBQUEsRUFFQSxzQkFBQXZ4QyxFQUNBLFVBQUEyRixHQUFBeVosR0FVQSxTQUFBKzZCLEVBQUFDLEdBQ0EsSUFBQTNxRCxFQUFBa3FELEVBQ0Fyd0IsRUFBQXN3QixFQUtBLE9BSEFELEVBQUFDLEVBQUF0MkQsRUFDQTAyRCxFQUFBSSxFQUNBNTVDLEVBQUFSLEVBQUF6ZSxNQUFBK25DLEVBQUE3NUIsR0F1QkEsU0FBQTRxRCxFQUFBRCxHQUNBLElBQUFFLEVBQUFGLEVBQUFMLEVBTUEsT0FBQUEsSUFBQXoyRCxHQUFBZzNELEdBQUEvdUQsR0FDQSt1RCxFQUFBLEdBQUFKLEdBTkFFLEVBQUFKLEdBTUFILEVBR0EsU0FBQVUsSUFDQSxJQUFBSCxFQUFBcHNELEtBQ0EsR0FBQXFzRCxFQUFBRCxHQUNBLE9BQUFJLEVBQUFKLEdBR0FOLEVBQUFyMUQsR0FBQTgxRCxFQTNCQSxTQUFBSCxHQUNBLElBRUFLLEVBQUFsdkQsR0FGQTZ1RCxFQUFBTCxHQUlBLE9BQUFHLEVBQ0F6ZCxHQUFBZ2UsRUFBQVosR0FKQU8sRUFBQUosSUFLQVMsRUFvQkFDLENBQUFOLElBR0EsU0FBQUksRUFBQUosR0FLQSxPQUpBTixFQUFBeDJELEVBSUFpdUQsR0FBQW9JLEVBQ0FRLEVBQUFDLElBRUFULEVBQUFDLEVBQUF0MkQsRUFDQWtkLEdBZUEsU0FBQW02QyxJQUNBLElBQUFQLEVBQUFwc0QsS0FDQTRzRCxFQUFBUCxFQUFBRCxHQU1BLEdBSkFULEVBQUFsNUQsVUFDQW01RCxFQUFBcDZELEtBQ0F1NkQsRUFBQUssRUFFQVEsRUFBQSxDQUNBLEdBQUFkLElBQUF4MkQsRUFDQSxPQXpFQSxTQUFBODJELEdBTUEsT0FKQUosRUFBQUksRUFFQU4sRUFBQXIxRCxHQUFBODFELEVBQUFodkQsR0FFQTB1RCxFQUFBRSxFQUFBQyxHQUFBNTVDLEVBbUVBcTZDLENBQUFkLEdBRUEsR0FBQUcsRUFHQSxPQURBSixFQUFBcjFELEdBQUE4MUQsRUFBQWh2RCxHQUNBNHVELEVBQUFKLEdBTUEsT0FIQUQsSUFBQXgyRCxJQUNBdzJELEVBQUFyMUQsR0FBQTgxRCxFQUFBaHZELElBRUFpVixFQUlBLE9BMUdBalYsRUFBQWlwRCxHQUFBanBELElBQUEsRUFDQWd6QyxHQUFBai9DLEtBQ0EyNkQsSUFBQTM2RCxFQUFBMjZELFFBRUFKLEdBREFLLEVBQUEsWUFBQTU2RCxHQUNBazlDLEdBQUFnWSxHQUFBbDFELEVBQUF1NkQsVUFBQSxFQUFBdHVELEdBQUFzdUQsRUFDQXRJLEVBQUEsYUFBQWp5RCxNQUFBaXlELFlBbUdBb0osRUFBQUcsT0FuQ0EsV0FDQWhCLElBQUF4MkQsR0FDQTBMLEdBQUE4cUQsR0FFQUUsRUFBQSxFQUNBTCxFQUFBSSxFQUFBSCxFQUFBRSxFQUFBeDJELEdBK0JBcTNELEVBQUFJLE1BNUJBLFdBQ0EsT0FBQWpCLElBQUF4MkQsRUFBQWtkLEVBQUFnNkMsRUFBQXhzRCxPQTRCQTJzRCxFQXFCQSxJQUFBSyxHQUFBeE8sR0FBQSxTQUFBeHNDLEVBQUF2USxHQUNBLE9BQUFxMEMsR0FBQTlqQyxFQUFBLEVBQUF2USxLQXNCQWxMLEdBQUFpb0QsR0FBQSxTQUFBeHNDLEVBQUF6VSxFQUFBa0UsR0FDQSxPQUFBcTBDLEdBQUE5akMsRUFBQXcwQyxHQUFBanBELElBQUEsRUFBQWtFLEtBcUVBLFNBQUE0bkQsR0FBQXIzQyxFQUFBaTdDLEdBQ0Esc0JBQUFqN0MsR0FBQSxNQUFBaTdDLEdBQUEsbUJBQUFBLEVBQ0EsVUFBQXQxQyxHQUFBeVosR0FFQSxJQUFBODdCLEVBQUEsV0FDQSxJQUFBenJELEVBQUFoUCxVQUNBL0IsRUFBQXU4RCxJQUFBMTVELE1BQUEvQixLQUFBaVEsS0FBQSxHQUNBczhCLEVBQUFtdkIsRUFBQW52QixNQUVBLEdBQUFBLEVBQUFDLElBQUF0dEMsR0FDQSxPQUFBcXRDLEVBQUEvdEMsSUFBQVUsR0FFQSxJQUFBOGhCLEVBQUFSLEVBQUF6ZSxNQUFBL0IsS0FBQWlRLEdBRUEsT0FEQXlyRCxFQUFBbnZCLFFBQUEvMkIsSUFBQXRXLEVBQUE4aEIsSUFBQXVyQixFQUNBdnJCLEdBR0EsT0FEQTA2QyxFQUFBbnZCLE1BQUEsSUFBQXNyQixHQUFBOEQsT0FBQTNiLElBQ0EwYixFQTBCQSxTQUFBRSxHQUFBdHhCLEdBQ0Esc0JBQUFBLEVBQ0EsVUFBQW5rQixHQUFBeVosR0FFQSxrQkFDQSxJQUFBM3ZCLEVBQUFoUCxVQUNBLE9BQUFnUCxFQUFBdk0sUUFDQSxjQUFBNG1DLEVBQUF4c0MsS0FBQWtDLE1BQ0EsY0FBQXNxQyxFQUFBeHNDLEtBQUFrQyxLQUFBaVEsRUFBQSxJQUNBLGNBQUFxNkIsRUFBQXhzQyxLQUFBa0MsS0FBQWlRLEVBQUEsR0FBQUEsRUFBQSxJQUNBLGNBQUFxNkIsRUFBQXhzQyxLQUFBa0MsS0FBQWlRLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBRUEsT0FBQXE2QixFQUFBdm9DLE1BQUEvQixLQUFBaVEsSUFsQ0E0bkQsR0FBQThELE1BQUEzYixHQTJGQSxJQUFBNmIsR0FBQS9MLEdBQUEsU0FBQXR2QyxFQUFBczdDLEdBS0EsSUFBQUMsR0FKQUQsRUFBQSxHQUFBQSxFQUFBcDRELFFBQUFTLEdBQUEyM0QsRUFBQSxJQUNBanhCLEdBQUFpeEIsRUFBQSxHQUFBMXZCLEdBQUEyZixPQUNBbGhCLEdBQUFpYixHQUFBZ1csRUFBQSxHQUFBMXZCLEdBQUEyZixRQUVBcm9ELE9BQ0EsT0FBQXNwRCxHQUFBLFNBQUEvOEMsR0FJQSxJQUhBLElBQUFoTixHQUFBLEVBQ0FTLEVBQUF1NUMsR0FBQWh0QyxFQUFBdk0sT0FBQXE0RCxLQUVBOTRELEVBQUFTLEdBQ0F1TSxFQUFBaE4sR0FBQTY0RCxFQUFBNzRELEdBQUFuRixLQUFBa0MsS0FBQWlRLEVBQUFoTixJQUVBLE9BQUFsQixHQUFBeWUsRUFBQXhnQixLQUFBaVEsT0FxQ0ErckQsR0FBQWhQLEdBQUEsU0FBQXhzQyxFQUFBOHZDLEdBQ0EsSUFBQUMsRUFBQS9XLEdBQUE4VyxFQUFBcUQsR0FBQXFJLEtBQ0EsT0FBQXBHLEdBQUFwMUMsRUFBQWtnQixFQUFBNThCLEVBQUF3c0QsRUFBQUMsS0FtQ0EwTCxHQUFBalAsR0FBQSxTQUFBeHNDLEVBQUE4dkMsR0FDQSxJQUFBQyxFQUFBL1csR0FBQThXLEVBQUFxRCxHQUFBc0ksS0FDQSxPQUFBckcsR0FBQXAxQyxFQUFBbWdCLEVBQUE3OEIsRUFBQXdzRCxFQUFBQyxLQXlCQTJMLEdBQUExSixHQUFBLFNBQUFoeUMsRUFBQW9zQyxHQUNBLE9BQUFnSixHQUFBcDFDLEVBQUFxZ0IsRUFBQS84QixNQUFBOG9ELEtBaWFBLFNBQUF2TCxHQUFBemlELEVBQUF1b0QsR0FDQSxPQUFBdm9ELElBQUF1b0QsR0FBQXZvRCxNQUFBdW9ELEtBMEJBLElBQUFnVixHQUFBcEgsR0FBQTdOLElBeUJBa1YsR0FBQXJILEdBQUEsU0FBQW4yRCxFQUFBdW9ELEdBQ0EsT0FBQXZvRCxHQUFBdW9ELElBcUJBM0csR0FBQXdILEdBQUEsV0FBa0QsT0FBQS9tRCxVQUFsRCxJQUFzRSttRCxHQUFBLFNBQUFwcEQsR0FDdEUsT0FBQTYvQyxHQUFBNy9DLElBQUFZLEdBQUExQixLQUFBYyxFQUFBLFlBQ0FnOUMsR0FBQTk5QyxLQUFBYyxFQUFBLFdBMEJBdUYsR0FBQVosRUFBQVksUUFtQkFnbEMsR0FBQUQsR0FBQWtELEdBQUFsRCxJQTkzUEEsU0FBQXRxQyxHQUNBLE9BQUE2L0MsR0FBQTcvQyxJQUFBaW9ELEdBQUFqb0QsSUFBQXNrQyxJQXc1UEEsU0FBQXluQixHQUFBL3JELEdBQ0EsYUFBQUEsR0FBQWk0RCxHQUFBajRELEVBQUE4RSxVQUFBcWQsR0FBQW5pQixHQTRCQSxTQUFBMnNELEdBQUEzc0QsR0FDQSxPQUFBNi9DLEdBQUE3L0MsSUFBQStyRCxHQUFBL3JELEdBMENBLElBQUFnK0MsR0FBQUQsSUFBQXNhLEdBbUJBNXRCLEdBQUFELEdBQUFnRCxHQUFBaEQsSUF6K1BBLFNBQUF4cUMsR0FDQSxPQUFBNi9DLEdBQUE3L0MsSUFBQWlvRCxHQUFBam9ELElBQUFxakMsR0FncFFBLFNBQUFvNkIsR0FBQXo5RCxHQUNBLElBQUE2L0MsR0FBQTcvQyxHQUNBLFNBRUEsSUFBQStqRCxFQUFBa0UsR0FBQWpvRCxHQUNBLE9BQUErakQsR0FBQXhnQixHQUFBd2dCLEdBQUF6Z0IsR0FDQSxpQkFBQXRqQyxFQUFBeWdCLFNBQUEsaUJBQUF6Z0IsRUFBQVYsT0FBQXN0RCxHQUFBNXNELEdBa0RBLFNBQUFtaUIsR0FBQW5pQixHQUNBLElBQUFtZ0QsR0FBQW5nRCxHQUNBLFNBSUEsSUFBQStqRCxFQUFBa0UsR0FBQWpvRCxHQUNBLE9BQUErakQsR0FBQXZnQixHQUFBdWdCLEdBQUF0Z0IsR0FBQXNnQixHQUFBNWdCLEdBQUE0Z0IsR0FBQWpnQixHQTZCQSxTQUFBNDVCLEdBQUExOUQsR0FDQSx1QkFBQUEsTUFBQTQyRCxHQUFBNTJELEdBNkJBLFNBQUFpNEQsR0FBQWo0RCxHQUNBLHVCQUFBQSxHQUNBQSxHQUFBLEdBQUFBLEVBQUEsTUFBQUEsR0FBQTBpQyxFQTRCQSxTQUFBeWQsR0FBQW5nRCxHQUNBLElBQUFvYSxTQUFBcGEsRUFDQSxhQUFBQSxJQUFBLFVBQUFvYSxHQUFBLFlBQUFBLEdBMkJBLFNBQUF5bEMsR0FBQTcvQyxHQUNBLGFBQUFBLEdBQUEsaUJBQUFBLEVBb0JBLElBQUEycUMsR0FBQUQsR0FBQThDLEdBQUE5QyxJQTd2UUEsU0FBQTFxQyxHQUNBLE9BQUE2L0MsR0FBQTcvQyxJQUFBZ2tELEdBQUFoa0QsSUFBQTBqQyxHQTg4UUEsU0FBQWk2QixHQUFBMzlELEdBQ0EsdUJBQUFBLEdBQ0E2L0MsR0FBQTcvQyxJQUFBaW9ELEdBQUFqb0QsSUFBQTJqQyxFQStCQSxTQUFBaXBCLEdBQUE1c0QsR0FDQSxJQUFBNi9DLEdBQUE3L0MsSUFBQWlvRCxHQUFBam9ELElBQUE2akMsRUFDQSxTQUVBLElBQUFxYyxFQUFBcEQsR0FBQTk4QyxHQUNBLFVBQUFrZ0QsRUFDQSxTQUVBLElBQUEwRSxFQUFBaGtELEdBQUExQixLQUFBZ2hELEVBQUEsZ0JBQUFBLEVBQUE3bEIsWUFDQSx5QkFBQXVxQixtQkFDQXpJLEdBQUFqOUMsS0FBQTBsRCxJQUFBcEksR0FvQkEsSUFBQTNSLEdBQUFELEdBQUE0QyxHQUFBNUMsSUE3N1FBLFNBQUE1cUMsR0FDQSxPQUFBNi9DLEdBQUE3L0MsSUFBQWlvRCxHQUFBam9ELElBQUErakMsSUE4K1FBLElBQUFnSCxHQUFBRCxHQUFBMEMsR0FBQTFDLElBcCtRQSxTQUFBOXFDLEdBQ0EsT0FBQTYvQyxHQUFBNy9DLElBQUFna0QsR0FBQWhrRCxJQUFBZ2tDLElBcy9RQSxTQUFBNDVCLEdBQUE1OUQsR0FDQSx1QkFBQUEsSUFDQXVGLEdBQUF2RixJQUFBNi9DLEdBQUE3L0MsSUFBQWlvRCxHQUFBam9ELElBQUFpa0MsR0FvQkEsU0FBQStpQixHQUFBaG5ELEdBQ0EsdUJBQUFBLEdBQ0E2L0MsR0FBQTcvQyxJQUFBaW9ELEdBQUFqb0QsSUFBQWtrQyxHQW9CQSxJQUFBK0csR0FBQUQsR0FBQXdDLEdBQUF4QyxJQXhoUkEsU0FBQWhyQyxHQUNBLE9BQUE2L0MsR0FBQTcvQyxJQUNBaTRELEdBQUFqNEQsRUFBQThFLFdBQUFra0MsR0FBQWlmLEdBQUFqb0QsS0E4bVJBLElBQUE2OUQsR0FBQTFILEdBQUF0SyxJQXlCQWlTLEdBQUEzSCxHQUFBLFNBQUFuMkQsRUFBQXVvRCxHQUNBLE9BQUF2b0QsR0FBQXVvRCxJQTBCQSxTQUFBd1YsR0FBQS85RCxHQUNBLElBQUFBLEVBQ0EsU0FFQSxHQUFBK3JELEdBQUEvckQsR0FDQSxPQUFBNDlELEdBQUE1OUQsR0FBQW03QyxHQUFBbjdDLEdBQUFxaUQsR0FBQXJpRCxHQUVBLEdBQUFtOUMsSUFBQW45QyxFQUFBbTlDLElBQ0EsT0EvNVZBLFNBQUFDLEdBSUEsSUFIQSxJQUFBbjdDLEVBQ0FtZ0IsRUFBQSxLQUVBbmdCLEVBQUFtN0MsRUFBQTRnQixRQUFBQyxNQUNBNzdDLEVBQUFsZixLQUFBakIsRUFBQWpDLE9BRUEsT0FBQW9pQixFQXc1VkE4N0MsQ0FBQWwrRCxFQUFBbTlDLE9BRUEsSUFBQTRHLEVBQUFDLEdBQUFoa0QsR0FHQSxPQUZBK2pELEdBQUFyZ0IsRUFBQStXLEdBQUFzSixHQUFBL2YsR0FBQThXLEdBQUFwakIsSUFFQTEzQixHQTBCQSxTQUFBaTJELEdBQUFqMkQsR0FDQSxPQUFBQSxHQUdBQSxFQUFBbzJELEdBQUFwMkQsTUFDQXlpQyxHQUFBemlDLEtBQUF5aUMsR0FDQXppQyxFQUFBLFFBQ0EyaUMsRUFFQTNpQyxPQUFBLEVBUEEsSUFBQUEsSUFBQSxFQW9DQSxTQUFBNDJELEdBQUE1MkQsR0FDQSxJQUFBb2lCLEVBQUE2ekMsR0FBQWoyRCxHQUNBbStELEVBQUEvN0MsRUFBQSxFQUVBLE9BQUFBLEtBQUErN0MsRUFBQS83QyxFQUFBKzdDLEVBQUEvN0MsRUFBQSxFQThCQSxTQUFBZzhDLEdBQUFwK0QsR0FDQSxPQUFBQSxFQUFBc2lELEdBQUFzVSxHQUFBNTJELEdBQUEsRUFBQTZpQyxHQUFBLEVBMEJBLFNBQUF1ekIsR0FBQXAyRCxHQUNBLG9CQUFBQSxFQUNBLE9BQUFBLEVBRUEsR0FBQWduRCxHQUFBaG5ELEdBQ0EsT0FBQTRpQyxFQUVBLEdBQUF1ZCxHQUFBbmdELEdBQUEsQ0FDQSxJQUFBdW9ELEVBQUEsbUJBQUF2b0QsRUFBQTAvQyxRQUFBMS9DLEVBQUEwL0MsVUFBQTEvQyxFQUNBQSxFQUFBbWdELEdBQUFvSSxLQUFBLEdBQUFBLEVBRUEsb0JBQUF2b0QsRUFDQSxXQUFBQSxPQUVBQSxJQUFBNkgsUUFBQW0rQixHQUFBLElBQ0EsSUFBQXE0QixFQUFBMTNCLEdBQUF6OEIsS0FBQWxLLEdBQ0EsT0FBQXErRCxHQUFBeDNCLEdBQUEzOEIsS0FBQWxLLEdBQ0EwcEMsR0FBQTFwQyxFQUFBNk4sTUFBQSxHQUFBd3dELEVBQUEsS0FDQTMzQixHQUFBeDhCLEtBQUFsSyxHQUFBNGlDLEdBQUE1aUMsRUEyQkEsU0FBQTZzRCxHQUFBN3NELEdBQ0EsT0FBQWlqRCxHQUFBampELEVBQUFza0QsR0FBQXRrRCxJQXNEQSxTQUFBOGQsR0FBQTlkLEdBQ0EsYUFBQUEsRUFBQSxHQUFBaXdELEdBQUFqd0QsR0FxQ0EsSUFBQTBKLEdBQUFpcEQsR0FBQSxTQUFBbHlELEVBQUFtSixHQUNBLEdBQUE2aEQsR0FBQTdoRCxJQUFBbWlELEdBQUFuaUQsR0FDQXE1QyxHQUFBcjVDLEVBQUFzRyxHQUFBdEcsR0FBQW5KLFFBR0EsUUFBQUgsS0FBQXNKLEVBQ0FoSixHQUFBMUIsS0FBQTBLLEVBQUF0SixJQUNBcWlELEdBQUFsaUQsRUFBQUgsRUFBQXNKLEVBQUF0SixNQW9DQWcrRCxHQUFBM0wsR0FBQSxTQUFBbHlELEVBQUFtSixHQUNBcTVDLEdBQUFyNUMsRUFBQTA2QyxHQUFBMTZDLEdBQUFuSixLQWdDQTg5RCxHQUFBNUwsR0FBQSxTQUFBbHlELEVBQUFtSixFQUFBMGlELEVBQUE3SSxHQUNBUixHQUFBcjVDLEVBQUEwNkMsR0FBQTE2QyxHQUFBbkosRUFBQWdqRCxLQStCQSthLEdBQUE3TCxHQUFBLFNBQUFseUQsRUFBQW1KLEVBQUEwaUQsRUFBQTdJLEdBQ0FSLEdBQUFyNUMsRUFBQXNHLEdBQUF0RyxHQUFBbkosRUFBQWdqRCxLQW9CQWdiLEdBQUE3SyxHQUFBMVEsSUE4REEsSUFBQTFrQyxHQUFBNHZDLEdBQUEsU0FBQTN0RCxFQUFBb3lELEdBQ0FweUQsRUFBQWhCLEdBQUFnQixHQUVBLElBQUE0RCxHQUFBLEVBQ0FTLEVBQUErdEQsRUFBQS90RCxPQUNBZ3VELEVBQUFodUQsRUFBQSxFQUFBK3RELEVBQUEsR0FBQTN0RCxFQU1BLElBSkE0dEQsR0FBQUMsR0FBQUYsRUFBQSxHQUFBQSxFQUFBLEdBQUFDLEtBQ0FodUQsRUFBQSxLQUdBVCxFQUFBUyxHQU1BLElBTEEsSUFBQThFLEVBQUFpcEQsRUFBQXh1RCxHQUNBMk4sRUFBQXN5QyxHQUFBMTZDLEdBQ0E4MEQsR0FBQSxFQUNBQyxFQUFBM3NELEVBQUFsTixTQUVBNDVELEVBQUFDLEdBQUEsQ0FDQSxJQUFBcitELEVBQUEwUixFQUFBMHNELEdBQ0ExK0QsRUFBQVMsRUFBQUgsSUFFQU4sSUFBQWtGLEdBQ0F1OUMsR0FBQXppRCxFQUFBaThDLEdBQUEzN0MsTUFBQU0sR0FBQTFCLEtBQUF1QixFQUFBSCxNQUNBRyxFQUFBSCxHQUFBc0osRUFBQXRKLElBS0EsT0FBQUcsSUFzQkFtK0QsR0FBQXhRLEdBQUEsU0FBQS84QyxHQUVBLE9BREFBLEVBQUFuTyxLQUFBZ0MsRUFBQXV5RCxJQUNBdDBELEdBQUEwN0QsR0FBQTM1RCxFQUFBbU0sS0FnU0EsU0FBQXpSLEdBQUFhLEVBQUFrbkQsRUFBQXQzQyxHQUNBLElBQUErUixFQUFBLE1BQUEzaEIsRUFBQXlFLEVBQUF3aUQsR0FBQWpuRCxFQUFBa25ELEdBQ0EsT0FBQXZsQyxJQUFBbGQsRUFBQW1MLEVBQUErUixFQTREQSxTQUFBZ3FDLEdBQUEzckQsRUFBQWtuRCxHQUNBLGFBQUFsbkQsR0FBQXMzRCxHQUFBdDNELEVBQUFrbkQsRUFBQWMsSUFxQkEsSUFBQXFXLEdBQUF2SixHQUFBLFNBQUFuekMsRUFBQXBpQixFQUFBTSxHQUNBLE1BQUFOLEdBQ0EsbUJBQUFBLEVBQUE4ZCxXQUNBOWQsRUFBQXU4QyxHQUFBcjlDLEtBQUFjLElBR0FvaUIsRUFBQXBpQixHQUFBTSxHQUNLc3VELEdBQUF2RCxLQTRCTDBULEdBQUF4SixHQUFBLFNBQUFuekMsRUFBQXBpQixFQUFBTSxHQUNBLE1BQUFOLEdBQ0EsbUJBQUFBLEVBQUE4ZCxXQUNBOWQsRUFBQXU4QyxHQUFBcjlDLEtBQUFjLElBR0FZLEdBQUExQixLQUFBa2pCLEVBQUFwaUIsR0FDQW9pQixFQUFBcGlCLEdBQUFrRCxLQUFBNUMsR0FFQThoQixFQUFBcGlCLEdBQUEsQ0FBQU0sSUFFSzZzRCxJQW9CTDZSLEdBQUE1USxHQUFBbEYsSUE4QkEsU0FBQWg1QyxHQUFBelAsR0FDQSxPQUFBc3JELEdBQUF0ckQsR0FBQStnRCxHQUFBL2dELEdBQUErcUQsR0FBQS9xRCxHQTBCQSxTQUFBNmpELEdBQUE3akQsR0FDQSxPQUFBc3JELEdBQUF0ckQsR0FBQStnRCxHQUFBL2dELEdBQUEsR0FBQWlyRCxHQUFBanJELEdBdUdBLElBQUF3K0QsR0FBQXRNLEdBQUEsU0FBQWx5RCxFQUFBbUosRUFBQTBpRCxHQUNBRCxHQUFBNXJELEVBQUFtSixFQUFBMGlELEtBa0NBdVMsR0FBQWxNLEdBQUEsU0FBQWx5RCxFQUFBbUosRUFBQTBpRCxFQUFBN0ksR0FDQTRJLEdBQUE1ckQsRUFBQW1KLEVBQUEwaUQsRUFBQTdJLEtBdUJBeWIsR0FBQXRMLEdBQUEsU0FBQW56RCxFQUFBdWYsR0FDQSxJQUFBb0MsRUFBQSxHQUNBLFNBQUEzaEIsRUFDQSxPQUFBMmhCLEVBRUEsSUFBQXVoQyxHQUFBLEVBQ0EzakMsRUFBQWlzQixHQUFBanNCLEVBQUEsU0FBQTJuQyxHQUdBLE9BRkFBLEVBQUFDLEdBQUFELEVBQUFsbkQsR0FDQWtqRCxNQUFBZ0UsRUFBQTdpRCxPQUFBLEdBQ0E2aUQsSUFFQTFFLEdBQUF4aUQsRUFBQThrRCxHQUFBOWtELEdBQUEyaEIsR0FDQXVoQyxJQUNBdmhDLEVBQUFtaEMsR0FBQW5oQyxFQUFBZ2YsRUFBQUMsRUFBQUMsRUFBQW8yQixLQUdBLElBREEsSUFBQTV5RCxFQUFBa2IsRUFBQWxiLE9BQ0FBLEtBQ0FvcEQsR0FBQTlyQyxFQUFBcEMsRUFBQWxiLElBRUEsT0FBQXNkLElBNENBLElBQUEwNUIsR0FBQThYLEdBQUEsU0FBQW56RCxFQUFBdWYsR0FDQSxhQUFBdmYsRUFBQSxHQWpsVEEsU0FBQUEsRUFBQXVmLEdBQ0EsT0FBQTR0QyxHQUFBbnRELEVBQUF1ZixFQUFBLFNBQUFoZ0IsRUFBQTJuRCxHQUNBLE9BQUF5RSxHQUFBM3JELEVBQUFrbkQsS0Era1RnQ3dYLENBQUExK0QsRUFBQXVmLEtBcUJoQyxTQUFBby9DLEdBQUEzK0QsRUFBQWlyQyxHQUNBLFNBQUFqckMsRUFDQSxTQUVBLElBQUF1UixFQUFBaTZCLEdBQUFzWixHQUFBOWtELEdBQUEsU0FBQW1jLEdBQ0EsT0FBQUEsS0FHQSxPQURBOHVCLEVBQUF5aEIsR0FBQXpoQixHQUNBa2lCLEdBQUFudEQsRUFBQXVSLEVBQUEsU0FBQWhTLEVBQUEybkQsR0FDQSxPQUFBamMsRUFBQTFyQyxFQUFBMm5ELEVBQUEsTUE0SUEsSUFBQTBYLEdBQUF2SSxHQUFBNW1ELElBMEJBb3ZELEdBQUF4SSxHQUFBeFMsSUE0S0EsU0FBQTVzQixHQUFBajNCLEdBQ0EsYUFBQUEsRUFBQSxHQUFBZ3RDLEdBQUFodEMsRUFBQXlQLEdBQUF6UCxJQWtOQSxJQUFBOCtELEdBQUFuTSxHQUFBLFNBQUFoeEMsRUFBQWxhLEVBQUE3RCxHQUVBLE9BREE2RCxJQUFBSixjQUNBc2EsR0FBQS9kLEVBQUFtN0QsR0FBQXQzRCxRQWtCQSxTQUFBczNELEdBQUFobEIsR0FDQSxPQUFBaWxCLEdBQUEzaEQsR0FBQTA4QixHQUFBMXlDLGVBcUJBLFNBQUF3ckQsR0FBQTlZLEdBRUEsT0FEQUEsRUFBQTE4QixHQUFBMDhCLEtBQ0FBLEVBQUEzeUMsUUFBQWsvQixHQUFBa0gsSUFBQXBtQyxRQUFBNGdDLEdBQUEsSUFzSEEsSUFBQWkzQixHQUFBdE0sR0FBQSxTQUFBaHhDLEVBQUFsYSxFQUFBN0QsR0FDQSxPQUFBK2QsR0FBQS9kLEVBQUEsUUFBQTZELEVBQUFKLGdCQXVCQTYzRCxHQUFBdk0sR0FBQSxTQUFBaHhDLEVBQUFsYSxFQUFBN0QsR0FDQSxPQUFBK2QsR0FBQS9kLEVBQUEsUUFBQTZELEVBQUFKLGdCQW9CQTgzRCxHQUFBM00sR0FBQSxlQTBOQSxJQUFBNE0sR0FBQXpNLEdBQUEsU0FBQWh4QyxFQUFBbGEsRUFBQTdELEdBQ0EsT0FBQStkLEdBQUEvZCxFQUFBLFFBQUE2RCxFQUFBSixnQkFnRUEsSUFBQWc0RCxHQUFBMU0sR0FBQSxTQUFBaHhDLEVBQUFsYSxFQUFBN0QsR0FDQSxPQUFBK2QsR0FBQS9kLEVBQUEsUUFBQW83RCxHQUFBdjNELEtBNmhCQSxJQUFBNjNELEdBQUEzTSxHQUFBLFNBQUFoeEMsRUFBQWxhLEVBQUE3RCxHQUNBLE9BQUErZCxHQUFBL2QsRUFBQSxRQUFBNkQsRUFBQUMsZ0JBb0JBczNELEdBQUF4TSxHQUFBLGVBcUJBLFNBQUFJLEdBQUE3WSxFQUFBd2xCLEVBQUFsTixHQUlBLE9BSEF0WSxFQUFBMThCLEdBQUEwOEIsSUFDQXdsQixFQUFBbE4sRUFBQTV0RCxFQUFBODZELEtBRUE5NkQsRUFwdmJBLFNBQUFzMUMsR0FDQSxPQUFBM1IsR0FBQTMrQixLQUFBc3dDLEdBb3ZiQXlsQixDQUFBemxCLEdBeGhiQSxTQUFBQSxHQUNBLE9BQUFBLEVBQUExeEMsTUFBQTYvQixLQUFBLEdBdWhiQXUzQixDQUFBMWxCLEdBM25jQSxTQUFBQSxHQUNBLE9BQUFBLEVBQUExeEMsTUFBQXc5QixLQUFBLEdBMG5jQTY1QixDQUFBM2xCLEdBRUFBLEVBQUExeEMsTUFBQWszRCxJQUFBLEdBMkJBLElBQUFJLEdBQUFoUyxHQUFBLFNBQUF4c0MsRUFBQXZRLEdBQ0EsSUFDQSxPQUFBbE8sR0FBQXllLEVBQUExYyxFQUFBbU0sR0FDTyxNQUFBb0IsR0FDUCxPQUFBZ3JELEdBQUFockQsS0FBQSxJQUFBSSxHQUFBSixNQThCQTR0RCxHQUFBek0sR0FBQSxTQUFBbnpELEVBQUE2L0QsR0FLQSxPQUpBLzBCLEdBQUErMEIsRUFBQSxTQUFBaGdFLEdBQ0FBLEVBQUF1bkQsR0FBQXZuRCxHQUNBb2lELEdBQUFqaUQsRUFBQUgsRUFBQUMsR0FBQUUsRUFBQUgsR0FBQUcsTUFFQUEsSUFxR0EsU0FBQW11RCxHQUFBNXVELEdBQ0Esa0JBQ0EsT0FBQUEsR0FrREEsSUFBQXVnRSxHQUFBNU0sS0F1QkE2TSxHQUFBN00sSUFBQSxHQWtCQSxTQUFBdEksR0FBQXJyRCxHQUNBLE9BQUFBLEVBNkNBLFNBQUFxckMsR0FBQXpwQixHQUNBLE9BQUF3cEMsR0FBQSxtQkFBQXhwQyxJQUFBMmhDLEdBQUEzaEMsRUFBQXdmLElBeUZBLElBQUFxL0IsR0FBQXJTLEdBQUEsU0FBQXpHLEVBQUF0MkMsR0FDQSxnQkFBQTVRLEdBQ0EsT0FBQXlvRCxHQUFBem9ELEVBQUFrbkQsRUFBQXQyQyxNQTJCQXF2RCxHQUFBdFMsR0FBQSxTQUFBM3RELEVBQUE0USxHQUNBLGdCQUFBczJDLEdBQ0EsT0FBQXVCLEdBQUF6b0QsRUFBQWtuRCxFQUFBdDJDLE1Bd0NBLFNBQUFzdkQsR0FBQWxnRSxFQUFBbUosRUFBQTFJLEdBQ0EsSUFBQThRLEVBQUE5QixHQUFBdEcsR0FDQTAyRCxFQUFBN1ksR0FBQTc5QyxFQUFBb0ksR0FFQSxNQUFBOVEsR0FDQWkvQyxHQUFBdjJDLEtBQUEwMkQsRUFBQXg3RCxTQUFBa04sRUFBQWxOLFVBQ0E1RCxFQUFBMEksRUFDQUEsRUFBQW5KLEVBQ0FBLEVBQUFXLEtBQ0FrL0QsRUFBQTdZLEdBQUE3OUMsRUFBQXNHLEdBQUF0RyxLQUVBLElBQUErd0QsSUFBQXhhLEdBQUFqL0MsSUFBQSxVQUFBQSxNQUFBeTVELE9BQ0ExVyxFQUFBOWhDLEdBQUExaEIsR0FxQkEsT0FuQkE4cUMsR0FBQSswQixFQUFBLFNBQUFwTixHQUNBLElBQUF0eEMsRUFBQWhZLEVBQUFzcEQsR0FDQXp5RCxFQUFBeXlELEdBQUF0eEMsRUFDQXFpQyxJQUNBeGpELEVBQUFFLFVBQUF1eUQsR0FBQSxXQUNBLElBQUE3UyxFQUFBai9DLEtBQUFvL0MsVUFDQSxHQUFBbWEsR0FBQXRhLEVBQUEsQ0FDQSxJQUFBaitCLEVBQUEzaEIsRUFBQVcsS0FBQWsvQyxhQUtBLE9BSkFsK0IsRUFBQW0rQixZQUFBOEIsR0FBQWpoRCxLQUFBbS9DLGNBRUFyOUMsS0FBQSxDQUE0QjBlLE9BQUF2USxLQUFBaFAsVUFBQTZvQyxRQUFBenFDLElBQzVCMmhCLEVBQUFvK0IsVUFBQUgsRUFDQWorQixFQUVBLE9BQUFSLEVBQUF6ZSxNQUFBMUMsRUFBQXlyQyxHQUFBLENBQUE5cUMsS0FBQXBCLFNBQUFxQyxnQkFLQTVCLEVBbUNBLFNBQUFvMkQsTUFpREEsSUFBQStKLEdBQUFoTCxHQUFBM3BCLElBMEJBNDBCLEdBQUFqTCxHQUFBbnFCLElBMEJBcTFCLEdBQUFsTCxHQUFBdHBCLElBd0JBLFNBQUE1ckMsR0FBQWluRCxHQUNBLE9BQUF1RSxHQUFBdkUsR0FBQW5iLEdBQUFxYixHQUFBRixJQTV6WEEsU0FBQUEsR0FDQSxnQkFBQWxuRCxHQUNBLE9BQUFpbkQsR0FBQWpuRCxFQUFBa25ELElBMHpYQW9aLENBQUFwWixHQXVFQSxJQUFBeGhDLEdBQUFDLEtBc0NBNDZDLEdBQUE1NkMsSUFBQSxHQW9CQSxTQUFBMHhDLEtBQ0EsU0FnQkEsU0FBQU8sS0FDQSxTQStKQSxJQUFBdnhELEdBQUE0dUQsR0FBQSxTQUFBdUwsRUFBQUMsR0FDQSxPQUFBRCxFQUFBQyxHQUNLLEdBdUJMdmpCLEdBQUErWSxHQUFBLFFBaUJBeUssR0FBQXpMLEdBQUEsU0FBQTBMLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQUMsR0FDSyxHQXVCTHB4QyxHQUFBeW1DLEdBQUEsU0F3S0EsSUFnYUE5c0QsR0FoYUEwM0QsR0FBQTVMLEdBQUEsU0FBQTZMLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQUMsR0FDSyxHQXVCTHRrRCxHQUFBdzVDLEdBQUEsU0FpQkF6dEMsR0FBQXlzQyxHQUFBLFNBQUErTCxFQUFBQyxHQUNBLE9BQUFELEVBQUFDLEdBQ0ssR0ErbEJMLE9BemlCQTloQixHQUFBK2hCLE1BajRNQSxTQUFBbmhFLEVBQUFvaEIsR0FDQSxzQkFBQUEsRUFDQSxVQUFBMkYsR0FBQXlaLEdBR0EsT0FEQXhnQyxFQUFBbzJELEdBQUFwMkQsR0FDQSxXQUNBLEtBQUFBLEVBQUEsRUFDQSxPQUFBb2hCLEVBQUF6ZSxNQUFBL0IsS0FBQWlCLGFBMjNNQXU5QyxHQUFBNlUsT0FDQTdVLEdBQUFsMkMsVUFDQWsyQyxHQUFBMGUsWUFDQTFlLEdBQUEyZSxnQkFDQTNlLEdBQUE0ZSxjQUNBNWUsR0FBQTZlLE1BQ0E3ZSxHQUFBamtCLFVBQ0Fpa0IsR0FBQXIvQyxRQUNBcS9DLEdBQUF5Z0IsV0FDQXpnQixHQUFBMGIsV0FDQTFiLEdBQUFnaUIsVUFoNktBLFdBQ0EsSUFBQXYvRCxVQUFBeUMsT0FDQSxTQUVBLElBQUE5RSxFQUFBcUMsVUFBQSxHQUNBLE9BQUFrRCxHQUFBdkYsS0FBQSxDQUFBQSxJQTQ1S0E0L0MsR0FBQSthLFNBQ0EvYSxHQUFBaHJCLE1BNzlTQSxTQUFBK0MsRUFBQWhyQixFQUFBbW1ELEdBRUFubUQsR0FEQW1tRCxFQUFBQyxHQUFBcDdCLEVBQUFockIsRUFBQW1tRCxHQUFBbm1ELElBQUF6SCxHQUNBLEVBRUFrNUMsR0FBQXdZLEdBQUFqcUQsR0FBQSxHQUVBLElBQUE3SCxFQUFBLE1BQUE2eUIsRUFBQSxFQUFBQSxFQUFBN3lCLE9BQ0EsSUFBQUEsR0FBQTZILEVBQUEsRUFDQSxTQU1BLElBSkEsSUFBQXRJLEVBQUEsRUFDQXVuQyxFQUFBLEVBQ0F4cEIsRUFBQXpkLEVBQUErNEMsR0FBQTU0QyxFQUFBNkgsSUFFQXRJLEVBQUFTLEdBQ0FzZCxFQUFBd3BCLEtBQUFrakIsR0FBQW4zQixFQUFBdHpCLEtBQUFzSSxHQUVBLE9BQUF5VixHQTY4U0F3OUIsR0FBQWlpQixRQTM3U0EsU0FBQWxxQyxHQU1BLElBTEEsSUFBQXR6QixHQUFBLEVBQ0FTLEVBQUEsTUFBQTZ5QixFQUFBLEVBQUFBLEVBQUE3eUIsT0FDQThtQyxFQUFBLEVBQ0F4cEIsRUFBQSxLQUVBL2QsRUFBQVMsR0FBQSxDQUNBLElBQUE5RSxFQUFBMjNCLEVBQUF0ekIsR0FDQXJFLElBQ0FvaUIsRUFBQXdwQixLQUFBNXJDLEdBR0EsT0FBQW9pQixHQWc3U0F3OUIsR0FBQTN3QyxPQXY1U0EsV0FDQSxJQUFBbkssRUFBQXpDLFVBQUF5QyxPQUNBLElBQUFBLEVBQ0EsU0FNQSxJQUpBLElBQUF1TSxFQUFBMU0sRUFBQUcsRUFBQSxHQUNBNnlCLEVBQUF0MUIsVUFBQSxHQUNBZ0MsRUFBQVMsRUFFQVQsS0FDQWdOLEVBQUFoTixFQUFBLEdBQUFoQyxVQUFBZ0MsR0FFQSxPQUFBNm5DLEdBQUEzbUMsR0FBQW95QixHQUFBMHFCLEdBQUExcUIsR0FBQSxDQUFBQSxHQUFBdXZCLEdBQUE3MUMsRUFBQSxLQTQ0U0F1dUMsR0FBQWtpQixLQWxzQ0EsU0FBQXJiLEdBQ0EsSUFBQTNoRCxFQUFBLE1BQUEyaEQsRUFBQSxFQUFBQSxFQUFBM2hELE9BQ0Ewd0QsRUFBQXJJLEtBU0EsT0FQQTFHLEVBQUEzaEQsRUFBQW1uQyxHQUFBd2EsRUFBQSxTQUFBMWlELEdBQ0Esc0JBQUFBLEVBQUEsR0FDQSxVQUFBd2pCLEdBQUF5WixHQUVBLE9BQUF3MEIsRUFBQXp4RCxFQUFBLElBQUFBLEVBQUEsTUFKQSxHQU9BcXFELEdBQUEsU0FBQS84QyxHQUVBLElBREEsSUFBQWhOLEdBQUEsSUFDQUEsRUFBQVMsR0FBQSxDQUNBLElBQUFmLEVBQUEwaUQsRUFBQXBpRCxHQUNBLEdBQUFsQixHQUFBWSxFQUFBLEdBQUEzQyxLQUFBaVEsR0FDQSxPQUFBbE8sR0FBQVksRUFBQSxHQUFBM0MsS0FBQWlRLE9BbXJDQXV1QyxHQUFBbWlCLFNBcnBDQSxTQUFBbjRELEdBQ0EsT0FqM1lBLFNBQUFBLEdBQ0EsSUFBQW9JLEVBQUE5QixHQUFBdEcsR0FDQSxnQkFBQW5KLEdBQ0EsT0FBQWdsRCxHQUFBaGxELEVBQUFtSixFQUFBb0ksSUE4MllBZ3dELENBQUF6ZSxHQUFBMzVDLEVBQUF3M0IsS0FxcENBd2UsR0FBQWdQLFlBQ0FoUCxHQUFBa2IsV0FDQWxiLEdBQUF2L0MsT0Fwc0hBLFNBQUFNLEVBQUFzaEUsR0FDQSxJQUFBNy9DLEVBQUE2OUIsR0FBQXQvQyxHQUNBLGFBQUFzaEUsRUFBQTcvQyxFQUFBNGdDLEdBQUE1Z0MsRUFBQTYvQyxJQW1zSEFyaUIsR0FBQXNpQixNQXRzTUEsU0FBQUEsRUFBQXRnRCxFQUFBOHlDLEVBQUE1QixHQUVBLElBQUExd0MsRUFBQTQwQyxHQUFBcDFDLEVBQUFnZ0IsRUFBQTE4QixVQURBd3ZELEVBQUE1QixFQUFBNXRELEVBQUF3dkQsR0FHQSxPQURBdHlDLEVBQUF5NEIsWUFBQXFuQixFQUFBcm5CLFlBQ0F6NEIsR0Ftc01BdzlCLEdBQUF1aUIsV0ExcE1BLFNBQUFBLEVBQUF2Z0QsRUFBQTh5QyxFQUFBNUIsR0FFQSxJQUFBMXdDLEVBQUE0MEMsR0FBQXAxQyxFQUFBaWdCLEVBQUEzOEIsVUFEQXd2RCxFQUFBNUIsRUFBQTV0RCxFQUFBd3ZELEdBR0EsT0FEQXR5QyxFQUFBeTRCLFlBQUFzbkIsRUFBQXRuQixZQUNBejRCLEdBdXBNQXc5QixHQUFBcnZDLFlBQ0FxdkMsR0FBQXBoQyxZQUNBb2hDLEdBQUFnZixnQkFDQWhmLEdBQUFnZCxTQUNBaGQsR0FBQXo1QyxTQUNBeTVDLEdBQUF5WixjQUNBelosR0FBQTBaLGdCQUNBMVosR0FBQTJaLGtCQUNBM1osR0FBQXdpQixLQS94U0EsU0FBQXpxQyxFQUFBbjNCLEVBQUFzeUQsR0FDQSxJQUFBaHVELEVBQUEsTUFBQTZ5QixFQUFBLEVBQUFBLEVBQUE3eUIsT0FDQSxPQUFBQSxFQUlBZ3FELEdBQUFuM0IsR0FEQW4zQixFQUFBc3lELEdBQUF0eUQsSUFBQTBFLEVBQUEsRUFBQTB4RCxHQUFBcDJELElBQ0EsSUFBQUEsRUFBQXNFLEdBSEEsSUE2eFNBODZDLEdBQUF5aUIsVUE5dlNBLFNBQUExcUMsRUFBQW4zQixFQUFBc3lELEdBQ0EsSUFBQWh1RCxFQUFBLE1BQUE2eUIsRUFBQSxFQUFBQSxFQUFBN3lCLE9BQ0EsT0FBQUEsRUFLQWdxRCxHQUFBbjNCLEVBQUEsR0FEQW4zQixFQUFBc0UsR0FEQXRFLEVBQUFzeUQsR0FBQXR5RCxJQUFBMEUsRUFBQSxFQUFBMHhELEdBQUFwMkQsS0FFQSxJQUFBQSxHQUpBLElBNHZTQW8vQyxHQUFBMGlCLGVBbHRTQSxTQUFBM3FDLEVBQUErVCxHQUNBLE9BQUEvVCxLQUFBN3lCLE9BQ0F5ckQsR0FBQTU0QixFQUFBdzFCLEdBQUF6aEIsRUFBQSxVQUNBLElBZ3RTQWtVLEdBQUEyaUIsVUExcVNBLFNBQUE1cUMsRUFBQStULEdBQ0EsT0FBQS9ULEtBQUE3eUIsT0FDQXlyRCxHQUFBNTRCLEVBQUF3MUIsR0FBQXpoQixFQUFBLE9BQ0EsSUF3cVNBa1UsR0FBQTRpQixLQXhvU0EsU0FBQTdxQyxFQUFBMzNCLEVBQUFpbUIsRUFBQUMsR0FDQSxJQUFBcGhCLEVBQUEsTUFBQTZ5QixFQUFBLEVBQUFBLEVBQUE3eUIsT0FDQSxPQUFBQSxHQUdBbWhCLEdBQUEsaUJBQUFBLEdBQUE4c0MsR0FBQXA3QixFQUFBMzNCLEVBQUFpbUIsS0FDQUEsRUFBQSxFQUNBQyxFQUFBcGhCLEdBL3RJQSxTQUFBNnlCLEVBQUEzM0IsRUFBQWltQixFQUFBQyxHQUNBLElBQUFwaEIsRUFBQTZ5QixFQUFBN3lCLE9BV0EsS0FUQW1oQixFQUFBMndDLEdBQUEzd0MsSUFDQSxJQUNBQSxLQUFBbmhCLEVBQUEsRUFBQUEsRUFBQW1oQixJQUVBQyxNQUFBaGhCLEdBQUFnaEIsRUFBQXBoQixJQUFBOHhELEdBQUExd0MsSUFDQSxJQUNBQSxHQUFBcGhCLEdBRUFvaEIsRUFBQUQsRUFBQUMsRUFBQSxFQUFBazRDLEdBQUFsNEMsR0FDQUQsRUFBQUMsR0FDQXlSLEVBQUExUixLQUFBam1CLEVBRUEsT0FBQTIzQixFQWt0SUE4cUMsQ0FBQTlxQyxFQUFBMzNCLEVBQUFpbUIsRUFBQUMsSUFOQSxJQXNvU0EwNUIsR0FBQXJ1QyxPQXh0T0EsU0FBQW03QixFQUFBaEIsR0FFQSxPQURBbm1DLEdBQUFtbkMsR0FBQWYsR0FBQXNiLElBQ0F2YSxFQUFBeWdCLEdBQUF6aEIsRUFBQSxLQXV0T0FrVSxHQUFBOGlCLFFBcG9PQSxTQUFBaDJCLEVBQUFyQixHQUNBLE9BQUE2YixHQUFBajlCLEdBQUF5aUIsRUFBQXJCLEdBQUEsSUFvb09BdVUsR0FBQStpQixZQTdtT0EsU0FBQWoyQixFQUFBckIsR0FDQSxPQUFBNmIsR0FBQWo5QixHQUFBeWlCLEVBQUFyQixHQUFBNUksSUE2bU9BbWQsR0FBQWdqQixhQXJsT0EsU0FBQWwyQixFQUFBckIsRUFBQThiLEdBRUEsT0FEQUEsTUFBQWppRCxFQUFBLEVBQUEweEQsR0FBQXpQLEdBQ0FELEdBQUFqOUIsR0FBQXlpQixFQUFBckIsR0FBQThiLElBb2xPQXZILEdBQUFnWSxXQUNBaFksR0FBQWlqQixZQWhnU0EsU0FBQWxyQyxHQUVBLE9BREEsTUFBQUEsS0FBQTd5QixPQUNBb2lELEdBQUF2dkIsRUFBQThLLEdBQUEsSUErL1JBbWQsR0FBQWtqQixhQXgrUkEsU0FBQW5yQyxFQUFBd3ZCLEdBRUEsT0FEQSxNQUFBeHZCLEtBQUE3eUIsT0FLQW9pRCxHQUFBdnZCLEVBREF3dkIsTUFBQWppRCxFQUFBLEVBQUEweEQsR0FBQXpQLElBRkEsSUFzK1JBdkgsR0FBQXowQyxLQXY3TEEsU0FBQXlXLEdBQ0EsT0FBQW8xQyxHQUFBcDFDLEVBQUFzZ0IsSUF1N0xBMGQsR0FBQTJnQixRQUNBM2dCLEdBQUE0Z0IsYUFDQTVnQixHQUFBbWpCLFVBcDlSQSxTQUFBdGMsR0FLQSxJQUpBLElBQUFwaUQsR0FBQSxFQUNBUyxFQUFBLE1BQUEyaEQsRUFBQSxFQUFBQSxFQUFBM2hELE9BQ0FzZCxFQUFBLEtBRUEvZCxFQUFBUyxHQUFBLENBQ0EsSUFBQWYsRUFBQTBpRCxFQUFBcGlELEdBQ0ErZCxFQUFBcmUsRUFBQSxJQUFBQSxFQUFBLEdBRUEsT0FBQXFlLEdBNDhSQXc5QixHQUFBb2pCLFVBejZHQSxTQUFBdmlFLEdBQ0EsYUFBQUEsRUFBQSxHQUFBZ25ELEdBQUFobkQsRUFBQXlQLEdBQUF6UCxLQXk2R0FtL0MsR0FBQXFqQixZQS80R0EsU0FBQXhpRSxHQUNBLGFBQUFBLEVBQUEsR0FBQWduRCxHQUFBaG5ELEVBQUE2akQsR0FBQTdqRCxLQSs0R0FtL0MsR0FBQXFiLFdBQ0FyYixHQUFBc2pCLFFBcjRSQSxTQUFBdnJDLEdBRUEsT0FEQSxNQUFBQSxLQUFBN3lCLE9BQ0FncUQsR0FBQW4zQixFQUFBLFVBbzRSQWlvQixHQUFBNlosZ0JBQ0E3WixHQUFBK1osa0JBQ0EvWixHQUFBZ2Esb0JBQ0FoYSxHQUFBa2YsVUFDQWxmLEdBQUFtZixZQUNBbmYsR0FBQXNiLGFBQ0F0YixHQUFBdlUsWUFDQXVVLEdBQUF1YixTQUNBdmIsR0FBQTF2QyxRQUNBMHZDLEdBQUEwRSxVQUNBMUUsR0FBQTMxQixPQUNBMjFCLEdBQUF1akIsUUF4cEdBLFNBQUExaUUsRUFBQTRxQyxHQUNBLElBQUFqcEIsRUFBQSxHQU1BLE9BTEFpcEIsRUFBQThoQixHQUFBOWhCLEVBQUEsR0FFQXNiLEdBQUFsbUQsRUFBQSxTQUFBVCxFQUFBTSxFQUFBRyxHQUNBaWlELEdBQUF0Z0MsRUFBQWlwQixFQUFBcnJDLEVBQUFNLEVBQUFHLEdBQUFULEtBRUFvaUIsR0FrcEdBdzlCLEdBQUF3akIsVUFubkdBLFNBQUEzaUUsRUFBQTRxQyxHQUNBLElBQUFqcEIsRUFBQSxHQU1BLE9BTEFpcEIsRUFBQThoQixHQUFBOWhCLEVBQUEsR0FFQXNiLEdBQUFsbUQsRUFBQSxTQUFBVCxFQUFBTSxFQUFBRyxHQUNBaWlELEdBQUF0Z0MsRUFBQTloQixFQUFBK3FDLEVBQUFyckMsRUFBQU0sRUFBQUcsTUFFQTJoQixHQTZtR0F3OUIsR0FBQXJ5QyxRQWxnQ0EsU0FBQTNELEdBQ0EsT0FBQTJoRCxHQUFBaEksR0FBQTM1QyxFQUFBdzNCLEtBa2dDQXdlLEdBQUF5akIsZ0JBcitCQSxTQUFBMWIsRUFBQXVELEdBQ0EsT0FBQUksR0FBQTNELEVBQUFwRSxHQUFBMkgsRUFBQTlwQixLQXErQkF3ZSxHQUFBcVosV0FDQXJaLEdBQUFxZixTQUNBcmYsR0FBQWlmLGFBQ0FqZixHQUFBNmdCLFVBQ0E3Z0IsR0FBQThnQixZQUNBOWdCLEdBQUErZ0IsU0FDQS9nQixHQUFBb2QsVUFDQXBkLEdBQUEwakIsT0E5eUJBLFNBQUE5aUUsR0FFQSxPQURBQSxFQUFBbzJELEdBQUFwMkQsR0FDQTR0RCxHQUFBLFNBQUEvOEMsR0FDQSxPQUFBMDdDLEdBQUExN0MsRUFBQTdRLE1BNHlCQW8vQyxHQUFBc2YsUUFDQXRmLEdBQUEyakIsT0FqL0ZBLFNBQUE5aUUsRUFBQWlyQyxHQUNBLE9BQUEwekIsR0FBQTMrRCxFQUFBdThELEdBQUE3UCxHQUFBemhCLE1BaS9GQWtVLEdBQUE0akIsS0EzMUxBLFNBQUE1aEQsR0FDQSxPQUFBK1osR0FBQSxFQUFBL1osSUEyMUxBZytCLEdBQUE2akIsUUFsMk5BLFNBQUEvMkIsRUFBQXVnQixFQUFBQyxFQUFBNEYsR0FDQSxhQUFBcG1CLEVBQ0EsSUFFQW5uQyxHQUFBMG5ELEtBQ0FBLEVBQUEsTUFBQUEsRUFBQSxJQUFBQSxJQUdBMW5ELEdBREEybkQsRUFBQTRGLEVBQUE1dEQsRUFBQWdvRCxLQUVBQSxFQUFBLE1BQUFBLEVBQUEsSUFBQUEsSUFFQUYsR0FBQXRnQixFQUFBdWdCLEVBQUFDLEtBdzFOQXROLEdBQUFnaEIsUUFDQWhoQixHQUFBcWQsWUFDQXJkLEdBQUFpaEIsYUFDQWpoQixHQUFBa2hCLFlBQ0FsaEIsR0FBQXdkLFdBQ0F4ZCxHQUFBeWQsZ0JBQ0F6ZCxHQUFBd2IsYUFDQXhiLEdBQUE5RCxRQUNBOEQsR0FBQXdmLFVBQ0F4ZixHQUFBbC9DLFlBQ0FrL0MsR0FBQThqQixXQS9yQkEsU0FBQWpqRSxHQUNBLGdCQUFBa25ELEdBQ0EsYUFBQWxuRCxFQUFBeUUsRUFBQXdpRCxHQUFBam5ELEVBQUFrbkQsS0E4ckJBL0gsR0FBQWlhLFFBQ0FqYSxHQUFBa2EsV0FDQWxhLEdBQUErakIsVUE3cFJBLFNBQUFoc0MsRUFBQUQsRUFBQTJULEdBQ0EsT0FBQTFULEtBQUE3eUIsUUFBQTR5QixLQUFBNXlCLE9BQ0FncEQsR0FBQW4yQixFQUFBRCxFQUFBeTFCLEdBQUE5aEIsRUFBQSxJQUNBMVQsR0EycFJBaW9CLEdBQUFna0IsWUFqb1JBLFNBQUFqc0MsRUFBQUQsRUFBQXNVLEdBQ0EsT0FBQXJVLEtBQUE3eUIsUUFBQTR5QixLQUFBNXlCLE9BQ0FncEQsR0FBQW4yQixFQUFBRCxFQUFBeHlCLEVBQUE4bUMsR0FDQXJVLEdBK25SQWlvQixHQUFBbWEsVUFDQW5hLEdBQUF6NUIsU0FDQXk1QixHQUFBb2hCLGNBQ0FwaEIsR0FBQTBkLFNBQ0ExZCxHQUFBbjlDLE9BcnROQSxTQUFBaXFDLEVBQUFoQixHQUVBLE9BREFubUMsR0FBQW1uQyxHQUFBZixHQUFBc2IsSUFDQXZhLEVBQUFzd0IsR0FBQTdQLEdBQUF6aEIsRUFBQSxNQW90TkFrVSxHQUFBbjRDLE9BbGtSQSxTQUFBa3dCLEVBQUErVCxHQUNBLElBQUF0cEIsRUFBQSxHQUNBLElBQUF1VixNQUFBN3lCLE9BQ0EsT0FBQXNkLEVBRUEsSUFBQS9kLEdBQUEsRUFDQTJwRCxFQUFBLEdBQ0FscEQsRUFBQTZ5QixFQUFBN3lCLE9BR0EsSUFEQTRtQyxFQUFBeWhCLEdBQUF6aEIsRUFBQSxLQUNBcm5DLEVBQUFTLEdBQUEsQ0FDQSxJQUFBOUUsRUFBQTIzQixFQUFBdHpCLEdBQ0FxbkMsRUFBQTFyQyxFQUFBcUUsRUFBQXN6QixLQUNBdlYsRUFBQWxmLEtBQUFsRCxHQUNBZ3VELEVBQUE5cUQsS0FBQW1CLElBSUEsT0FEQTBwRCxHQUFBcDJCLEVBQUFxMkIsR0FDQTVyQyxHQWlqUkF3OUIsR0FBQWlrQixLQWhzTEEsU0FBQWppRCxFQUFBcUUsR0FDQSxzQkFBQXJFLEVBQ0EsVUFBQTJGLEdBQUF5WixHQUdBLE9BQUFvdEIsR0FBQXhzQyxFQURBcUUsTUFBQS9nQixFQUFBK2dCLEVBQUEyd0MsR0FBQTN3QyxLQTZyTEEyNUIsR0FBQTl4QixXQUNBOHhCLEdBQUFra0IsV0E3cU5BLFNBQUFwM0IsRUFBQWxzQyxFQUFBc3lELEdBT0EsT0FMQXR5RCxHQURBc3lELEVBQUFDLEdBQUFybUIsRUFBQWxzQyxFQUFBc3lELEdBQUF0eUQsSUFBQTBFLEdBQ0EsRUFFQTB4RCxHQUFBcDJELElBRUErRSxHQUFBbW5DLEdBQUF5VixHQUFBcU0sSUFDQTloQixFQUFBbHNDLElBdXFOQW8vQyxHQUFBaHBDLElBcjRGQSxTQUFBblcsRUFBQWtuRCxFQUFBM25ELEdBQ0EsYUFBQVMsSUFBQW90RCxHQUFBcHRELEVBQUFrbkQsRUFBQTNuRCxJQXE0RkE0L0MsR0FBQW1rQixRQTEyRkEsU0FBQXRqRSxFQUFBa25ELEVBQUEzbkQsRUFBQXlqRCxHQUVBLE9BREFBLEVBQUEsbUJBQUFBLElBQUF2K0MsRUFDQSxNQUFBekUsSUFBQW90RCxHQUFBcHRELEVBQUFrbkQsRUFBQTNuRCxFQUFBeWpELElBeTJGQTdELEdBQUFva0IsUUF2cE5BLFNBQUF0M0IsR0FFQSxPQURBbm5DLEdBQUFtbkMsR0FBQTZWLEdBQUFzTSxJQUNBbmlCLElBc3BOQWtULEdBQUEveEMsTUF6Z1JBLFNBQUE4cEIsRUFBQTFSLEVBQUFDLEdBQ0EsSUFBQXBoQixFQUFBLE1BQUE2eUIsRUFBQSxFQUFBQSxFQUFBN3lCLE9BQ0EsT0FBQUEsR0FHQW9oQixHQUFBLGlCQUFBQSxHQUFBNnNDLEdBQUFwN0IsRUFBQTFSLEVBQUFDLElBQ0FELEVBQUEsRUFDQUMsRUFBQXBoQixJQUdBbWhCLEVBQUEsTUFBQUEsRUFBQSxFQUFBMndDLEdBQUEzd0MsR0FDQUMsTUFBQWhoQixFQUFBSixFQUFBOHhELEdBQUExd0MsSUFFQTRvQyxHQUFBbjNCLEVBQUExUixFQUFBQyxJQVZBLElBdWdSQTA1QixHQUFBeWIsVUFDQXpiLEdBQUFxa0IsV0FqMVFBLFNBQUF0c0MsR0FDQSxPQUFBQSxLQUFBN3lCLE9BQ0FpckQsR0FBQXA0QixHQUNBLElBKzBRQWlvQixHQUFBc2tCLGFBNXpRQSxTQUFBdnNDLEVBQUEwVCxHQUNBLE9BQUExVCxLQUFBN3lCLE9BQ0FpckQsR0FBQXA0QixFQUFBdzFCLEdBQUE5aEIsRUFBQSxJQUNBLElBMHpRQXVVLEdBQUExckMsTUExL0RBLFNBQUFzbUMsRUFBQTJwQixFQUFBQyxHQUtBLE9BSkFBLEdBQUEsaUJBQUFBLEdBQUFyUixHQUFBdlksRUFBQTJwQixFQUFBQyxLQUNBRCxFQUFBQyxFQUFBbC9ELElBRUFrL0QsTUFBQWwvRCxFQUFBMjlCLEVBQUF1aEMsSUFBQSxJQUlBNXBCLEVBQUExOEIsR0FBQTA4QixNQUVBLGlCQUFBMnBCLEdBQ0EsTUFBQUEsSUFBQXQ1QixHQUFBczVCLE9BRUFBLEVBQUFsVSxHQUFBa1UsS0FDQTVwQixHQUFBQyxHQUNBMlcsR0FBQWhXLEdBQUFYLEdBQUEsRUFBQTRwQixHQUdBNXBCLEVBQUF0bUMsTUFBQWl3RCxFQUFBQyxHQVpBLElBcS9EQXhrQixHQUFBeWtCLE9BanFMQSxTQUFBemlELEVBQUFxRSxHQUNBLHNCQUFBckUsRUFDQSxVQUFBMkYsR0FBQXlaLEdBR0EsT0FEQS9hLEVBQUEsTUFBQUEsRUFBQSxFQUFBbTRCLEdBQUF3WSxHQUFBM3dDLEdBQUEsR0FDQW1vQyxHQUFBLFNBQUEvOEMsR0FDQSxJQUFBc21CLEVBQUF0bUIsRUFBQTRVLEdBQ0FxeUMsRUFBQW5ILEdBQUE5L0MsRUFBQSxFQUFBNFUsR0FLQSxPQUhBMFIsR0FDQXVVLEdBQUFvc0IsRUFBQTNnQyxHQUVBeDBCLEdBQUF5ZSxFQUFBeGdCLEtBQUFrM0QsTUFzcExBMVksR0FBQTBrQixLQTN5UUEsU0FBQTNzQyxHQUNBLElBQUE3eUIsRUFBQSxNQUFBNnlCLEVBQUEsRUFBQUEsRUFBQTd5QixPQUNBLE9BQUFBLEVBQUFncUQsR0FBQW4zQixFQUFBLEVBQUE3eUIsR0FBQSxJQTB5UUE4NkMsR0FBQTJrQixLQTl3UUEsU0FBQTVzQyxFQUFBbjNCLEVBQUFzeUQsR0FDQSxPQUFBbjdCLEtBQUE3eUIsT0FJQWdxRCxHQUFBbjNCLEVBQUEsR0FEQW4zQixFQUFBc3lELEdBQUF0eUQsSUFBQTBFLEVBQUEsRUFBQTB4RCxHQUFBcDJELElBQ0EsSUFBQUEsR0FIQSxJQTZ3UUFvL0MsR0FBQTRrQixVQTl1UUEsU0FBQTdzQyxFQUFBbjNCLEVBQUFzeUQsR0FDQSxJQUFBaHVELEVBQUEsTUFBQTZ5QixFQUFBLEVBQUFBLEVBQUE3eUIsT0FDQSxPQUFBQSxFQUtBZ3FELEdBQUFuM0IsR0FEQW4zQixFQUFBc0UsR0FEQXRFLEVBQUFzeUQsR0FBQXR5RCxJQUFBMEUsRUFBQSxFQUFBMHhELEdBQUFwMkQsS0FFQSxJQUFBQSxFQUFBc0UsR0FKQSxJQTR1UUE4NkMsR0FBQTZrQixlQWxzUUEsU0FBQTlzQyxFQUFBK1QsR0FDQSxPQUFBL1QsS0FBQTd5QixPQUNBeXJELEdBQUE1NEIsRUFBQXcxQixHQUFBemhCLEVBQUEsVUFDQSxJQWdzUUFrVSxHQUFBOGtCLFVBMXBRQSxTQUFBL3NDLEVBQUErVCxHQUNBLE9BQUEvVCxLQUFBN3lCLE9BQ0F5ckQsR0FBQTU0QixFQUFBdzFCLEdBQUF6aEIsRUFBQSxJQUNBLElBd3BRQWtVLEdBQUEra0IsSUE3clBBLFNBQUEza0UsRUFBQTQ2RCxHQUVBLE9BREFBLEVBQUE1NkQsR0FDQUEsR0E0clBBNC9DLEdBQUFnbEIsU0E1bUxBLFNBQUFoakQsRUFBQXpVLEVBQUFqTSxHQUNBLElBQUEyNkQsR0FBQSxFQUNBMUksR0FBQSxFQUVBLHNCQUFBdnhDLEVBQ0EsVUFBQTJGLEdBQUF5WixHQU1BLE9BSkFtZixHQUFBai9DLEtBQ0EyNkQsRUFBQSxZQUFBMzZELE1BQUEyNkQsVUFDQTFJLEVBQUEsYUFBQWp5RCxNQUFBaXlELFlBRUE1aUQsR0FBQXFSLEVBQUF6VSxFQUFBLENBQ0EwdUQsVUFDQUosUUFBQXR1RCxFQUNBZ21ELGNBK2xMQXZULEdBQUFtVSxRQUNBblUsR0FBQW1lLFdBQ0FuZSxHQUFBeWYsV0FDQXpmLEdBQUEwZixhQUNBMWYsR0FBQWlsQixPQXJmQSxTQUFBN2tFLEdBQ0EsT0FBQXVGLEdBQUF2RixHQUNBaXNDLEdBQUFqc0MsRUFBQTZuRCxJQUVBYixHQUFBaG5ELEdBQUEsQ0FBQUEsR0FBQXFpRCxHQUFBNE8sR0FBQW56QyxHQUFBOWQsTUFrZkE0L0MsR0FBQWlOLGlCQUNBak4sR0FBQWp3QixVQXh5RkEsU0FBQWx2QixFQUFBNHFDLEVBQUFDLEdBQ0EsSUFBQW9XLEVBQUFuOEMsR0FBQTlFLEdBQ0Fxa0UsRUFBQXBqQixHQUFBMUQsR0FBQXY5QyxJQUFBd3FDLEdBQUF4cUMsR0FHQSxHQURBNHFDLEVBQUE4aEIsR0FBQTloQixFQUFBLEdBQ0EsTUFBQUMsRUFBQSxDQUNBLElBQUFzWixFQUFBbmtELEtBQUE0NUIsWUFFQWlSLEVBREF3NUIsRUFDQXBqQixFQUFBLElBQUFrRCxFQUFBLEdBRUF6RSxHQUFBMS9DLElBQ0EwaEIsR0FBQXlpQyxHQUFBM0UsR0FBQW5ELEdBQUFyOEMsSUFHQSxHQU1BLE9BSEFxa0UsRUFBQXY1QixHQUFBb2IsSUFBQWxtRCxFQUFBLFNBQUFULEVBQUFxRSxFQUFBNUQsR0FDQSxPQUFBNHFDLEVBQUFDLEVBQUF0ckMsRUFBQXFFLEVBQUE1RCxLQUVBNnFDLEdBcXhGQXNVLEdBQUFtbEIsTUFubExBLFNBQUFuakQsR0FDQSxPQUFBNnlDLEdBQUE3eUMsRUFBQSxJQW1sTEFnK0IsR0FBQW9hLFNBQ0FwYSxHQUFBcWEsV0FDQXJhLEdBQUFzYSxhQUNBdGEsR0FBQW9sQixLQWxrUUEsU0FBQXJ0QyxHQUNBLE9BQUFBLEtBQUE3eUIsT0FBQW9yRCxHQUFBdjRCLEdBQUEsSUFra1FBaW9CLEdBQUFxbEIsT0F4aVFBLFNBQUF0dEMsRUFBQTBULEdBQ0EsT0FBQTFULEtBQUE3eUIsT0FBQW9yRCxHQUFBdjRCLEVBQUF3MUIsR0FBQTloQixFQUFBLFFBd2lRQXVVLEdBQUFzbEIsU0FqaFFBLFNBQUF2dEMsRUFBQXFVLEdBRUEsT0FEQUEsRUFBQSxtQkFBQUEsSUFBQTltQyxFQUNBeXlCLEtBQUE3eUIsT0FBQW9yRCxHQUFBdjRCLEVBQUF6eUIsRUFBQThtQyxHQUFBLElBZ2hRQTRULEdBQUF1bEIsTUE5dkZBLFNBQUExa0UsRUFBQWtuRCxHQUNBLGFBQUFsbkQsR0FBQXl0RCxHQUFBenRELEVBQUFrbkQsSUE4dkZBL0gsR0FBQXVhLFNBQ0F2YSxHQUFBd2EsYUFDQXhhLEdBQUE5aUMsT0FsdUZBLFNBQUFyYyxFQUFBa25ELEVBQUEySSxHQUNBLGFBQUE3dkQsSUFBQTR2RCxHQUFBNXZELEVBQUFrbkQsRUFBQXFKLEdBQUFWLEtBa3VGQTFRLEdBQUF3bEIsV0F2c0ZBLFNBQUEza0UsRUFBQWtuRCxFQUFBMkksRUFBQTdNLEdBRUEsT0FEQUEsRUFBQSxtQkFBQUEsSUFBQXYrQyxFQUNBLE1BQUF6RSxJQUFBNHZELEdBQUE1dkQsRUFBQWtuRCxFQUFBcUosR0FBQVYsR0FBQTdNLElBc3NGQTdELEdBQUFsb0IsVUFDQWtvQixHQUFBeWxCLFNBOW9GQSxTQUFBNWtFLEdBQ0EsYUFBQUEsRUFBQSxHQUFBZ3RDLEdBQUFodEMsRUFBQTZqRCxHQUFBN2pELEtBOG9GQW0vQyxHQUFBeWEsV0FDQXphLEdBQUF5VCxTQUNBelQsR0FBQTBsQixLQXprTEEsU0FBQXRsRSxFQUFBZ2pCLEdBQ0EsT0FBQW82QyxHQUFBcE0sR0FBQWh1QyxHQUFBaGpCLElBeWtMQTQvQyxHQUFBMGEsT0FDQTFhLEdBQUEyYSxTQUNBM2EsR0FBQTRhLFdBQ0E1YSxHQUFBNmEsT0FDQTdhLEdBQUEybEIsVUExMFBBLFNBQUF2ekQsRUFBQTBsQixHQUNBLE9BQUFrNUIsR0FBQTUrQyxHQUFBLEdBQUEwbEIsR0FBQSxHQUFBaXJCLEtBMDBQQS9DLEdBQUE0bEIsY0F4elBBLFNBQUF4ekQsRUFBQTBsQixHQUNBLE9BQUFrNUIsR0FBQTUrQyxHQUFBLEdBQUEwbEIsR0FBQSxHQUFBbTJCLEtBd3pQQWpPLEdBQUE4YSxXQUdBOWEsR0FBQXJvQixRQUFBOG5DLEdBQ0F6ZixHQUFBNmxCLFVBQUFuRyxHQUNBMWYsR0FBQWxrQixPQUFBNGlDLEdBQ0ExZSxHQUFBOGxCLFdBQUFuSCxHQUdBb0MsR0FBQS9nQixPQUtBQSxHQUFBOTRDLE9BQ0E4NEMsR0FBQXdnQixXQUNBeGdCLEdBQUEyZixhQUNBM2YsR0FBQTRmLGNBQ0E1ZixHQUFBakMsUUFDQWlDLEdBQUErbEIsTUFscEZBLFNBQUF2aUIsRUFBQUMsRUFBQUMsR0FhQSxPQVpBQSxJQUFBcCtDLElBQ0FvK0MsRUFBQUQsRUFDQUEsRUFBQW4rQyxHQUVBbytDLElBQUFwK0MsSUFFQW8rQyxHQURBQSxFQUFBOFMsR0FBQTlTLEtBQ0FBLElBQUEsR0FFQUQsSUFBQW4rQyxJQUVBbStDLEdBREFBLEVBQUErUyxHQUFBL1MsS0FDQUEsSUFBQSxHQUVBZixHQUFBOFQsR0FBQWhULEdBQUFDLEVBQUFDLElBc29GQTFELEdBQUF3WixNQTNoTEEsU0FBQXA1RCxHQUNBLE9BQUF1akQsR0FBQXZqRCxFQUFBc2hDLElBMmhMQXNlLEdBQUE5bkIsVUFsK0tBLFNBQUE5M0IsR0FDQSxPQUFBdWpELEdBQUF2akQsRUFBQW9oQyxFQUFBRSxJQWsrS0FzZSxHQUFBZ21CLGNBbjhLQSxTQUFBNWxFLEVBQUF5akQsR0FFQSxPQUFBRixHQUFBdmpELEVBQUFvaEMsRUFBQUUsRUFEQW1pQixFQUFBLG1CQUFBQSxJQUFBditDLElBbThLQTA2QyxHQUFBaW1CLFVBMy9LQSxTQUFBN2xFLEVBQUF5akQsR0FFQSxPQUFBRixHQUFBdmpELEVBQUFzaEMsRUFEQW1pQixFQUFBLG1CQUFBQSxJQUFBditDLElBMi9LQTA2QyxHQUFBa21CLFdBeDZLQSxTQUFBcmxFLEVBQUFtSixHQUNBLGFBQUFBLEdBQUE2N0MsR0FBQWhsRCxFQUFBbUosRUFBQXNHLEdBQUF0RyxLQXc2S0FnMkMsR0FBQTBULFVBQ0ExVCxHQUFBbW1CLFVBandDQSxTQUFBL2xFLEVBQUFxUSxHQUNBLGFBQUFyUSxRQUFBcVEsRUFBQXJRLEdBaXdDQTQvQyxHQUFBdWhCLFVBQ0F2aEIsR0FBQW9tQixTQXY3RUEsU0FBQXhyQixFQUFBN3dDLEVBQUEwWCxHQUNBbTVCLEVBQUExOEIsR0FBQTA4QixHQUNBN3dDLEVBQUFzbUQsR0FBQXRtRCxHQUVBLElBQUE3RSxFQUFBMDFDLEVBQUExMUMsT0FLQW9oQixFQUpBN0UsTUFBQW5jLEVBQ0FKLEVBQ0F3OUMsR0FBQXNVLEdBQUF2MUMsR0FBQSxFQUFBdmMsR0FJQSxPQURBdWMsR0FBQTFYLEVBQUE3RSxTQUNBLEdBQUEwMUMsRUFBQTNzQyxNQUFBd1QsRUFBQTZFLElBQUF2YyxHQTY2RUFpMkMsR0FBQTZDLE1BQ0E3QyxHQUFBc0csT0EvNEVBLFNBQUExTCxHQUVBLE9BREFBLEVBQUExOEIsR0FBQTA4QixLQUNBalYsR0FBQXI3QixLQUFBc3dDLEdBQ0FBLEVBQUEzeUMsUUFBQXc5QixHQUFBMlUsSUFDQVEsR0E0NEVBb0YsR0FBQXFtQixhQTEzRUEsU0FBQXpyQixHQUVBLE9BREFBLEVBQUExOEIsR0FBQTA4QixLQUNBelUsR0FBQTc3QixLQUFBc3dDLEdBQ0FBLEVBQUEzeUMsUUFBQWkrQixHQUFBLFFBQ0EwVSxHQXUzRUFvRixHQUFBc21CLE1BcjVPQSxTQUFBeDVCLEVBQUFoQixFQUFBb25CLEdBQ0EsSUFBQWx4QyxFQUFBcmMsR0FBQW1uQyxHQUFBakIsR0FBQXFiLEdBSUEsT0FIQWdNLEdBQUFDLEdBQUFybUIsRUFBQWhCLEVBQUFvbkIsS0FDQXBuQixFQUFBeG1DLEdBRUEwYyxFQUFBOHFCLEVBQUF5Z0IsR0FBQXpoQixFQUFBLEtBaTVPQWtVLEdBQUF0MEIsUUFDQXMwQixHQUFBajBCLGFBQ0FpMEIsR0FBQXVtQixRQW52SEEsU0FBQTFsRSxFQUFBaXJDLEdBQ0EsT0FBQWUsR0FBQWhzQyxFQUFBMHNELEdBQUF6aEIsRUFBQSxHQUFBaWIsS0FtdkhBL0csR0FBQW1iLFlBQ0FuYixHQUFBNFosaUJBQ0E1WixHQUFBd21CLFlBL3NIQSxTQUFBM2xFLEVBQUFpckMsR0FDQSxPQUFBZSxHQUFBaHNDLEVBQUEwc0QsR0FBQXpoQixFQUFBLEdBQUFtYixLQStzSEFqSCxHQUFBM3ZCLFNBQ0EydkIsR0FBQWo5QyxXQUNBaTlDLEdBQUFvYixnQkFDQXBiLEdBQUF5bUIsTUFuckhBLFNBQUE1bEUsRUFBQTRxQyxHQUNBLGFBQUE1cUMsRUFDQUEsRUFDQTZtRCxHQUFBN21ELEVBQUEwc0QsR0FBQTloQixFQUFBLEdBQUFpWixLQWlySEExRSxHQUFBMG1CLFdBcHBIQSxTQUFBN2xFLEVBQUE0cUMsR0FDQSxhQUFBNXFDLEVBQ0FBLEVBQ0ErbUQsR0FBQS9tRCxFQUFBMHNELEdBQUE5aEIsRUFBQSxHQUFBaVosS0FrcEhBMUUsR0FBQTJtQixPQW5uSEEsU0FBQTlsRSxFQUFBNHFDLEdBQ0EsT0FBQTVxQyxHQUFBa21ELEdBQUFsbUQsRUFBQTBzRCxHQUFBOWhCLEVBQUEsS0FtbkhBdVUsR0FBQTRtQixZQXRsSEEsU0FBQS9sRSxFQUFBNHFDLEdBQ0EsT0FBQTVxQyxHQUFBb21ELEdBQUFwbUQsRUFBQTBzRCxHQUFBOWhCLEVBQUEsS0FzbEhBdVUsR0FBQWhnRCxPQUNBZ2dELEdBQUEyZCxNQUNBM2QsR0FBQTRkLE9BQ0E1ZCxHQUFBaFMsSUF2K0dBLFNBQUFudEMsRUFBQWtuRCxHQUNBLGFBQUFsbkQsR0FBQXMzRCxHQUFBdDNELEVBQUFrbkQsRUFBQWEsS0F1K0dBNUksR0FBQXdNLFNBQ0F4TSxHQUFBcGdDLFFBQ0FvZ0MsR0FBQXlMLFlBQ0F6TCxHQUFBN3VDLFNBem5PQSxTQUFBMjdCLEVBQUExc0MsRUFBQTZzQyxFQUFBaW1CLEdBQ0FwbUIsRUFBQXFmLEdBQUFyZixLQUFBaFYsR0FBQWdWLEdBQ0FHLE1BQUFpbUIsRUFBQThELEdBQUEvcEIsR0FBQSxFQUVBLElBQUEvbkMsRUFBQTRuQyxFQUFBNW5DLE9BSUEsT0FIQStuQyxFQUFBLElBQ0FBLEVBQUF1UixHQUFBdDVDLEVBQUErbkMsRUFBQSxJQUVBK3dCLEdBQUFseEIsR0FDQUcsR0FBQS9uQyxHQUFBNG5DLEVBQUFwb0MsUUFBQXRFLEVBQUE2c0MsSUFBQSxJQUNBL25DLEdBQUFnbkMsR0FBQVksRUFBQTFzQyxFQUFBNnNDLElBQUEsR0Fnbk9BK1MsR0FBQXQ3QyxRQXZqU0EsU0FBQXF6QixFQUFBMzNCLEVBQUE2c0MsR0FDQSxJQUFBL25DLEVBQUEsTUFBQTZ5QixFQUFBLEVBQUFBLEVBQUE3eUIsT0FDQSxJQUFBQSxFQUNBLFNBRUEsSUFBQVQsRUFBQSxNQUFBd29DLEVBQUEsRUFBQStwQixHQUFBL3BCLEdBSUEsT0FIQXhvQyxFQUFBLElBQ0FBLEVBQUErNUMsR0FBQXQ1QyxFQUFBVCxFQUFBLElBRUF5bkMsR0FBQW5VLEVBQUEzM0IsRUFBQXFFLElBK2lTQXU3QyxHQUFBNm1CLFFBaG9GQSxTQUFBcmpCLEVBQUFuOUIsRUFBQUMsR0FTQSxPQVJBRCxFQUFBZ3dDLEdBQUFod0MsR0FDQUMsSUFBQWhoQixHQUNBZ2hCLEVBQUFELEVBQ0FBLEVBQUEsR0FFQUMsRUFBQSt2QyxHQUFBL3ZDLEdBdHFWQSxTQUFBazlCLEVBQUFuOUIsRUFBQUMsR0FDQSxPQUFBazlCLEdBQUEvRSxHQUFBcDRCLEVBQUFDLElBQUFrOUIsRUFBQWhGLEdBQUFuNEIsRUFBQUMsR0F3cVZBd2dELENBREF0akIsRUFBQWdULEdBQUFoVCxHQUNBbjlCLEVBQUFDLElBd25GQTA1QixHQUFBb2YsVUFDQXBmLEdBQUFnQyxlQUNBaEMsR0FBQXI2QyxXQUNBcTZDLEdBQUFyVixpQkFDQXFWLEdBQUFtTSxlQUNBbk0sR0FBQStNLHFCQUNBL00sR0FBQSttQixVQXB1S0EsU0FBQTNtRSxHQUNBLFdBQUFBLElBQUEsSUFBQUEsR0FDQTYvQyxHQUFBNy9DLElBQUFpb0QsR0FBQWpvRCxJQUFBb2pDLEdBbXVLQXdjLEdBQUE1QixZQUNBNEIsR0FBQW5WLFVBQ0FtVixHQUFBZ25CLFVBM3FLQSxTQUFBNW1FLEdBQ0EsT0FBQTYvQyxHQUFBNy9DLElBQUEsSUFBQUEsRUFBQXFrQixXQUFBdW9DLEdBQUE1c0QsSUEycUtBNC9DLEdBQUFpbkIsUUF2b0tBLFNBQUE3bUUsR0FDQSxTQUFBQSxFQUNBLFNBRUEsR0FBQStyRCxHQUFBL3JELEtBQ0F1RixHQUFBdkYsSUFBQSxpQkFBQUEsR0FBQSxtQkFBQUEsRUFBQXdFLFFBQ0F3NUMsR0FBQWgrQyxJQUFBaXJDLEdBQUFqckMsSUFBQTRoRCxHQUFBNWhELElBQ0EsT0FBQUEsRUFBQThFLE9BRUEsSUFBQWkvQyxFQUFBQyxHQUFBaGtELEdBQ0EsR0FBQStqRCxHQUFBcmdCLEdBQUFxZ0IsR0FBQS9mLEdBQ0EsT0FBQWhrQyxFQUFBMk0sS0FFQSxHQUFBOCtDLEdBQUF6ckQsR0FDQSxPQUFBd3JELEdBQUF4ckQsR0FBQThFLE9BRUEsUUFBQXhFLEtBQUFOLEVBQ0EsR0FBQVksR0FBQTFCLEtBQUFjLEVBQUFNLEdBQ0EsU0FHQSxVQW1uS0FzL0MsR0FBQWtuQixRQXBsS0EsU0FBQTltRSxFQUFBdW9ELEdBQ0EsT0FBQWMsR0FBQXJwRCxFQUFBdW9ELElBb2xLQTNJLEdBQUFtbkIsWUFqaktBLFNBQUEvbUUsRUFBQXVvRCxFQUFBOUUsR0FFQSxJQUFBcmhDLEdBREFxaEMsRUFBQSxtQkFBQUEsSUFBQXYrQyxHQUNBdStDLEVBQUF6akQsRUFBQXVvRCxHQUFBcmpELEVBQ0EsT0FBQWtkLElBQUFsZCxFQUFBbWtELEdBQUFycEQsRUFBQXVvRCxFQUFBcmpELEVBQUF1K0MsS0FBQXJoQyxHQStpS0F3OUIsR0FBQTZkLFdBQ0E3ZCxHQUFBN3lCLFNBeC9KQSxTQUFBL3NCLEdBQ0EsdUJBQUFBLEdBQUFpK0MsR0FBQWorQyxJQXcvSkE0L0MsR0FBQXo5QixjQUNBeTlCLEdBQUE4ZCxhQUNBOWQsR0FBQXFZLFlBQ0FyWSxHQUFBalYsU0FDQWlWLEdBQUFvbkIsUUF4ekpBLFNBQUF2bUUsRUFBQW1KLEdBQ0EsT0FBQW5KLElBQUFtSixHQUFBbWhELEdBQUF0cUQsRUFBQW1KLEVBQUFvaUQsR0FBQXBpRCxLQXd6SkFnMkMsR0FBQXFuQixZQXJ4SkEsU0FBQXhtRSxFQUFBbUosRUFBQTY1QyxHQUVBLE9BREFBLEVBQUEsbUJBQUFBLElBQUF2K0MsRUFDQTZsRCxHQUFBdHFELEVBQUFtSixFQUFBb2lELEdBQUFwaUQsR0FBQTY1QyxJQW94SkE3RCxHQUFBOXlCLE1BcnZKQSxTQUFBOXNCLEdBSUEsT0FBQTI5RCxHQUFBMzlELFdBa3ZKQTQvQyxHQUFBc25CLFNBcnRKQSxTQUFBbG5FLEdBQ0EsR0FBQW80RCxHQUFBcDRELEdBQ0EsVUFBQTZTLEdBQUFrdUIsR0FFQSxPQUFBb3FCLEdBQUFuckQsSUFrdEpBNC9DLEdBQUF1bkIsTUF0cUpBLFNBQUFubkUsR0FDQSxhQUFBQSxHQXNxSkE0L0MsR0FBQXduQixPQS9ySkEsU0FBQXBuRSxHQUNBLGNBQUFBLEdBK3JKQTQvQyxHQUFBK2QsWUFDQS9kLEdBQUFPLFlBQ0FQLEdBQUFDLGdCQUNBRCxHQUFBZ04saUJBQ0FoTixHQUFBL1UsWUFDQStVLEdBQUF5bkIsY0FuakpBLFNBQUFybkUsR0FDQSxPQUFBMDlELEdBQUExOUQsUUFBQTBpQyxHQUFBMWlDLEdBQUEwaUMsR0FtakpBa2QsR0FBQTdVLFNBQ0E2VSxHQUFBZ2UsWUFDQWhlLEdBQUFvSCxZQUNBcEgsR0FBQTNVLGdCQUNBMlUsR0FBQTBuQixZQWo5SUEsU0FBQXRuRSxHQUNBLE9BQUFBLElBQUFrRixHQWk5SUEwNkMsR0FBQTJuQixVQTc3SUEsU0FBQXZuRSxHQUNBLE9BQUE2L0MsR0FBQTcvQyxJQUFBZ2tELEdBQUFoa0QsSUFBQW9rQyxJQTY3SUF3YixHQUFBNG5CLFVBejZJQSxTQUFBeG5FLEdBQ0EsT0FBQTYvQyxHQUFBNy9DLElBQUFpb0QsR0FBQWpvRCxJQUFBcWtDLElBeTZJQXViLEdBQUE5cUIsS0FsOVJBLFNBQUE2QyxFQUFBd3NDLEdBQ0EsYUFBQXhzQyxFQUFBLEdBQUF1bUIsR0FBQWgvQyxLQUFBeTRCLEVBQUF3c0MsSUFrOVJBdmtCLEdBQUE4ZixhQUNBOWYsR0FBQXVKLFFBQ0F2SixHQUFBcDNDLFlBejZSQSxTQUFBbXZCLEVBQUEzM0IsRUFBQTZzQyxHQUNBLElBQUEvbkMsRUFBQSxNQUFBNnlCLEVBQUEsRUFBQUEsRUFBQTd5QixPQUNBLElBQUFBLEVBQ0EsU0FFQSxJQUFBVCxFQUFBUyxFQUtBLE9BSkErbkMsSUFBQTNuQyxJQUVBYixHQURBQSxFQUFBdXlELEdBQUEvcEIsSUFDQSxFQUFBdVIsR0FBQXQ1QyxFQUFBVCxFQUFBLEdBQUFnNkMsR0FBQWg2QyxFQUFBUyxFQUFBLElBRUE5RSxLQWx0TUEsU0FBQTIzQixFQUFBMzNCLEVBQUE2c0MsR0FFQSxJQURBLElBQUF4b0MsRUFBQXdvQyxFQUFBLEVBQ0F4b0MsS0FDQSxHQUFBc3pCLEVBQUF0ekIsS0FBQXJFLEVBQ0EsT0FBQXFFLEVBR0EsT0FBQUEsRUE0c01Bb2pFLENBQUE5dkMsRUFBQTMzQixFQUFBcUUsR0FDQXVvQyxHQUFBalYsRUFBQXFWLEdBQUEzb0MsR0FBQSxJQTg1UkF1N0MsR0FBQStmLGFBQ0EvZixHQUFBZ2dCLGNBQ0FoZ0IsR0FBQWllLE1BQ0FqZSxHQUFBa2UsT0FDQWxlLEdBQUFqbUMsSUFoZkEsU0FBQWdlLEdBQ0EsT0FBQUEsS0FBQTd5QixPQUNBaWlELEdBQUFwdkIsRUFBQTB6QixHQUFBL0MsSUFDQXBqRCxHQThlQTA2QyxHQUFBOG5CLE1BcGRBLFNBQUEvdkMsRUFBQTBULEdBQ0EsT0FBQTFULEtBQUE3eUIsT0FDQWlpRCxHQUFBcHZCLEVBQUF3MUIsR0FBQTloQixFQUFBLEdBQUFpZCxJQUNBcGpELEdBa2RBMDZDLEdBQUErbkIsS0FqY0EsU0FBQWh3QyxHQUNBLE9BQUF1VixHQUFBdlYsRUFBQTB6QixLQWljQXpMLEdBQUFnb0IsT0F2YUEsU0FBQWp3QyxFQUFBMFQsR0FDQSxPQUFBNkIsR0FBQXZWLEVBQUF3MUIsR0FBQTloQixFQUFBLEtBdWFBdVUsR0FBQS9sQyxJQWxaQSxTQUFBOGQsR0FDQSxPQUFBQSxLQUFBN3lCLE9BQ0FpaUQsR0FBQXB2QixFQUFBMHpCLEdBQUFRLElBQ0EzbUQsR0FnWkEwNkMsR0FBQWlvQixNQXRYQSxTQUFBbHdDLEVBQUEwVCxHQUNBLE9BQUExVCxLQUFBN3lCLE9BQ0FpaUQsR0FBQXB2QixFQUFBdzFCLEdBQUE5aEIsRUFBQSxHQUFBd2dCLElBQ0EzbUQsR0FvWEEwNkMsR0FBQWtZLGFBQ0FsWSxHQUFBeVksYUFDQXpZLEdBQUFrb0IsV0F6dEJBLFdBQ0EsVUF5dEJBbG9CLEdBQUFtb0IsV0F6c0JBLFdBQ0EsVUF5c0JBbm9CLEdBQUFvb0IsU0F6ckJBLFdBQ0EsVUF5ckJBcG9CLEdBQUEwaEIsWUFDQTFoQixHQUFBcW9CLElBdDVSQSxTQUFBdHdDLEVBQUFuM0IsR0FDQSxPQUFBbTNCLEtBQUE3eUIsT0FBQWlvRCxHQUFBcDFCLEVBQUFpL0IsR0FBQXAyRCxJQUFBMEUsR0FzNVJBMDZDLEdBQUFzb0IsV0F2aENBLFdBSUEsT0FIQWpvRCxHQUFBNFgsSUFBQXoyQixPQUNBNmUsR0FBQTRYLEVBQUE0a0IsSUFFQXI3QyxNQW9oQ0F3K0MsR0FBQWlYLFFBQ0FqWCxHQUFBaHdDLE9BQ0Fnd0MsR0FBQXVvQixJQS8yRUEsU0FBQTN0QixFQUFBMTFDLEVBQUFpeEQsR0FDQXZiLEVBQUExOEIsR0FBQTA4QixHQUdBLElBQUE0dEIsR0FGQXRqRSxFQUFBOHhELEdBQUE5eEQsSUFFQWsyQyxHQUFBUixHQUFBLEVBQ0EsSUFBQTExQyxHQUFBc2pFLEdBQUF0akUsRUFDQSxPQUFBMDFDLEVBRUEsSUFBQTRVLEdBQUF0cUQsRUFBQXNqRSxHQUFBLEVBQ0EsT0FDQXRTLEdBQUFsWSxHQUFBd1IsR0FBQTJHLEdBQ0F2YixFQUNBc2IsR0FBQXBZLEdBQUEwUixHQUFBMkcsSUFvMkVBblcsR0FBQXlvQixPQXowRUEsU0FBQTd0QixFQUFBMTFDLEVBQUFpeEQsR0FDQXZiLEVBQUExOEIsR0FBQTA4QixHQUdBLElBQUE0dEIsR0FGQXRqRSxFQUFBOHhELEdBQUE5eEQsSUFFQWsyQyxHQUFBUixHQUFBLEVBQ0EsT0FBQTExQyxHQUFBc2pFLEVBQUF0akUsRUFDQTAxQyxFQUFBc2IsR0FBQWh4RCxFQUFBc2pFLEVBQUFyUyxHQUNBdmIsR0FtMEVBb0YsR0FBQTBvQixTQXp5RUEsU0FBQTl0QixFQUFBMTFDLEVBQUFpeEQsR0FDQXZiLEVBQUExOEIsR0FBQTA4QixHQUdBLElBQUE0dEIsR0FGQXRqRSxFQUFBOHhELEdBQUE5eEQsSUFFQWsyQyxHQUFBUixHQUFBLEVBQ0EsT0FBQTExQyxHQUFBc2pFLEVBQUF0akUsRUFDQWd4RCxHQUFBaHhELEVBQUFzakUsRUFBQXJTLEdBQUF2YixFQUNBQSxHQW15RUFvRixHQUFBejRCLFNBeHdFQSxTQUFBcXpCLEVBQUErdEIsRUFBQXpWLEdBTUEsT0FMQUEsR0FBQSxNQUFBeVYsRUFDQUEsRUFBQSxFQUNPQSxJQUNQQSxNQUVBaHFCLEdBQUF6Z0MsR0FBQTA4QixHQUFBM3lDLFFBQUFvK0IsR0FBQSxJQUFBc2lDLEdBQUEsSUFtd0VBM29CLEdBQUFuQixPQXhwRkEsU0FBQTRFLEVBQUFDLEVBQUFrbEIsR0EyQkEsR0ExQkFBLEdBQUEsa0JBQUFBLEdBQUF6VixHQUFBMVAsRUFBQUMsRUFBQWtsQixLQUNBbGxCLEVBQUFrbEIsRUFBQXRqRSxHQUVBc2pFLElBQUF0akUsSUFDQSxrQkFBQW8rQyxHQUNBa2xCLEVBQUFsbEIsRUFDQUEsRUFBQXArQyxHQUVBLGtCQUFBbStDLElBQ0FtbEIsRUFBQW5sQixFQUNBQSxFQUFBbitDLElBR0FtK0MsSUFBQW4rQyxHQUFBbytDLElBQUFwK0MsR0FDQW0rQyxFQUFBLEVBQ0FDLEVBQUEsSUFHQUQsRUFBQTRTLEdBQUE1UyxHQUNBQyxJQUFBcCtDLEdBQ0FvK0MsRUFBQUQsRUFDQUEsRUFBQSxHQUVBQyxFQUFBMlMsR0FBQTNTLElBR0FELEVBQUFDLEVBQUEsQ0FDQSxJQUFBbWxCLEVBQUFwbEIsRUFDQUEsRUFBQUMsRUFDQUEsRUFBQW1sQixFQUVBLEdBQUFELEdBQUFubEIsRUFBQSxHQUFBQyxFQUFBLEdBQ0EsSUFBQTBWLEVBQUF4YSxLQUNBLE9BQUFILEdBQUFnRixFQUFBMlYsR0FBQTFWLEVBQUFELEVBQUE1WixHQUFBLFFBQUF1dkIsRUFBQSxJQUFBbDBELE9BQUEsS0FBQXcrQyxHQUVBLE9BQUFwQixHQUFBbUIsRUFBQUMsSUFxbkZBMUQsR0FBQTF0QyxPQXo4TkEsU0FBQXc2QixFQUFBckIsRUFBQUMsR0FDQSxJQUFBMXBCLEVBQUFyYyxHQUFBbW5DLEdBQUFQLEdBQUFrQixHQUNBakIsRUFBQS9wQyxVQUFBeUMsT0FBQSxFQUVBLE9BQUE4YyxFQUFBOHFCLEVBQUF5Z0IsR0FBQTloQixFQUFBLEdBQUFDLEVBQUFjLEVBQUEyVyxLQXM4TkFuRCxHQUFBOG9CLFlBNzZOQSxTQUFBaDhCLEVBQUFyQixFQUFBQyxHQUNBLElBQUExcEIsRUFBQXJjLEdBQUFtbkMsR0FBQUwsR0FBQWdCLEdBQ0FqQixFQUFBL3BDLFVBQUF5QyxPQUFBLEVBRUEsT0FBQThjLEVBQUE4cUIsRUFBQXlnQixHQUFBOWhCLEVBQUEsR0FBQUMsRUFBQWMsRUFBQXdhLEtBMDZOQWhILEdBQUErb0IsT0E3dUVBLFNBQUFudUIsRUFBQWg2QyxFQUFBc3lELEdBTUEsT0FKQXR5RCxHQURBc3lELEVBQUFDLEdBQUF2WSxFQUFBaDZDLEVBQUFzeUQsR0FBQXR5RCxJQUFBMEUsR0FDQSxFQUVBMHhELEdBQUFwMkQsR0FFQTJ0RCxHQUFBcndDLEdBQUEwOEIsR0FBQWg2QyxJQXd1RUFvL0MsR0FBQS8zQyxRQWx0RUEsV0FDQSxJQUFBd0osRUFBQWhQLFVBQ0FtNEMsRUFBQTE4QixHQUFBek0sRUFBQSxJQUVBLE9BQUFBLEVBQUF2TSxPQUFBLEVBQUEwMUMsSUFBQTN5QyxRQUFBd0osRUFBQSxHQUFBQSxFQUFBLEtBK3NFQXV1QyxHQUFBeDlCLE9BcG1HQSxTQUFBM2hCLEVBQUFrbkQsRUFBQXQzQyxHQUdBLElBQUFoTSxHQUFBLEVBQ0FTLEdBSEE2aUQsRUFBQUMsR0FBQUQsRUFBQWxuRCxJQUdBcUUsT0FPQSxJQUpBQSxJQUNBQSxFQUFBLEVBQ0FyRSxFQUFBeUUsS0FFQWIsRUFBQVMsR0FBQSxDQUNBLElBQUE5RSxFQUFBLE1BQUFTLEVBQUF5RSxFQUFBekUsRUFBQW9uRCxHQUFBRixFQUFBdGpELEtBQ0FyRSxJQUFBa0YsSUFDQWIsRUFBQVMsRUFDQTlFLEVBQUFxUSxHQUVBNVAsRUFBQTBoQixHQUFBbmlCLEtBQUFkLEtBQUF1QixHQUFBVCxFQUVBLE9BQUFTLEdBa2xHQW0vQyxHQUFBMWlDLFNBQ0EwaUMsR0FBQWhFLGVBQ0FnRSxHQUFBZ3BCLE9BdjNOQSxTQUFBbDhCLEdBRUEsT0FEQW5uQyxHQUFBbW5DLEdBQUF1VixHQUFBc00sSUFDQTdoQixJQXMzTkFrVCxHQUFBanpDLEtBNXlOQSxTQUFBKy9CLEdBQ0EsU0FBQUEsRUFDQSxTQUVBLEdBQUFxZixHQUFBcmYsR0FDQSxPQUFBa3hCLEdBQUFseEIsR0FBQXNPLEdBQUF0TyxLQUFBNW5DLE9BRUEsSUFBQWkvQyxFQUFBQyxHQUFBdFgsR0FDQSxPQUFBcVgsR0FBQXJnQixHQUFBcWdCLEdBQUEvZixHQUNBMEksRUFBQS8vQixLQUVBNitDLEdBQUE5ZSxHQUFBNW5DLFFBa3lOQTg2QyxHQUFBaWdCLGFBQ0FqZ0IsR0FBQWpqQyxLQTV2TkEsU0FBQSt2QixFQUFBaEIsRUFBQW9uQixHQUNBLElBQUFseEMsRUFBQXJjLEdBQUFtbkMsR0FBQUosR0FBQXlpQixHQUlBLE9BSEErRCxHQUFBQyxHQUFBcm1CLEVBQUFoQixFQUFBb25CLEtBQ0FwbkIsRUFBQXhtQyxHQUVBMGMsRUFBQThxQixFQUFBeWdCLEdBQUF6aEIsRUFBQSxLQXd2TkFrVSxHQUFBaXBCLFlBenBSQSxTQUFBbHhDLEVBQUEzM0IsR0FDQSxPQUFBZ3ZELEdBQUFyM0IsRUFBQTMzQixJQXlwUkE0L0MsR0FBQWtwQixjQTduUkEsU0FBQW54QyxFQUFBMzNCLEVBQUFxckMsR0FDQSxPQUFBZ2tCLEdBQUExM0IsRUFBQTMzQixFQUFBbXRELEdBQUE5aEIsRUFBQSxLQTZuUkF1VSxHQUFBbXBCLGNBMW1SQSxTQUFBcHhDLEVBQUEzM0IsR0FDQSxJQUFBOEUsRUFBQSxNQUFBNnlCLEVBQUEsRUFBQUEsRUFBQTd5QixPQUNBLEdBQUFBLEVBQUEsQ0FDQSxJQUFBVCxFQUFBMnFELEdBQUFyM0IsRUFBQTMzQixHQUNBLEdBQUFxRSxFQUFBUyxHQUFBMjlDLEdBQUE5cUIsRUFBQXR6QixHQUFBckUsR0FDQSxPQUFBcUUsRUFHQSxVQW1tUkF1N0MsR0FBQW9wQixnQkE5a1JBLFNBQUFyeEMsRUFBQTMzQixHQUNBLE9BQUFndkQsR0FBQXIzQixFQUFBMzNCLEdBQUEsSUE4a1JBNC9DLEdBQUFxcEIsa0JBbGpSQSxTQUFBdHhDLEVBQUEzM0IsRUFBQXFyQyxHQUNBLE9BQUFna0IsR0FBQTEzQixFQUFBMzNCLEVBQUFtdEQsR0FBQTloQixFQUFBLFFBa2pSQXVVLEdBQUFzcEIsa0JBL2hSQSxTQUFBdnhDLEVBQUEzM0IsR0FFQSxHQURBLE1BQUEyM0IsS0FBQTd5QixPQUNBLENBQ0EsSUFBQVQsRUFBQTJxRCxHQUFBcjNCLEVBQUEzM0IsR0FBQSxLQUNBLEdBQUF5aUQsR0FBQTlxQixFQUFBdHpCLEdBQUFyRSxHQUNBLE9BQUFxRSxFQUdBLFVBd2hSQXU3QyxHQUFBa2dCLGFBQ0FsZ0IsR0FBQXVwQixXQXptRUEsU0FBQTN1QixFQUFBN3dDLEVBQUEwWCxHQU9BLE9BTkFtNUIsRUFBQTE4QixHQUFBMDhCLEdBQ0FuNUIsRUFBQSxNQUFBQSxFQUNBLEVBQ0FpaEMsR0FBQXNVLEdBQUF2MUMsR0FBQSxFQUFBbTVCLEVBQUExMUMsUUFFQTZFLEVBQUFzbUQsR0FBQXRtRCxHQUNBNndDLEVBQUEzc0MsTUFBQXdULElBQUExWCxFQUFBN0UsU0FBQTZFLEdBbW1FQWkyQyxHQUFBMzJCLFlBQ0EyMkIsR0FBQXdwQixJQXpVQSxTQUFBenhDLEdBQ0EsT0FBQUEsS0FBQTd5QixPQUNBcW9DLEdBQUF4VixFQUFBMHpCLElBQ0EsR0F1VUF6TCxHQUFBeXBCLE1BN1NBLFNBQUExeEMsRUFBQTBULEdBQ0EsT0FBQTFULEtBQUE3eUIsT0FDQXFvQyxHQUFBeFYsRUFBQXcxQixHQUFBOWhCLEVBQUEsSUFDQSxHQTJTQXVVLEdBQUEwcEIsU0EzL0RBLFNBQUE5dUIsRUFBQXQ1QyxFQUFBNHhELEdBSUEsSUFBQXlXLEVBQUEzcEIsR0FBQXFHLGlCQUVBNk0sR0FBQUMsR0FBQXZZLEVBQUF0NUMsRUFBQTR4RCxLQUNBNXhELEVBQUFnRSxHQUVBczFDLEVBQUExOEIsR0FBQTA4QixHQUNBdDVDLEVBQUFxOUQsR0FBQSxHQUErQnI5RCxFQUFBcW9FLEVBQUEvUixJQUUvQixJQUlBZ1MsRUFDQUMsRUFMQW5qQixFQUFBaVksR0FBQSxHQUFtQ3I5RCxFQUFBb2xELFFBQUFpakIsRUFBQWpqQixRQUFBa1IsSUFDbkNrUyxFQUFBeDVELEdBQUFvMkMsR0FDQXFqQixFQUFBbDhCLEdBQUE2WSxFQUFBb2pCLEdBSUFybEUsRUFBQSxFQUNBK2hELEVBQUFsbEQsRUFBQWtsRCxhQUFBcGYsR0FDQXA5QixFQUFBLFdBR0FnZ0UsRUFBQTF2QyxJQUNBaDVCLEVBQUFnbEQsUUFBQWxmLElBQUFwOUIsT0FBQSxJQUNBdzhDLEVBQUF4OEMsT0FBQSxLQUNBdzhDLElBQUExZ0IsR0FBQWMsR0FBQVEsSUFBQXA5QixPQUFBLEtBQ0ExSSxFQUFBaWxELFVBQUFuZixJQUFBcDlCLE9BQUEsS0FDQSxLQUdBaWdFLEVBQUEsa0JBQ0EsY0FBQTNvRSxFQUNBQSxFQUFBMm9FLFVBQ0EsNkJBQUE5Z0MsR0FBQSxLQUNBLEtBRUF5UixFQUFBM3lDLFFBQUEraEUsRUFBQSxTQUFBOWdFLEVBQUFnaEUsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQWorRCxHQXNCQSxPQXJCQSs5RCxNQUFBQyxHQUdBcGdFLEdBQUE0d0MsRUFBQTNzQyxNQUFBeEosRUFBQTJILEdBQUFuRSxRQUFBby9CLEdBQUFvVCxJQUdBeXZCLElBQ0FOLEdBQUEsRUFDQTUvRCxHQUFBLFlBQUFrZ0UsRUFBQSxVQUVBRyxJQUNBUixHQUFBLEVBQ0E3L0QsR0FBQSxPQUF1QnFnRSxFQUFBLGVBRXZCRixJQUNBbmdFLEdBQUEsaUJBQUFtZ0UsRUFBQSwrQkFFQTFsRSxFQUFBMkgsRUFBQWxELEVBQUFoRSxPQUlBZ0UsSUFHQWMsR0FBQSxPQUlBLElBQUF5OEMsRUFBQW5sRCxFQUFBbWxELFNBQ0FBLElBQ0F6OEMsRUFBQSxpQkFBOEJBLEVBQUEsU0FHOUJBLEdBQUE2L0QsRUFBQTcvRCxFQUFBL0IsUUFBQW85QixHQUFBLElBQUFyN0IsR0FDQS9CLFFBQUFxOUIsR0FBQSxNQUNBcjlCLFFBQUFzOUIsR0FBQSxPQUdBdjdCLEVBQUEsYUFBQXk4QyxHQUFBLGdCQUNBQSxFQUNBLEdBQ0Esd0JBRUEscUJBQ0FtakIsRUFDQSxtQkFDQSxLQUVBQyxFQUNBLHVGQUVBLE9BRUE3L0QsRUFDQSxnQkFFQSxJQUFBd1ksRUFBQWcrQyxHQUFBLFdBQ0EsT0FBQXZnRCxHQUFBNnBELEVBQUFHLEVBQUEsVUFBQWpnRSxHQUNBekcsTUFBQStCLEVBQUF5a0UsS0FNQSxHQURBdm5ELEVBQUF4WSxTQUNBNnpELEdBQUFyN0MsR0FDQSxNQUFBQSxFQUVBLE9BQUFBLEdBbTVEQXc5QixHQUFBc3FCLE1BcHNCQSxTQUFBMXBFLEVBQUE2cUMsR0FFQSxJQURBN3FDLEVBQUFvMkQsR0FBQXAyRCxJQUNBLEdBQUFBLEVBQUFraUMsRUFDQSxTQUVBLElBQUFyK0IsRUFBQXcrQixFQUNBLzlCLEVBQUF1NUMsR0FBQTc5QyxFQUFBcWlDLEdBRUF3SSxFQUFBOGhCLEdBQUE5aEIsR0FDQTdxQyxHQUFBcWlDLEVBR0EsSUFEQSxJQUFBemdCLEVBQUFtckIsR0FBQXpvQyxFQUFBdW1DLEtBQ0FobkMsRUFBQTdELEdBQ0E2cUMsRUFBQWhuQyxHQUVBLE9BQUErZCxHQXNyQkF3OUIsR0FBQXFXLFlBQ0FyVyxHQUFBZ1gsYUFDQWhYLEdBQUF3ZSxZQUNBeGUsR0FBQXVxQixRQS8zREEsU0FBQW5xRSxHQUNBLE9BQUE4ZCxHQUFBOWQsR0FBQThILGVBKzNEQTgzQyxHQUFBd1csWUFDQXhXLEdBQUF3cUIsY0Fsc0lBLFNBQUFwcUUsR0FDQSxPQUFBQSxFQUNBc2lELEdBQUFzVSxHQUFBNTJELElBQUEwaUMsS0FDQSxJQUFBMWlDLElBQUEsR0Fnc0lBNC9DLEdBQUE5aEMsWUFDQThoQyxHQUFBeXFCLFFBMTJEQSxTQUFBcnFFLEdBQ0EsT0FBQThkLEdBQUE5ZCxHQUFBbUksZUEwMkRBeTNDLEdBQUF0dEMsS0FqMURBLFNBQUFrb0MsRUFBQXViLEVBQUFqRCxHQUVBLElBREF0WSxFQUFBMThCLEdBQUEwOEIsTUFDQXNZLEdBQUFpRCxJQUFBN3dELEdBQ0EsT0FBQXMxQyxFQUFBM3lDLFFBQUFtK0IsR0FBQSxJQUVBLElBQUF3VSxLQUFBdWIsRUFBQTlGLEdBQUE4RixJQUNBLE9BQUF2YixFQUVBLElBQUExTSxFQUFBcU4sR0FBQVgsR0FDQXpNLEVBQUFvTixHQUFBNGEsR0FJQSxPQUFBNUUsR0FBQXJqQixFQUhBRCxHQUFBQyxFQUFBQyxHQUNBQyxHQUFBRixFQUFBQyxHQUFBLEdBRUFqWixLQUFBLEtBcTBEQThxQixHQUFBMHFCLFFBL3lEQSxTQUFBOXZCLEVBQUF1YixFQUFBakQsR0FFQSxJQURBdFksRUFBQTE4QixHQUFBMDhCLE1BQ0FzWSxHQUFBaUQsSUFBQTd3RCxHQUNBLE9BQUFzMUMsRUFBQTN5QyxRQUFBcStCLEdBQUEsSUFFQSxJQUFBc1UsS0FBQXViLEVBQUE5RixHQUFBOEYsSUFDQSxPQUFBdmIsRUFFQSxJQUFBMU0sRUFBQXFOLEdBQUFYLEdBR0EsT0FBQTJXLEdBQUFyakIsRUFBQSxFQUZBRSxHQUFBRixFQUFBcU4sR0FBQTRhLElBQUEsR0FFQWpoQyxLQUFBLEtBcXlEQThxQixHQUFBMnFCLFVBL3dEQSxTQUFBL3ZCLEVBQUF1YixFQUFBakQsR0FFQSxJQURBdFksRUFBQTE4QixHQUFBMDhCLE1BQ0FzWSxHQUFBaUQsSUFBQTd3RCxHQUNBLE9BQUFzMUMsRUFBQTN5QyxRQUFBbytCLEdBQUEsSUFFQSxJQUFBdVUsS0FBQXViLEVBQUE5RixHQUFBOEYsSUFDQSxPQUFBdmIsRUFFQSxJQUFBMU0sRUFBQXFOLEdBQUFYLEdBR0EsT0FBQTJXLEdBQUFyakIsRUFGQUQsR0FBQUMsRUFBQXFOLEdBQUE0YSxLQUVBamhDLEtBQUEsS0Fxd0RBOHFCLEdBQUE0cUIsU0E3dERBLFNBQUFod0IsRUFBQXQ1QyxHQUNBLElBQUE0RCxFQUFBcTlCLEVBQ0Fzb0MsRUFBQXJvQyxFQUVBLEdBQUErZCxHQUFBai9DLEdBQUEsQ0FDQSxJQUFBaWpFLEVBQUEsY0FBQWpqRSxJQUFBaWpFLFlBQ0FyL0QsRUFBQSxXQUFBNUQsRUFBQTAxRCxHQUFBMTFELEVBQUE0RCxVQUNBMmxFLEVBQUEsYUFBQXZwRSxFQUFBK3VELEdBQUEvdUQsRUFBQXVwRSxZQUlBLElBQUFyQyxHQUZBNXRCLEVBQUExOEIsR0FBQTA4QixJQUVBMTFDLE9BQ0EsR0FBQXkxQyxHQUFBQyxHQUFBLENBQ0EsSUFBQTFNLEVBQUFxTixHQUFBWCxHQUNBNHRCLEVBQUF0NkIsRUFBQWhwQyxPQUVBLEdBQUFBLEdBQUFzakUsRUFDQSxPQUFBNXRCLEVBRUEsSUFBQXQwQixFQUFBcGhCLEVBQUFrMkMsR0FBQXl2QixHQUNBLEdBQUF2a0QsRUFBQSxFQUNBLE9BQUF1a0QsRUFFQSxJQUFBcm9ELEVBQUEwckIsRUFDQXFqQixHQUFBcmpCLEVBQUEsRUFBQTVuQixHQUFBNE8sS0FBQSxJQUNBMGxCLEVBQUEzc0MsTUFBQSxFQUFBcVksR0FFQSxHQUFBaStDLElBQUFqL0QsRUFDQSxPQUFBa2QsRUFBQXFvRCxFQUtBLEdBSEEzOEIsSUFDQTVuQixHQUFBOUQsRUFBQXRkLE9BQUFvaEIsR0FFQTJrQixHQUFBczVCLElBQ0EsR0FBQTNwQixFQUFBM3NDLE1BQUFxWSxHQUFBdUksT0FBQTAxQyxHQUFBLENBQ0EsSUFBQXI3RCxFQUNBbTBCLEVBQUE3YSxFQU1BLElBSkEraEQsRUFBQXJnRCxTQUNBcWdELEVBQUFqcUMsR0FBQWlxQyxFQUFBdjZELE9BQUFrVSxHQUFBMm9CLEdBQUE0VixLQUFBOG5CLElBQUEsTUFFQUEsRUFBQWxwQixVQUFBLEVBQ0FueUMsRUFBQXE3RCxFQUFBOW5CLEtBQUFwZixJQUNBLElBQUF5dEMsRUFBQTVoRSxFQUFBekUsTUFFQStkLElBQUF2VSxNQUFBLEVBQUE2OEQsSUFBQXhsRSxFQUFBZ2hCLEVBQUF3a0QsU0FFTyxHQUFBbHdCLEVBQUFsMkMsUUFBQTJyRCxHQUFBa1UsR0FBQWorQyxNQUFBLENBQ1AsSUFBQTdoQixFQUFBK2QsRUFBQTVaLFlBQUEyN0QsR0FDQTkvRCxHQUFBLElBQ0ErZCxJQUFBdlUsTUFBQSxFQUFBeEosSUFHQSxPQUFBK2QsRUFBQXFvRCxHQXlxREE3cUIsR0FBQStxQixTQW5wREEsU0FBQW53QixHQUVBLE9BREFBLEVBQUExOEIsR0FBQTA4QixLQUNBbFYsR0FBQXA3QixLQUFBc3dDLEdBQ0FBLEVBQUEzeUMsUUFBQXU5QixHQUFBa1csSUFDQWQsR0FncERBb0YsR0FBQWdyQixTQXZwQkEsU0FBQXgrQyxHQUNBLElBQUE5WCxJQUFBVSxHQUNBLE9BQUE4SSxHQUFBc08sR0FBQTlYLEdBc3BCQXNyQyxHQUFBbWdCLGFBQ0FuZ0IsR0FBQTZmLGNBR0E3ZixHQUFBL3FCLEtBQUFseUIsR0FDQWk5QyxHQUFBaXJCLFVBQUE3UCxHQUNBcGIsR0FBQWtyQixNQUFBdHJELEdBRUFtaEQsR0FBQS9nQixJQUNBaDJDLEdBQUEsR0FDQSs4QyxHQUFBL0csR0FBQSxTQUFBaCtCLEVBQUFzeEMsR0FDQXR5RCxHQUFBMUIsS0FBQTBnRCxHQUFBai9DLFVBQUF1eUQsS0FDQXRwRCxHQUFBc3BELEdBQUF0eEMsS0FHQWhZLElBQ0ssQ0FBTSt3RCxPQUFBLElBV1gvYSxHQUFBbXJCLFFBMThnQkEsVUE2OGdCQXgvQixHQUFBLDBFQUFBMm5CLEdBQ0F0VCxHQUFBc1QsR0FBQXJZLFlBQUErRSxLQUlBclUsR0FBQSx5QkFBQTJuQixFQUFBN3VELEdBQ0F5N0MsR0FBQW4vQyxVQUFBdXlELEdBQUEsU0FBQTF5RCxHQUNBQSxNQUFBMEUsRUFBQSxFQUFBazVDLEdBQUF3WSxHQUFBcDJELEdBQUEsR0FFQSxJQUFBNGhCLEVBQUFoaEIsS0FBQXcvQyxlQUFBdjhDLEVBQ0EsSUFBQXk3QyxHQUFBMStDLE1BQ0FBLEtBQUFnNEQsUUFVQSxPQVJBaDNDLEVBQUF3K0IsYUFDQXgrQixFQUFBMCtCLGNBQUF6QyxHQUFBNzlDLEVBQUE0aEIsRUFBQTArQixlQUVBMStCLEVBQUEyK0IsVUFBQTc5QyxLQUFBLENBQ0F5SixLQUFBMHhDLEdBQUE3OUMsRUFBQXFpQyxHQUNBem9CLEtBQUE4NEMsR0FBQTl3QyxFQUFBdStCLFFBQUEsZ0JBR0F2K0IsR0FHQTA5QixHQUFBbi9DLFVBQUF1eUQsRUFBQSxrQkFBQTF5RCxHQUNBLE9BQUFZLEtBQUEwc0IsVUFBQW9sQyxHQUFBMXlELEdBQUFzdEIsYUFLQXlkLEdBQUEsc0NBQUEybkIsRUFBQTd1RCxHQUNBLElBQUErVixFQUFBL1YsRUFBQSxFQUNBMm1FLEVBQUE1d0QsR0FBQW1vQixHQTM3Z0JBLEdBMjdnQkFub0IsRUFFQTBsQyxHQUFBbi9DLFVBQUF1eUQsR0FBQSxTQUFBN25CLEdBQ0EsSUFBQWpwQixFQUFBaGhCLEtBQUFnNEQsUUFNQSxPQUxBaDNDLEVBQUF5K0IsY0FBQTM5QyxLQUFBLENBQ0Ftb0MsU0FBQThoQixHQUFBOWhCLEVBQUEsR0FDQWp4QixTQUVBZ0ksRUFBQXcrQixhQUFBeCtCLEVBQUF3K0IsY0FBQW9xQixFQUNBNW9ELEtBS0FtcEIsR0FBQSx5QkFBQTJuQixFQUFBN3VELEdBQ0EsSUFBQTRtRSxFQUFBLFFBQUE1bUUsRUFBQSxZQUVBeTdDLEdBQUFuL0MsVUFBQXV5RCxHQUFBLFdBQ0EsT0FBQTl4RCxLQUFBNnBFLEdBQUEsR0FBQWpyRSxRQUFBLE1BS0F1ckMsR0FBQSw0QkFBQTJuQixFQUFBN3VELEdBQ0EsSUFBQTZtRSxFQUFBLFFBQUE3bUUsRUFBQSxZQUVBeTdDLEdBQUFuL0MsVUFBQXV5RCxHQUFBLFdBQ0EsT0FBQTl4RCxLQUFBdy9DLGFBQUEsSUFBQWQsR0FBQTErQyxXQUFBOHBFLEdBQUEsTUFJQXByQixHQUFBbi9DLFVBQUFraEUsUUFBQSxXQUNBLE9BQUF6Z0UsS0FBQW1RLE9BQUE4NUMsS0FHQXZMLEdBQUFuL0MsVUFBQTJxQixLQUFBLFNBQUFvZ0IsR0FDQSxPQUFBdHFDLEtBQUFtUSxPQUFBbTZCLEdBQUFsc0IsUUFHQXNnQyxHQUFBbi9DLFVBQUFvNkQsU0FBQSxTQUFBcnZCLEdBQ0EsT0FBQXRxQyxLQUFBMHNCLFVBQUF4QyxLQUFBb2dCLElBR0FvVSxHQUFBbi9DLFVBQUF1NkQsVUFBQTlNLEdBQUEsU0FBQXpHLEVBQUF0MkMsR0FDQSx5QkFBQXMyQyxFQUNBLElBQUE3SCxHQUFBMStDLE1BRUFBLEtBQUE2b0IsSUFBQSxTQUFBanFCLEdBQ0EsT0FBQWtwRCxHQUFBbHBELEVBQUEybkQsRUFBQXQyQyxPQUlBeXVDLEdBQUFuL0MsVUFBQThCLE9BQUEsU0FBQWlwQyxHQUNBLE9BQUF0cUMsS0FBQW1RLE9BQUF5ckQsR0FBQTdQLEdBQUF6aEIsTUFHQW9VLEdBQUFuL0MsVUFBQWtOLE1BQUEsU0FBQW9ZLEVBQUFDLEdBQ0FELEVBQUEyd0MsR0FBQTN3QyxHQUVBLElBQUE3RCxFQUFBaGhCLEtBQ0EsT0FBQWdoQixFQUFBdytCLGVBQUEzNkIsRUFBQSxHQUFBQyxFQUFBLEdBQ0EsSUFBQTQ1QixHQUFBMTlCLElBRUE2RCxFQUFBLEVBQ0E3RCxJQUFBb2lELFdBQUF2K0MsR0FDT0EsSUFDUDdELElBQUFnZ0QsS0FBQW44QyxJQUVBQyxJQUFBaGhCLElBRUFrZCxHQURBOEQsRUFBQTB3QyxHQUFBMXdDLElBQ0EsRUFBQTlELEVBQUFpZ0QsV0FBQW44QyxHQUFBOUQsRUFBQW1pRCxLQUFBcitDLEVBQUFELElBRUE3RCxJQUdBMDlCLEdBQUFuL0MsVUFBQThqRSxlQUFBLFNBQUEvNEIsR0FDQSxPQUFBdHFDLEtBQUEwc0IsVUFBQTQyQyxVQUFBaDVCLEdBQUE1ZCxXQUdBZ3lCLEdBQUFuL0MsVUFBQW85RCxRQUFBLFdBQ0EsT0FBQTM4RCxLQUFBbWpFLEtBQUExaEMsSUFJQThqQixHQUFBN0csR0FBQW4vQyxVQUFBLFNBQUFpaEIsRUFBQXN4QyxHQUNBLElBQUFpWSxFQUFBLHFDQUFBamhFLEtBQUFncEQsR0FDQWtZLEVBQUEsa0JBQUFsaEUsS0FBQWdwRCxHQUNBbVksRUFBQXpyQixHQUFBd3JCLEVBQUEsZ0JBQUFsWSxFQUFBLFlBQUFBLEdBQ0FvWSxFQUFBRixHQUFBLFFBQUFsaEUsS0FBQWdwRCxHQUVBbVksSUFHQXpyQixHQUFBai9DLFVBQUF1eUQsR0FBQSxXQUNBLElBQUFsekQsRUFBQW9CLEtBQUFrL0MsWUFDQWp2QyxFQUFBKzVELEVBQUEsSUFBQS9vRSxVQUNBa3BFLEVBQUF2ckUsYUFBQTgvQyxHQUNBelUsRUFBQWg2QixFQUFBLEdBQ0FtNkQsRUFBQUQsR0FBQWhtRSxHQUFBdkYsR0FFQTQ2RCxFQUFBLFNBQUE1NkQsR0FDQSxJQUFBb2lCLEVBQUFpcEQsRUFBQWxvRSxNQUFBeThDLEdBQUExVCxHQUFBLENBQUFsc0MsR0FBQXFSLElBQ0EsT0FBQSs1RCxHQUFBL3FCLEVBQUFqK0IsRUFBQSxHQUFBQSxHQUdBb3BELEdBQUFMLEdBQUEsbUJBQUE5L0IsR0FBQSxHQUFBQSxFQUFBdm1DLFNBRUF5bUUsRUFBQUMsR0FBQSxHQUVBLElBQUFuckIsRUFBQWovQyxLQUFBby9DLFVBQ0FpckIsSUFBQXJxRSxLQUFBbS9DLFlBQUF6N0MsT0FDQTRtRSxFQUFBSixJQUFBanJCLEVBQ0FzckIsRUFBQUosSUFBQUUsRUFFQSxJQUFBSCxHQUFBRSxFQUFBLENBQ0F4ckUsRUFBQTJyRSxFQUFBM3JFLEVBQUEsSUFBQTgvQyxHQUFBMStDLE1BQ0EsSUFBQWdoQixFQUFBUixFQUFBemUsTUFBQW5ELEVBQUFxUixHQUVBLE9BREErUSxFQUFBbStCLFlBQUFyOUMsS0FBQSxDQUFtQzBlLEtBQUFteUMsR0FBQTFpRCxLQUFBLENBQUF1cEQsR0FBQTF2QixRQUFBaG1DLElBQ25DLElBQUE2NkMsR0FBQTM5QixFQUFBaStCLEdBRUEsT0FBQXFyQixHQUFBQyxFQUNBL3BELEVBQUF6ZSxNQUFBL0IsS0FBQWlRLElBRUErUSxFQUFBaGhCLEtBQUEyeUQsS0FBQTZHLEdBQ0E4USxFQUFBTixFQUFBaHBELEVBQUFwaUIsUUFBQSxHQUFBb2lCLEVBQUFwaUIsUUFBQW9pQixPQUtBbXBCLEdBQUEsMERBQUEybkIsR0FDQSxJQUFBdHhDLEVBQUFtNkIsR0FBQW1YLEdBQ0EwWSxFQUFBLDBCQUFBMWhFLEtBQUFncEQsR0FBQSxhQUNBb1ksRUFBQSxrQkFBQXBoRSxLQUFBZ3BELEdBRUF0VCxHQUFBai9DLFVBQUF1eUQsR0FBQSxXQUNBLElBQUE3aEQsRUFBQWhQLFVBQ0EsR0FBQWlwRSxJQUFBbHFFLEtBQUFvL0MsVUFBQSxDQUNBLElBQUF4Z0QsRUFBQW9CLEtBQUFwQixRQUNBLE9BQUE0aEIsRUFBQXplLE1BQUFvQyxHQUFBdkYsS0FBQSxHQUFBcVIsR0FFQSxPQUFBalEsS0FBQXdxRSxHQUFBLFNBQUE1ckUsR0FDQSxPQUFBNGhCLEVBQUF6ZSxNQUFBb0MsR0FBQXZGLEtBQUEsR0FBQXFSLFFBTUFzMUMsR0FBQTdHLEdBQUFuL0MsVUFBQSxTQUFBaWhCLEVBQUFzeEMsR0FDQSxJQUFBbVksRUFBQXpyQixHQUFBc1QsR0FDQSxHQUFBbVksRUFBQSxDQUNBLElBQUEvcUUsRUFBQStxRSxFQUFBL3JFLEtBQUEsSUFDQTIvQyxHQUFBMytDLEtBQUEyK0MsR0FBQTMrQyxHQUFBLEtBRUE0QyxLQUFBLENBQW9CNUQsS0FBQTR6RCxFQUFBdHhDLEtBQUF5cEQsT0FJcEJwc0IsR0FBQW9WLEdBQUFudkQsRUFBQXc4QixHQUFBcGlDLE1BQUEsRUFDQUEsS0FBQSxVQUNBc2lCLEtBQUExYyxJQUlBNDZDLEdBQUFuL0MsVUFBQXk0RCxNQXA1ZEEsV0FDQSxJQUFBaDNDLEVBQUEsSUFBQTA5QixHQUFBMStDLEtBQUFrL0MsYUFPQSxPQU5BbCtCLEVBQUFtK0IsWUFBQThCLEdBQUFqaEQsS0FBQW0vQyxhQUNBbitCLEVBQUF1K0IsUUFBQXYvQyxLQUFBdS9DLFFBQ0F2K0IsRUFBQXcrQixhQUFBeC9DLEtBQUF3L0MsYUFDQXgrQixFQUFBeStCLGNBQUF3QixHQUFBamhELEtBQUF5L0MsZUFDQXorQixFQUFBMCtCLGNBQUExL0MsS0FBQTAvQyxjQUNBMStCLEVBQUEyK0IsVUFBQXNCLEdBQUFqaEQsS0FBQTIvQyxXQUNBMytCLEdBNjRkQTA5QixHQUFBbi9DLFVBQUFtdEIsUUFsNGRBLFdBQ0EsR0FBQTFzQixLQUFBdy9DLGFBQUEsQ0FDQSxJQUFBeCtCLEVBQUEsSUFBQTA5QixHQUFBMStDLE1BQ0FnaEIsRUFBQXUrQixTQUFBLEVBQ0F2K0IsRUFBQXcrQixjQUFBLE9BRUF4K0IsRUFBQWhoQixLQUFBZzRELFNBQ0F6WSxVQUFBLEVBRUEsT0FBQXYrQixHQTAzZEEwOUIsR0FBQW4vQyxVQUFBWCxNQS8yZEEsV0FDQSxJQUFBMjNCLEVBQUF2MkIsS0FBQWsvQyxZQUFBdGdELFFBQ0E2ckUsRUFBQXpxRSxLQUFBdS9DLFFBQ0FlLEVBQUFuOEMsR0FBQW95QixHQUNBbTBDLEVBQUFELEVBQUEsRUFDQXpXLEVBQUExVCxFQUFBL3BCLEVBQUE3eUIsT0FBQSxFQUNBMGQsRUE4b0lBLFNBQUF5RCxFQUFBQyxFQUFBZzNDLEdBSUEsSUFIQSxJQUFBNzRELEdBQUEsRUFDQVMsRUFBQW80RCxFQUFBcDRELFNBRUFULEVBQUFTLEdBQUEsQ0FDQSxJQUFBN0MsRUFBQWk3RCxFQUFBNzRELEdBQ0FzSSxFQUFBMUssRUFBQTBLLEtBRUEsT0FBQTFLLEVBQUFtWSxNQUNBLFdBQUE2TCxHQUFBdFosRUFBMEMsTUFDMUMsZ0JBQUF1WixHQUFBdlosRUFBd0MsTUFDeEMsV0FBQXVaLEVBQUFtNEIsR0FBQW40QixFQUFBRCxFQUFBdFosR0FBK0QsTUFDL0QsZ0JBQUFzWixFQUFBbTRCLEdBQUFuNEIsRUFBQUMsRUFBQXZaLElBR0EsT0FBY3NaLFFBQUFDLE9BN3BJZDZsRCxDQUFBLEVBQUEzVyxFQUFBaDBELEtBQUEyL0MsV0FDQTk2QixFQUFBekQsRUFBQXlELE1BQ0FDLEVBQUExRCxFQUFBMEQsSUFDQXBoQixFQUFBb2hCLEVBQUFELEVBQ0E1aEIsRUFBQXluRSxFQUFBNWxELEVBQUFELEVBQUEsRUFDQWduQyxFQUFBN3JELEtBQUF5L0MsY0FDQW1yQixFQUFBL2UsRUFBQW5vRCxPQUNBOG1DLEVBQUEsRUFDQXFnQyxFQUFBNXRCLEdBQUF2NUMsRUFBQTFELEtBQUEwL0MsZUFFQSxJQUFBWSxJQUFBb3FCLEdBQUExVyxHQUFBdHdELEdBQUFtbkUsR0FBQW5uRSxFQUNBLE9BQUEyckQsR0FBQTk0QixFQUFBdjJCLEtBQUFtL0MsYUFFQSxJQUFBbitCLEVBQUEsR0FFQTBqQyxFQUNBLEtBQUFoaEQsS0FBQThtQyxFQUFBcWdDLEdBQUEsQ0FNQSxJQUhBLElBQUFDLEdBQUEsRUFDQWxzRSxFQUFBMjNCLEVBSEF0ekIsR0FBQXduRSxLQUtBSyxFQUFBRixHQUFBLENBQ0EsSUFBQS9wRSxFQUFBZ3JELEVBQUFpZixHQUNBN2dDLEVBQUFwcEMsRUFBQW9wQyxTQUNBanhCLEVBQUFuWSxFQUFBbVksS0FDQTJyQyxFQUFBMWEsRUFBQXJyQyxHQUVBLEdBQUFvYSxHQUFBb29CLEVBQ0F4aUMsRUFBQStsRCxPQUNXLElBQUFBLEVBQUEsQ0FDWCxHQUFBM3JDLEdBQUFtb0IsRUFDQSxTQUFBdWpCLEVBRUEsTUFBQUEsR0FJQTFqQyxFQUFBd3BCLEtBQUE1ckMsRUFFQSxPQUFBb2lCLEdBbzBkQXc5QixHQUFBai9DLFVBQUE4OUQsR0FBQTVELEdBQ0FqYixHQUFBai9DLFVBQUFnNkQsTUFsZ1FBLFdBQ0EsT0FBQUEsR0FBQXY1RCxPQWtnUUF3K0MsR0FBQWovQyxVQUFBd3JFLE9BcitQQSxXQUNBLFdBQUFwc0IsR0FBQTMrQyxLQUFBcEIsUUFBQW9CLEtBQUFvL0MsWUFxK1BBWixHQUFBai9DLFVBQUFxOUQsS0E1OFBBLFdBQ0E1OEQsS0FBQXMvQyxhQUFBeDdDLElBQ0E5RCxLQUFBcy9DLFdBQUFxZCxHQUFBMzhELEtBQUFwQixVQUVBLElBQUFpK0QsRUFBQTc4RCxLQUFBcS9DLFdBQUFyL0MsS0FBQXMvQyxXQUFBNTdDLE9BR0EsT0FBY201RCxPQUFBaitELE1BRmRpK0QsRUFBQS80RCxFQUFBOUQsS0FBQXMvQyxXQUFBdC9DLEtBQUFxL0MsZUF3OFBBYixHQUFBai9DLFVBQUF5ekQsTUFyNVBBLFNBQUFwMEQsR0FJQSxJQUhBLElBQUFvaUIsRUFDQTdnQixFQUFBSCxLQUVBRyxhQUFBNitDLElBQUEsQ0FDQSxJQUFBZ1osRUFBQXBaLEdBQUF6K0MsR0FDQTYzRCxFQUFBM1ksVUFBQSxFQUNBMlksRUFBQTFZLFdBQUF4N0MsRUFDQWtkLEVBQ0E2ckMsRUFBQTNOLFlBQUE4WSxFQUVBaDNDLEVBQUFnM0MsRUFFQSxJQUFBbkwsRUFBQW1MLEVBQ0E3M0QsSUFBQSsrQyxZQUdBLE9BREEyTixFQUFBM04sWUFBQXRnRCxFQUNBb2lCLEdBcTRQQXc5QixHQUFBai9DLFVBQUFtdEIsUUE5MlBBLFdBQ0EsSUFBQTl0QixFQUFBb0IsS0FBQWsvQyxZQUNBLEdBQUF0Z0QsYUFBQTgvQyxHQUFBLENBQ0EsSUFBQXNzQixFQUFBcHNFLEVBVUEsT0FUQW9CLEtBQUFtL0MsWUFBQXo3QyxTQUNBc25FLEVBQUEsSUFBQXRzQixHQUFBMStDLFFBRUFnckUsSUFBQXQrQyxXQUNBeXlCLFlBQUFyOUMsS0FBQSxDQUNBMGUsS0FBQW15QyxHQUNBMWlELEtBQUEsQ0FBQXljLElBQ0FvZCxRQUFBaG1DLElBRUEsSUFBQTY2QyxHQUFBcXNCLEVBQUFockUsS0FBQW8vQyxXQUVBLE9BQUFwL0MsS0FBQTJ5RCxLQUFBam1DLEtBZzJQQTh4QixHQUFBai9DLFVBQUEwckUsT0FBQXpzQixHQUFBai9DLFVBQUErK0MsUUFBQUUsR0FBQWovQyxVQUFBWCxNQS8wUEEsV0FDQSxPQUFBeXdELEdBQUFydkQsS0FBQWsvQyxZQUFBbC9DLEtBQUFtL0MsY0FpMVBBWCxHQUFBai9DLFVBQUFtcUUsTUFBQWxyQixHQUFBai9DLFVBQUE2ZSxLQUVBMjlCLEtBQ0F5QyxHQUFBai9DLFVBQUF3OEMsSUF6N1BBLFdBQ0EsT0FBQS83QyxPQTA3UEF3K0MsR0FNQWhFLEdBUUEzN0IsR0FBQTRYLE1BSUlPLEVBQUEsV0FDSixPQUFBUCxJQUNLMzRCLEtBQUFMLEVBQUFGLEVBQUFFLEVBQUFDLE1BQUFvRyxJQUFBcEcsRUFBQUQsUUFBQXU1QixLQWFKbDVCLEtBQUFrQywwK0hDbHRoQkR6QyxFQUFBLFFBQ0FBLEVBQUEsS0FDQTJqQixFQUFBM2pCLEVBQUEsT0FDQUEsRUFBQSxRQUdBQSxFQUFBLG1uQkFLQSxJQUVxQnE0Qiw2SEFBaUJoMkIsa0RBSTlCLElBQUl3aEIsMkZBTUosR0FMQXBoQixLQUFLOUIsS0FBTyxXQUNaOEIsS0FBS2tyRSxLQUFPbHJFLEtBQUtjLGdCQUFnQnFxRSxFQUFVLGlCQUMzQ25yRSxLQUFLb3JFLFlBQVksQ0FDYnByRSxLQUFLa3JFLE9BRUpsckUsS0FBSzBCLGNBQWdCMUIsS0FBS1UsU0FDM0IsT0FBTzBnQixFQUVYQSxFQUFLM2IsVUFBVUMsSUFBSWhHLFVBQUUyckUsVUFDckJqcUQsRUFBSzNiLFVBQVVDLElBQUksYUFDbkIsSUFBSXVjLEVBQVUvYyxTQUFTMkMsY0FBYyxNQU1yQyxPQUxBb2EsRUFBUTlELFlBbEJFLG9DQXFCVmlELEVBQUszZixZQUFZd2dCLEdBRVZiLGlDQUtQc1UsVUFBR2p6QixRQUFRLENBQUMsQ0FBQyxhQUFjekMsS0FBS3NyRSxZQUFZbnNFLEtBQUthLCtDQVNqREEsS0FBS2UsR0FBRytFLE1BQU15bEUsUUFBVSwwQkFuQ1gzMUMsTUF1Q2Z1MUMsNkhBQWlCaHFELGtEQUVmLElBQUlDLDJGQUVKLE9BREFwaEIsS0FBSzlCLEtBQU8sV0FDUDhCLEtBQUswQixhQUFnQjFCLEtBQUtVLFNBQ3BCMGdCLHVDQUtGb0IsR0FDVDZTLEVBQUE4MUMsRUFBQTVyRSxVQUFBKzFCLFdBQUFqM0IsT0FBQWszQixlQUFBNDFDLEVBQUE1ckUsV0FBQSxlQUFBUyxNQUFBbEMsS0FBQWtDLEtBQW1Cd2lCLEdBQ25CM2QsY0FBRWIsU0FBUyxjQUFjLDZCQy9EakN0RyxFQUFBRCxRQUFBLENBQWtCNHRFLFNBQUEsa0RDQWxCM3RFLEVBQUFELFFBQUEsQ0FBa0I2akIsU0FBQSxnQ0FBQU8sZUFBQSxzQ0FBQUUsUUFBQSwrQkFBQXlwRCxPQUFBLDhCQUFBcHBELG9CQUFBLG9uQkNEbEI3a0IsRUFBQSxRQUNBQSxFQUFBLFFBQ0FBLEVBQUEsU0FLQUEsRUFBQSxTQUNBQSxFQUFBLFNBQ0FBLEVBQUEsU0FFQUEsRUFBQSx1bkJBTXFCczRCLDZIQUFvQmoyQixrREFFMUIsSUFBQTgwQixFQUFBMTBCLEtBRUhvaEIsMkZBU0osT0FSQXBoQixLQUFLOUIsS0FBTyxjQUNaOEIsS0FBS3lyRSxTQUFXenJFLEtBQUtFLE1BQU1zaEIsT0FBT3JSLE9BQU8sU0FBQXNSLEdBQUEsT0FBTUEsRUFBRUMsaUJBQTZCLHFCQUFWRCxFQUFFdmlCLE1BQTZCMnBCLElBQUksU0FBQXBILEdBQUEsT0FBS2lULEVBQUs1ekIsZ0JBQWdCNHFFLFVBQXJCLG9CQUFrRGpxRCxFQUFFdmlCLElBQU8sQ0FBQzJCLEtBQU0sQ0FBQzR0QixRQUFTaE4sRUFBRXZpQixTQUMxTGMsS0FBS29yRSxZQUFMLENBQ0lwckUsS0FBS2MsZ0JBQWdCNnFFLEVBQVMsZ0JBQzlCM3JFLEtBQUtjLGdCQUFnQjhxRSxVQUFTLHFCQUZsQy85RCw2SEFBQTdMLENBR09oQyxLQUFLeXJFLFVBSFosQ0FJSXpyRSxLQUFLYyxnQkFBZ0IrcUUsVUFBWSwwQkFFaEM3ckUsS0FBSzBCLGNBQWdCMUIsS0FBS1UsU0FDcEIwZ0IsR0FFWEEsRUFBSzNiLFVBQVVDLElBQUksZUFBZ0JoRyxVQUFFb3NFLGFBVzlCMXFELGtDQUlQLElBQUkycUQsRUFBa0IvckUsS0FBS2dzRSxZQUFZN3NFLEtBQUthLE1BQzVDMDFCLFVBQUdqekIsUUFBUSxDQUNQLENBQUMsYUFBY3NwRSxHQUNmLENBQUMsWUFBYS9yRSxLQUFLaXNFLFlBQVk5c0UsS0FBS2EsNkNBZWhDMjJCLEVBQUk5MUIsR0FDUEEsRUFDRGIsS0FBS2UsR0FBRzBFLFVBQVVDLElBQUloRyxVQUFFd3NFLFdBRXhCbHNFLEtBQUtlLEdBQUcwRSxVQUFVWSxPQUFPM0csVUFBRXdzRSxpREFJL0Jsc0UsS0FBS2UsR0FBRytFLE1BQU15bEUsUUFBVSwyQkF6RFgxMUMsTUE4RGY4MUMsNkhBQWdCeHFELGtEQUVkLElBQUlDLDJGQUVKLE9BREFwaEIsS0FBSzlCLEtBQU8sVUFDUDhCLEtBQUswQixhQUFnQjFCLEtBQUtVLFNBQ3BCMGdCLGlDQU1YaVUsRUFBQXMyQyxFQUFBcHNFLFVBQUErMUIsV0FBQWozQixPQUFBazNCLGVBQUFvMkMsRUFBQXBzRSxXQUFBLE9BQUFTLE1BQUFsQyxLQUFBa0MsTUFFQTAxQixVQUFHanpCLFFBQVEsQ0FDUCxDQUFDLE9BQVF6QyxLQUFLbXNFLHNCQUFzQmh0RSxLQUFLYSx1REFHM0IyMkIsRUFBSTkxQixHQUN0QmIsS0FBS2UsR0FBR21ILGlCQUFpQixLQUFLM0csUUFBUSxTQUFBNnFFLEdBQ2xDQSxFQUFLM21FLFVBQVVZLE9BQU8zRyxVQUFFOHJFLFVBRTVCeHJFLEtBQUtlLEdBQUdpSCxjQUFSLG1CQUF5Q25ILEVBQXpDLEtBQWtENEUsVUFBVUMsSUFBSWhHLFVBQUU4ckUsa0NDbkcxRTl0RSxFQUFBRCxRQUFBLENBQWtCcXVFLFlBQUEsc0NBQUFOLE9BQUEsaUNBQUFVLFVBQUEsaVhDRGxCM3VFLEVBQUEsUUFDQUEsRUFBQSxTQUNBQSxFQUFBLFNBR0FBLEVBQUEsU0FDQUEsRUFBQSxRQUNBQSxFQUFBLElBQ0EyakIsRUFBQTNqQixFQUFBLEdBQ0FvQyxFQUFBcEMsRUFBQSxzREFHQSxJQUFNOHVFLEVBQVcsQ0FBQyxVQUFXLFdBR1JULGdyQkFBZ0Joc0Usa0RBSTdCLElBQUl3aEIsbVZBTUosR0FMQXBoQixLQUFLOUIsS0FBTyxVQUVaOEIsS0FBS3NzRSxZQUFjdHNFLEtBQUtFLE1BQU1nekIsT0FBT3E1QyxpQkFBaUIxakQsSUFBSSxTQUFBNXFCLEdBQUEsT0FBS0EsRUFBRXE0QixPQUFPNXlCLFNBRXhFMUQsS0FBS3dzRSxjQUNBeHNFLEtBQUswQixjQUFnQjFCLEtBQUtVLFNBQzNCLE9BQU8wZ0IsRUFLWCxJQUFJcXJELEVBQVF2bkUsU0FBUzJDLGNBQWMsTUFDbkM0a0UsRUFBTXR1RCxZQUFjbmUsS0FBS0UsTUFBTXNoQixPQUFPMEksS0FBSyxTQUFBanNCLEdBQUEsTUFBZSxxQkFBVkEsRUFBRWlCLE1BQTRCZ2pCLEtBQzlFdXFELEVBQU1obkUsVUFBVUMsSUFBSSxpQkFJcEIsSUFBSWduRSxFQUFlMXNFLEtBQUsyc0UsZUFDcEJDLEVBQVM1c0UsS0FBSzZzRSxrQkFHZEMsRUFBVTVuRSxTQUFTMkMsY0FBYyxLQVNyQyxPQVJBaWxFLEVBQVEzdUQsWUFBYywyRUFFdEJpRCxFQUFLM2YsWUFBWWdyRSxHQUNqQnJyRCxFQUFLM2YsWUFBWWlyRSxHQUNqQnRyRCxFQUFLM2YsWUFBWW1yRSxHQUNqQnhyRCxFQUFLM2YsWUFBWXFyRSxHQUdWMXJELHlDQUVHLElBQUFzVCxFQUFBMTBCLEtBQ04wc0UsRUFBZXhuRSxTQUFTMkMsY0FBYyxPQWdDMUMsT0EvQkE2a0UsRUFBYWpuRSxVQUFVQyxJQUFJaEcsVUFBRWd0RSxhQUFjLG9CQUMzQ0EsRUFBYXZxRSxVQUFZNHFFLFVBRXpCL3NFLEtBQUtndEUsV0FBYUMsVUFBT0MsTUFBTWIsR0FBVWMsT0FBTyxDQUFDLEVBQUc3MEQsS0FBSzlWLElBQUl4QyxLQUFLb3RFLGFBR2xFcHRFLEtBQUtFLE1BQU1nekIsT0FBT3E1QyxpQkFBaUJockUsUUFBUSxTQUFBdEQsR0FDdkMsSUFBSW92RSxFQUFhWCxFQUFhMWtFLGNBQWMsVUFBWTBzQixFQUFLeDBCLE1BQU04eUIsbUJBQW1CLzBCLEVBQUVpQixNQUNwRm91RSxFQUFXWixFQUFhMWtFLGNBQWMsY0FBZ0Iwc0IsRUFBS3gwQixNQUFNOHlCLG1CQUFtQi8wQixFQUFFaUIsTUFDMUYsR0FBZSxPQUFWakIsRUFBRWlCLElBQWMsQ0FDakIsR0FBS211RSxFQUFZLENBQ2JBLEVBQVc1bkUsVUFBVUMsSUFBSSxlQUN6QixJQUFJNm5FLEVBQVFGLEVBQVdybEUsY0FBYyxpQkFDekJxbEUsRUFBV3JsRSxjQUFjLGdCQUNoQ2xDLE1BQU1zN0QsS0FBTzFzQyxFQUFLczRDLFdBQVcxMEQsS0FBSzlWLElBQUl2RSxFQUFFcTRCLE9BQU81eUIsU0FDaEQ2cEUsSUFDQUEsRUFBTXpuRSxNQUFNMG5FLFdBQWEsT0FDekJELEVBQU16bkUsTUFBTXM3RCxLQUFPLFFBRzNCLEdBQUtrTSxFQUFVLENBQ1hBLEVBQVM3bkUsVUFBVUMsSUFBSSxlQUN2QixJQUFJZ1MsRUFBTzQxRCxFQUFTdGxFLGNBQWMsUUFDbEMwUCxFQUFLNVIsTUFBTXM3RCxLQUFPMXNDLEVBQUtzNEMsV0FBVzEwRCxLQUFLOVYsSUFBSXZFLEVBQUVxNEIsT0FBTzV5QixTQUNwRGdVLEVBQUs1UixNQUFNMm5FLE9BQVMvNEMsRUFBS3M0QyxXQUFXMTBELEtBQUs5VixJQUFJdkUsRUFBRXE0QixPQUFPNXlCLFNBQ3RENHBFLEVBQVN0bEUsY0FBYyxxQkFBcUJsQyxNQUFNczdELEtBQU8sV0FNOURzTCw0Q0FFTSxJQUFBeDNDLEVBQUFsMUIsS0FDVDB0RSxFQUFrQnhvRSxTQUFTMkMsY0FBYyxPQUM3QzZsRSxFQUFnQnZ2RCxZQTVFSixzQ0E2RVp1dkQsRUFBZ0Jqb0UsVUFBVUMsSUFBSWhHLFVBQUVndUUsaUJBRWhDLElBQUlDLEVBQWdCem9FLFNBQVMyQyxjQUFjLE9BQzNDOGxFLEVBQWNsb0UsVUFBVUMsSUFBSWhHLFVBQUVpdUUsZUFHOUIsSUFBSUMsRUFBTzFvRSxTQUFTMkMsY0FBYyxPQWVsQyxPQWRBK2xFLEVBQUs5bkUsTUFBTStuRSxXQUFYLDZCQUFxRHhCLEVBQVMzNEMsS0FBSyxLQUNuRWs2QyxFQUFLbm9FLFVBQVVDLElBQUloRyxVQUFFMnNFLFVBRXJCc0IsRUFBY2xzRSxZQUFZbXNFLEdBRTFCLENBQUMsRUFBR3QxRCxLQUFLdVcsTUFBTTd1QixLQUFLb3RFLFVBQVksSUFBS3B0RSxLQUFLb3RFLFdBQVc3ckUsUUFBUSxTQUFDdXNFLEVBQU1ud0UsR0FDaEUsSUFBSTR2RSxFQUFRcm9FLFNBQVMyQyxjQUFjLE9BQ25DMGxFLEVBQU05bkUsVUFBVUMsSUFBSWhHLFVBQUVvdUUsTUFDdEJQLEVBQU1wdkQsWUFBYzJ2RCxFQUNwQlAsRUFBTXpuRSxNQUFNbVMsS0FBYSxJQUFOdGEsRUFBVSxFQUFVLElBQU5BLEVBQVkyYSxLQUFLOVYsSUFBSXNyRSxHQUFReDFELEtBQUs5VixJQUFJMHlCLEVBQUtrNEMsV0FBZSxJQUFNLElBQU0sT0FDdkdPLEVBQWNsc0UsWUFBWThyRSxLQUc5QkcsRUFBZ0Jqc0UsWUFBWWtzRSxHQUNyQkQsd0NBTVAxdEUsS0FBSyt0RSxTQUFXejFELEtBQUtDLElBQUx4VyxNQUFBdVcsMkhBQUF0VyxDQUFZaEMsS0FBS3NzRSxjQUNqQ3RzRSxLQUFLb3RFLFVBQVlwdEUsS0FBSyt0RSxTQUFXLElBQU0sSUFBTS90RSxLQUFLK3RFLDhDQUV6Q3AzQyxFQUFJOTFCLEdBQ0MscUJBQVRBLEVBQ0RiLEtBQUtlLEdBQUcwRSxVQUFVQyxJQUFJaEcsVUFBRThyRSxRQUV4QnhyRSxLQUFLZSxHQUFHMEUsVUFBVVksT0FBTzNHLFVBQUU4ckUsdUNBRzdCLElBQUFwMUMsRUFBQXAyQixLQUdGMDFCLFVBQUdqekIsUUFBUSxDQUNQLENBQUMsb0JBQXFCekMsS0FBS2d1RSxlQUFlN3VFLEtBQUthLE9BQy9DLENBQUMsc0JBQXVCQSxLQUFLZ3VFLGVBQWU3dUUsS0FBS2EsT0FDakQsQ0FBQyxPQUFRQSxLQUFLaXVFLGFBQWE5dUUsS0FBS2EsU0FLcENBLEtBQUtrdUUsWUFFTGx1RSxLQUFLMHNFLGFBQWUxc0UsS0FBSzBzRSxjQUFnQnhuRSxTQUFTOEMsY0FBYyxxQkFDaEVoSSxLQUFLRSxNQUFNZ3pCLE9BQU9xNUMsaUJBQWlCaHJFLFFBQVEsU0FBQXRELEdBQ3ZDLElBQUlvdkUsRUFBYWozQyxFQUFLczJDLGFBQWExa0UsY0FBYyxVQUFZb3VCLEVBQUtsMkIsTUFBTTh5QixtQkFBbUIvMEIsRUFBRWlCLE1BQ3pGb3VFLEVBQVdsM0MsRUFBS3MyQyxhQUFhMWtFLGNBQWMsY0FBZ0JvdUIsRUFBS2wyQixNQUFNOHlCLG1CQUFtQi8wQixFQUFFaUIsTUFDaEYsU0FBVmpCLEVBQUVpQixNQUNFbXVFLElBQ0RBLEVBQVdyb0UsaUJBQWlCLFFBQVMsU0FBQXFNLEdBQ2pDK2tCLEVBQUsrM0Msa0JBQWtCcndFLEtBQUtzNEIsRUFBTW40QixFQUFHb1QsS0FFekNnOEQsRUFBV3JvRSxpQkFBaUIsYUFBYyxXQUN0Q0gsY0FBRWIsU0FBUyxvQkFBcUIvRixFQUFFaUIsSUFBSyxDQUFDa0YsYUFBYSxNQUV6RGlwRSxFQUFXcm9FLGlCQUFpQixhQUFjLFdBQ3RDSCxjQUFFYixTQUFTLHNCQUF1Qi9GLEVBQUVpQixJQUFLLENBQUNrRixhQUFhLE9BRzFEa3BFLElBQ0RBLEVBQVN0b0UsaUJBQWlCLFFBQVMsU0FBQXFNLEdBQy9CK2tCLEVBQUsrM0Msa0JBQWtCcndFLEtBQUtzNEIsRUFBTW40QixFQUFHb1QsS0FFekNpOEQsRUFBU3RvRSxpQkFBaUIsYUFBYyxXQUNwQ0gsY0FBRWIsU0FBUyxvQkFBcUIvRixFQUFFaUIsSUFBSyxDQUFDa0YsYUFBYSxNQUV6RGtwRSxFQUFTdG9FLGlCQUFpQixhQUFjLFdBQ3BDSCxjQUFFYixTQUFTLHNCQUF1Qi9GLEVBQUVpQixJQUFLLENBQUNrRixhQUFhLGlEQU81RHV5QixFQUFJOTFCLEdBQ2YsSUFBSXV0RSxFQUFZcHVFLEtBQUtFLE1BQU04eUIsbUJBQW1CbnlCLEdBQzFDMGxELEVBQU9yaEQsU0FBUzhDLGNBQWMsVUFBWW9tRSxHQUMxQ0MsRUFBTW5wRSxTQUFTOEMsY0FBYyxjQUFnQm9tRSxHQUNwQyxzQkFBUnozQyxJQUNJNHZCLEdBQ0RBLEVBQUs5Z0QsVUFBVUMsSUFBSWhHLFVBQUU0dUUsT0FFcEJELEdBQ0RBLEVBQUk1b0UsVUFBVUMsSUFBSWhHLFVBQUU0dUUsUUFHZix3QkFBUjMzQyxJQUNJNHZCLEdBQ0RBLEVBQUs5Z0QsVUFBVVksT0FBTzNHLFVBQUU0dUUsT0FFdkJELEdBQ0RBLEVBQUk1b0UsVUFBVVksT0FBTzNHLFVBQUU0dUUsa0RBSWpCcndFLEVBQUVvVCxHQUNoQkEsRUFBRWs5RCxrQkFDRjFwRSxjQUFFYixTQUFTLHlCQUEwQi9GLEVBQUVpQixNQUN2QyxFQUFBUyxFQUFBMkUsU0FBQSxvQkFBNEJyRyxFQUFFaUIseUNBR3ZCLElBQUE4MkIsRUFBQWgyQixLQUNQLFNBQVN3dUUsRUFBU25xRCxFQUFLcG1CLElBQ25CLEVBQUF3d0UsRUFBQUMsU0FBTXJxRCxFQUFNLENBQ1J6ZSxtQkFBb0IzSCxFQUFFcTRCLE9BQU81eUIsT0FBN0IsUUFBMEN6RixFQUFFcTRCLE9BQU81eUIsT0FBUyxFQUFJLElBQU0sSUFBdEUsbUNBQ0F3RyxjQUFjLElBR3RCbEssS0FBSzBzRSxhQUFlMXNFLEtBQUswc0UsY0FBZ0J4bkUsU0FBUzhDLGNBQWMscUJBQ2hFaEksS0FBS0UsTUFBTWd6QixPQUFPcTVDLGlCQUFpQmhyRSxRQUFRLFNBQUF0RCxHQUN2QyxJQUFJb3ZFLEVBQWFyM0MsRUFBSzAyQyxhQUFhMWtFLGNBQWMsVUFBWWd1QixFQUFLOTFCLE1BQU04eUIsbUJBQW1CLzBCLEVBQUVpQixNQUN6Rm91RSxFQUFXdDNDLEVBQUswMkMsYUFBYTFrRSxjQUFjLGNBQWdCZ3VCLEVBQUs5MUIsTUFBTTh5QixtQkFBbUIvMEIsRUFBRWlCLE1BQ2hGLFNBQVZqQixFQUFFaUIsTUFDRW11RSxHQUNEbUIsRUFBU25CLEVBQVlwdkUsR0FFcEJxdkUsR0FDRGtCLEVBQVNsQixFQUFVcnZFLGlFQXZNbEIydEUsaUJDZnJCbHVFLEVBQUFELFFBQUEscXJ5R0NDQUMsRUFBQUQsUUFBQSxDQUFrQit0RSxPQUFBLDZCQUFBa0IsYUFBQSxtQ0FBQWdCLGdCQUFBLHNDQUFBQyxjQUFBLG9DQUFBRyxLQUFBLDJCQUFBekIsU0FBQSwrQkFBQWlDLE1BQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3lEOEM1d0UsRUFBQUQsUUFHL0QsV0FBcUIsYUF5QnRCLElBdkJBLElBQUF1bEUsRUFBQSxTQUFBM3FELEVBQUFJLEVBQUFGLEdBSUEsWUFIQSxJQUFBRSxNQUFBLFFBQ0EsSUFBQUYsTUFBQSxHQUVBRixFQUFBSSxJQUFBSixFQUFBRSxJQUFBRixHQWtCQXMyRCxFQUFBLEdBQ0FoeEUsRUFBQSxFQUFBMGpCLEVBQUEsb0ZBQXVIMWpCLEVBQUEwakIsRUFBQTNkLE9BQWlCL0YsR0FBQSxHQUN4SSxJQUFBTyxFQUFBbWpCLEVBQUExakIsR0FFQWd4RSxFQUFBLFdBQUF6d0UsRUFBQSxLQUFBQSxFQUFBd0ksY0FFQSxJQUFBc1MsRUFBQSxTQUFBakssR0FDQSxPQUFBNC9ELEVBQUF0d0UsT0FBQWtCLFVBQUFtZCxTQUFBNWUsS0FBQWlSLEtBQUEsVUEyQkE2L0QsRUFBQXQyRCxLQUFBczJELEdBRUFDLEVBQUEsQ0FDQUMsU0FwREEsU0FBQUMsR0FDQUEsRUFBQUMsVUFBQSxFQUNBRCxFQUFBRSxXQUFBRixFQUFBdGlFLE1BQUEsR0FDQSxRQUFBOU8sRUFBQSxFQUFxQkEsR0FBQSxFQUFNQSxJQUMzQkEsRUFBQSxJQUNBb3hFLEVBQUFweEUsR0FBQSxHQUFBb3hFLEVBQUFweEUsR0FBQSxPQUFpRG94RSxFQUFBQyxVQUFBLEdBQ2pERCxFQUFBcHhFLEdBQUFxbEUsRUFBQStMLEVBQUFweEUsR0FBQSxRQUNhLElBQUFBLElBQ2JveEUsRUFBQXB4RSxHQUFBcWxFLEVBQUErTCxFQUFBcHhFLEdBQUEsTUFHQSxPQUFBb3hFLEdBMENBL0wsUUFDQWhxRCxPQUNBazJELE9BOUJBLFNBQUFqL0QsRUFBQWsvRCxHQUlBLFlBSEEsSUFBQUEsTUFBQSxNQUdBbC9ELEVBQUF2TSxRQUFBLEVBQStCSCxNQUFBaEUsVUFBQWtOLE1BQUEzTyxLQUFBbVMsR0FHL0IsVUFBQStJLEVBQUEvSSxFQUFBLEtBQUFrL0QsRUFDQUEsRUFBQXI4RCxNQUFBLElBQ0EzQyxPQUFBLFNBQUFtbkIsR0FBNkIsWUFBQXh6QixJQUFBbU0sRUFBQSxHQUFBcW5CLEtBQzdCek8sSUFBQSxTQUFBeU8sR0FBMEIsT0FBQXJuQixFQUFBLEdBQUFxbkIsS0FJMUJybkIsRUFBQSxJQWlCQTgzQyxLQWRBLFNBQUE5M0MsR0FDQSxHQUFBQSxFQUFBdk0sT0FBQSxFQUE4QixZQUM5QixJQUFBOUYsRUFBQXFTLEVBQUF2TSxPQUFBLEVBQ0EsZ0JBQUFzVixFQUFBL0ksRUFBQXJTLElBQXdDcVMsRUFBQXJTLEdBQUE4SSxjQUN4QyxNQVdBa29FLEtBQ0FRLE1BQUEsRUFBQVIsRUFDQVMsUUFBQVQsRUFBQSxFQUNBVSxRQUFBVixFQUFBLElBQ0FXLFFBQUEsSUFBQVgsR0FHQTMyQyxFQUFBLENBQ0F1M0MsT0FBQSxHQUNBQyxXQUFBLElBR0FDLEVBQUFiLEVBQUE5bUIsS0FDQTRuQixFQUFBZCxFQUFBQyxTQUNBYyxFQUFBZixFQUFBNzFELEtBR0E2MkQsRUFBQSxXQUVBLElBREEsSUFBQTUvRCxFQUFBLEdBQUFnZixFQUFBaHVCLFVBQUF5QyxPQUNBdXJCLEtBQUFoZixFQUFBZ2YsR0FBQWh1QixVQUFBZ3VCLEdBR0EsY0FBQTJnRCxFQUFBMy9ELEVBQUEsS0FDQUEsRUFBQSxHQUFBZ3BCLGFBQ0FocEIsRUFBQSxHQUFBZ3BCLGNBQUFqNUIsS0FBQWk1QixZQUVBLE9BQUFocEIsRUFBQSxHQUlBLElBQUFuUixFQUFBNHdFLEVBQUF6L0QsR0FDQXcvRCxHQUFBLEVBRUEsSUFBQTN3RSxFQUFBLENBQ0Eyd0UsR0FBQSxFQUNBeDNDLEVBQUE2M0MsU0FDQTczQyxFQUFBdzNDLFdBQUF4M0MsRUFBQXczQyxXQUFBMW1ELEtBQUEsU0FBQW5aLEVBQUFDLEdBQXlFLE9BQUFBLEVBQUFwUSxFQUFBbVEsRUFBQW5RLElBQ3pFdzRCLEVBQUE2M0MsUUFBQSxHQUdBLFFBQUFueUUsRUFBQSxFQUFBMGpCLEVBQUE0VyxFQUFBdzNDLFdBQW9EOXhFLEVBQUEwakIsRUFBQTNkLE9BQWlCL0YsR0FBQSxHQUNyRSxJQUFBb3lFLEVBQUExdUQsRUFBQTFqQixHQUdBLEdBREFtQixFQUFBaXhFLEVBQUFqbkUsS0FBQS9HLE1BQUFndUUsRUFBQTkvRCxHQUMyQixPQUkzQixJQUFBZ29CLEVBQUF1M0MsT0FBQTF3RSxHQUlBLFVBQUEyUyxNQUFBLG1CQUFBeEIsR0FIQSxJQUFBOCtELEVBQUE5MkMsRUFBQXUzQyxPQUFBMXdFLEdBQUFpRCxNQUFBLEtBQUEwdEUsRUFBQXgvRCxJQUFBeEQsTUFBQSxPQTVCQXpNLEtBNkJBZ3dFLEtBQUFMLEVBQUFaLEdBTUEsSUFuQ0EvdUUsS0FtQ0Fnd0UsS0FBQXRzRSxRQW5DQTFELEtBbUNtQ2d3RSxLQUFBbHVFLEtBQUEsSUFHbkMrdEUsRUFBQXR3RSxVQUFBbWQsU0FBQSxXQUNBLGtCQUFBa3pELEVBQUE1dkUsS0FBQWl3RSxLQUE2Q2p3RSxLQUFBaXdFLE1BQzdDLElBQUFqd0UsS0FBQWd3RSxLQUFBdDhDLEtBQUEsVUFHQSxJQUFBdzhDLEVBQUFMLEVBRUE1QyxFQUFBLFdBRUEsSUFEQSxJQUFBaDlELEVBQUEsR0FBQWdmLEVBQUFodUIsVUFBQXlDLE9BQ0F1ckIsS0FBQWhmLEVBQUFnZixHQUFBaHVCLFVBQUFndUIsR0FFQSxXQUFBeFEsU0FBQWxmLFVBQUFKLEtBQUE0QyxNQUFBa3JFLEVBQUE0QyxNQUFBLE9BQUFoaUUsT0FBQW9DLE1BR0FnOUQsRUFBQTRDLE1BQUFLLEVBQ0FqRCxFQUFBOXZELFFBQUEsUUFFQSxJQUFBZ3pELEVBQUFsRCxFQUVBbUQsRUFBQXZCLEVBQUFLLE9BQ0EzMkQsRUFBQUQsS0FBQUMsSUFxQkE4M0QsRUFuQkEsV0FFQSxJQURBLElBQUFwZ0UsRUFBQSxHQUFBZ2YsRUFBQWh1QixVQUFBeUMsT0FDQXVyQixLQUFBaGYsRUFBQWdmLEdBQUFodUIsVUFBQWd1QixHQUVBLElBQUFxaEQsRUFBQUYsRUFBQW5nRSxFQUFBLE9BQ0F4UixFQUFBNnhFLEVBQUEsR0FDQTl4RCxFQUFBOHhELEVBQUEsR0FDQXpnRSxFQUFBeWdFLEVBQUEsR0FJQWg1QyxFQUFBLEVBQUEvZSxFQUhBOVosR0FBQSxJQUdBOFosRUFGQWlHLEdBQUEsSUFDQTNPLEdBQUEsTUFFQTRSLEVBQUE2VixFQUFBLE9BQUFBLEdBQUEsRUFDQXQ1QixHQUFBLEVBQUFTLEVBQUE2NEIsR0FBQTdWLEVBQ0ExakIsR0FBQSxFQUFBeWdCLEVBQUE4WSxHQUFBN1YsRUFDQWpKLEdBQUEsRUFBQTNJLEVBQUF5bkIsR0FBQTdWLEVBQ0EsT0FBQXpqQixFQUFBRCxFQUFBeWEsRUFBQThlLElBS0FpNUMsRUFBQTFCLEVBQUFLLE9BcUJBc0IsRUFuQkEsV0FFQSxJQURBLElBQUF2Z0UsRUFBQSxHQUFBZ2YsRUFBQWh1QixVQUFBeUMsT0FDQXVyQixLQUFBaGYsRUFBQWdmLEdBQUFodUIsVUFBQWd1QixHQUdBLElBQUFqeEIsR0FEQWlTLEVBQUFzZ0UsRUFBQXRnRSxFQUFBLFNBQ0EsR0FDQWxTLEVBQUFrUyxFQUFBLEdBQ0F1SSxFQUFBdkksRUFBQSxHQUNBcW5CLEVBQUFybkIsRUFBQSxHQUNBd2dFLEVBQUF4Z0UsRUFBQXZNLE9BQUEsRUFBQXVNLEVBQUEsS0FDQSxXQUFBcW5CLEVBQXNCLE9BQUFtNUMsR0FDdEIsQ0FDQXp5RSxHQUFBLFdBQUFBLElBQUEsRUFBQXM1QixHQUNBdjVCLEdBQUEsV0FBQUEsSUFBQSxFQUFBdTVCLEdBQ0E5ZSxHQUFBLFdBQUFBLElBQUEsRUFBQThlLEdBQ0FtNUMsSUFNQUMsRUFBQTdCLEVBQUFLLE9BQ0F5QixFQUFBOUIsRUFBQTcxRCxLQUlBazNELEVBQUEzd0UsVUFBQXF4RSxLQUFBLFdBQ0EsT0FBQVAsRUFBQXJ3RSxLQUFBZ3dFLE9BR0FHLEVBQUFTLEtBQUEsV0FFQSxJQURBLElBQUEzZ0UsRUFBQSxHQUFBZ2YsRUFBQWh1QixVQUFBeUMsT0FDQXVyQixLQUFBaGYsRUFBQWdmLEdBQUFodUIsVUFBQWd1QixHQUVBLFdBQUF4USxTQUFBbGYsVUFBQUosS0FBQTRDLE1BQUFtdUUsRUFBQSxPQUFBcmlFLE9BQUFvQyxFQUFBLGFBR0Fnb0IsRUFBQXUzQyxPQUFBb0IsS0FBQUosRUFFQXY0QyxFQUFBdzNDLFdBQUEzdEUsS0FBQSxDQUNBckMsRUFBQSxFQUNBcUosS0FBQSxXQUVBLElBREEsSUFBQW1ILEVBQUEsR0FBQWdmLEVBQUFodUIsVUFBQXlDLE9BQ0F1ckIsS0FBQWhmLEVBQUFnZixHQUFBaHVCLFVBQUFndUIsR0FHQSxHQURBaGYsRUFBQXlnRSxFQUFBemdFLEVBQUEsUUFDQSxVQUFBMGdFLEVBQUExZ0UsSUFBQSxJQUFBQSxFQUFBdk0sT0FDQSxnQkFLQSxJQUFBbXRFLEVBQUFoQyxFQUFBSyxPQUNBNEIsRUFBQWpDLEVBQUE5bUIsS0FDQWdwQixFQUFBLFNBQUFuaEUsR0FBNEIsT0FBQTBJLEtBQUF3RCxNQUFBLElBQUFsTSxHQUFBLEtBNEI1Qm9oRSxFQWxCQSxXQUVBLElBREEsSUFBQS9nRSxFQUFBLEdBQUFnZixFQUFBaHVCLFVBQUF5QyxPQUNBdXJCLEtBQUFoZixFQUFBZ2YsR0FBQWh1QixVQUFBZ3VCLEdBRUEsSUFBQWdpRCxFQUFBSixFQUFBNWdFLEVBQUEsUUFDQW5SLEVBQUFneUUsRUFBQTdnRSxJQUFBLE1BVUEsT0FUQWdoRSxFQUFBLEdBQUFGLEVBQUFFLEVBQUEsT0FDQUEsRUFBQSxHQUFBRixFQUFBLElBQUFFLEVBQUEsUUFDQUEsRUFBQSxHQUFBRixFQUFBLElBQUFFLEVBQUEsUUFDQSxTQUFBbnlFLEdBQUFteUUsRUFBQXZ0RSxPQUFBLEdBQUF1dEUsRUFBQSxNQUNBQSxFQUFBLEdBQUFBLEVBQUF2dEUsT0FBQSxFQUFBdXRFLEVBQUEsS0FDQW55RSxFQUFBLFFBRUFteUUsRUFBQXZ0RSxPQUFBLEVBRUE1RSxFQUFBLElBQUFteUUsRUFBQXY5QyxLQUFBLFVBS0F3OUMsRUFBQXJDLEVBQUFLLE9BOENBaUMsRUFwQ0EsV0FFQSxJQURBLElBQUFsaEUsRUFBQSxHQUFBZ2YsRUFBQWh1QixVQUFBeUMsT0FDQXVyQixLQUFBaGYsRUFBQWdmLEdBQUFodUIsVUFBQWd1QixHQUdBLElBQUF4d0IsR0FEQXdSLEVBQUFpaEUsRUFBQWpoRSxFQUFBLFNBQ0EsR0FDQXVPLEVBQUF2TyxFQUFBLEdBQ0FKLEVBQUFJLEVBQUEsR0FFQXhSLEdBQUEsSUFDQStmLEdBQUEsSUFDQTNPLEdBQUEsSUFFQSxJQUlBblEsRUFBQTAzQixFQUpBM2UsRUFBQUgsS0FBQUcsSUFBQWhhLEVBQUErZixFQUFBM08sR0FDQTBJLEVBQUFELEtBQUFDLElBQUE5WixFQUFBK2YsRUFBQTNPLEdBRUFqUyxHQUFBMmEsRUFBQUUsR0FBQSxFQWdCQSxPQWJBRixJQUFBRSxHQUNBL1ksRUFBQSxFQUNBMDNCLEVBQUFnNkMsT0FBQUMsS0FFQTN4RSxFQUFBOUIsRUFBQSxJQUFBMmEsRUFBQUUsSUFBQUYsRUFBQUUsSUFBQUYsRUFBQUUsSUFBQSxFQUFBRixFQUFBRSxHQUdBaGEsR0FBQThaLEVBQXVCNmUsR0FBQTVZLEVBQUEzTyxJQUFBMEksRUFBQUUsR0FDdkIrRixHQUFBakcsRUFBNEI2ZSxFQUFBLEdBQUF2bkIsRUFBQXBSLElBQUE4WixFQUFBRSxHQUM1QjVJLEdBQUEwSSxJQUE0QjZlLEVBQUEsR0FBQTM0QixFQUFBK2YsSUFBQWpHLEVBQUFFLEtBRTVCMmUsR0FBQSxJQUNBLElBQW9CQSxHQUFBLEtBQ3BCbm5CLEVBQUF2TSxPQUFBLFFBQUFJLElBQUFtTSxFQUFBLEdBQW1ELENBQUFtbkIsRUFBQTEzQixFQUFBOUIsRUFBQXFTLEVBQUEsSUFDbkQsQ0FBQW1uQixFQUFBMTNCLEVBQUE5QixJQUtBMHpFLEVBQUF6QyxFQUFBSyxPQUNBcUMsRUFBQTFDLEVBQUE5bUIsS0FHQWpzQyxFQUFBeEQsS0FBQXdELE1BNkJBMDFELEVBbkJBLFdBRUEsSUFEQSxJQUFBdmhFLEVBQUEsR0FBQWdmLEVBQUFodUIsVUFBQXlDLE9BQ0F1ckIsS0FBQWhmLEVBQUFnZixHQUFBaHVCLFVBQUFndUIsR0FFQSxJQUFBd2lELEVBQUFILEVBQUFyaEUsRUFBQSxRQUNBblIsRUFBQXl5RSxFQUFBdGhFLElBQUEsTUFDQSxhQUFBblIsRUFBQXFJLE9BQUEsS0FDQTZwRSxFQUFBRyxFQUFBTSxHQUFBM3lFLElBRUEyeUUsRUFBQSxHQUFBMzFELEVBQUEyMUQsRUFBQSxJQUNBQSxFQUFBLEdBQUEzMUQsRUFBQTIxRCxFQUFBLElBQ0FBLEVBQUEsR0FBQTMxRCxFQUFBMjFELEVBQUEsS0FDQSxTQUFBM3lFLEdBQUEyeUUsRUFBQS90RSxPQUFBLEdBQUErdEUsRUFBQSxRQUNBQSxFQUFBLEdBQUFBLEVBQUEvdEUsT0FBQSxFQUFBK3RFLEVBQUEsS0FDQTN5RSxFQUFBLFFBRUFBLEVBQUEsSUFBQTJ5RSxFQUFBaGxFLE1BQUEsVUFBQTNOLEVBQUEsS0FBQTQwQixLQUFBLFdBS0FnK0MsRUFBQSxzQ0FDQUMsRUFBQSx1QkF5Q0FDLEVBdkNBLFNBQUEzQixHQUNBLEdBQUFBLEVBQUF2b0UsTUFBQWdxRSxHQUFBLENBRUEsSUFBQXpCLEVBQUF2c0UsUUFBQSxJQUFBdXNFLEVBQUF2c0UsU0FDQXVzRSxJQUFBOW9FLE9BQUEsSUFHQSxJQUFBOG9FLEVBQUF2c0UsU0FFQXVzRSxHQURBQSxJQUFBbjlELE1BQUEsS0FDQSxHQUFBbTlELEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUVBLElBQUE1NEMsRUFBQXRSLFNBQUFrcUQsRUFBQSxJQUNBeHhFLEVBQUE0NEIsR0FBQSxHQUNBN1ksRUFBQTZZLEdBQUEsTUFDQXhuQixFQUFBLElBQUF3bkIsRUFDQSxPQUFBNTRCLEVBQUErZixFQUFBM08sRUFBQSxHQUlBLEdBQUFvZ0UsRUFBQXZvRSxNQUFBaXFFLEdBQUEsQ0FDQSxJQUFBMUIsRUFBQXZzRSxTQUVBdXNFLElBQUE5b0UsT0FBQSxJQUVBLElBQUEwcUUsRUFBQTlyRCxTQUFBa3FELEVBQUEsSUFDQTZCLEVBQUFELEdBQUEsT0FDQUUsRUFBQUYsR0FBQSxPQUNBRyxFQUFBSCxHQUFBLE1BQ0FqaUUsRUFBQTBJLEtBQUF3RCxPQUFBLElBQUErMUQsR0FBQSxhQUNBLE9BQUFDLEVBQUFDLEVBQUFDLEVBQUFwaUUsR0FPQSxVQUFBNkIsTUFBQSxzQkFBQXcrRCxJQUtBZ0MsRUFBQXBELEVBQUFLLE9BQ0FnRCxFQUFBNTVELEtBQUF3RCxNQTRDQXEyRCxFQTFDQSxXQUlBLElBSEEsSUFBQTdwRSxFQUVBMkgsRUFBQSxHQUFBZ2YsRUFBQWh1QixVQUFBeUMsT0FDQXVyQixLQUFBaGYsRUFBQWdmLEdBQUFodUIsVUFBQWd1QixHQUVBLElBR0F4d0IsRUFBQStmLEVBQUEzTyxFQUhBdW5CLEdBREFubkIsRUFBQWdpRSxFQUFBaGlFLEVBQUEsUUFDQSxHQUNBdlEsRUFBQXVRLEVBQUEsR0FDQXJTLEVBQUFxUyxFQUFBLEdBRUEsT0FBQXZRLEVBQ0FqQixFQUFBK2YsRUFBQTNPLEVBQUEsSUFBQWpTLE1BQ1MsQ0FDVCxJQUFBdzBFLEVBQUEsUUFDQXAwRSxFQUFBLFFBQ0FxMEUsRUFBQXowRSxFQUFBLEdBQUFBLEdBQUEsRUFBQThCLEdBQUE5QixFQUFBOEIsRUFBQTlCLEVBQUE4QixFQUNBNHlFLEVBQUEsRUFBQTEwRSxFQUFBeTBFLEVBQ0FFLEVBQUFuN0MsRUFBQSxJQUNBZzdDLEVBQUEsR0FBQUcsRUFBQSxJQUNBSCxFQUFBLEdBQUFHLEVBQ0FILEVBQUEsR0FBQUcsRUFBQSxJQUNBLFFBQUE1MEUsRUFBQSxFQUF5QkEsRUFBQSxFQUFLQSxJQUM5QnkwRSxFQUFBejBFLEdBQUEsSUFBZ0N5MEUsRUFBQXowRSxJQUFBLEdBQ2hDeTBFLEVBQUF6MEUsR0FBQSxJQUFnQ3kwRSxFQUFBejBFLElBQUEsR0FDaEMsRUFBQXkwRSxFQUFBejBFLEdBQUEsRUFDcUJLLEVBQUFMLEdBQUEyMEUsRUFBQSxHQUFBRCxFQUFBQyxHQUFBRixFQUFBejBFLEdBQ3JCLEVBQUF5MEUsRUFBQXowRSxHQUFBLEVBQ3FCSyxFQUFBTCxHQUFBMDBFLEVBQ3JCLEVBQUFELEVBQUF6MEUsR0FBQSxFQUNxQkssRUFBQUwsR0FBQTIwRSxHQUFBRCxFQUFBQyxJQUFBLElBQUFGLEVBQUF6MEUsSUFBQSxFQUVBSyxFQUFBTCxHQUFBMjBFLEVBRXJCaHFFLEVBQUEsQ0FBQTRwRSxFQUFBLElBQUFsMEUsRUFBQSxJQUFBazBFLEVBQUEsSUFBQWwwRSxFQUFBLElBQUFrMEUsRUFBQSxJQUFBbDBFLEVBQUEsS0FBQVMsRUFBQTZKLEVBQUEsR0FBQWtXLEVBQUFsVyxFQUFBLEdBQUF1SCxFQUFBdkgsRUFBQSxHQUVBLE9BQUEySCxFQUFBdk0sT0FBQSxFQUVBLENBQUFqRixFQUFBK2YsRUFBQTNPLEVBQUFJLEVBQUEsSUFFQSxDQUFBeFIsRUFBQStmLEVBQUEzTyxFQUFBLElBeUtBMmlFLEVBOUpBLENBQ0FDLFVBQUEsVUFDQUMsYUFBQSxVQUNBQyxLQUFBLFVBQ0FDLFdBQUEsVUFDQUMsTUFBQSxVQUNBQyxNQUFBLFVBQ0FDLE9BQUEsVUFDQUMsTUFBQSxVQUNBQyxlQUFBLFVBQ0FDLEtBQUEsVUFDQUMsV0FBQSxVQUNBQyxNQUFBLFVBQ0FDLFVBQUEsVUFDQUMsVUFBQSxVQUNBQyxXQUFBLFVBQ0FDLFVBQUEsVUFDQUMsTUFBQSxVQUNBQyxXQUFBLFVBQ0FDLGVBQUEsVUFDQUMsU0FBQSxVQUNBQyxRQUFBLFVBQ0FDLEtBQUEsVUFDQUMsU0FBQSxVQUNBQyxTQUFBLFVBQ0FDLGNBQUEsVUFDQUMsU0FBQSxVQUNBQyxVQUFBLFVBQ0FDLFNBQUEsVUFDQUMsVUFBQSxVQUNBQyxZQUFBLFVBQ0FDLGVBQUEsVUFDQUMsV0FBQSxVQUNBQyxXQUFBLFVBQ0FDLFFBQUEsVUFDQUMsV0FBQSxVQUNBQyxhQUFBLFVBQ0FDLGNBQUEsVUFDQUMsY0FBQSxVQUNBQyxjQUFBLFVBQ0FDLGNBQUEsVUFDQUMsV0FBQSxVQUNBQyxTQUFBLFVBQ0FDLFlBQUEsVUFDQUMsUUFBQSxVQUNBQyxRQUFBLFVBQ0FDLFdBQUEsVUFDQUMsVUFBQSxVQUNBQyxZQUFBLFVBQ0FDLFlBQUEsVUFDQUMsUUFBQSxVQUNBQyxVQUFBLFVBQ0FDLFdBQUEsVUFDQUMsS0FBQSxVQUNBQyxVQUFBLFVBQ0FDLEtBQUEsVUFDQUMsTUFBQSxVQUNBQyxZQUFBLFVBQ0FDLEtBQUEsVUFDQUMsU0FBQSxVQUNBQyxRQUFBLFVBQ0FDLFVBQUEsVUFDQUMsT0FBQSxVQUNBQyxNQUFBLFVBQ0FDLE1BQUEsVUFDQUMsV0FBQSxVQUNBQyxTQUFBLFVBQ0FDLGNBQUEsVUFDQUMsVUFBQSxVQUNBQyxhQUFBLFVBQ0FDLFVBQUEsVUFDQUMsV0FBQSxVQUNBQyxVQUFBLFVBQ0FDLGVBQUEsVUFDQUMscUJBQUEsVUFDQUMsVUFBQSxVQUNBQyxXQUFBLFVBQ0FDLFVBQUEsVUFDQUMsVUFBQSxVQUNBQyxZQUFBLFVBQ0FDLGNBQUEsVUFDQUMsYUFBQSxVQUNBQyxlQUFBLFVBQ0FDLGVBQUEsVUFDQUMsZUFBQSxVQUNBQyxZQUFBLFVBQ0FDLEtBQUEsVUFDQUMsVUFBQSxVQUNBQyxNQUFBLFVBQ0FDLFFBQUEsVUFDQUMsT0FBQSxVQUNBQyxRQUFBLFVBQ0FDLFFBQUEsVUFDQUMsaUJBQUEsVUFDQUMsV0FBQSxVQUNBQyxhQUFBLFVBQ0FDLGFBQUEsVUFDQUMsZUFBQSxVQUNBQyxnQkFBQSxVQUNBQyxrQkFBQSxVQUNBQyxnQkFBQSxVQUNBQyxnQkFBQSxVQUNBQyxhQUFBLFVBQ0FDLFVBQUEsVUFDQUMsVUFBQSxVQUNBQyxTQUFBLFVBQ0FDLFlBQUEsVUFDQUMsS0FBQSxVQUNBQyxRQUFBLFVBQ0FDLE1BQUEsVUFDQUMsVUFBQSxVQUNBQyxPQUFBLFVBQ0FDLFVBQUEsVUFDQUMsT0FBQSxVQUNBQyxjQUFBLFVBQ0FDLFVBQUEsVUFDQUMsY0FBQSxVQUNBQyxjQUFBLFVBQ0FDLFdBQUEsVUFDQUMsVUFBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxXQUFBLFVBQ0FDLE9BQUEsVUFDQUMsUUFBQSxVQUNBQyxRQUFBLFVB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QUFBdnpDLEtBQ0F5eUYsTUFBQWwvQyxFQUFBay9DLE1BQ0F2cUUsS0FBQXFyQixFQUFBcnJCLE1BbUJlLElBQUFzckUsRUFBQSxFQ3RDQUMsRUFBQSxTQUFBbjJFLEdBQ2YsSUFBQS9aLEVBQUEsR0FDQSxRQUFBNVAsS0FBQTJwQixFQUFBL1osRUFBQWhOLEtBQUE1QyxHQUNBLE9BQUE0UCxHQ0hlbXdGLEVBQUEsU0FBQXAyRSxHQUNmLElBQUF5TixFQUFBLEdBQ0EsUUFBQXAzQixLQUFBMnBCLEVBQUF5TixFQUFBeDBCLEtBQUErbUIsRUFBQTNwQixJQUNBLE9BQUFvM0IsR0NIZTRvRSxFQUFBLFNBQUFyMkUsR0FDZixJQUFBc04sRUFBQSxHQUNBLFFBQUFqM0IsS0FBQTJwQixFQUFBc04sRUFBQXIwQixLQUFBLENBQXFDNUMsTUFBQU4sTUFBQWlxQixFQUFBM3BCLEtBQ3JDLE9BQUFpM0IsR0NIQTU0QixFQUFBVSxFQUFBa0ssRUFBQSx5QkFBQSsxRixJQUFBM2dHLEVBQUFVLEVBQUFrSyxFQUFBLHdCQUFBNDJGLElBQUF4aEcsRUFBQVUsRUFBQWtLLEVBQUEsd0JBQUE4MUYsSUFBQTFnRyxFQUFBVSxFQUFBa0ssRUFBQSx5QkFBQTYyRixJQUFBemhHLEVBQUFVLEVBQUFrSyxFQUFBLDJCQUFBODJGLElBQUExaEcsRUFBQVUsRUFBQWtLLEVBQUEsNEJBQUErMkYiLCJmaWxlIjoianMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTApO1xuIiwiaW1wb3J0IHsgRE9NSGVscGVycyBhcyAkZCB9IGZyb20gJ0BVdGlscyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rvciwgb3B0aW9ucyl7XG4gICAgICAgIGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJyApe1xuICAgICAgICAgICAgdGhyb3cgYEZpcnN0IHBhcmFtZXRlciBtdXN0IGJlIGEgc3RyaW5nIHJlZmVyZW5jaW5nIHRoZSBDU1MtbGlrZSBzZWxlY3RvciBvZiB0aGUgZWxlbWVudCB0byBiZSBjcmVhdGVkIFxuICAgICAgICAgICAgICAgICAgICAoXCJkaXYjZGl2SUQuZGl2Q2xhc3NcIikuYDtcbiAgICAgICAgfSBcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDsgLy8gcGFyZW50IGlzIGEgSlMgb2JqZWN0XG4gICAgICAgIHRoaXMuYXBwID0gb3B0aW9ucy5hcHA7IC8vIHBhcmVudCBpcyBhIEpTIG9iamVjdFxuICAgICAgICB0aGlzLnJlbmRlclRvU2VsZWN0b3IgPSBvcHRpb25zLnJlbmRlclRvU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gJGQucSh0aGlzLnJlbmRlclRvU2VsZWN0b3IpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gb3B0aW9ucy5jaGlsZHJlbjtcbiAgICAgICAgdGhpcy5yZXJlbmRlciA9ICggb3B0aW9ucy5yZXJlbmRlck9uRGF0YU1pc21hdGNoICYmIG9wdGlvbnMubW9kZWwuaXNNaXNtYXRjaGVkICk7XG4gICAgICAgIHRoaXMuZGF0YSA9IG9wdGlvbnMuZGF0YTtcbiAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQgPSBvcHRpb25zLmNyZWF0ZUNvbXBvbmVudCB8fCBudWxsOyAvLyBudWxsIG9wdGlvbiBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4gcHJldmlvdXMgdmVyc2lvbiBkb24ndCBzZW5kIHRoaXMgcHJvcGVydHlcbiAgICAgICAgdGhpcy5lbCA9IHRoaXMucHJlcmVuZGVyKGFyZ3VtZW50cyk7IC8vIHdpbGwgY2FsbCB0aGUgaW5zdGFuY2UncyBwcmVyZW5kZXJcbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgICAgICAgICAgY2hpbGQuY29udGFpbmVyID0gJGQucShjaGlsZC5yZW5kZXJUb1NlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICBjaGlsZC5jb250YWluZXIuYXBwZW5kQ2hpbGQoY2hpbGQuZWwpO1xuICAgICAgICAgICAgICAgIGNoaWxkLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICggIXRoaXMucHJlcmVuZGVyZWQgJiYgdGhpcy5jb250YWluZXIgKXsgLy8gaWYgaXMgbm90IHByZXJlbmRlcmVkIGFuZCBjb250YWluZXIgYWxyZWFkeSBleGlzdHNcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWwpO1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZENoaWxkcmVuKGNoaWxkcmVuQXJyYXkpe1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goLi4uY2hpbGRyZW5BcnJheSk7XG4gICAgICAgIHRoaXMuYXBwLnZpZXdzLnB1c2goLi4uY2hpbGRyZW5BcnJheSk7XG4gICAgfVxuICAgIHByZXJlbmRlcigpe1xuICAgICAgICBcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gJGQucSh0aGlzLnNlbGVjdG9yKTtcbiAgICAgICAgaWYgKCBleGlzdGluZyAmJiAhdGhpcy5yZXJlbmRlciApIHtcbiAgICAgICAgICAgICAgICAvLyBpZSBpcyBleGlzdGluZyBhbmQgbm8gbmVlZCB0byByZXJlbmRlclxuICAgICAgICAgICAgdGhpcy5wcmVyZW5kZXJlZCA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgfSBlbHNlIGlmICggZXhpc3RpbmcgKSB7IC8vIGllIGlzIGV4aXN0aW5nIGJ1dCB0aGVyZSBpcyBhIG5lZWQgdG8gcmVyZW5kZXJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhpc3RpbmcuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaXMgbm90IHlldCBleGlzdGluZ1xuICAgICAgICB2YXIgZWwgPSAkZC5jKHRoaXMuc2VsZWN0b3IpO1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgXG4gICAgfVxufSIsInZhciBQdWJTdWIgPSByZXF1aXJlKFwicHVic3ViLWpzXCIpO1xuXG5jb25zdCBzdWJzY3JpcHRpb25zID0gW107XG5cbmZ1bmN0aW9uIGxvZ1N1YnMoKXtcbiAgICBjb25zb2xlLmxvZyhzdWJzY3JpcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gc2V0U3VicyhzdWJzQXJyYXkpIHsgLy8gc3Vic0FycmF5IGlzIGFycmF5IG9mIHRvcGljL2Z1bmN0aW9uIHBhaXIgYXJyYXlzXG4gICAgc3Vic0FycmF5LmZvckVhY2goZnVuY3Rpb24ocGFpcil7XG4gICAgICAgIHZhciB0b3BpYyA9IHBhaXJbMF0sXG4gICAgICAgICAgICBmblJlZiA9IHBhaXJbMV07XG4gICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChQdWJTdWIuc3Vic2NyaWJlKHRvcGljLGZuUmVmKSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNhbmNlbFN1Yih0b3BpYyxmblJlZikgeyAvLyBmb3IgY2FuY2VsaW5nIHNpbmdsZSBzdWJzY3JpcHRpb25cbiAgICBjb25zb2xlLmxvZygncHVic3ViJyxzdWJzY3JpcHRpb25zKTtcbiAgICB2YXIgdG9rZW4gPSBQdWJTdWIuc3Vic2NyaWJlKHRvcGljLGZuUmVmKSxcbiAgICAgICAgaW5kZXggPSBzdWJzY3JpcHRpb25zLmluZGV4T2YodG9rZW4pO1xuICAgIGNvbnNvbGUubG9nKCdwdWJzdWInLHRva2VuKTtcbiAgICBpZiAoIGluZGV4ICE9PSAtMSApIHtcbiAgICAgICAgUHViU3ViLnVuc3Vic2NyaWJlKHRva2VuKTtcbiAgICAgICAgc3Vic2NyaXB0aW9ucy5zcGxpY2UoaW5kZXgsMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgJ1N1YnNjcmlwdGlvbiBkb2VzIG5vdCBleGlzdC4nO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbG9nU3Viczpsb2dTdWJzLFxuICAgIHNldFN1YnM6c2V0U3VicyxcbiAgICBjYW5jZWxTdWI6Y2FuY2VsU3ViXG59OyIsImNvbnN0IFB1YlN1YiA9IHJlcXVpcmUoJ3B1YnN1Yi1qcycpO1xuY29uc3Qgc3RhdGUgPSB7fTtcblxuLy9hcnJheS5jb21wYXJlKG90aGVyQXJyYXkpIC8vSFQgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjIyOTE5Ny9ob3ctdG8ta25vdy1pZi10d28tYXJyYXlzLWhhdmUtdGhlLXNhbWUtdmFsdWVzXG5BcnJheS5wcm90b3R5cGUuY29tcGFyZSA9IEFycmF5LnByb3RvdHlwZS5jb21wYXJlIHx8IGZ1bmN0aW9uKHRlc3RBcnIpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggIT0gdGVzdEFyci5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDAgJiYgdGVzdEFyci5sZW5ndGggPT09IDApIHJldHVybiB0cnVlO1xuICAgIGNvbnNvbGUubG9nKFwiaW4gY29tcGFyZVwiKTtcbiAgICBjb25zb2xlLmxvZyh0aGlzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlc3RBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXNbaV0gIT09IHRlc3RBcnJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9sb2dTdGF0ZSgpe1xuICAgIGNvbnNvbGUubG9nKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gX2dldFN0YXRlKHByb3BlcnR5KXtcbiAgICByZXR1cm4gKCBzdGF0ZVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCApID8gc3RhdGVbcHJvcGVydHldWzBdIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJldmlvdXNTdGF0ZShwcm9wZXJ0eSl7XG4gICAgcmV0dXJuICggc3RhdGVbcHJvcGVydHldICE9PSB1bmRlZmluZWQgJiYgc3RhdGVbcHJvcGVydHldWzFdICE9PSB1bmRlZmluZWQgKSA/IHN0YXRlW3Byb3BlcnR5XVsxXSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX3NldFN0YXRlKGtleSx2YWx1ZSwgb3B0aW9ucykgeyBcbiAgICB2YXIgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgaWYgKCBzdGF0ZVtrZXldID09PSB1bmRlZmluZWQpIHsgLy8gaWUgZmlyc3QgdGltZSBzdGF0ZSBwcm9wZXJ0eSBpcyBiZWluZyBkZWZpbmVkXG4gICAgICAgIHN0YXRlW2tleV0gPSBbdmFsdWVdO1xuICAgICAgICBQdWJTdWIucHVibGlzaChrZXksIHZhbHVlKTtcbiAgICAgICAgX2xvZ1N0YXRlKCk7XG4gICAgfSBlbHNlIHsgLy8gbm90IHRoZSBmaXJzdCB0aW1lIHRoZSBwcm9wZXJ0eSBpcyBiZWluZyBkZWZpbmVkXG4gICAgLy9JZiBpdCdzIGEgc3RyaW5nIG9yIGFycmF5IGFuZCB2YWx1ZXMgYXJlIHRoZSBzYW1lLCBzdGF0ZUNoYW5nZWQ9RmFsc2UrXG4gICAgICAgIHZhciBzdGF0ZUNoYW5nZWQgPSB0cnVlO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBzdGF0ZUNoYW5nZWQgPSAoc3RhdGVba2V5XVswXSAhPT0gdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIEFycmF5LmlzQXJyYXkoc3RhdGVba2V5XVswXSkpIHtcbiAgICAgICAgICAgIHN0YXRlQ2hhbmdlZCA9ICF2YWx1ZS5jb21wYXJlKHN0YXRlW2tleV1bMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhdGVDaGFuZ2VkID0gdHJ1ZTsgLy9hc3N1bWUgaXQncyBjaGFuZ2VkIGlmIHdlIGNhbid0IHZlcmlmeVxuICAgICAgICB9IFxuICAgICAgICBpZiAoIG9wdGlvbnMuZm9yY2VDaGFuZ2UgKXtcbiAgICAgICAgICAgIHN0YXRlQ2hhbmdlZCA9IHRydWU7IC8vIGFsbG93IHVzZXJzIHRvIGZvcmNlIHB1Ymxpc2hpbmcgb2YgdGhpcyBzdGF0ZSBldmVuIGlmIHRoZSBwcmV2aW91cyBzdGF0ZSB3YXMgdGhlIHNhbWVcbiAgICAgICAgfSAgICAgICAgICAgICBcbiAgICAgICAgLy9Pbmx5IHB1Ymxpc2ggaWYgd2UndmUgY2hhbmdlZCBzdGF0ZVxuICAgICAgICBpZiAoIHN0YXRlQ2hhbmdlZCApIHsgXG4gICAgICAgICAgICBzdGF0ZVtrZXldLnVuc2hpZnQodmFsdWUpO1xuICAgICAgICAgICAgUHViU3ViLnB1Ymxpc2goa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICBfbG9nU3RhdGUoKTtcbiAgICAgICAgICAgIGlmICggc3RhdGVba2V5XS5sZW5ndGggPiAyICkge1xuICAgICAgICAgICAgICAgIHN0YXRlW2tleV0ubGVuZ3RoID0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0cy5zdGF0ZU1vZHVsZSA9IHtcbiAgICBsb2dTdGF0ZTogX2xvZ1N0YXRlLFxuICAgIGdldFN0YXRlOiBfZ2V0U3RhdGUsXG4gICAgZ2V0UHJldmlvdXNTdGF0ZTogX2dldFByZXZpb3VzU3RhdGUsXG4gICAgc2V0U3RhdGU6IF9zZXRTdGF0ZVxufTsiLCJleHBvcnQgZnVuY3Rpb24gR1RNUHVzaChldmVudExhYmVsKSB7XG4gICAgdmFyIGRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgbnVsbDtcbiAgICBpZiAoZGF0YUxheWVyKSB7XG4gICAgICAgIGRhdGFMYXllci5wdXNoKHsgJ2V2ZW50JzogJ0ludGVyYWN0aXZlIENsaWNrJywgJ2V2ZW50RGF0YSc6IGV2ZW50TGFiZWwgfSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2hXaW5kb3dSZXNpemUoUywgZGVsYXkgPSAzNTApIHsgLy8gbmVlZCB0byBwYXNzIGluIHRoZSBTdGF0ZU1vZHVsZVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHJlc2l6ZVRocm90dGxlciwgZmFsc2UpO1xuXG4gICAgdmFyIHJlc2l6ZVRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiByZXNpemVUaHJvdHRsZXIoKSB7IC8vIGFkYXB0ZWQgZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9FdmVudHMvcmVzaXplI3NldFRpbWVvdXRcbiAgICAgICAgLy8gaWdub3JlIHJlc2l6ZSBldmVudHMgYXMgbG9uZyBhcyBhbiBhY3R1YWxSZXNpemVIYW5kbGVyIGV4ZWN1dGlvbiBpcyBpbiB0aGUgcXVldWVcbiAgICAgICAgaWYgKCFyZXNpemVUaW1lb3V0KSB7XG4gICAgICAgICAgICByZXNpemVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBhY3R1YWxSZXNpemVIYW5kbGVyKCk7XG4gICAgICAgICAgICAgICAgcmVzaXplVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhY3R1YWxSZXNpemVIYW5kbGVyKCkge1xuXG4gICAgICAgIFMuc2V0U3RhdGUoJ3Jlc2l6ZScsIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRdKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRmFkZUluVGV4dCA9IChmdW5jdGlvbigpIHtcbiAgICBIVE1MRWxlbWVudC5wcm90b3R5cGUuZmFkZU91dENvbnRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCduby1vcGFjaXR5Jyk7XG4gICAgfTtcbiAgICBIVE1MRWxlbWVudC5wcm90b3R5cGUuZmFkZUluQ29udGVudCA9IGZ1bmN0aW9uKGNvbnRlbnQsIHMpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uUyA9IHMgfHwgMDtcbiAgICAgICAgaWYgKHMpIHtcbiAgICAgICAgICAgIHRoaXMuc3R5bGUudHJhbnNpdGlvbiA9ICdvcGFjaXR5ICcgKyBzICsgJ3MgZWFzZS1pbi1vdXQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgdmFyIGR1cmF0aW9uU3RyID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcykuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNpdGlvbi1kdXJhdGlvbicpIHx8IGR1cmF0aW9uUyxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IHBhcnNlRmxvYXQoZHVyYXRpb25TdHIpICogMTAwMDtcbiAgICAgICAgICAgIHRoaXMuZmFkZU91dENvbnRlbnQoKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJIVE1MID0gY29udGVudDtcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ25vLW9wYWNpdHknKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICB9KTtcbiAgICB9O1xufSkoKTtcbmV4cG9ydCBjb25zdCBTdHJpbmdIZWxwZXJzID0gKGZ1bmN0aW9uKCkge1xuICAgIFN0cmluZy5wcm90b3R5cGUuY2xlYW5TdHJpbmcgPSBmdW5jdGlvbigpIHsgLy8gbG93ZXJjYXNlIGFuZCByZW1vdmUgcHVuY3R1YXRpb24gYW5kIHJlcGxhY2Ugc3BhY2VzIHdpdGggaHlwaGVuczsgZGVsZXRlIHB1bmN0dWF0aW9uXG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoL1sgL10vZywgJy0nKS5yZXBsYWNlKC9bJ1wi4oCd4oCZ4oCc4oCYLC4hPzsoKSY6XS9nLCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICB9O1xuXG4gICAgU3RyaW5nLnByb3RvdHlwZS5yZW1vdmVVbmRlcnNjb3JlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9fL2csICcgJyk7XG4gICAgfTtcblxuICAgIFN0cmluZy5wcm90b3R5cGUudW5kb0NhbWVsQ2FzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8oW0EtWl0pL2csICcgJDEnKS50b0xvd2VyQ2FzZSgpO1xuICAgIH07XG4gICAgU3RyaW5nLnByb3RvdHlwZS5kb0NhbWVsQ2FzZSA9IGZ1bmN0aW9uKCkgeyAvLyBIVDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI5NzA2NjdcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvKD86Xlxcd3xbQS1aXXxcXGJcXHcpL2csIGZ1bmN0aW9uKHdvcmQsIGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXggPT0gMCA/IHdvcmQudG9Mb3dlckNhc2UoKSA6IHdvcmQudG9VcHBlckNhc2UoKTtcbiAgICAgICAgfSkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgfVxuXG4gICAgU3RyaW5nLnByb3RvdHlwZS50cnVuYyA9IFN0cmluZy5wcm90b3R5cGUudHJ1bmMgfHwgLy8gaHQgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzExOTk0MjBcbiAgICAgICAgZnVuY3Rpb24obiwgdXNlV29yZEJvdW5kYXJ5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPD0gbikgeyByZXR1cm4gdGhpczsgfVxuICAgICAgICAgICAgdmFyIHN1YlN0cmluZyA9IHRoaXMuc3Vic3RyKDAsIG4gLSAxKTtcbiAgICAgICAgICAgIHJldHVybiAodXNlV29yZEJvdW5kYXJ5ID9cbiAgICAgICAgICAgICAgICBzdWJTdHJpbmcuc3Vic3RyKDAsIHN1YlN0cmluZy5sYXN0SW5kZXhPZignICcpKSA6XG4gICAgICAgICAgICAgICAgc3ViU3RyaW5nKSArIFwiLi4uXCI7XG4gICAgICAgIH07XG5cbiAgICBTdHJpbmcucHJvdG90eXBlLmhhc2hDb2RlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoYXNoID0gMCxcbiAgICAgICAgICAgIGksIGNocjtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gaGFzaDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNociA9IHRoaXMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIGNocjtcbiAgICAgICAgICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfTtcbn0pKClcblxuZXhwb3J0IGNvbnN0IERPTUhlbHBlcnMgPSB7XG4gICAgYzogKHMpID0+IHtcblxuICAgICAgICBpZiAocy5pbmRleE9mKCcuJykgIT09IC0xIHx8IHMuaW5kZXhPZignIycpICE9PSAtMSkge1xuICAgICAgICAgICAgbGV0IGNsYXNzU3RyaW5ncyA9IHMubWF0Y2goL1xcLihbXiMuXSopL2cpIHx8IFtdO1xuICAgICAgICAgICAgbGV0IGlkU3RyaW5nID0gcy5tYXRjaCgvIyhbXi5dKikvKTtcbiAgICAgICAgICAgIGxldCBlbFN0cmluZyA9IHMubWF0Y2goL14oW14uI10rKS8pO1xuXG5cbiAgICAgICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxTdHJpbmdbMF0pO1xuICAgICAgICAgICAgY2xhc3NTdHJpbmdzLmZvckVhY2goa2xhc3MgPT4ge1xuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoa2xhc3MucmVwbGFjZSgnLicsICcnKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChpZFN0cmluZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnaWQnLCBpZFN0cmluZ1sxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQocyk7XG4gICAgfSxcbiAgICBxOiAocykgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzKSxcbiAgICBxYTogKHMpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocylcbn0iLCIvKiohXG4qIHRpcHB5LmpzIHY0LjMuMVxuKiAoYykgMjAxNy0yMDE5IGF0b21pa3NcbiogTUlUIExpY2Vuc2VcbiovXG5pbXBvcnQgUG9wcGVyIGZyb20gJ3BvcHBlci5qcyc7XG5cbnZhciBjc3MgPSBcIi50aXBweS1pT1N7Y3Vyc29yOnBvaW50ZXIhaW1wb3J0YW50Oy13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjp0cmFuc3BhcmVudH0udGlwcHktcG9wcGVye3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMTY1LC44NCwuNDQsMSk7bWF4LXdpZHRoOmNhbGMoMTAwJSAtIDhweCk7cG9pbnRlci1ldmVudHM6bm9uZTtvdXRsaW5lOjB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYmFja2Ryb3B7Ym9yZGVyLXJhZGl1czo0MCUgNDAlIDAgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1yb3VuZGFycm93e2JvdHRvbTotN3B4O2JvdHRvbTotNi41cHg7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSAwO3RyYW5zZm9ybS1vcmlnaW46NTAlIDA7bWFyZ2luOjAgM3B4fS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gLnRpcHB5LXJvdW5kYXJyb3cgc3Zne3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYXJyb3d7Ym9yZGVyLXRvcDo4cHggc29saWQgIzMzMztib3JkZXItcmlnaHQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1sZWZ0OjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3R0b206LTdweDttYXJnaW46MCAzcHg7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSAwO3RyYW5zZm9ybS1vcmlnaW46NTAlIDB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYmFja2Ryb3B7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjAgMjUlO3RyYW5zZm9ybS1vcmlnaW46MCAyNSV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNTUlKTt0cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTU1JSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT1oaWRkZW5dey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTUwJSwtNDUlKTt0cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNTAlLC00NSUpO29wYWNpdHk6MH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC10b3dhcmRdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpib3R0b207dHJhbnNmb3JtLW9yaWdpbjpib3R0b219LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoLTEwcHgpIHJvdGF0ZVgoMCk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKC0xMHB4KSByb3RhdGVYKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDApIHJvdGF0ZVgoNjBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWSgwKSByb3RhdGVYKDYwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1mYWRlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1mYWRlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249c2NhbGVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpib3R0b207dHJhbnNmb3JtLW9yaWdpbjpib3R0b219LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpIHNjYWxlKDEpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpIHNjYWxlKC41KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoLjUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LWJhY2tkcm9we2JvcmRlci1yYWRpdXM6MCAwIDMwJSAzMCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktcm91bmRhcnJvd3t0b3A6LTdweDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NTAlIDEwMCU7dHJhbnNmb3JtLW9yaWdpbjo1MCUgMTAwJTttYXJnaW46MCAzcHh9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktcm91bmRhcnJvdyBzdmd7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LWFycm93e2JvcmRlci1ib3R0b206OHB4IHNvbGlkICMzMzM7Ym9yZGVyLXJpZ2h0OjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItbGVmdDo4cHggc29saWQgdHJhbnNwYXJlbnQ7dG9wOi03cHg7bWFyZ2luOjAgM3B4Oy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo1MCUgMTAwJTt0cmFuc2Zvcm0tb3JpZ2luOjUwJSAxMDAlfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LWJhY2tkcm9wey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjowIC01MCU7dHJhbnNmb3JtLW9yaWdpbjowIC01MCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNDUlKTt0cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTQ1JSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT1oaWRkZW5dey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTUwJSk7dHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTUwJSk7b3BhY2l0eTowfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wO3RyYW5zZm9ybS1vcmlnaW46dG9wfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDEwcHgpIHJvdGF0ZVgoMCk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDEwcHgpIHJvdGF0ZVgoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoMCkgcm90YXRlWCgtNjBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWSgwKSByb3RhdGVYKC02MGRlZyl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wO3RyYW5zZm9ybS1vcmlnaW46dG9wfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCkgc2NhbGUoMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCkgc2NhbGUoMSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KSBzY2FsZSguNSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCkgc2NhbGUoLjUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1iYWNrZHJvcHtib3JkZXItcmFkaXVzOjUwJSAwIDAgNTAlfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1yb3VuZGFycm93e3JpZ2h0Oi0xMnB4Oy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjozMy4zMzMzMzMzMyUgNTAlO3RyYW5zZm9ybS1vcmlnaW46MzMuMzMzMzMzMzMlIDUwJTttYXJnaW46M3B4IDB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LXJvdW5kYXJyb3cgc3Zne3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1hcnJvd3tib3JkZXItbGVmdDo4cHggc29saWQgIzMzMztib3JkZXItdG9wOjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjhweCBzb2xpZCB0cmFuc3BhcmVudDtyaWdodDotN3B4O21hcmdpbjozcHggMDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46MCA1MCU7dHJhbnNmb3JtLW9yaWdpbjowIDUwJX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktYmFja2Ryb3B7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSAwO3RyYW5zZm9ybS1vcmlnaW46NTAlIDB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LWJhY2tkcm9wW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTUwJSk7dHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLC01MCUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPWhpZGRlbl17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNzUlLC01MCUpO3RyYW5zZm9ybTpzY2FsZSguMikgdHJhbnNsYXRlKC03NSUsLTUwJSk7b3BhY2l0eTowfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC10b3dhcmRdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC10b3dhcmRdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0O3RyYW5zZm9ybS1vcmlnaW46cmlnaHR9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKC0xMHB4KSByb3RhdGVZKDApO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgtMTBweCkgcm90YXRlWSgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoMCkgcm90YXRlWSgtNjBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgwKSByb3RhdGVZKC02MGRlZyl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1mYWRlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249c2NhbGVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodDt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0fS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KSBzY2FsZSgxKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCkgc2NhbGUoMSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpIHNjYWxlKC41KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCkgc2NhbGUoLjUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYmFja2Ryb3B7Ym9yZGVyLXJhZGl1czowIDUwJSA1MCUgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gLnRpcHB5LXJvdW5kYXJyb3d7bGVmdDotMTJweDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NjYuNjY2NjY2NjYlIDUwJTt0cmFuc2Zvcm0tb3JpZ2luOjY2LjY2NjY2NjY2JSA1MCU7bWFyZ2luOjNweCAwfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktcm91bmRhcnJvdyBzdmd7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gLnRpcHB5LWFycm93e2JvcmRlci1yaWdodDo4cHggc29saWQgIzMzMztib3JkZXItdG9wOjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjhweCBzb2xpZCB0cmFuc3BhcmVudDtsZWZ0Oi03cHg7bWFyZ2luOjNweCAwOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjoxMDAlIDUwJTt0cmFuc2Zvcm0tb3JpZ2luOjEwMCUgNTAlfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYmFja2Ryb3B7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOi01MCUgMDt0cmFuc2Zvcm0tb3JpZ2luOi01MCUgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gLnRpcHB5LWJhY2tkcm9wW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTUwJSk7dHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLC01MCUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT1oaWRkZW5dey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTI1JSwtNTAlKTt0cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtMjUlLC01MCUpO29wYWNpdHk6MH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQ7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0fS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoMTBweCkgcm90YXRlWSgwKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoMTBweCkgcm90YXRlWSgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKDApIHJvdGF0ZVkoNjBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgwKSByb3RhdGVZKDYwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdDt0cmFuc2Zvcm0tb3JpZ2luOmxlZnR9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpIHNjYWxlKDEpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpIHNjYWxlKDEpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KSBzY2FsZSguNSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCkgc2NhbGUoLjUpfS50aXBweS10b29sdGlwe3Bvc2l0aW9uOnJlbGF0aXZlO2NvbG9yOiNmZmY7Ym9yZGVyLXJhZGl1czouMjVyZW07Zm9udC1zaXplOi44NzVyZW07cGFkZGluZzouMzEyNXJlbSAuNTYyNXJlbTtsaW5lLWhlaWdodDoxLjQ7dGV4dC1hbGlnbjpjZW50ZXI7YmFja2dyb3VuZC1jb2xvcjojMzMzfS50aXBweS10b29sdGlwW2RhdGEtc2l6ZT1zbWFsbF17cGFkZGluZzouMTg3NXJlbSAuMzc1cmVtO2ZvbnQtc2l6ZTouNzVyZW19LnRpcHB5LXRvb2x0aXBbZGF0YS1zaXplPWxhcmdlXXtwYWRkaW5nOi4zNzVyZW0gLjc1cmVtO2ZvbnQtc2l6ZToxcmVtfS50aXBweS10b29sdGlwW2RhdGEtYW5pbWF0ZWZpbGxde292ZXJmbG93OmhpZGRlbjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fS50aXBweS10b29sdGlwW2RhdGEtaW50ZXJhY3RpdmVdLC50aXBweS10b29sdGlwW2RhdGEtaW50ZXJhY3RpdmVdIHBhdGh7cG9pbnRlci1ldmVudHM6YXV0b30udGlwcHktdG9vbHRpcFtkYXRhLWluZXJ0aWFdW2RhdGEtc3RhdGU9dmlzaWJsZV17dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC41NCwxLjUsLjM4LDEuMTEpfS50aXBweS10b29sdGlwW2RhdGEtaW5lcnRpYV1bZGF0YS1zdGF0ZT1oaWRkZW5de3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2V9LnRpcHB5LWFycm93LC50aXBweS1yb3VuZGFycm93e3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjA7aGVpZ2h0OjB9LnRpcHB5LXJvdW5kYXJyb3d7d2lkdGg6MThweDtoZWlnaHQ6N3B4O2ZpbGw6IzMzMztwb2ludGVyLWV2ZW50czpub25lfS50aXBweS1iYWNrZHJvcHtwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kLWNvbG9yOiMzMzM7Ym9yZGVyLXJhZGl1czo1MCU7d2lkdGg6Y2FsYygxMTAlICsgMnJlbSk7bGVmdDo1MCU7dG9wOjUwJTt6LWluZGV4Oi0xO3RyYW5zaXRpb246YWxsIGN1YmljLWJlemllciguNDYsLjEsLjUyLC45OCk7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtiYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbn0udGlwcHktYmFja2Ryb3A6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtmbG9hdDpsZWZ0O3BhZGRpbmctdG9wOjEwMCV9LnRpcHB5LWJhY2tkcm9wKy50aXBweS1jb250ZW50e3RyYW5zaXRpb24tcHJvcGVydHk6b3BhY2l0eTt3aWxsLWNoYW5nZTpvcGFjaXR5fS50aXBweS1iYWNrZHJvcCsudGlwcHktY29udGVudFtkYXRhLXN0YXRlPXZpc2libGVde29wYWNpdHk6MX0udGlwcHktYmFja2Ryb3ArLnRpcHB5LWNvbnRlbnRbZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MH1cIjtcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxudmFyIHZlcnNpb24gPSBcIjQuMy4xXCI7XG5cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xudmFyIHVhID0gaXNCcm93c2VyID8gbmF2aWdhdG9yLnVzZXJBZ2VudCA6ICcnO1xudmFyIGlzSUUgPSAvTVNJRSB8VHJpZGVudFxcLy8udGVzdCh1YSk7XG52YXIgaXNVQ0Jyb3dzZXIgPSAvVUNCcm93c2VyXFwvLy50ZXN0KHVhKTtcbnZhciBpc0lPUyA9IGlzQnJvd3NlciAmJiAvaVBob25lfGlQYWR8aVBvZC8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pICYmICF3aW5kb3cuTVNTdHJlYW07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGExMXk6IHRydWUsXG4gIGFsbG93SFRNTDogdHJ1ZSxcbiAgYW5pbWF0ZUZpbGw6IHRydWUsXG4gIGFuaW1hdGlvbjogJ3NoaWZ0LWF3YXknLFxuICBhcHBlbmRUbzogZnVuY3Rpb24gYXBwZW5kVG8oKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH0sXG4gIGFyaWE6ICdkZXNjcmliZWRieScsXG4gIGFycm93OiBmYWxzZSxcbiAgYXJyb3dUeXBlOiAnc2hhcnAnLFxuICBib3VuZGFyeTogJ3Njcm9sbFBhcmVudCcsXG4gIGNvbnRlbnQ6ICcnLFxuICBkZWxheTogMCxcbiAgZGlzdGFuY2U6IDEwLFxuICBkdXJhdGlvbjogWzMyNSwgMjc1XSxcbiAgZmxpcDogdHJ1ZSxcbiAgZmxpcEJlaGF2aW9yOiAnZmxpcCcsXG4gIGZsaXBPblVwZGF0ZTogZmFsc2UsXG4gIGZvbGxvd0N1cnNvcjogZmFsc2UsXG4gIGhpZGVPbkNsaWNrOiB0cnVlLFxuICBpZ25vcmVBdHRyaWJ1dGVzOiBmYWxzZSxcbiAgaW5lcnRpYTogZmFsc2UsXG4gIGludGVyYWN0aXZlOiBmYWxzZSxcbiAgaW50ZXJhY3RpdmVCb3JkZXI6IDIsXG4gIGludGVyYWN0aXZlRGVib3VuY2U6IDAsXG4gIGxhenk6IHRydWUsXG4gIG1heFdpZHRoOiAzNTAsXG4gIG11bHRpcGxlOiBmYWxzZSxcbiAgb2Zmc2V0OiAwLFxuICBvbkhpZGRlbjogZnVuY3Rpb24gb25IaWRkZW4oKSB7fSxcbiAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUoKSB7fSxcbiAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHt9LFxuICBvblNob3c6IGZ1bmN0aW9uIG9uU2hvdygpIHt9LFxuICBvblNob3duOiBmdW5jdGlvbiBvblNob3duKCkge30sXG4gIG9uVHJpZ2dlcjogZnVuY3Rpb24gb25UcmlnZ2VyKCkge30sXG4gIHBsYWNlbWVudDogJ3RvcCcsXG4gIHBvcHBlck9wdGlvbnM6IHt9LFxuICByb2xlOiAndG9vbHRpcCcsXG4gIHNob3dPbkluaXQ6IGZhbHNlLFxuICBzaXplOiAncmVndWxhcicsXG4gIHN0aWNreTogZmFsc2UsXG4gIHRhcmdldDogJycsXG4gIHRoZW1lOiAnZGFyaycsXG4gIHRvdWNoOiB0cnVlLFxuICB0b3VjaEhvbGQ6IGZhbHNlLFxuICB0cmlnZ2VyOiAnbW91c2VlbnRlciBmb2N1cycsXG4gIHRyaWdnZXJUYXJnZXQ6IG51bGwsXG4gIHVwZGF0ZUR1cmF0aW9uOiAwLFxuICB3YWl0OiBudWxsLFxuICB6SW5kZXg6IDk5OTlcbiAgLyoqXG4gICAqIElmIHRoZSBzZXQoKSBtZXRob2QgZW5jb3VudGVycyBvbmUgb2YgdGhlc2UsIHRoZSBwb3BwZXJJbnN0YW5jZSBtdXN0IGJlXG4gICAqIHJlY3JlYXRlZFxuICAgKi9cblxufTtcbnZhciBQT1BQRVJfSU5TVEFOQ0VfREVQRU5ERU5DSUVTID0gWydhcnJvdycsICdhcnJvd1R5cGUnLCAnYm91bmRhcnknLCAnZGlzdGFuY2UnLCAnZmxpcCcsICdmbGlwQmVoYXZpb3InLCAnZmxpcE9uVXBkYXRlJywgJ29mZnNldCcsICdwbGFjZW1lbnQnLCAncG9wcGVyT3B0aW9ucyddO1xuXG52YXIgZWxlbWVudFByb3RvID0gaXNCcm93c2VyID8gRWxlbWVudC5wcm90b3R5cGUgOiB7fTtcbnZhciBtYXRjaGVzID0gZWxlbWVudFByb3RvLm1hdGNoZXMgfHwgZWxlbWVudFByb3RvLm1hdGNoZXNTZWxlY3RvciB8fCBlbGVtZW50UHJvdG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnRQcm90by5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgZWxlbWVudFByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yO1xuLyoqXG4gKiBQb255ZmlsbCBmb3IgQXJyYXkuZnJvbSAtIGNvbnZlcnRzIGl0ZXJhYmxlIHZhbHVlcyB0byBhbiBhcnJheVxuICovXG5cbmZ1bmN0aW9uIGFycmF5RnJvbSh2YWx1ZSkge1xuICByZXR1cm4gW10uc2xpY2UuY2FsbCh2YWx1ZSk7XG59XG4vKipcbiAqIFBvbnlmaWxsIGZvciBFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0XG4gKi9cblxuZnVuY3Rpb24gY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcikge1xuICByZXR1cm4gY2xvc2VzdENhbGxiYWNrKGVsZW1lbnQsIGZ1bmN0aW9uIChlbCkge1xuICAgIHJldHVybiBtYXRjaGVzLmNhbGwoZWwsIHNlbGVjdG9yKTtcbiAgfSk7XG59XG4vKipcbiAqIFdvcmtzIGxpa2UgRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCwgYnV0IHVzZXMgYSBjYWxsYmFjayBpbnN0ZWFkXG4gKi9cblxuZnVuY3Rpb24gY2xvc2VzdENhbGxiYWNrKGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gIHdoaWxlIChlbGVtZW50KSB7XG4gICAgaWYgKGNhbGxiYWNrKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIFBhc3NpdmUgZXZlbnQgbGlzdGVuZXIgY29uZmlnXG52YXIgUEFTU0lWRSA9IHtcbiAgcGFzc2l2ZTogdHJ1ZSAvLyBQb3BwZXIgYHByZXZlbnRPdmVyZmxvd2AgcGFkZGluZ1xuXG59O1xudmFyIFBBRERJTkcgPSA0OyAvLyBQb3BwZXIgYXR0cmlidXRlc1xuLy8gSW4gUG9wcGVyIHYyIHRoZXNlIHdpbGwgYmUgYGRhdGEtKmAgaW5zdGVhZCBvZiBgeC0qYCB0byBhZGhlcmUgdG8gSFRNTDUgc3BlY1xuXG52YXIgUExBQ0VNRU5UX0FUVFJJQlVURSA9ICd4LXBsYWNlbWVudCc7XG52YXIgT1VUX09GX0JPVU5EQVJJRVNfQVRUUklCVVRFID0gJ3gtb3V0LW9mLWJvdW5kYXJpZXMnOyAvLyBDbGFzc2VzXG5cbnZhciBJT1NfQ0xBU1MgPSBcInRpcHB5LWlPU1wiO1xudmFyIEFDVElWRV9DTEFTUyA9IFwidGlwcHktYWN0aXZlXCI7XG52YXIgUE9QUEVSX0NMQVNTID0gXCJ0aXBweS1wb3BwZXJcIjtcbnZhciBUT09MVElQX0NMQVNTID0gXCJ0aXBweS10b29sdGlwXCI7XG52YXIgQ09OVEVOVF9DTEFTUyA9IFwidGlwcHktY29udGVudFwiO1xudmFyIEJBQ0tEUk9QX0NMQVNTID0gXCJ0aXBweS1iYWNrZHJvcFwiO1xudmFyIEFSUk9XX0NMQVNTID0gXCJ0aXBweS1hcnJvd1wiO1xudmFyIFJPVU5EX0FSUk9XX0NMQVNTID0gXCJ0aXBweS1yb3VuZGFycm93XCI7IC8vIFNlbGVjdG9yc1xuXG52YXIgUE9QUEVSX1NFTEVDVE9SID0gXCIuXCIuY29uY2F0KFBPUFBFUl9DTEFTUyk7XG52YXIgVE9PTFRJUF9TRUxFQ1RPUiA9IFwiLlwiLmNvbmNhdChUT09MVElQX0NMQVNTKTtcbnZhciBDT05URU5UX1NFTEVDVE9SID0gXCIuXCIuY29uY2F0KENPTlRFTlRfQ0xBU1MpO1xudmFyIEJBQ0tEUk9QX1NFTEVDVE9SID0gXCIuXCIuY29uY2F0KEJBQ0tEUk9QX0NMQVNTKTtcbnZhciBBUlJPV19TRUxFQ1RPUiA9IFwiLlwiLmNvbmNhdChBUlJPV19DTEFTUyk7XG52YXIgUk9VTkRfQVJST1dfU0VMRUNUT1IgPSBcIi5cIi5jb25jYXQoUk9VTkRfQVJST1dfQ0xBU1MpO1xuXG52YXIgaXNVc2luZ1RvdWNoID0gZmFsc2U7XG5mdW5jdGlvbiBvbkRvY3VtZW50VG91Y2goKSB7XG4gIGlmIChpc1VzaW5nVG91Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpc1VzaW5nVG91Y2ggPSB0cnVlO1xuXG4gIGlmIChpc0lPUykge1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChJT1NfQ0xBU1MpO1xuICB9XG5cbiAgaWYgKHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uRG9jdW1lbnRNb3VzZU1vdmUpO1xuICB9XG59XG52YXIgbGFzdE1vdXNlTW92ZVRpbWUgPSAwO1xuZnVuY3Rpb24gb25Eb2N1bWVudE1vdXNlTW92ZSgpIHtcbiAgdmFyIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpOyAvLyBDaHJvbWUgNjArIGlzIDEgbW91c2Vtb3ZlIHBlciBhbmltYXRpb24gZnJhbWUsIHVzZSAyMG1zIHRpbWUgZGlmZmVyZW5jZVxuXG4gIGlmIChub3cgLSBsYXN0TW91c2VNb3ZlVGltZSA8IDIwKSB7XG4gICAgaXNVc2luZ1RvdWNoID0gZmFsc2U7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Eb2N1bWVudE1vdXNlTW92ZSk7XG5cbiAgICBpZiAoIWlzSU9TKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoSU9TX0NMQVNTKTtcbiAgICB9XG4gIH1cblxuICBsYXN0TW91c2VNb3ZlVGltZSA9IG5vdztcbn1cbmZ1bmN0aW9uIG9uV2luZG93Qmx1cigpIHtcbiAgdmFyIF9kb2N1bWVudCA9IGRvY3VtZW50LFxuICAgICAgYWN0aXZlRWxlbWVudCA9IF9kb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG4gIGlmIChhY3RpdmVFbGVtZW50ICYmIGFjdGl2ZUVsZW1lbnQuYmx1ciAmJiBhY3RpdmVFbGVtZW50Ll90aXBweSkge1xuICAgIGFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICB9XG59XG4vKipcbiAqIEFkZHMgdGhlIG5lZWRlZCBnbG9iYWwgZXZlbnQgbGlzdGVuZXJzXG4gKi9cblxuZnVuY3Rpb24gYmluZEdsb2JhbEV2ZW50TGlzdGVuZXJzKCkge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Eb2N1bWVudFRvdWNoLCBQQVNTSVZFKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBvbldpbmRvd0JsdXIpO1xufVxuXG52YXIga2V5cyA9IE9iamVjdC5rZXlzKGRlZmF1bHRQcm9wcyk7XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIG9wdGlvbmFsIHByb3BzIGZyb20gZGF0YS10aXBweS0qIGF0dHJpYnV0ZXNcbiAqL1xuXG5mdW5jdGlvbiBnZXREYXRhQXR0cmlidXRlT3B0aW9ucyhyZWZlcmVuY2UpIHtcbiAgcmV0dXJuIGtleXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgIHZhciB2YWx1ZUFzU3RyaW5nID0gKHJlZmVyZW5jZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRpcHB5LVwiLmNvbmNhdChrZXkpKSB8fCAnJykudHJpbSgpO1xuXG4gICAgaWYgKCF2YWx1ZUFzU3RyaW5nKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdjb250ZW50Jykge1xuICAgICAgYWNjW2tleV0gPSB2YWx1ZUFzU3RyaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICBhY2Nba2V5XSA9IEpTT04ucGFyc2UodmFsdWVBc1N0cmluZyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGFjY1trZXldID0gdmFsdWVBc1N0cmluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG4vKipcbiAqIFBvbHlmaWxscyB0aGUgdmlydHVhbCByZWZlcmVuY2UgKHBsYWluIG9iamVjdCkgd2l0aCBFbGVtZW50LnByb3RvdHlwZSBwcm9wc1xuICogTXV0YXRpbmcgYmVjYXVzZSBET00gZWxlbWVudHMgYXJlIG11dGF0ZWQsIGFkZHMgYF90aXBweWAgcHJvcGVydHlcbiAqL1xuXG5mdW5jdGlvbiBwb2x5ZmlsbEVsZW1lbnRQcm90b3R5cGVQcm9wZXJ0aWVzKHZpcnR1YWxSZWZlcmVuY2UpIHtcbiAgdmFyIHBvbHlmaWxscyA9IHtcbiAgICBpc1ZpcnR1YWw6IHRydWUsXG4gICAgYXR0cmlidXRlczogdmlydHVhbFJlZmVyZW5jZS5hdHRyaWJ1dGVzIHx8IHt9LFxuICAgIGNvbnRhaW5zOiBmdW5jdGlvbiBjb250YWlucygpIHt9LFxuICAgIHNldEF0dHJpYnV0ZTogZnVuY3Rpb24gc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpIHtcbiAgICAgIHZpcnR1YWxSZWZlcmVuY2UuYXR0cmlidXRlc1trZXldID0gdmFsdWU7XG4gICAgfSxcbiAgICBnZXRBdHRyaWJ1dGU6IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZShrZXkpIHtcbiAgICAgIHJldHVybiB2aXJ0dWFsUmVmZXJlbmNlLmF0dHJpYnV0ZXNba2V5XTtcbiAgICB9LFxuICAgIHJlbW92ZUF0dHJpYnV0ZTogZnVuY3Rpb24gcmVtb3ZlQXR0cmlidXRlKGtleSkge1xuICAgICAgZGVsZXRlIHZpcnR1YWxSZWZlcmVuY2UuYXR0cmlidXRlc1trZXldO1xuICAgIH0sXG4gICAgaGFzQXR0cmlidXRlOiBmdW5jdGlvbiBoYXNBdHRyaWJ1dGUoa2V5KSB7XG4gICAgICByZXR1cm4ga2V5IGluIHZpcnR1YWxSZWZlcmVuY2UuYXR0cmlidXRlcztcbiAgICB9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gICAgY2xhc3NMaXN0OiB7XG4gICAgICBjbGFzc05hbWVzOiB7fSxcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKGtleSkge1xuICAgICAgICB2aXJ0dWFsUmVmZXJlbmNlLmNsYXNzTGlzdC5jbGFzc05hbWVzW2tleV0gPSB0cnVlO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGtleSkge1xuICAgICAgICBkZWxldGUgdmlydHVhbFJlZmVyZW5jZS5jbGFzc0xpc3QuY2xhc3NOYW1lc1trZXldO1xuICAgICAgfSxcbiAgICAgIGNvbnRhaW5zOiBmdW5jdGlvbiBjb250YWlucyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleSBpbiB2aXJ0dWFsUmVmZXJlbmNlLmNsYXNzTGlzdC5jbGFzc05hbWVzO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcG9seWZpbGxzKSB7XG4gICAgdmlydHVhbFJlZmVyZW5jZVtrZXldID0gcG9seWZpbGxzW2tleV07XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSBcImJhcmVcIiB2aXJ0dWFsIGVsZW1lbnQgKGJlZm9yZSBtdXRhdGlvbnMgZG9uZVxuICogYnkgYHBvbHlmaWxsRWxlbWVudFByb3RvdHlwZVByb3BlcnRpZXMoKWApLiBKU0RPTSBlbGVtZW50cyBzaG93IHVwIGFzXG4gKiBbb2JqZWN0IE9iamVjdF0sIHdlIGNhbiBjaGVjayBpZiB0aGUgdmFsdWUgaXMgXCJlbGVtZW50LWxpa2VcIiBpZiBpdCBoYXNcbiAqIGBhZGRFdmVudExpc3RlbmVyYFxuICovXG5cbmZ1bmN0aW9uIGlzQmFyZVZpcnR1YWxFbGVtZW50KHZhbHVlKSB7XG4gIHJldHVybiB7fS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiYgIXZhbHVlLmFkZEV2ZW50TGlzdGVuZXI7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIHZhbHVlIGlzIGEgcmVmZXJlbmNlIGVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBpc1JlZmVyZW5jZUVsZW1lbnQodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUuX3RpcHB5ICYmICFtYXRjaGVzLmNhbGwodmFsdWUsIFBPUFBFUl9TRUxFQ1RPUik7XG59XG4vKipcbiAqIFNhZmUgLmhhc093blByb3BlcnR5IGNoZWNrLCBmb3IgcHJvdG90eXBlLWxlc3Mgb2JqZWN0c1xuICovXG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwga2V5KSB7XG4gIHJldHVybiB7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyBiYXNlZCBvbiB0aGUgdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiBnZXRBcnJheU9mRWxlbWVudHModmFsdWUpIHtcbiAgaWYgKGlzU2luZ3VsYXIodmFsdWUpKSB7XG4gICAgLy8gVE9ETzogVmlydHVhbFJlZmVyZW5jZSBpcyBub3QgY29tcGF0aWJsZSB0byB0eXBlIEVsZW1lbnRcbiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgfVxuXG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE5vZGVMaXN0KSB7XG4gICAgcmV0dXJuIGFycmF5RnJvbSh2YWx1ZSk7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBhcnJheUZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG4vKipcbiAqIFJldHVybnMgYSB2YWx1ZSBhdCBhIGdpdmVuIGluZGV4IGRlcGVuZGluZyBvbiBpZiBpdCdzIGFuIGFycmF5IG9yIG51bWJlclxuICovXG5cbmZ1bmN0aW9uIGdldFZhbHVlKHZhbHVlLCBpbmRleCwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHZhciB2ID0gdmFsdWVbaW5kZXhdO1xuICAgIHJldHVybiB2ID09IG51bGwgPyBkZWZhdWx0VmFsdWUgOiB2O1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBEZWJvdW5jZSB1dGlsaXR5XG4gKi9cblxuZnVuY3Rpb24gZGVib3VuY2UoZm4sIG1zKSB7XG4gIHZhciB0aW1lb3V0SWQ7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cztcblxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpOyAvLyBAdHMtaWdub3JlXG5cbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseShfdGhpcywgX2FyZ3VtZW50cyk7XG4gICAgfSwgbXMpO1xuICB9O1xufVxuLyoqXG4gKiBQcmV2ZW50cyBlcnJvcnMgZnJvbSBiZWluZyB0aHJvd24gd2hpbGUgYWNjZXNzaW5nIG5lc3RlZCBtb2RpZmllciBvYmplY3RzXG4gKiBpbiBgcG9wcGVyT3B0aW9uc2BcbiAqL1xuXG5mdW5jdGlvbiBnZXRNb2RpZmllcihvYmosIGtleSkge1xuICByZXR1cm4gb2JqICYmIG9iai5tb2RpZmllcnMgJiYgb2JqLm1vZGlmaWVyc1trZXldO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGFuIGFycmF5IG9yIHN0cmluZyBpbmNsdWRlcyBhIHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gaW5jbHVkZXMoYSwgYikge1xuICByZXR1cm4gYS5pbmRleE9mKGIpID4gLTE7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIHZhbHVlIGlzIGEgcmVhbCBlbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gaXNSZWFsRWxlbWVudCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBFbGVtZW50O1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSB2YWx1ZSBpcyBzaW5ndWxhci1saWtlXG4gKi9cblxuZnVuY3Rpb24gaXNTaW5ndWxhcih2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgaGFzT3duUHJvcGVydHkodmFsdWUsICdpc1ZpcnR1YWwnKSkgfHwgaXNSZWFsRWxlbWVudCh2YWx1ZSk7XG59XG4vKipcbiAqIEZpcmVmb3ggZXh0ZW5zaW9ucyBkb24ndCBhbGxvdyBzZXR0aW5nIC5pbm5lckhUTUwgZGlyZWN0bHksIHRoaXMgd2lsbCB0cmljayBpdFxuICovXG5cbmZ1bmN0aW9uIGlubmVySFRNTCgpIHtcbiAgcmV0dXJuICdpbm5lckhUTUwnO1xufVxuLyoqXG4gKiBFdmFsdWF0ZXMgYSBmdW5jdGlvbiBpZiBvbmUsIG9yIHJldHVybnMgdGhlIHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gaW52b2tlV2l0aEFyZ3NPclJldHVybih2YWx1ZSwgYXJncykge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nID8gdmFsdWUuYXBwbHkobnVsbCwgYXJncykgOiB2YWx1ZTtcbn1cbi8qKlxuICogU2V0cyBhIHBvcHBlckluc3RhbmNlIGBmbGlwYCBtb2RpZmllcidzIGVuYWJsZWQgc3RhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZXRGbGlwTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgdmFsdWUpIHtcbiAgbW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBtLm5hbWUgPT09ICdmbGlwJztcbiAgfSlbMF0uZW5hYmxlZCA9IHZhbHVlO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGFuIGVsZW1lbnQgY2FuIHJlY2VpdmUgZm9jdXNcbiAqIEFsd2F5cyByZXR1cm5zIHRydWUgZm9yIHZpcnR1YWwgb2JqZWN0c1xuICovXG5cbmZ1bmN0aW9uIGNhblJlY2VpdmVGb2N1cyhlbGVtZW50KSB7XG4gIHJldHVybiBpc1JlYWxFbGVtZW50KGVsZW1lbnQpID8gbWF0Y2hlcy5jYWxsKGVsZW1lbnQsICdhW2hyZWZdLGFyZWFbaHJlZl0sYnV0dG9uLGRldGFpbHMsaW5wdXQsdGV4dGFyZWEsc2VsZWN0LGlmcmFtZSxbdGFiaW5kZXhdJykgJiYgIWVsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIDogdHJ1ZTtcbn1cbi8qKlxuICogUmV0dXJucyBhIG5ldyBgZGl2YCBlbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gZGl2KCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG59XG4vKipcbiAqIEFwcGxpZXMgYSB0cmFuc2l0aW9uIGR1cmF0aW9uIHRvIGEgbGlzdCBvZiBlbGVtZW50c1xuICovXG5cbmZ1bmN0aW9uIHNldFRyYW5zaXRpb25EdXJhdGlvbihlbHMsIHZhbHVlKSB7XG4gIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCJcIi5jb25jYXQodmFsdWUsIFwibXNcIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogU2V0cyB0aGUgdmlzaWJpbGl0eSBzdGF0ZSB0byBlbGVtZW50cyBzbyB0aGV5IGNhbiBiZWdpbiB0byB0cmFuc2l0aW9uXG4gKi9cblxuZnVuY3Rpb24gc2V0VmlzaWJpbGl0eVN0YXRlKGVscywgc3RhdGUpIHtcbiAgZWxzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCBzdGF0ZSk7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogRXZhbHVhdGVzIHRoZSBwcm9wcyBvYmplY3QgYnkgbWVyZ2luZyBkYXRhIGF0dHJpYnV0ZXMgYW5kXG4gKiBkaXNhYmxpbmcgY29uZmxpY3Rpbmcgb3B0aW9ucyB3aGVyZSBuZWNlc3NhcnlcbiAqL1xuXG5mdW5jdGlvbiBldmFsdWF0ZVByb3BzKHJlZmVyZW5jZSwgcHJvcHMpIHtcbiAgdmFyIG91dCA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbnRlbnQ6IGludm9rZVdpdGhBcmdzT3JSZXR1cm4ocHJvcHMuY29udGVudCwgW3JlZmVyZW5jZV0pXG4gIH0sIHByb3BzLmlnbm9yZUF0dHJpYnV0ZXMgPyB7fSA6IGdldERhdGFBdHRyaWJ1dGVPcHRpb25zKHJlZmVyZW5jZSkpO1xuXG4gIGlmIChvdXQuYXJyb3cgfHwgaXNVQ0Jyb3dzZXIpIHtcbiAgICBvdXQuYW5pbWF0ZUZpbGwgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFZhbGlkYXRlcyBhbiBvYmplY3Qgb2Ygb3B0aW9ucyB3aXRoIHRoZSB2YWxpZCBkZWZhdWx0IHByb3BzIG9iamVjdFxuICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zLCBkZWZhdWx0UHJvcHMpIHtcbiAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShkZWZhdWx0UHJvcHMsIG9wdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlt0aXBweV06IGBcIi5jb25jYXQob3B0aW9uLCBcImAgaXMgbm90IGEgdmFsaWQgb3B0aW9uXCIpKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGlubmVySFRNTCBvZiBhbiBlbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gc2V0SW5uZXJIVE1MKGVsZW1lbnQsIGh0bWwpIHtcbiAgZWxlbWVudFtpbm5lckhUTUwoKV0gPSBpc1JlYWxFbGVtZW50KGh0bWwpID8gaHRtbFtpbm5lckhUTUwoKV0gOiBodG1sO1xufVxuLyoqXG4gKiBTZXRzIHRoZSBjb250ZW50IG9mIGEgdG9vbHRpcFxuICovXG5cbmZ1bmN0aW9uIHNldENvbnRlbnQoY29udGVudEVsLCBwcm9wcykge1xuICBpZiAoaXNSZWFsRWxlbWVudChwcm9wcy5jb250ZW50KSkge1xuICAgIHNldElubmVySFRNTChjb250ZW50RWwsICcnKTtcbiAgICBjb250ZW50RWwuYXBwZW5kQ2hpbGQocHJvcHMuY29udGVudCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3BzLmNvbnRlbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIga2V5ID0gcHJvcHMuYWxsb3dIVE1MID8gJ2lubmVySFRNTCcgOiAndGV4dENvbnRlbnQnO1xuICAgIGNvbnRlbnRFbFtrZXldID0gcHJvcHMuY29udGVudDtcbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjaGlsZCBlbGVtZW50cyBvZiBhIHBvcHBlciBlbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gZ2V0Q2hpbGRyZW4ocG9wcGVyKSB7XG4gIHJldHVybiB7XG4gICAgdG9vbHRpcDogcG9wcGVyLnF1ZXJ5U2VsZWN0b3IoVE9PTFRJUF9TRUxFQ1RPUiksXG4gICAgYmFja2Ryb3A6IHBvcHBlci5xdWVyeVNlbGVjdG9yKEJBQ0tEUk9QX1NFTEVDVE9SKSxcbiAgICBjb250ZW50OiBwb3BwZXIucXVlcnlTZWxlY3RvcihDT05URU5UX1NFTEVDVE9SKSxcbiAgICBhcnJvdzogcG9wcGVyLnF1ZXJ5U2VsZWN0b3IoQVJST1dfU0VMRUNUT1IpIHx8IHBvcHBlci5xdWVyeVNlbGVjdG9yKFJPVU5EX0FSUk9XX1NFTEVDVE9SKVxuICB9O1xufVxuLyoqXG4gKiBBZGRzIGBkYXRhLWluZXJ0aWFgIGF0dHJpYnV0ZVxuICovXG5cbmZ1bmN0aW9uIGFkZEluZXJ0aWEodG9vbHRpcCkge1xuICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1pbmVydGlhJywgJycpO1xufVxuLyoqXG4gKiBSZW1vdmVzIGBkYXRhLWluZXJ0aWFgIGF0dHJpYnV0ZVxuICovXG5cbmZ1bmN0aW9uIHJlbW92ZUluZXJ0aWEodG9vbHRpcCkge1xuICB0b29sdGlwLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1pbmVydGlhJyk7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyb3cgZWxlbWVudCBhbmQgcmV0dXJucyBpdFxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUFycm93RWxlbWVudChhcnJvd1R5cGUpIHtcbiAgdmFyIGFycm93ID0gZGl2KCk7XG5cbiAgaWYgKGFycm93VHlwZSA9PT0gJ3JvdW5kJykge1xuICAgIGFycm93LmNsYXNzTmFtZSA9IFJPVU5EX0FSUk9XX0NMQVNTO1xuICAgIHNldElubmVySFRNTChhcnJvdywgJzxzdmcgdmlld0JveD1cIjAgMCAxOCA3XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMCA3czIuMDIxLS4wMTUgNS4yNTMtNC4yMThDNi41ODQgMS4wNTEgNy43OTcuMDA3IDkgMGMxLjIwMy0uMDA3IDIuNDE2IDEuMDM1IDMuNzYxIDIuNzgyQzE2LjAxMiA3LjAwNSAxOCA3IDE4IDdIMHpcIi8+PC9zdmc+Jyk7XG4gIH0gZWxzZSB7XG4gICAgYXJyb3cuY2xhc3NOYW1lID0gQVJST1dfQ0xBU1M7XG4gIH1cblxuICByZXR1cm4gYXJyb3c7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBiYWNrZHJvcCBlbGVtZW50IGFuZCByZXR1cm5zIGl0XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlQmFja2Ryb3BFbGVtZW50KCkge1xuICB2YXIgYmFja2Ryb3AgPSBkaXYoKTtcbiAgYmFja2Ryb3AuY2xhc3NOYW1lID0gQkFDS0RST1BfQ0xBU1M7XG4gIGJhY2tkcm9wLnNldEF0dHJpYnV0ZSgnZGF0YS1zdGF0ZScsICdoaWRkZW4nKTtcbiAgcmV0dXJuIGJhY2tkcm9wO1xufVxuLyoqXG4gKiBBZGRzIGludGVyYWN0aXZlLXJlbGF0ZWQgYXR0cmlidXRlc1xuICovXG5cbmZ1bmN0aW9uIGFkZEludGVyYWN0aXZlKHBvcHBlciwgdG9vbHRpcCkge1xuICBwb3BwZXIuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1pbnRlcmFjdGl2ZScsICcnKTtcbn1cbi8qKlxuICogUmVtb3ZlcyBpbnRlcmFjdGl2ZS1yZWxhdGVkIGF0dHJpYnV0ZXNcbiAqL1xuXG5mdW5jdGlvbiByZW1vdmVJbnRlcmFjdGl2ZShwb3BwZXIsIHRvb2x0aXApIHtcbiAgcG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgdG9vbHRpcC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtaW50ZXJhY3RpdmUnKTtcbn1cbi8qKlxuICogQWRkL3JlbW92ZSB0cmFuc2l0aW9uZW5kIGxpc3RlbmVyIGZyb20gdG9vbHRpcFxuICovXG5cbmZ1bmN0aW9uIHVwZGF0ZVRyYW5zaXRpb25FbmRMaXN0ZW5lcih0b29sdGlwLCBhY3Rpb24sIGxpc3RlbmVyKSB7XG4gIC8vIFVDIEJyb3dzZXIgaGFzbid0IGFkb3B0ZWQgdGhlIGB0cmFuc2l0aW9uZW5kYCBldmVudCBkZXNwaXRlIHN1cHBvcnRpbmdcbiAgLy8gdW5wcmVmaXhlZCB0cmFuc2l0aW9ucy4uLlxuICB2YXIgZXZlbnROYW1lID0gaXNVQ0Jyb3dzZXIgJiYgZG9jdW1lbnQuYm9keS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgPyAnd2Via2l0VHJhbnNpdGlvbkVuZCcgOiAndHJhbnNpdGlvbmVuZCc7XG4gIHRvb2x0aXBbYWN0aW9uICsgJ0V2ZW50TGlzdGVuZXInXShldmVudE5hbWUsIGxpc3RlbmVyKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50LCBpZ25vcmluZyBzaGlmdGluZyAodG9wLXN0YXJ0LCBldGMpXG4gKi9cblxuZnVuY3Rpb24gZ2V0QmFzaWNQbGFjZW1lbnQocG9wcGVyKSB7XG4gIHZhciBmdWxsUGxhY2VtZW50ID0gcG9wcGVyLmdldEF0dHJpYnV0ZShQTEFDRU1FTlRfQVRUUklCVVRFKTtcbiAgcmV0dXJuIGZ1bGxQbGFjZW1lbnQgPyBmdWxsUGxhY2VtZW50LnNwbGl0KCctJylbMF0gOiAnJztcbn1cbi8qKlxuICogVHJpZ2dlcnMgcmVmbG93XG4gKi9cblxuZnVuY3Rpb24gcmVmbG93KHBvcHBlcikge1xuICB2b2lkIHBvcHBlci5vZmZzZXRIZWlnaHQ7XG59XG4vKipcbiAqIEFkZHMvcmVtb3ZlcyB0aGVtZSBmcm9tIHRvb2x0aXAncyBjbGFzc0xpc3RcbiAqL1xuXG5mdW5jdGlvbiB1cGRhdGVUaGVtZSh0b29sdGlwLCBhY3Rpb24sIHRoZW1lKSB7XG4gIHRoZW1lLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAodGhlbWVOYW1lKSB7XG4gICAgdG9vbHRpcC5jbGFzc0xpc3RbYWN0aW9uXSh0aGVtZU5hbWUgKyAnLXRoZW1lJyk7XG4gIH0pO1xufVxuLyoqXG4gKiBDb25zdHJ1Y3RzIHRoZSBwb3BwZXIgZWxlbWVudCBhbmQgcmV0dXJucyBpdFxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVBvcHBlckVsZW1lbnQoaWQsIHByb3BzKSB7XG4gIHZhciBwb3BwZXIgPSBkaXYoKTtcbiAgcG9wcGVyLmNsYXNzTmFtZSA9IFBPUFBFUl9DTEFTUztcbiAgcG9wcGVyLmlkID0gXCJ0aXBweS1cIi5jb25jYXQoaWQpO1xuICBwb3BwZXIuc3R5bGUuekluZGV4ID0gJycgKyBwcm9wcy56SW5kZXg7XG5cbiAgaWYgKHByb3BzLnJvbGUpIHtcbiAgICBwb3BwZXIuc2V0QXR0cmlidXRlKCdyb2xlJywgcHJvcHMucm9sZSk7XG4gIH1cblxuICB2YXIgdG9vbHRpcCA9IGRpdigpO1xuICB0b29sdGlwLmNsYXNzTmFtZSA9IFRPT0xUSVBfQ0xBU1M7XG4gIHRvb2x0aXAuc3R5bGUubWF4V2lkdGggPSBwcm9wcy5tYXhXaWR0aCArICh0eXBlb2YgcHJvcHMubWF4V2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnKTtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2l6ZScsIHByb3BzLnNpemUpO1xuICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1hbmltYXRpb24nLCBwcm9wcy5hbmltYXRpb24pO1xuICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1zdGF0ZScsICdoaWRkZW4nKTtcbiAgdXBkYXRlVGhlbWUodG9vbHRpcCwgJ2FkZCcsIHByb3BzLnRoZW1lKTtcbiAgdmFyIGNvbnRlbnQgPSBkaXYoKTtcbiAgY29udGVudC5jbGFzc05hbWUgPSBDT05URU5UX0NMQVNTO1xuICBjb250ZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zdGF0ZScsICdoaWRkZW4nKTtcblxuICBpZiAocHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICBhZGRJbnRlcmFjdGl2ZShwb3BwZXIsIHRvb2x0aXApO1xuICB9XG5cbiAgaWYgKHByb3BzLmFycm93KSB7XG4gICAgdG9vbHRpcC5hcHBlbmRDaGlsZChjcmVhdGVBcnJvd0VsZW1lbnQocHJvcHMuYXJyb3dUeXBlKSk7XG4gIH1cblxuICBpZiAocHJvcHMuYW5pbWF0ZUZpbGwpIHtcbiAgICB0b29sdGlwLmFwcGVuZENoaWxkKGNyZWF0ZUJhY2tkcm9wRWxlbWVudCgpKTtcbiAgICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1hbmltYXRlZmlsbCcsICcnKTtcbiAgfVxuXG4gIGlmIChwcm9wcy5pbmVydGlhKSB7XG4gICAgYWRkSW5lcnRpYSh0b29sdGlwKTtcbiAgfVxuXG4gIHNldENvbnRlbnQoY29udGVudCwgcHJvcHMpO1xuICB0b29sdGlwLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICBwb3BwZXIuYXBwZW5kQ2hpbGQodG9vbHRpcCk7XG4gIHJldHVybiBwb3BwZXI7XG59XG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvcHBlciBlbGVtZW50IGJhc2VkIG9uIHRoZSBuZXcgcHJvcHNcbiAqL1xuXG5mdW5jdGlvbiB1cGRhdGVQb3BwZXJFbGVtZW50KHBvcHBlciwgcHJldlByb3BzLCBuZXh0UHJvcHMpIHtcbiAgdmFyIF9nZXRDaGlsZHJlbiA9IGdldENoaWxkcmVuKHBvcHBlciksXG4gICAgICB0b29sdGlwID0gX2dldENoaWxkcmVuLnRvb2x0aXAsXG4gICAgICBjb250ZW50ID0gX2dldENoaWxkcmVuLmNvbnRlbnQsXG4gICAgICBiYWNrZHJvcCA9IF9nZXRDaGlsZHJlbi5iYWNrZHJvcCxcbiAgICAgIGFycm93ID0gX2dldENoaWxkcmVuLmFycm93O1xuXG4gIHBvcHBlci5zdHlsZS56SW5kZXggPSAnJyArIG5leHRQcm9wcy56SW5kZXg7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCBuZXh0UHJvcHMuc2l6ZSk7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWFuaW1hdGlvbicsIG5leHRQcm9wcy5hbmltYXRpb24pO1xuICB0b29sdGlwLnN0eWxlLm1heFdpZHRoID0gbmV4dFByb3BzLm1heFdpZHRoICsgKHR5cGVvZiBuZXh0UHJvcHMubWF4V2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnKTtcblxuICBpZiAobmV4dFByb3BzLnJvbGUpIHtcbiAgICBwb3BwZXIuc2V0QXR0cmlidXRlKCdyb2xlJywgbmV4dFByb3BzLnJvbGUpO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3JvbGUnKTtcbiAgfVxuXG4gIGlmIChwcmV2UHJvcHMuY29udGVudCAhPT0gbmV4dFByb3BzLmNvbnRlbnQpIHtcbiAgICBzZXRDb250ZW50KGNvbnRlbnQsIG5leHRQcm9wcyk7XG4gIH0gLy8gYW5pbWF0ZUZpbGxcblxuXG4gIGlmICghcHJldlByb3BzLmFuaW1hdGVGaWxsICYmIG5leHRQcm9wcy5hbmltYXRlRmlsbCkge1xuICAgIHRvb2x0aXAuYXBwZW5kQ2hpbGQoY3JlYXRlQmFja2Ryb3BFbGVtZW50KCkpO1xuICAgIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWFuaW1hdGVmaWxsJywgJycpO1xuICB9IGVsc2UgaWYgKHByZXZQcm9wcy5hbmltYXRlRmlsbCAmJiAhbmV4dFByb3BzLmFuaW1hdGVGaWxsKSB7XG4gICAgdG9vbHRpcC5yZW1vdmVDaGlsZChiYWNrZHJvcCk7XG4gICAgdG9vbHRpcC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0ZWZpbGwnKTtcbiAgfSAvLyBhcnJvd1xuXG5cbiAgaWYgKCFwcmV2UHJvcHMuYXJyb3cgJiYgbmV4dFByb3BzLmFycm93KSB7XG4gICAgdG9vbHRpcC5hcHBlbmRDaGlsZChjcmVhdGVBcnJvd0VsZW1lbnQobmV4dFByb3BzLmFycm93VHlwZSkpO1xuICB9IGVsc2UgaWYgKHByZXZQcm9wcy5hcnJvdyAmJiAhbmV4dFByb3BzLmFycm93KSB7XG4gICAgdG9vbHRpcC5yZW1vdmVDaGlsZChhcnJvdyk7XG4gIH0gLy8gYXJyb3dUeXBlXG5cblxuICBpZiAocHJldlByb3BzLmFycm93ICYmIG5leHRQcm9wcy5hcnJvdyAmJiBwcmV2UHJvcHMuYXJyb3dUeXBlICE9PSBuZXh0UHJvcHMuYXJyb3dUeXBlKSB7XG4gICAgdG9vbHRpcC5yZXBsYWNlQ2hpbGQoY3JlYXRlQXJyb3dFbGVtZW50KG5leHRQcm9wcy5hcnJvd1R5cGUpLCBhcnJvdyk7XG4gIH0gLy8gaW50ZXJhY3RpdmVcblxuXG4gIGlmICghcHJldlByb3BzLmludGVyYWN0aXZlICYmIG5leHRQcm9wcy5pbnRlcmFjdGl2ZSkge1xuICAgIGFkZEludGVyYWN0aXZlKHBvcHBlciwgdG9vbHRpcCk7XG4gIH0gZWxzZSBpZiAocHJldlByb3BzLmludGVyYWN0aXZlICYmICFuZXh0UHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICByZW1vdmVJbnRlcmFjdGl2ZShwb3BwZXIsIHRvb2x0aXApO1xuICB9IC8vIGluZXJ0aWFcblxuXG4gIGlmICghcHJldlByb3BzLmluZXJ0aWEgJiYgbmV4dFByb3BzLmluZXJ0aWEpIHtcbiAgICBhZGRJbmVydGlhKHRvb2x0aXApO1xuICB9IGVsc2UgaWYgKHByZXZQcm9wcy5pbmVydGlhICYmICFuZXh0UHJvcHMuaW5lcnRpYSkge1xuICAgIHJlbW92ZUluZXJ0aWEodG9vbHRpcCk7XG4gIH0gLy8gdGhlbWVcblxuXG4gIGlmIChwcmV2UHJvcHMudGhlbWUgIT09IG5leHRQcm9wcy50aGVtZSkge1xuICAgIHVwZGF0ZVRoZW1lKHRvb2x0aXAsICdyZW1vdmUnLCBwcmV2UHJvcHMudGhlbWUpO1xuICAgIHVwZGF0ZVRoZW1lKHRvb2x0aXAsICdhZGQnLCBuZXh0UHJvcHMudGhlbWUpO1xuICB9XG59XG4vKipcbiAqIEhpZGVzIGFsbCB2aXNpYmxlIHBvcHBlcnMgb24gdGhlIGRvY3VtZW50XG4gKi9cblxuZnVuY3Rpb24gaGlkZUFsbCgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgZXhjbHVkZWRSZWZlcmVuY2VPckluc3RhbmNlID0gX3JlZi5leGNsdWRlLFxuICAgICAgZHVyYXRpb24gPSBfcmVmLmR1cmF0aW9uO1xuXG4gIGFycmF5RnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFBPUFBFUl9TRUxFQ1RPUikpLmZvckVhY2goZnVuY3Rpb24gKHBvcHBlcikge1xuICAgIHZhciBpbnN0YW5jZSA9IHBvcHBlci5fdGlwcHk7XG5cbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIHZhciBpc0V4Y2x1ZGVkID0gZmFsc2U7XG5cbiAgICAgIGlmIChleGNsdWRlZFJlZmVyZW5jZU9ySW5zdGFuY2UpIHtcbiAgICAgICAgaXNFeGNsdWRlZCA9IGlzUmVmZXJlbmNlRWxlbWVudChleGNsdWRlZFJlZmVyZW5jZU9ySW5zdGFuY2UpID8gaW5zdGFuY2UucmVmZXJlbmNlID09PSBleGNsdWRlZFJlZmVyZW5jZU9ySW5zdGFuY2UgOiBwb3BwZXIgPT09IGV4Y2x1ZGVkUmVmZXJlbmNlT3JJbnN0YW5jZS5wb3BwZXI7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNFeGNsdWRlZCkge1xuICAgICAgICBpbnN0YW5jZS5oaWRlKGR1cmF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBtb3VzZSBjdXJzb3IgaXMgb3V0c2lkZSBvZiB0aGUgcG9wcGVyJ3MgaW50ZXJhY3RpdmUgYm9yZGVyXG4gKiByZWdpb25cbiAqL1xuXG5mdW5jdGlvbiBpc0N1cnNvck91dHNpZGVJbnRlcmFjdGl2ZUJvcmRlcihwb3BwZXJQbGFjZW1lbnQsIHBvcHBlclJlY3QsIGV2ZW50LCBwcm9wcykge1xuICBpZiAoIXBvcHBlclBsYWNlbWVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIHggPSBldmVudC5jbGllbnRYLFxuICAgICAgeSA9IGV2ZW50LmNsaWVudFk7XG4gIHZhciBpbnRlcmFjdGl2ZUJvcmRlciA9IHByb3BzLmludGVyYWN0aXZlQm9yZGVyLFxuICAgICAgZGlzdGFuY2UgPSBwcm9wcy5kaXN0YW5jZTtcbiAgdmFyIGV4Y2VlZHNUb3AgPSBwb3BwZXJSZWN0LnRvcCAtIHkgPiAocG9wcGVyUGxhY2VtZW50ID09PSAndG9wJyA/IGludGVyYWN0aXZlQm9yZGVyICsgZGlzdGFuY2UgOiBpbnRlcmFjdGl2ZUJvcmRlcik7XG4gIHZhciBleGNlZWRzQm90dG9tID0geSAtIHBvcHBlclJlY3QuYm90dG9tID4gKHBvcHBlclBsYWNlbWVudCA9PT0gJ2JvdHRvbScgPyBpbnRlcmFjdGl2ZUJvcmRlciArIGRpc3RhbmNlIDogaW50ZXJhY3RpdmVCb3JkZXIpO1xuICB2YXIgZXhjZWVkc0xlZnQgPSBwb3BwZXJSZWN0LmxlZnQgLSB4ID4gKHBvcHBlclBsYWNlbWVudCA9PT0gJ2xlZnQnID8gaW50ZXJhY3RpdmVCb3JkZXIgKyBkaXN0YW5jZSA6IGludGVyYWN0aXZlQm9yZGVyKTtcbiAgdmFyIGV4Y2VlZHNSaWdodCA9IHggLSBwb3BwZXJSZWN0LnJpZ2h0ID4gKHBvcHBlclBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IGludGVyYWN0aXZlQm9yZGVyICsgZGlzdGFuY2UgOiBpbnRlcmFjdGl2ZUJvcmRlcik7XG4gIHJldHVybiBleGNlZWRzVG9wIHx8IGV4Y2VlZHNCb3R0b20gfHwgZXhjZWVkc0xlZnQgfHwgZXhjZWVkc1JpZ2h0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkaXN0YW5jZSBvZmZzZXQsIHRha2luZyBpbnRvIGFjY291bnQgdGhlIGRlZmF1bHQgb2Zmc2V0IGR1ZSB0b1xuICogdGhlIHRyYW5zZm9ybTogdHJhbnNsYXRlKCkgcnVsZSAoMTBweCkgaW4gQ1NTXG4gKi9cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0RGlzdGFuY2VJblB4KGRpc3RhbmNlKSB7XG4gIHJldHVybiAtKGRpc3RhbmNlIC0gMTApICsgJ3B4Jztcbn1cblxudmFyIGlkQ291bnRlciA9IDE7XG4vKipcbiAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBUaXBweSBvYmplY3QuIFdlJ3JlIHVzaW5nIGEgY2xvc3VyZSBwYXR0ZXJuIGluc3RlYWQgb2ZcbiAqIGEgY2xhc3Mgc28gdGhhdCB0aGUgZXhwb3NlZCBvYmplY3QgQVBJIGlzIGNsZWFuIHdpdGhvdXQgcHJpdmF0ZSBtZW1iZXJzXG4gKiBwcmVmaXhlZCB3aXRoIGBfYC5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVUaXBweShyZWZlcmVuY2UsIGNvbGxlY3Rpb25Qcm9wcykge1xuICB2YXIgcHJvcHMgPSBldmFsdWF0ZVByb3BzKHJlZmVyZW5jZSwgY29sbGVjdGlvblByb3BzKTsgLy8gSWYgdGhlIHJlZmVyZW5jZSBzaG91bGRuJ3QgaGF2ZSBtdWx0aXBsZSB0aXBweXMsIHJldHVybiBudWxsIGVhcmx5XG5cbiAgaWYgKCFwcm9wcy5tdWx0aXBsZSAmJiByZWZlcmVuY2UuX3RpcHB5KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT0g8J+UkiBQcml2YXRlIG1lbWJlcnMg8J+UkiA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbiAgdmFyIGxhc3RUcmlnZ2VyRXZlbnRUeXBlO1xuICB2YXIgbGFzdE1vdXNlTW92ZUV2ZW50O1xuICB2YXIgc2hvd1RpbWVvdXRJZDtcbiAgdmFyIGhpZGVUaW1lb3V0SWQ7XG4gIHZhciBhbmltYXRpb25GcmFtZUlkO1xuICB2YXIgaXNTY2hlZHVsZWRUb1Nob3cgPSBmYWxzZTtcbiAgdmFyIGN1cnJlbnRQYXJlbnROb2RlO1xuICB2YXIgcHJldmlvdXNQbGFjZW1lbnQ7XG4gIHZhciB3YXNWaXNpYmxlRHVyaW5nUHJldmlvdXNVcGRhdGUgPSBmYWxzZTtcbiAgdmFyIGhhc01vdW50Q2FsbGJhY2tSdW4gPSBmYWxzZTtcbiAgdmFyIGN1cnJlbnRNb3VudENhbGxiYWNrO1xuICB2YXIgY3VycmVudFRyYW5zaXRpb25FbmRMaXN0ZW5lcjtcbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuICB2YXIgY3VycmVudENvbXB1dGVkUGFkZGluZztcbiAgdmFyIGRlYm91bmNlZE9uTW91c2VNb3ZlID0gcHJvcHMuaW50ZXJhY3RpdmVEZWJvdW5jZSA+IDAgPyBkZWJvdW5jZShvbk1vdXNlTW92ZSwgcHJvcHMuaW50ZXJhY3RpdmVEZWJvdW5jZSkgOiBvbk1vdXNlTW92ZTtcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT0g8J+UkSBQdWJsaWMgbWVtYmVycyDwn5SRID09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgdmFyIGlkID0gaWRDb3VudGVyKys7XG4gIHZhciBwb3BwZXIgPSBjcmVhdGVQb3BwZXJFbGVtZW50KGlkLCBwcm9wcyk7XG4gIHZhciBwb3BwZXJDaGlsZHJlbiA9IGdldENoaWxkcmVuKHBvcHBlcik7XG4gIHZhciBwb3BwZXJJbnN0YW5jZSA9IG51bGw7XG4gIHZhciBzdGF0ZSA9IHtcbiAgICAvLyBJcyB0aGUgaW5zdGFuY2UgY3VycmVudGx5IGVuYWJsZWQ/XG4gICAgaXNFbmFibGVkOiB0cnVlLFxuICAgIC8vIElzIHRoZSB0aXBweSBjdXJyZW50bHkgc2hvd2luZyBhbmQgbm90IHRyYW5zaXRpb25pbmcgb3V0P1xuICAgIGlzVmlzaWJsZTogZmFsc2UsXG4gICAgLy8gSGFzIHRoZSBpbnN0YW5jZSBiZWVuIGRlc3Ryb3llZD9cbiAgICBpc0Rlc3Ryb3llZDogZmFsc2UsXG4gICAgLy8gSXMgdGhlIHRpcHB5IGN1cnJlbnRseSBtb3VudGVkIHRvIHRoZSBET00/XG4gICAgaXNNb3VudGVkOiBmYWxzZSxcbiAgICAvLyBIYXMgdGhlIHRpcHB5IGZpbmlzaGVkIHRyYW5zaXRpb25pbmcgaW4/XG4gICAgaXNTaG93bjogZmFsc2VcbiAgfTtcbiAgdmFyIGluc3RhbmNlID0ge1xuICAgIC8vIHByb3BlcnRpZXNcbiAgICBpZDogaWQsXG4gICAgcmVmZXJlbmNlOiByZWZlcmVuY2UsXG4gICAgcG9wcGVyOiBwb3BwZXIsXG4gICAgcG9wcGVyQ2hpbGRyZW46IHBvcHBlckNoaWxkcmVuLFxuICAgIHBvcHBlckluc3RhbmNlOiBwb3BwZXJJbnN0YW5jZSxcbiAgICBwcm9wczogcHJvcHMsXG4gICAgc3RhdGU6IHN0YXRlLFxuICAgIC8vIG1ldGhvZHNcbiAgICBjbGVhckRlbGF5VGltZW91dHM6IGNsZWFyRGVsYXlUaW1lb3V0cyxcbiAgICBzZXQ6IHNldCxcbiAgICBzZXRDb250ZW50OiBzZXRDb250ZW50LFxuICAgIHNob3c6IHNob3csXG4gICAgaGlkZTogaGlkZSxcbiAgICBlbmFibGU6IGVuYWJsZSxcbiAgICBkaXNhYmxlOiBkaXNhYmxlLFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3lcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSBJbml0aWFsIGluc3RhbmNlIG11dGF0aW9ucyA9PT09PT09PT09PT09PT09PT09ICovXG5cbiAgfTtcbiAgcmVmZXJlbmNlLl90aXBweSA9IGluc3RhbmNlO1xuICBwb3BwZXIuX3RpcHB5ID0gaW5zdGFuY2U7XG4gIGFkZFRyaWdnZXJzVG9SZWZlcmVuY2UoKTtcblxuICBpZiAoIXByb3BzLmxhenkpIHtcbiAgICBjcmVhdGVQb3BwZXJJbnN0YW5jZSgpO1xuICB9XG5cbiAgaWYgKHByb3BzLnNob3dPbkluaXQpIHtcbiAgICBzY2hlZHVsZVNob3coKTtcbiAgfSAvLyBFbnN1cmUgdGhlIGV2ZW50IGxpc3RlbmVycyB0YXJnZXQgY2FuIHJlY2VpdmUgZm9jdXNcblxuXG4gIGlmIChwcm9wcy5hMTF5ICYmICFwcm9wcy50YXJnZXQgJiYgIWNhblJlY2VpdmVGb2N1cyhnZXRFdmVudExpc3RlbmVyc1RhcmdldCgpKSkge1xuICAgIGdldEV2ZW50TGlzdGVuZXJzVGFyZ2V0KCkuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICcwJyk7XG4gIH0gLy8gUHJldmVudCBhIHRpcHB5IHdpdGggYSBkZWxheSBmcm9tIGhpZGluZyBpZiB0aGUgY3Vyc29yIGxlZnQgdGhlbiByZXR1cm5lZFxuICAvLyBiZWZvcmUgaXQgc3RhcnRlZCBoaWRpbmdcblxuXG4gIHBvcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlICYmIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSAmJiBsYXN0VHJpZ2dlckV2ZW50VHlwZSA9PT0gJ21vdXNlZW50ZXInKSB7XG4gICAgICAvLyBXZSBkb24ndCB3YW50IHByb3BzLm9uVHJpZ2dlcigpIHRvIGJlIGNhbGxlZCBoZXJlLCBzaW5jZSB0aGUgYGV2ZW50YFxuICAgICAgLy8gb2JqZWN0IGlzIG5vdCByZWxhdGVkIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICAgICAgc2NoZWR1bGVTaG93KGV2ZW50LCB0cnVlKTtcbiAgICB9XG4gIH0pO1xuICBwb3BwZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgbGFzdFRyaWdnZXJFdmVudFR5cGUgPT09ICdtb3VzZWVudGVyJykge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZGVib3VuY2VkT25Nb3VzZU1vdmUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpbnN0YW5jZTtcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT0g8J+UkiBQcml2YXRlIG1ldGhvZHMg8J+UkiA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBmb2xsb3cgY3Vyc29yIGxpc3RlbmVyXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJlbW92ZUZvbGxvd0N1cnNvckxpc3RlbmVyKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHBvc2l0aW9uVmlydHVhbFJlZmVyZW5jZU5lYXJDdXJzb3IpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhbnMgdXAgb2xkIGxpc3RlbmVyc1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGNsZWFudXBPbGRNb3VzZUxpc3RlbmVycygpIHtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBzY2hlZHVsZUhpZGUpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGRlYm91bmNlZE9uTW91c2VNb3ZlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBjb3JyZWN0IHRhcmdldCB1c2VkIGZvciBldmVudCBsaXN0ZW5lcnNcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRFdmVudExpc3RlbmVyc1RhcmdldCgpIHtcbiAgICByZXR1cm4gaW5zdGFuY2UucHJvcHMudHJpZ2dlclRhcmdldCB8fCByZWZlcmVuY2U7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgdGhlIGRvY3VtZW50IGNsaWNrIGV2ZW50IGxpc3RlbmVyIGZvciB0aGUgaW5zdGFuY2VcbiAgICovXG5cblxuICBmdW5jdGlvbiBhZGREb2N1bWVudENsaWNrTGlzdGVuZXIoKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkRvY3VtZW50Q2xpY2ssIHRydWUpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBkb2N1bWVudCBjbGljayBldmVudCBsaXN0ZW5lciBmb3IgdGhlIGluc3RhbmNlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVtb3ZlRG9jdW1lbnRDbGlja0xpc3RlbmVyKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25Eb2N1bWVudENsaWNrLCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cmFuc2l0aW9uYWJsZSBpbm5lciBlbGVtZW50cyB1c2VkIGluIHNob3cvaGlkZSBtZXRob2RzXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbmFibGVFbGVtZW50cygpIHtcbiAgICByZXR1cm4gW2luc3RhbmNlLnBvcHBlckNoaWxkcmVuLnRvb2x0aXAsIGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLmJhY2tkcm9wLCBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi5jb250ZW50XTtcbiAgfVxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgaW5zdGFuY2UgaXMgaW4gYGZvbGxvd0N1cnNvcmAgbW9kZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkge1xuICAgIHJldHVybiBpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3IgJiYgIWlzVXNpbmdUb3VjaCAmJiBsYXN0VHJpZ2dlckV2ZW50VHlwZSAhPT0gJ2ZvY3VzJztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdG9vbHRpcCdzIHBvc2l0aW9uIG9uIGVhY2ggYW5pbWF0aW9uIGZyYW1lXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gbWFrZVN0aWNreSgpIHtcbiAgICBzZXRUcmFuc2l0aW9uRHVyYXRpb24oW3BvcHBlcl0sIGlzSUUgPyAwIDogaW5zdGFuY2UucHJvcHMudXBkYXRlRHVyYXRpb24pO1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5zY2hlZHVsZVVwZGF0ZSgpO1xuXG4gICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGVQb3NpdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRUcmFuc2l0aW9uRHVyYXRpb24oW3BvcHBlcl0sIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZVBvc2l0aW9uKCk7XG4gIH1cbiAgLyoqXG4gICAqIEludm9rZXMgYSBjYWxsYmFjayBvbmNlIHRoZSB0b29sdGlwIGhhcyBmdWxseSB0cmFuc2l0aW9uZWQgb3V0XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25UcmFuc2l0aW9uZWRPdXQoZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgb25UcmFuc2l0aW9uRW5kKGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSAmJiBjdXJyZW50UGFyZW50Tm9kZSAmJiBjdXJyZW50UGFyZW50Tm9kZS5jb250YWlucyhwb3BwZXIpKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludm9rZXMgYSBjYWxsYmFjayBvbmNlIHRoZSB0b29sdGlwIGhhcyBmdWxseSB0cmFuc2l0aW9uZWQgaW5cbiAgICovXG5cblxuICBmdW5jdGlvbiBvblRyYW5zaXRpb25lZEluKGR1cmF0aW9uLCBjYWxsYmFjaykge1xuICAgIG9uVHJhbnNpdGlvbkVuZChkdXJhdGlvbiwgY2FsbGJhY2spO1xuICB9XG4gIC8qKlxuICAgKiBJbnZva2VzIGEgY2FsbGJhY2sgb25jZSB0aGUgdG9vbHRpcCdzIENTUyB0cmFuc2l0aW9uIGVuZHNcbiAgICovXG5cblxuICBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoZHVyYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgdmFyIHRvb2x0aXAgPSBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi50b29sdGlwO1xuICAgIC8qKlxuICAgICAqIExpc3RlbmVyIGFkZGVkIGFzIHRoZSBgdHJhbnNpdGlvbmVuZGAgaGFuZGxlclxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRvb2x0aXApIHtcbiAgICAgICAgdXBkYXRlVHJhbnNpdGlvbkVuZExpc3RlbmVyKHRvb2x0aXAsICdyZW1vdmUnLCBsaXN0ZW5lcik7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSAvLyBNYWtlIGNhbGxiYWNrIHN5bmNocm9ub3VzIGlmIGR1cmF0aW9uIGlzIDBcbiAgICAvLyBgdHJhbnNpdGlvbmVuZGAgd29uJ3QgZmlyZSBvdGhlcndpc2VcblxuXG4gICAgaWYgKGR1cmF0aW9uID09PSAwKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICB1cGRhdGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIodG9vbHRpcCwgJ3JlbW92ZScsIGN1cnJlbnRUcmFuc2l0aW9uRW5kTGlzdGVuZXIpO1xuICAgIHVwZGF0ZVRyYW5zaXRpb25FbmRMaXN0ZW5lcih0b29sdGlwLCAnYWRkJywgbGlzdGVuZXIpO1xuICAgIGN1cnJlbnRUcmFuc2l0aW9uRW5kTGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0byB0aGUgcmVmZXJlbmNlIGFuZCBzdG9yZXMgaXQgaW4gYGxpc3RlbmVyc2BcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbihldmVudFR5cGUsIGhhbmRsZXIpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gICAgZ2V0RXZlbnRMaXN0ZW5lcnNUYXJnZXQoKS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgbGlzdGVuZXJzLnB1c2goe1xuICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGUsXG4gICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgcmVmZXJlbmNlIGJhc2VkIG9uIHRoZSBgdHJpZ2dlcmAgcHJvcFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGFkZFRyaWdnZXJzVG9SZWZlcmVuY2UoKSB7XG4gICAgaWYgKGluc3RhbmNlLnByb3BzLnRvdWNoSG9sZCAmJiAhaW5zdGFuY2UucHJvcHMudGFyZ2V0KSB7XG4gICAgICBvbigndG91Y2hzdGFydCcsIG9uVHJpZ2dlciwgUEFTU0lWRSk7XG4gICAgICBvbigndG91Y2hlbmQnLCBvbk1vdXNlTGVhdmUsIFBBU1NJVkUpO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnByb3BzLnRyaWdnZXIudHJpbSgpLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRUeXBlKSB7XG4gICAgICBpZiAoZXZlbnRUeXBlID09PSAnbWFudWFsJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIE5vbi1kZWxlZ2F0ZXNcblxuXG4gICAgICBpZiAoIWluc3RhbmNlLnByb3BzLnRhcmdldCkge1xuICAgICAgICBvbihldmVudFR5cGUsIG9uVHJpZ2dlcik7XG5cbiAgICAgICAgc3dpdGNoIChldmVudFR5cGUpIHtcbiAgICAgICAgICBjYXNlICdtb3VzZWVudGVyJzpcbiAgICAgICAgICAgIG9uKCdtb3VzZWxlYXZlJywgb25Nb3VzZUxlYXZlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnZm9jdXMnOlxuICAgICAgICAgICAgb24oaXNJRSA/ICdmb2N1c291dCcgOiAnYmx1cicsIG9uQmx1cik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRGVsZWdhdGVzXG4gICAgICAgIHN3aXRjaCAoZXZlbnRUeXBlKSB7XG4gICAgICAgICAgY2FzZSAnbW91c2VlbnRlcic6XG4gICAgICAgICAgICBvbignbW91c2VvdmVyJywgb25EZWxlZ2F0ZVNob3cpO1xuICAgICAgICAgICAgb24oJ21vdXNlb3V0Jywgb25EZWxlZ2F0ZUhpZGUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdmb2N1cyc6XG4gICAgICAgICAgICBvbignZm9jdXNpbicsIG9uRGVsZWdhdGVTaG93KTtcbiAgICAgICAgICAgIG9uKCdmb2N1c291dCcsIG9uRGVsZWdhdGVIaWRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnY2xpY2snOlxuICAgICAgICAgICAgb24oZXZlbnRUeXBlLCBvbkRlbGVnYXRlU2hvdyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSByZWZlcmVuY2VcbiAgICovXG5cblxuICBmdW5jdGlvbiByZW1vdmVUcmlnZ2Vyc0Zyb21SZWZlcmVuY2UoKSB7XG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBldmVudFR5cGUgPSBfcmVmLmV2ZW50VHlwZSxcbiAgICAgICAgICBoYW5kbGVyID0gX3JlZi5oYW5kbGVyLFxuICAgICAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gICAgICBnZXRFdmVudExpc3RlbmVyc1RhcmdldCgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgICBsaXN0ZW5lcnMgPSBbXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBjb3JyZWN0ZWQgcHJldmVudE92ZXJmbG93IHBhZGRpbmcgaWYgdGhlIGluc3RhbmNlIGhhcyBhbiBhcnJvd1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldENvcnJlY3RlZFBhZGRpbmcocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLnByb3BzLmFycm93ID8gY3VycmVudENvbXB1dGVkUGFkZGluZ1twbGFjZW1lbnRdICsgKGluc3RhbmNlLnByb3BzLmFycm93VHlwZSA9PT0gJ3JvdW5kJyA/IDE4IDogMTYpIDogY3VycmVudENvbXB1dGVkUGFkZGluZ1twbGFjZW1lbnRdO1xuICB9XG4gIC8qKlxuICAgKiBQb3NpdGlvbnMgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIG5lYXIgdGhlIGN1cnNvclxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uVmlydHVhbFJlZmVyZW5jZU5lYXJDdXJzb3IoZXZlbnQpIHtcbiAgICB2YXIgX2xhc3RNb3VzZU1vdmVFdmVudCA9IGxhc3RNb3VzZU1vdmVFdmVudCA9IGV2ZW50LFxuICAgICAgICBjbGllbnRYID0gX2xhc3RNb3VzZU1vdmVFdmVudC5jbGllbnRYLFxuICAgICAgICBjbGllbnRZID0gX2xhc3RNb3VzZU1vdmVFdmVudC5jbGllbnRZOyAvLyBHZXRzIHNldCBvbmNlIHBvcHBlckluc3RhbmNlIGBvbkNyZWF0ZWAgaGFzIGJlZW4gY2FsbGVkXG5cblxuICAgIGlmICghY3VycmVudENvbXB1dGVkUGFkZGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gcmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBmb2xsb3dDdXJzb3IgPSBpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3I7XG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IGZvbGxvd0N1cnNvciA9PT0gJ2hvcml6b250YWwnO1xuICAgIHZhciBpc1ZlcnRpY2FsID0gZm9sbG93Q3Vyc29yID09PSAndmVydGljYWwnOyAvLyBFbnN1cmUgdmlydHVhbCByZWZlcmVuY2UgaXMgcGFkZGVkIHRvIHByZXZlbnQgdG9vbHRpcCBmcm9tIG92ZXJmbG93aW5nLlxuICAgIC8vIFNlZW1zIHRvIGJlIGEgUG9wcGVyLmpzIGlzc3VlXG5cbiAgICB2YXIgcGxhY2VtZW50ID0gZ2V0QmFzaWNQbGFjZW1lbnQocG9wcGVyKTtcbiAgICB2YXIgaXNWZXJ0aWNhbFBsYWNlbWVudCA9IGluY2x1ZGVzKFsndG9wJywgJ2JvdHRvbSddLCBwbGFjZW1lbnQpO1xuICAgIHZhciBpc0hvcml6b250YWxQbGFjZW1lbnQgPSBpbmNsdWRlcyhbJ2xlZnQnLCAncmlnaHQnXSwgcGxhY2VtZW50KTtcblxuICAgIHZhciBwYWRkaW5nID0gX2V4dGVuZHMoe30sIGN1cnJlbnRDb21wdXRlZFBhZGRpbmcpO1xuXG4gICAgaWYgKGlzVmVydGljYWxQbGFjZW1lbnQpIHtcbiAgICAgIHBhZGRpbmcubGVmdCA9IGdldENvcnJlY3RlZFBhZGRpbmcoJ2xlZnQnKTtcbiAgICAgIHBhZGRpbmcucmlnaHQgPSBnZXRDb3JyZWN0ZWRQYWRkaW5nKCdyaWdodCcpO1xuICAgIH1cblxuICAgIGlmIChpc0hvcml6b250YWxQbGFjZW1lbnQpIHtcbiAgICAgIHBhZGRpbmcudG9wID0gZ2V0Q29ycmVjdGVkUGFkZGluZygndG9wJyk7XG4gICAgICBwYWRkaW5nLmJvdHRvbSA9IGdldENvcnJlY3RlZFBhZGRpbmcoJ2JvdHRvbScpO1xuICAgIH0gLy8gVE9ETzogUmVtb3ZlIHRoZSBmb2xsb3dpbmcgbGF0ZXIgaWYgUG9wcGVyLmpzIGNoYW5nZXMvZml4ZXMgdGhlXG4gICAgLy8gYmVoYXZpb3JcbiAgICAvLyBUb3AgLyBsZWZ0IGJvdW5kYXJ5XG5cblxuICAgIHZhciB4ID0gaXNWZXJ0aWNhbFBsYWNlbWVudCA/IE1hdGgubWF4KHBhZGRpbmcubGVmdCwgY2xpZW50WCkgOiBjbGllbnRYO1xuICAgIHZhciB5ID0gaXNIb3Jpem9udGFsUGxhY2VtZW50ID8gTWF0aC5tYXgocGFkZGluZy50b3AsIGNsaWVudFkpIDogY2xpZW50WTsgLy8gQm90dG9tIC8gcmlnaHQgYm91bmRhcnlcblxuICAgIGlmIChpc1ZlcnRpY2FsUGxhY2VtZW50ICYmIHggPiBwYWRkaW5nLnJpZ2h0KSB7XG4gICAgICB4ID0gTWF0aC5taW4oY2xpZW50WCwgd2luZG93LmlubmVyV2lkdGggLSBwYWRkaW5nLnJpZ2h0KTtcbiAgICB9XG5cbiAgICBpZiAoaXNIb3Jpem9udGFsUGxhY2VtZW50ICYmIHkgPiBwYWRkaW5nLmJvdHRvbSkge1xuICAgICAgeSA9IE1hdGgubWluKGNsaWVudFksIHdpbmRvdy5pbm5lckhlaWdodCAtIHBhZGRpbmcuYm90dG9tKTtcbiAgICB9IC8vIElmIHRoZSBpbnN0YW5jZSBpcyBpbnRlcmFjdGl2ZSwgYXZvaWQgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHVubGVzcyBpdCdzXG4gICAgLy8gb3ZlciB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcblxuXG4gICAgdmFyIGlzQ3Vyc29yT3ZlclJlZmVyZW5jZSA9IGNsb3Nlc3RDYWxsYmFjayhldmVudC50YXJnZXQsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIGVsID09PSByZWZlcmVuY2U7XG4gICAgfSk7XG5cbiAgICBpZiAoaXNDdXJzb3JPdmVyUmVmZXJlbmNlIHx8ICFpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSkge1xuICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UucmVmZXJlbmNlID0gX2V4dGVuZHMoe30sIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLnJlZmVyZW5jZSwge1xuICAgICAgICBnZXRCb3VuZGluZ0NsaWVudFJlY3Q6IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICB0b3A6IGlzSG9yaXpvbnRhbCA/IHJlY3QudG9wIDogeSxcbiAgICAgICAgICAgIGJvdHRvbTogaXNIb3Jpem9udGFsID8gcmVjdC5ib3R0b20gOiB5LFxuICAgICAgICAgICAgbGVmdDogaXNWZXJ0aWNhbCA/IHJlY3QubGVmdCA6IHgsXG4gICAgICAgICAgICByaWdodDogaXNWZXJ0aWNhbCA/IHJlY3QucmlnaHQgOiB4XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xpZW50V2lkdGg6IDAsXG4gICAgICAgIGNsaWVudEhlaWdodDogMFxuICAgICAgfSk7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgIH1cblxuICAgIGlmIChmb2xsb3dDdXJzb3IgPT09ICdpbml0aWFsJyAmJiBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJlbW92ZUZvbGxvd0N1cnNvckxpc3RlbmVyKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSB0aXBweSBpbnN0YW5jZSBmb3IgYSBkZWxlZ2F0ZSB3aGVuIGl0J3MgYmVlbiB0cmlnZ2VyZWRcbiAgICovXG5cblxuICBmdW5jdGlvbiBjcmVhdGVEZWxlZ2F0ZUNoaWxkVGlwcHkoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIHZhciB0YXJnZXRFbCA9IGNsb3Nlc3QoZXZlbnQudGFyZ2V0LCBpbnN0YW5jZS5wcm9wcy50YXJnZXQpO1xuXG4gICAgICBpZiAodGFyZ2V0RWwgJiYgIXRhcmdldEVsLl90aXBweSkge1xuICAgICAgICBjcmVhdGVUaXBweSh0YXJnZXRFbCwgX2V4dGVuZHMoe30sIGluc3RhbmNlLnByb3BzLCB7XG4gICAgICAgICAgY29udGVudDogaW52b2tlV2l0aEFyZ3NPclJldHVybihjb2xsZWN0aW9uUHJvcHMuY29udGVudCwgW3RhcmdldEVsXSksXG4gICAgICAgICAgYXBwZW5kVG86IGNvbGxlY3Rpb25Qcm9wcy5hcHBlbmRUbyxcbiAgICAgICAgICB0YXJnZXQ6ICcnLFxuICAgICAgICAgIHNob3dPbkluaXQ6IHRydWVcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXZlbnQgbGlzdGVuZXIgaW52b2tlZCB1cG9uIHRyaWdnZXJcbiAgICovXG5cblxuICBmdW5jdGlvbiBvblRyaWdnZXIoZXZlbnQpIHtcbiAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCB8fCBpc0V2ZW50TGlzdGVuZXJTdG9wcGVkKGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICBsYXN0VHJpZ2dlckV2ZW50VHlwZSA9IGV2ZW50LnR5cGU7XG5cbiAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQpIHtcbiAgICAgICAgbGFzdE1vdXNlTW92ZUV2ZW50ID0gZXZlbnQ7XG4gICAgICB9XG4gICAgfSAvLyBUb2dnbGUgc2hvdy9oaWRlIHdoZW4gY2xpY2tpbmcgY2xpY2stdHJpZ2dlcmVkIHRvb2x0aXBzXG5cblxuICAgIGlmIChldmVudC50eXBlID09PSAnY2xpY2snICYmIGluc3RhbmNlLnByb3BzLmhpZGVPbkNsaWNrICE9PSBmYWxzZSAmJiBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHNjaGVkdWxlSGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hlZHVsZVNob3coZXZlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXZlbnQgbGlzdGVuZXIgdXNlZCBmb3IgaW50ZXJhY3RpdmUgdG9vbHRpcHMgdG8gZGV0ZWN0IHdoZW4gdGhleSBzaG91bGRcbiAgICogaGlkZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgdmFyIGlzQ3Vyc29yT3ZlclBvcHBlciA9IGNsb3Nlc3QoZXZlbnQudGFyZ2V0LCBQT1BQRVJfU0VMRUNUT1IpID09PSBwb3BwZXI7XG4gICAgdmFyIGlzQ3Vyc29yT3ZlclJlZmVyZW5jZSA9IGNsb3Nlc3RDYWxsYmFjayhldmVudC50YXJnZXQsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIGVsID09PSByZWZlcmVuY2U7XG4gICAgfSk7XG5cbiAgICBpZiAoaXNDdXJzb3JPdmVyUG9wcGVyIHx8IGlzQ3Vyc29yT3ZlclJlZmVyZW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0N1cnNvck91dHNpZGVJbnRlcmFjdGl2ZUJvcmRlcihnZXRCYXNpY1BsYWNlbWVudChwb3BwZXIpLCBwb3BwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGV2ZW50LCBpbnN0YW5jZS5wcm9wcykpIHtcbiAgICAgIGNsZWFudXBPbGRNb3VzZUxpc3RlbmVycygpO1xuICAgICAgc2NoZWR1bGVIaWRlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFdmVudCBsaXN0ZW5lciBpbnZva2VkIHVwb24gbW91c2VsZWF2ZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uTW91c2VMZWF2ZShldmVudCkge1xuICAgIGlmIChpc0V2ZW50TGlzdGVuZXJTdG9wcGVkKGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSkge1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgc2NoZWR1bGVIaWRlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGRlYm91bmNlZE9uTW91c2VNb3ZlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY2hlZHVsZUhpZGUoKTtcbiAgfVxuICAvKipcbiAgICogRXZlbnQgbGlzdGVuZXIgaW52b2tlZCB1cG9uIGJsdXJcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbkJsdXIoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBnZXRFdmVudExpc3RlbmVyc1RhcmdldCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlICYmIGV2ZW50LnJlbGF0ZWRUYXJnZXQgJiYgcG9wcGVyLmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGVIaWRlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGludm9rZWQgd2hlbiBhIGNoaWxkIHRhcmdldCBpcyB0cmlnZ2VyZWRcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbkRlbGVnYXRlU2hvdyhldmVudCkge1xuICAgIGlmIChjbG9zZXN0KGV2ZW50LnRhcmdldCwgaW5zdGFuY2UucHJvcHMudGFyZ2V0KSkge1xuICAgICAgc2NoZWR1bGVTaG93KGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV2ZW50IGxpc3RlbmVyIGludm9rZWQgd2hlbiBhIGNoaWxkIHRhcmdldCBzaG91bGQgaGlkZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uRGVsZWdhdGVIaWRlKGV2ZW50KSB7XG4gICAgaWYgKGNsb3Nlc3QoZXZlbnQudGFyZ2V0LCBpbnN0YW5jZS5wcm9wcy50YXJnZXQpKSB7XG4gICAgICBzY2hlZHVsZUhpZGUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgYW4gZXZlbnQgbGlzdGVuZXIgc2hvdWxkIHN0b3AgZnVydGhlciBleGVjdXRpb24gZHVlIHRvIHRoZVxuICAgKiBgdG91Y2hIb2xkYCBvcHRpb25cbiAgICovXG5cblxuICBmdW5jdGlvbiBpc0V2ZW50TGlzdGVuZXJTdG9wcGVkKGV2ZW50KSB7XG4gICAgdmFyIHN1cHBvcnRzVG91Y2ggPSAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3c7XG4gICAgdmFyIGlzVG91Y2hFdmVudCA9IGluY2x1ZGVzKGV2ZW50LnR5cGUsICd0b3VjaCcpO1xuICAgIHZhciB0b3VjaEhvbGQgPSBpbnN0YW5jZS5wcm9wcy50b3VjaEhvbGQ7XG4gICAgcmV0dXJuIHN1cHBvcnRzVG91Y2ggJiYgaXNVc2luZ1RvdWNoICYmIHRvdWNoSG9sZCAmJiAhaXNUb3VjaEV2ZW50IHx8IGlzVXNpbmdUb3VjaCAmJiAhdG91Y2hIb2xkICYmIGlzVG91Y2hFdmVudDtcbiAgfVxuICAvKipcbiAgICogUnVucyB0aGUgbW91bnQgY2FsbGJhY2tcbiAgICovXG5cblxuICBmdW5jdGlvbiBydW5Nb3VudENhbGxiYWNrKCkge1xuICAgIGlmICghaGFzTW91bnRDYWxsYmFja1J1biAmJiBjdXJyZW50TW91bnRDYWxsYmFjaykge1xuICAgICAgaGFzTW91bnRDYWxsYmFja1J1biA9IHRydWU7XG4gICAgICByZWZsb3cocG9wcGVyKTtcbiAgICAgIGN1cnJlbnRNb3VudENhbGxiYWNrKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBwb3BwZXIgaW5zdGFuY2UgZm9yIHRoZSBpbnN0YW5jZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlckluc3RhbmNlKCkge1xuICAgIHZhciBwb3BwZXJPcHRpb25zID0gaW5zdGFuY2UucHJvcHMucG9wcGVyT3B0aW9ucztcbiAgICB2YXIgX2luc3RhbmNlJHBvcHBlckNoaWxkID0gaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4sXG4gICAgICAgIHRvb2x0aXAgPSBfaW5zdGFuY2UkcG9wcGVyQ2hpbGQudG9vbHRpcCxcbiAgICAgICAgYXJyb3cgPSBfaW5zdGFuY2UkcG9wcGVyQ2hpbGQuYXJyb3c7XG4gICAgdmFyIHByZXZlbnRPdmVyZmxvd01vZGlmaWVyID0gZ2V0TW9kaWZpZXIocG9wcGVyT3B0aW9ucywgJ3ByZXZlbnRPdmVyZmxvdycpO1xuXG4gICAgZnVuY3Rpb24gYXBwbHlNdXRhdGlvbnMoZGF0YSkge1xuICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmZsaXAgJiYgIWluc3RhbmNlLnByb3BzLmZsaXBPblVwZGF0ZSkge1xuICAgICAgICBpZiAoZGF0YS5mbGlwcGVkKSB7XG4gICAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uub3B0aW9ucy5wbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldEZsaXBNb2RpZmllckVuYWJsZWQoaW5zdGFuY2UucG9wcGVySW5zdGFuY2UubW9kaWZpZXJzLCBmYWxzZSk7XG4gICAgICB9IC8vIEFwcGx5IGFsbCBvZiB0aGUgcG9wcGVyJ3MgYXR0cmlidXRlcyB0byB0aGUgdG9vdGlwIG5vZGUgYXMgd2VsbC5cbiAgICAgIC8vIEFsbG93cyB1c2VycyB0byBhdm9pZCB1c2luZyB0aGUgLnRpcHB5LXBvcHBlciBzZWxlY3RvciBmb3IgdGhlbWVzLlxuXG5cbiAgICAgIHRvb2x0aXAuc2V0QXR0cmlidXRlKFBMQUNFTUVOVF9BVFRSSUJVVEUsIGRhdGEucGxhY2VtZW50KTtcblxuICAgICAgaWYgKGRhdGEuYXR0cmlidXRlc1tPVVRfT0ZfQk9VTkRBUklFU19BVFRSSUJVVEVdICE9PSBmYWxzZSkge1xuICAgICAgICB0b29sdGlwLnNldEF0dHJpYnV0ZShPVVRfT0ZfQk9VTkRBUklFU19BVFRSSUJVVEUsICcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvb2x0aXAucmVtb3ZlQXR0cmlidXRlKE9VVF9PRl9CT1VOREFSSUVTX0FUVFJJQlVURSk7XG4gICAgICB9IC8vIFByZXZlbnRzIGEgdHJhbnNpdGlvbiB3aGVuIGNoYW5naW5nIHBsYWNlbWVudHMgKHdoaWxlIHRpcHB5IGlzIHZpc2libGUpXG4gICAgICAvLyBmb3Igc2Nyb2xsL3Jlc2l6ZSB1cGRhdGVzXG5cblxuICAgICAgaWYgKHByZXZpb3VzUGxhY2VtZW50ICYmIHByZXZpb3VzUGxhY2VtZW50ICE9PSBkYXRhLnBsYWNlbWVudCAmJiB3YXNWaXNpYmxlRHVyaW5nUHJldmlvdXNVcGRhdGUpIHtcbiAgICAgICAgdG9vbHRpcC5zdHlsZS50cmFuc2l0aW9uID0gJ25vbmUnO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRvb2x0aXAuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcHJldmlvdXNQbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgICAgIHdhc1Zpc2libGVEdXJpbmdQcmV2aW91c1VwZGF0ZSA9IGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZTtcbiAgICAgIHZhciBiYXNpY1BsYWNlbWVudCA9IGdldEJhc2ljUGxhY2VtZW50KHBvcHBlcik7XG4gICAgICB2YXIgc3R5bGVzID0gdG9vbHRpcC5zdHlsZTsgLy8gQWNjb3VudCBmb3IgdGhlIGBkaXN0YW5jZWAgb2Zmc2V0XG5cbiAgICAgIHN0eWxlcy50b3AgPSBzdHlsZXMuYm90dG9tID0gc3R5bGVzLmxlZnQgPSBzdHlsZXMucmlnaHQgPSAnJztcbiAgICAgIHN0eWxlc1tiYXNpY1BsYWNlbWVudF0gPSBnZXRPZmZzZXREaXN0YW5jZUluUHgoaW5zdGFuY2UucHJvcHMuZGlzdGFuY2UpO1xuICAgICAgdmFyIHBhZGRpbmcgPSBwcmV2ZW50T3ZlcmZsb3dNb2RpZmllciAmJiBwcmV2ZW50T3ZlcmZsb3dNb2RpZmllci5wYWRkaW5nICE9PSB1bmRlZmluZWQgPyBwcmV2ZW50T3ZlcmZsb3dNb2RpZmllci5wYWRkaW5nIDogUEFERElORztcbiAgICAgIHZhciBpc1BhZGRpbmdOdW1iZXIgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ251bWJlcic7XG5cbiAgICAgIHZhciBjb21wdXRlZFBhZGRpbmcgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHRvcDogaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcudG9wLFxuICAgICAgICBib3R0b206IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmJvdHRvbSxcbiAgICAgICAgbGVmdDogaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcubGVmdCxcbiAgICAgICAgcmlnaHQ6IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnJpZ2h0XG4gICAgICB9LCAhaXNQYWRkaW5nTnVtYmVyICYmIHBhZGRpbmcpO1xuXG4gICAgICBjb21wdXRlZFBhZGRpbmdbYmFzaWNQbGFjZW1lbnRdID0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyArIGluc3RhbmNlLnByb3BzLmRpc3RhbmNlIDogKHBhZGRpbmdbYmFzaWNQbGFjZW1lbnRdIHx8IDApICsgaW5zdGFuY2UucHJvcHMuZGlzdGFuY2U7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5tb2RpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHJldHVybiBtLm5hbWUgPT09ICdwcmV2ZW50T3ZlcmZsb3cnO1xuICAgICAgfSlbMF0ucGFkZGluZyA9IGNvbXB1dGVkUGFkZGluZztcbiAgICAgIGN1cnJlbnRDb21wdXRlZFBhZGRpbmcgPSBjb21wdXRlZFBhZGRpbmc7XG4gICAgfVxuXG4gICAgdmFyIGNvbmZpZyA9IF9leHRlbmRzKHtcbiAgICAgIGV2ZW50c0VuYWJsZWQ6IGZhbHNlLFxuICAgICAgcGxhY2VtZW50OiBpbnN0YW5jZS5wcm9wcy5wbGFjZW1lbnRcbiAgICB9LCBwb3BwZXJPcHRpb25zLCB7XG4gICAgICBtb2RpZmllcnM6IF9leHRlbmRzKHt9LCBwb3BwZXJPcHRpb25zID8gcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMgOiB7fSwge1xuICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IF9leHRlbmRzKHtcbiAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogaW5zdGFuY2UucHJvcHMuYm91bmRhcnksXG4gICAgICAgICAgcGFkZGluZzogUEFERElOR1xuICAgICAgICB9LCBwcmV2ZW50T3ZlcmZsb3dNb2RpZmllciksXG4gICAgICAgIGFycm93OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgZWxlbWVudDogYXJyb3csXG4gICAgICAgICAgZW5hYmxlZDogISFhcnJvd1xuICAgICAgICB9LCBnZXRNb2RpZmllcihwb3BwZXJPcHRpb25zLCAnYXJyb3cnKSksXG4gICAgICAgIGZsaXA6IF9leHRlbmRzKHtcbiAgICAgICAgICBlbmFibGVkOiBpbnN0YW5jZS5wcm9wcy5mbGlwLFxuICAgICAgICAgIC8vIFRoZSB0b29sdGlwIGlzIG9mZnNldCBieSAxMHB4IGZyb20gdGhlIHBvcHBlciBpbiBDU1MsXG4gICAgICAgICAgLy8gd2UgbmVlZCB0byBhY2NvdW50IGZvciBpdHMgZGlzdGFuY2VcbiAgICAgICAgICBwYWRkaW5nOiBpbnN0YW5jZS5wcm9wcy5kaXN0YW5jZSArIFBBRERJTkcsXG4gICAgICAgICAgYmVoYXZpb3I6IGluc3RhbmNlLnByb3BzLmZsaXBCZWhhdmlvclxuICAgICAgICB9LCBnZXRNb2RpZmllcihwb3BwZXJPcHRpb25zLCAnZmxpcCcpKSxcbiAgICAgICAgb2Zmc2V0OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgb2Zmc2V0OiBpbnN0YW5jZS5wcm9wcy5vZmZzZXRcbiAgICAgICAgfSwgZ2V0TW9kaWZpZXIocG9wcGVyT3B0aW9ucywgJ29mZnNldCcpKVxuICAgICAgfSksXG4gICAgICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoZGF0YSkge1xuICAgICAgICBydW5Nb3VudENhbGxiYWNrKCk7XG4gICAgICAgIGFwcGx5TXV0YXRpb25zKGRhdGEpO1xuXG4gICAgICAgIGlmIChwb3BwZXJPcHRpb25zICYmIHBvcHBlck9wdGlvbnMub25DcmVhdGUpIHtcbiAgICAgICAgICBwb3BwZXJPcHRpb25zLm9uQ3JlYXRlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEpIHtcbiAgICAgICAgcnVuTW91bnRDYWxsYmFjaygpO1xuICAgICAgICBhcHBseU11dGF0aW9ucyhkYXRhKTtcblxuICAgICAgICBpZiAocG9wcGVyT3B0aW9ucyAmJiBwb3BwZXJPcHRpb25zLm9uVXBkYXRlKSB7XG4gICAgICAgICAgcG9wcGVyT3B0aW9ucy5vblVwZGF0ZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UgPSBuZXcgUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyLCBjb25maWcpO1xuICB9XG4gIC8qKlxuICAgKiBNb3VudHMgdGhlIHRvb2x0aXAgdG8gdGhlIERPTVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGhhc01vdW50Q2FsbGJhY2tSdW4gPSBmYWxzZTtcbiAgICB2YXIgc2hvdWxkRW5hYmxlTGlzdGVuZXJzID0gIWhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkgJiYgIShpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3IgPT09ICdpbml0aWFsJyAmJiBpc1VzaW5nVG91Y2gpO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgY3JlYXRlUG9wcGVySW5zdGFuY2UoKTtcblxuICAgICAgaWYgKHNob3VsZEVuYWJsZUxpc3RlbmVycykge1xuICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkpIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uuc2NoZWR1bGVVcGRhdGUoKTtcblxuICAgICAgICBpZiAoc2hvdWxkRW5hYmxlTGlzdGVuZXJzKSB7XG4gICAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZXRGbGlwTW9kaWZpZXJFbmFibGVkKGluc3RhbmNlLnBvcHBlckluc3RhbmNlLm1vZGlmaWVycywgaW5zdGFuY2UucHJvcHMuZmxpcCk7XG4gICAgfSAvLyBJZiB0aGUgaW5zdGFuY2UgcHJldmlvdXNseSBoYWQgZm9sbG93Q3Vyc29yIGJlaGF2aW9yLCBpdCB3aWxsIGJlXG4gICAgLy8gcG9zaXRpb25lZCBpbmNvcnJlY3RseSBpZiB0cmlnZ2VyZWQgYnkgYGZvY3VzYCBhZnRlcndhcmRzLlxuICAgIC8vIFVwZGF0ZSB0aGUgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIHJlYWwgRE9NIGVsZW1lbnRcblxuXG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UucmVmZXJlbmNlID0gcmVmZXJlbmNlO1xuICAgIHZhciBhcnJvdyA9IGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLmFycm93O1xuXG4gICAgaWYgKGhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkpIHtcbiAgICAgIGlmIChhcnJvdykge1xuICAgICAgICBhcnJvdy5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gICAgICB9XG5cbiAgICAgIGlmIChsYXN0TW91c2VNb3ZlRXZlbnQpIHtcbiAgICAgICAgcG9zaXRpb25WaXJ0dWFsUmVmZXJlbmNlTmVhckN1cnNvcihsYXN0TW91c2VNb3ZlRXZlbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXJyb3cpIHtcbiAgICAgIGFycm93LnN0eWxlLm1hcmdpbiA9ICcnO1xuICAgIH0gLy8gQWxsb3cgZm9sbG93Q3Vyc29yOiAnaW5pdGlhbCcgb24gdG91Y2ggZGV2aWNlc1xuXG5cbiAgICBpZiAoaXNVc2luZ1RvdWNoICYmIGxhc3RNb3VzZU1vdmVFdmVudCAmJiBpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3IgPT09ICdpbml0aWFsJykge1xuICAgICAgcG9zaXRpb25WaXJ0dWFsUmVmZXJlbmNlTmVhckN1cnNvcihsYXN0TW91c2VNb3ZlRXZlbnQpO1xuXG4gICAgICBpZiAoYXJyb3cpIHtcbiAgICAgICAgYXJyb3cuc3R5bGUubWFyZ2luID0gJzAnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhcHBlbmRUbyA9IGluc3RhbmNlLnByb3BzLmFwcGVuZFRvO1xuICAgIGN1cnJlbnRQYXJlbnROb2RlID0gYXBwZW5kVG8gPT09ICdwYXJlbnQnID8gcmVmZXJlbmNlLnBhcmVudE5vZGUgOiBpbnZva2VXaXRoQXJnc09yUmV0dXJuKGFwcGVuZFRvLCBbcmVmZXJlbmNlXSk7XG5cbiAgICBpZiAoIWN1cnJlbnRQYXJlbnROb2RlLmNvbnRhaW5zKHBvcHBlcikpIHtcbiAgICAgIGN1cnJlbnRQYXJlbnROb2RlLmFwcGVuZENoaWxkKHBvcHBlcik7XG4gICAgICBpbnN0YW5jZS5wcm9wcy5vbk1vdW50KGluc3RhbmNlKTtcbiAgICAgIGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTZXR1cCBiZWZvcmUgc2hvdygpIGlzIGludm9rZWQgKGRlbGF5cywgZXRjLilcbiAgICovXG5cblxuICBmdW5jdGlvbiBzY2hlZHVsZVNob3coZXZlbnQsIHNob3VsZEF2b2lkQ2FsbGluZ09uVHJpZ2dlcikge1xuICAgIGNsZWFyRGVsYXlUaW1lb3V0cygpO1xuXG4gICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gSXMgYSBkZWxlZ2F0ZSwgY3JlYXRlIGFuIGluc3RhbmNlIGZvciB0aGUgY2hpbGQgdGFyZ2V0XG5cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy50YXJnZXQpIHtcbiAgICAgIHJldHVybiBjcmVhdGVEZWxlZ2F0ZUNoaWxkVGlwcHkoZXZlbnQpO1xuICAgIH1cblxuICAgIGlzU2NoZWR1bGVkVG9TaG93ID0gdHJ1ZTtcblxuICAgIGlmIChldmVudCAmJiAhc2hvdWxkQXZvaWRDYWxsaW5nT25UcmlnZ2VyKSB7XG4gICAgICBpbnN0YW5jZS5wcm9wcy5vblRyaWdnZXIoaW5zdGFuY2UsIGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMud2FpdCkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlLnByb3BzLndhaXQoaW5zdGFuY2UsIGV2ZW50KTtcbiAgICB9IC8vIElmIHRoZSB0b29sdGlwIGhhcyBhIGRlbGF5LCB3ZSBuZWVkIHRvIGJlIGxpc3RlbmluZyB0byB0aGUgbW91c2Vtb3ZlIGFzXG4gICAgLy8gc29vbiBhcyB0aGUgdHJpZ2dlciBldmVudCBpcyBmaXJlZCwgc28gdGhhdCBpdCdzIGluIHRoZSBjb3JyZWN0IHBvc2l0aW9uXG4gICAgLy8gdXBvbiBtb3VudC5cbiAgICAvLyBFZGdlIGNhc2U6IGlmIHRoZSB0b29sdGlwIGlzIHN0aWxsIG1vdW50ZWQsIGJ1dCB0aGVuIHNjaGVkdWxlU2hvdygpIGlzXG4gICAgLy8gY2FsbGVkLCBpdCBjYXVzZXMgYSBqdW1wLlxuXG5cbiAgICBpZiAoaGFzRm9sbG93Q3Vyc29yQmVoYXZpb3IoKSAmJiAhaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICBpZiAoIWluc3RhbmNlLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICAgIGNyZWF0ZVBvcHBlckluc3RhbmNlKCk7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHBvc2l0aW9uVmlydHVhbFJlZmVyZW5jZU5lYXJDdXJzb3IpO1xuICAgIH1cblxuICAgIGFkZERvY3VtZW50Q2xpY2tMaXN0ZW5lcigpO1xuICAgIHZhciBkZWxheSA9IGdldFZhbHVlKGluc3RhbmNlLnByb3BzLmRlbGF5LCAwLCBkZWZhdWx0UHJvcHMuZGVsYXkpO1xuXG4gICAgaWYgKGRlbGF5KSB7XG4gICAgICBzaG93VGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNob3coKTtcbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdygpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0dXAgYmVmb3JlIGhpZGUoKSBpcyBpbnZva2VkIChkZWxheXMsIGV0Yy4pXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVIaWRlKCkge1xuICAgIGNsZWFyRGVsYXlUaW1lb3V0cygpO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybiByZW1vdmVGb2xsb3dDdXJzb3JMaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIGlzU2NoZWR1bGVkVG9TaG93ID0gZmFsc2U7XG4gICAgdmFyIGRlbGF5ID0gZ2V0VmFsdWUoaW5zdGFuY2UucHJvcHMuZGVsYXksIDEsIGRlZmF1bHRQcm9wcy5kZWxheSk7XG5cbiAgICBpZiAoZGVsYXkpIHtcbiAgICAgIGhpZGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGaXhlcyBhIGB0cmFuc2l0aW9uZW5kYCBwcm9ibGVtIHdoZW4gaXQgZmlyZXMgMSBmcmFtZSB0b29cbiAgICAgIC8vIGxhdGUgc29tZXRpbWVzLCB3ZSBkb24ndCB3YW50IGhpZGUoKSB0byBiZSBjYWxsZWQuXG4gICAgICBhbmltYXRpb25GcmFtZUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaGlkZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBMaXN0ZW5lciB0byBoYW5kbGUgY2xpY2tzIG9uIHRoZSBkb2N1bWVudCB0byBkZXRlcm1pbmUgaWYgdGhlXG4gICAqIGluc3RhbmNlIHNob3VsZCBoaWRlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25Eb2N1bWVudENsaWNrKGV2ZW50KSB7XG4gICAgLy8gQ2xpY2tlZCBvbiBpbnRlcmFjdGl2ZSBwb3BwZXJcbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgcG9wcGVyLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENsaWNrZWQgb24gdGhlIGV2ZW50IGxpc3RlbmVycyB0YXJnZXRcblxuXG4gICAgaWYgKGdldEV2ZW50TGlzdGVuZXJzVGFyZ2V0KCkuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgaWYgKGlzVXNpbmdUb3VjaCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgJiYgaW5jbHVkZXMoaW5zdGFuY2UucHJvcHMudHJpZ2dlciwgJ2NsaWNrJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5oaWRlT25DbGljayA9PT0gdHJ1ZSkge1xuICAgICAgY2xlYXJEZWxheVRpbWVvdXRzKCk7XG4gICAgICBoaWRlKCk7XG4gICAgfVxuICB9XG4gIC8qID09PT09PT09PT09PT09PT09PT09PT09IPCflJEgUHVibGljIG1ldGhvZHMg8J+UkSA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gIC8qKlxuICAgKiBFbmFibGVzIHRoZSBpbnN0YW5jZSB0byBhbGxvdyBpdCB0byBzaG93IG9yIGhpZGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIGluc3RhbmNlIHRvIGRpc2FsbG93IGl0IHRvIHNob3cgb3IgaGlkZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFycyBwZW5kaW5nIHRpbWVvdXRzIHJlbGF0ZWQgdG8gdGhlIGBkZWxheWAgcHJvcCBpZiBhbnlcbiAgICovXG5cblxuICBmdW5jdGlvbiBjbGVhckRlbGF5VGltZW91dHMoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHNob3dUaW1lb3V0SWQpO1xuICAgIGNsZWFyVGltZW91dChoaWRlVGltZW91dElkKTtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZUlkKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyBuZXcgcHJvcHMgZm9yIHRoZSBpbnN0YW5jZSBhbmQgcmVkcmF3cyB0aGUgdG9vbHRpcFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHNldChvcHRpb25zKSB7XG4gICAgLy8gQmFja3dhcmRzLWNvbXBhdGlibGUgYWZ0ZXIgVHlwZVNjcmlwdCBjaGFuZ2VcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YWxpZGF0ZU9wdGlvbnMob3B0aW9ucywgZGVmYXVsdFByb3BzKTtcbiAgICByZW1vdmVUcmlnZ2Vyc0Zyb21SZWZlcmVuY2UoKTtcbiAgICB2YXIgcHJldlByb3BzID0gaW5zdGFuY2UucHJvcHM7XG4gICAgdmFyIG5leHRQcm9wcyA9IGV2YWx1YXRlUHJvcHMocmVmZXJlbmNlLCBfZXh0ZW5kcyh7fSwgaW5zdGFuY2UucHJvcHMsIG9wdGlvbnMsIHtcbiAgICAgIGlnbm9yZUF0dHJpYnV0ZXM6IHRydWVcbiAgICB9KSk7XG4gICAgbmV4dFByb3BzLmlnbm9yZUF0dHJpYnV0ZXMgPSBoYXNPd25Qcm9wZXJ0eShvcHRpb25zLCAnaWdub3JlQXR0cmlidXRlcycpID8gb3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzIHx8IGZhbHNlIDogcHJldlByb3BzLmlnbm9yZUF0dHJpYnV0ZXM7XG4gICAgaW5zdGFuY2UucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgYWRkVHJpZ2dlcnNUb1JlZmVyZW5jZSgpO1xuICAgIGNsZWFudXBPbGRNb3VzZUxpc3RlbmVycygpO1xuICAgIGRlYm91bmNlZE9uTW91c2VNb3ZlID0gZGVib3VuY2Uob25Nb3VzZU1vdmUsIG9wdGlvbnMuaW50ZXJhY3RpdmVEZWJvdW5jZSB8fCAwKTtcbiAgICB1cGRhdGVQb3BwZXJFbGVtZW50KHBvcHBlciwgcHJldlByb3BzLCBuZXh0UHJvcHMpO1xuICAgIGluc3RhbmNlLnBvcHBlckNoaWxkcmVuID0gZ2V0Q2hpbGRyZW4ocG9wcGVyKTtcblxuICAgIGlmIChpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgaWYgKFBPUFBFUl9JTlNUQU5DRV9ERVBFTkRFTkNJRVMuc29tZShmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkob3B0aW9ucywgcHJvcCkgJiYgb3B0aW9uc1twcm9wXSAhPT0gcHJldlByb3BzW3Byb3BdO1xuICAgICAgfSkpIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgICBjcmVhdGVQb3BwZXJJbnN0YW5jZSgpO1xuXG4gICAgICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvciAmJiBsYXN0TW91c2VNb3ZlRXZlbnQpIHtcbiAgICAgICAgICBwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yKGxhc3RNb3VzZU1vdmVFdmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2hvcnRjdXQgZm9yIC5zZXQoeyBjb250ZW50OiBuZXdDb250ZW50IH0pXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2V0Q29udGVudChjb250ZW50KSB7XG4gICAgc2V0KHtcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2hvd3MgdGhlIHRvb2x0aXBcbiAgICovXG5cblxuICBmdW5jdGlvbiBzaG93KCkge1xuICAgIHZhciBkdXJhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZ2V0VmFsdWUoaW5zdGFuY2UucHJvcHMuZHVyYXRpb24sIDAsIGRlZmF1bHRQcm9wcy5kdXJhdGlvblsxXSk7XG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQgfHwgIWluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCB8fCBpc1VzaW5nVG91Y2ggJiYgIWluc3RhbmNlLnByb3BzLnRvdWNoKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTdGFuZGFyZGl6ZSBgZGlzYWJsZWRgIGJlaGF2aW9yIGFjcm9zcyBicm93c2Vycy5cbiAgICAvLyBGaXJlZm94IGFsbG93cyBldmVudHMgb24gZGlzYWJsZWQgZWxlbWVudHMsIGJ1dCBDaHJvbWUgZG9lc24ndC5cbiAgICAvLyBVc2luZyBhIHdyYXBwZXIgZWxlbWVudCAoaS5lLiA8c3Bhbj4pIGlzIHJlY29tbWVuZGVkLlxuXG5cbiAgICBpZiAoZ2V0RXZlbnRMaXN0ZW5lcnNUYXJnZXQoKS5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMub25TaG93KGluc3RhbmNlKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhZGREb2N1bWVudENsaWNrTGlzdGVuZXIoKTtcbiAgICBwb3BwZXIuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgPSB0cnVlO1xuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlKSB7XG4gICAgICBnZXRFdmVudExpc3RlbmVyc1RhcmdldCgpLmNsYXNzTGlzdC5hZGQoQUNUSVZFX0NMQVNTKTtcbiAgICB9IC8vIFByZXZlbnQgYSB0cmFuc2l0aW9uIGlmIHRoZSBwb3BwZXIgaXMgYXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudFxuXG5cbiAgICB2YXIgdHJhbnNpdGlvbmFibGVFbGVtZW50cyA9IGdldFRyYW5zaXRpb25hYmxlRWxlbWVudHMoKTtcbiAgICBzZXRUcmFuc2l0aW9uRHVyYXRpb24odHJhbnNpdGlvbmFibGVFbGVtZW50cy5jb25jYXQocG9wcGVyKSwgMCk7XG5cbiAgICBjdXJyZW50TW91bnRDYWxsYmFjayA9IGZ1bmN0aW9uIGN1cnJlbnRNb3VudENhbGxiYWNrKCkge1xuICAgICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBEb3VibGUgdXBkYXRlIHdpbGwgYXBwbHkgY29ycmVjdCBtdXRhdGlvbnNcblxuXG4gICAgICBpZiAoIWhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkpIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi5iYWNrZHJvcCkge1xuICAgICAgICBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi5jb250ZW50LnN0eWxlLnRyYW5zaXRpb25EZWxheSA9IE1hdGgucm91bmQoZHVyYXRpb24gLyAxMikgKyAnbXMnO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5zdGFuY2UucHJvcHMuc3RpY2t5KSB7XG4gICAgICAgIG1ha2VTdGlja3koKTtcbiAgICAgIH1cblxuICAgICAgc2V0VHJhbnNpdGlvbkR1cmF0aW9uKFtwb3BwZXJdLCBpbnN0YW5jZS5wcm9wcy51cGRhdGVEdXJhdGlvbik7XG4gICAgICBzZXRUcmFuc2l0aW9uRHVyYXRpb24odHJhbnNpdGlvbmFibGVFbGVtZW50cywgZHVyYXRpb24pO1xuICAgICAgc2V0VmlzaWJpbGl0eVN0YXRlKHRyYW5zaXRpb25hYmxlRWxlbWVudHMsICd2aXNpYmxlJyk7XG4gICAgICBvblRyYW5zaXRpb25lZEluKGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5hcmlhKSB7XG4gICAgICAgICAgZ2V0RXZlbnRMaXN0ZW5lcnNUYXJnZXQoKS5zZXRBdHRyaWJ1dGUoXCJhcmlhLVwiLmNvbmNhdChpbnN0YW5jZS5wcm9wcy5hcmlhKSwgcG9wcGVyLmlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluc3RhbmNlLnByb3BzLm9uU2hvd24oaW5zdGFuY2UpO1xuICAgICAgICBpbnN0YW5jZS5zdGF0ZS5pc1Nob3duID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBtb3VudCgpO1xuICB9XG4gIC8qKlxuICAgKiBIaWRlcyB0aGUgdG9vbHRpcFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgdmFyIGR1cmF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBnZXRWYWx1ZShpbnN0YW5jZS5wcm9wcy5kdXJhdGlvbiwgMSwgZGVmYXVsdFByb3BzLmR1cmF0aW9uWzFdKTtcblxuICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCB8fCAhaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLm9uSGlkZShpbnN0YW5jZSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVtb3ZlRG9jdW1lbnRDbGlja0xpc3RlbmVyKCk7XG4gICAgcG9wcGVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc1Nob3duID0gZmFsc2U7XG4gICAgd2FzVmlzaWJsZUR1cmluZ1ByZXZpb3VzVXBkYXRlID0gZmFsc2U7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIGdldEV2ZW50TGlzdGVuZXJzVGFyZ2V0KCkuY2xhc3NMaXN0LnJlbW92ZShBQ1RJVkVfQ0xBU1MpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2l0aW9uYWJsZUVsZW1lbnRzID0gZ2V0VHJhbnNpdGlvbmFibGVFbGVtZW50cygpO1xuICAgIHNldFRyYW5zaXRpb25EdXJhdGlvbih0cmFuc2l0aW9uYWJsZUVsZW1lbnRzLCBkdXJhdGlvbik7XG4gICAgc2V0VmlzaWJpbGl0eVN0YXRlKHRyYW5zaXRpb25hYmxlRWxlbWVudHMsICdoaWRkZW4nKTtcbiAgICBvblRyYW5zaXRpb25lZE91dChkdXJhdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFpc1NjaGVkdWxlZFRvU2hvdykge1xuICAgICAgICByZW1vdmVGb2xsb3dDdXJzb3JMaXN0ZW5lcigpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5zdGFuY2UucHJvcHMuYXJpYSkge1xuICAgICAgICBnZXRFdmVudExpc3RlbmVyc1RhcmdldCgpLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtXCIuY29uY2F0KGluc3RhbmNlLnByb3BzLmFyaWEpKTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5vcHRpb25zLnBsYWNlbWVudCA9IGluc3RhbmNlLnByb3BzLnBsYWNlbWVudDtcbiAgICAgIGN1cnJlbnRQYXJlbnROb2RlLnJlbW92ZUNoaWxkKHBvcHBlcik7XG4gICAgICBpbnN0YW5jZS5wcm9wcy5vbkhpZGRlbihpbnN0YW5jZSk7XG4gICAgICBpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQgPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIHRvb2x0aXBcbiAgICovXG5cblxuICBmdW5jdGlvbiBkZXN0cm95KGRlc3Ryb3lUYXJnZXRJbnN0YW5jZXMpIHtcbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHRoZSBwb3BwZXIgaXMgY3VycmVudGx5IG1vdW50ZWQgdG8gdGhlIERPTSwgd2Ugd2FudCB0byBlbnN1cmUgaXQgZ2V0c1xuICAgIC8vIGhpZGRlbiBhbmQgdW5tb3VudGVkIGluc3RhbnRseSB1cG9uIGRlc3RydWN0aW9uXG5cblxuICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQpIHtcbiAgICAgIGhpZGUoMCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlVHJpZ2dlcnNGcm9tUmVmZXJlbmNlKCk7XG4gICAgZGVsZXRlIHJlZmVyZW5jZS5fdGlwcHk7XG4gICAgdmFyIHRhcmdldCA9IGluc3RhbmNlLnByb3BzLnRhcmdldDtcblxuICAgIGlmICh0YXJnZXQgJiYgZGVzdHJveVRhcmdldEluc3RhbmNlcyAmJiBpc1JlYWxFbGVtZW50KHJlZmVyZW5jZSkpIHtcbiAgICAgIGFycmF5RnJvbShyZWZlcmVuY2UucXVlcnlTZWxlY3RvckFsbCh0YXJnZXQpKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQuX3RpcHB5KSB7XG4gICAgICAgICAgY2hpbGQuX3RpcHB5LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogR3JvdXBzIGFuIGFycmF5IG9mIGluc3RhbmNlcyBieSB0YWtpbmcgY29udHJvbCBvZiB0aGVpciBwcm9wcyBkdXJpbmdcbiAqIGNlcnRhaW4gbGlmZWN5Y2xlcy5cbiAqL1xuZnVuY3Rpb24gZ3JvdXAoaW5zdGFuY2VzKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIF9yZWYkZGVsYXkgPSBfcmVmLmRlbGF5LFxuICAgICAgZGVsYXkgPSBfcmVmJGRlbGF5ID09PSB2b2lkIDAgPyBpbnN0YW5jZXNbMF0ucHJvcHMuZGVsYXkgOiBfcmVmJGRlbGF5LFxuICAgICAgX3JlZiRkdXJhdGlvbiA9IF9yZWYuZHVyYXRpb24sXG4gICAgICBkdXJhdGlvbiA9IF9yZWYkZHVyYXRpb24gPT09IHZvaWQgMCA/IDAgOiBfcmVmJGR1cmF0aW9uO1xuXG4gIHZhciBpc0FueVRpcHB5T3BlbiA9IGZhbHNlO1xuICBpbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpZiAoaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMpIHtcbiAgICAgIGluc3RhbmNlLnNldChpbnN0YW5jZS5fb3JpZ2luYWxQcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlLl9vcmlnaW5hbFByb3BzID0gX2V4dGVuZHMoe30sIGluc3RhbmNlLnByb3BzKTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHNldElzQW55VGlwcHlPcGVuKHZhbHVlKSB7XG4gICAgaXNBbnlUaXBweU9wZW4gPSB2YWx1ZTtcbiAgICB1cGRhdGVJbnN0YW5jZXMoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uU2hvdyhpbnN0YW5jZSkge1xuICAgIGluc3RhbmNlLl9vcmlnaW5hbFByb3BzLm9uU2hvdyhpbnN0YW5jZSk7XG5cbiAgICBpbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgIGluc3RhbmNlLnNldCh7XG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvblxuICAgICAgfSk7XG5cbiAgICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgICAgaW5zdGFuY2UuaGlkZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHNldElzQW55VGlwcHlPcGVuKHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25IaWRlKGluc3RhbmNlKSB7XG4gICAgaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMub25IaWRlKGluc3RhbmNlKTtcblxuICAgIHNldElzQW55VGlwcHlPcGVuKGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uU2hvd24oaW5zdGFuY2UpIHtcbiAgICBpbnN0YW5jZS5fb3JpZ2luYWxQcm9wcy5vblNob3duKGluc3RhbmNlKTtcblxuICAgIGluc3RhbmNlLnNldCh7XG4gICAgICBkdXJhdGlvbjogaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMuZHVyYXRpb25cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUluc3RhbmNlcygpIHtcbiAgICBpbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgIGluc3RhbmNlLnNldCh7XG4gICAgICAgIG9uU2hvdzogb25TaG93LFxuICAgICAgICBvblNob3duOiBvblNob3duLFxuICAgICAgICBvbkhpZGU6IG9uSGlkZSxcbiAgICAgICAgZGVsYXk6IGlzQW55VGlwcHlPcGVuID8gWzAsIEFycmF5LmlzQXJyYXkoZGVsYXkpID8gZGVsYXlbMV0gOiBkZWxheV0gOiBkZWxheSxcbiAgICAgICAgZHVyYXRpb246IGlzQW55VGlwcHlPcGVuID8gZHVyYXRpb24gOiBpbnN0YW5jZS5fb3JpZ2luYWxQcm9wcy5kdXJhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVJbnN0YW5jZXMoKTtcbn1cblxudmFyIGdsb2JhbEV2ZW50TGlzdGVuZXJzQm91bmQgPSBmYWxzZTtcbi8qKlxuICogRXhwb3J0ZWQgbW9kdWxlXG4gKi9cblxuZnVuY3Rpb24gdGlwcHkodGFyZ2V0cywgb3B0aW9ucykge1xuICB2YWxpZGF0ZU9wdGlvbnMob3B0aW9ucyB8fCB7fSwgZGVmYXVsdFByb3BzKTtcblxuICBpZiAoIWdsb2JhbEV2ZW50TGlzdGVuZXJzQm91bmQpIHtcbiAgICBiaW5kR2xvYmFsRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICBnbG9iYWxFdmVudExpc3RlbmVyc0JvdW5kID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0UHJvcHMsIG9wdGlvbnMpOyAvLyBJZiB0aGV5IGFyZSBzcGVjaWZ5aW5nIGEgdmlydHVhbCBwb3NpdGlvbmluZyByZWZlcmVuY2UsIHdlIG5lZWQgdG8gcG9seWZpbGxcbiAgLy8gc29tZSBuYXRpdmUgRE9NIHByb3BzXG5cblxuICBpZiAoaXNCYXJlVmlydHVhbEVsZW1lbnQodGFyZ2V0cykpIHtcbiAgICBwb2x5ZmlsbEVsZW1lbnRQcm90b3R5cGVQcm9wZXJ0aWVzKHRhcmdldHMpO1xuICB9XG5cbiAgdmFyIGluc3RhbmNlcyA9IGdldEFycmF5T2ZFbGVtZW50cyh0YXJnZXRzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcmVmZXJlbmNlKSB7XG4gICAgdmFyIGluc3RhbmNlID0gcmVmZXJlbmNlICYmIGNyZWF0ZVRpcHB5KHJlZmVyZW5jZSwgcHJvcHMpO1xuXG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICBhY2MucHVzaChpbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwgW10pO1xuICByZXR1cm4gaXNTaW5ndWxhcih0YXJnZXRzKSA/IGluc3RhbmNlc1swXSA6IGluc3RhbmNlcztcbn1cbi8qKlxuICogU3RhdGljIHByb3BzXG4gKi9cblxuXG50aXBweS52ZXJzaW9uID0gdmVyc2lvbjtcbnRpcHB5LmRlZmF1bHRzID0gZGVmYXVsdFByb3BzO1xuLyoqXG4gKiBTdGF0aWMgbWV0aG9kc1xuICovXG5cbnRpcHB5LnNldERlZmF1bHRzID0gZnVuY3Rpb24gKHBhcnRpYWxEZWZhdWx0cykge1xuICBPYmplY3Qua2V5cyhwYXJ0aWFsRGVmYXVsdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBkZWZhdWx0UHJvcHNba2V5XSA9IHBhcnRpYWxEZWZhdWx0c1trZXldO1xuICB9KTtcbn07XG5cbnRpcHB5LmhpZGVBbGwgPSBoaWRlQWxsO1xudGlwcHkuZ3JvdXAgPSBncm91cDtcbi8qKlxuICogQXV0by1pbml0IHRvb2x0aXBzIGZvciBlbGVtZW50cyB3aXRoIGEgYGRhdGEtdGlwcHk9XCIuLi5cImAgYXR0cmlidXRlXG4gKi9cblxuZnVuY3Rpb24gYXV0b0luaXQoKSB7XG4gIGFycmF5RnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10aXBweV0nKSkuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICB2YXIgY29udGVudCA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS10aXBweScpO1xuXG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgIHRpcHB5KGVsLCB7XG4gICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmlmIChpc0Jyb3dzZXIpIHtcbiAgc2V0VGltZW91dChhdXRvSW5pdCk7XG59XG5cbi8qKlxuICogSW5qZWN0cyBhIHN0cmluZyBvZiBDU1Mgc3R5bGVzIHRvIGEgc3R5bGUgbm9kZSBpbiA8aGVhZD5cbiAqL1xuXG5mdW5jdGlvbiBpbmplY3RDU1MoY3NzKSB7XG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHN0eWxlLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgIHN0eWxlLnRleHRDb250ZW50ID0gY3NzO1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnZGF0YS10aXBweS1zdHlsZXNoZWV0JywgJycpO1xuICAgIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZDtcbiAgICB2YXIgZmlyc3RDaGlsZCA9IGhlYWQuZmlyc3RDaGlsZDtcblxuICAgIGlmIChmaXJzdENoaWxkKSB7XG4gICAgICBoZWFkLmluc2VydEJlZm9yZShzdHlsZSwgZmlyc3RDaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH1cbiAgfVxufVxuXG5pbmplY3RDU1MoY3NzKTtcblxuZXhwb3J0IGRlZmF1bHQgdGlwcHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5hbGwuanMubWFwXG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMCwyMDExLDIwMTIsMjAxMywyMDE0IE1vcmdhbiBSb2RlcmljayBodHRwOi8vcm9kZXJpY2suZGtcbiAqIExpY2Vuc2U6IE1JVCAtIGh0dHA6Ly9tcmducmRyY2subWl0LWxpY2Vuc2Uub3JnXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL21yb2Rlcmljay9QdWJTdWJKU1xuICovXG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIFB1YlN1YiA9IHt9O1xuICAgIHJvb3QuUHViU3ViID0gUHViU3ViO1xuXG4gICAgdmFyIGRlZmluZSA9IHJvb3QuZGVmaW5lO1xuXG4gICAgZmFjdG9yeShQdWJTdWIpO1xuXG4gICAgLy8gQU1EIHN1cHBvcnRcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKXtcbiAgICAgICAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gUHViU3ViOyB9KTtcblxuICAgICAgICAvLyBDb21tb25KUyBhbmQgTm9kZS5qcyBtb2R1bGUgc3VwcG9ydFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKXtcbiAgICAgICAgaWYgKG1vZHVsZSAhPT0gdW5kZWZpbmVkICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBQdWJTdWI7IC8vIE5vZGUuanMgc3BlY2lmaWMgYG1vZHVsZS5leHBvcnRzYFxuICAgICAgICB9XG4gICAgICAgIGV4cG9ydHMuUHViU3ViID0gUHViU3ViOyAvLyBDb21tb25KUyBtb2R1bGUgMS4xLjEgc3BlY1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBQdWJTdWI7IC8vIENvbW1vbkpTXG4gICAgfVxuXG59KCggdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93ICkgfHwgdGhpcywgZnVuY3Rpb24gKFB1YlN1Yil7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIG1lc3NhZ2VzID0ge30sXG4gICAgICAgIGxhc3RVaWQgPSAtMTtcblxuICAgIGZ1bmN0aW9uIGhhc0tleXMob2JqKXtcbiAgICAgICAgdmFyIGtleTtcblxuICAgICAgICBmb3IgKGtleSBpbiBvYmope1xuICAgICAgICAgICAgaWYgKCBvYmouaGFzT3duUHJvcGVydHkoa2V5KSApe1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB0aHJvd3MgdGhlIHBhc3NlZCBleGNlcHRpb24sIGZvciB1c2UgYXMgYXJndW1lbnQgZm9yIHNldFRpbWVvdXRcbiAgICAgKiBAYWxpYXMgdGhyb3dFeGNlcHRpb25cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyBPYmplY3QgfSBleCBBbiBFcnJvciBvYmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvd0V4Y2VwdGlvbiggZXggKXtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlVGhyb3dFeGNlcHRpb24oKXtcbiAgICAgICAgICAgIHRocm93IGV4O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGxTdWJzY3JpYmVyV2l0aERlbGF5ZWRFeGNlcHRpb25zKCBzdWJzY3JpYmVyLCBtZXNzYWdlLCBkYXRhICl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyKCBtZXNzYWdlLCBkYXRhICk7XG4gICAgICAgIH0gY2F0Y2goIGV4ICl7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCB0aHJvd0V4Y2VwdGlvbiggZXggKSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxsU3Vic2NyaWJlcldpdGhJbW1lZGlhdGVFeGNlcHRpb25zKCBzdWJzY3JpYmVyLCBtZXNzYWdlLCBkYXRhICl7XG4gICAgICAgIHN1YnNjcmliZXIoIG1lc3NhZ2UsIGRhdGEgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxpdmVyTWVzc2FnZSggb3JpZ2luYWxNZXNzYWdlLCBtYXRjaGVkTWVzc2FnZSwgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyApe1xuICAgICAgICB2YXIgc3Vic2NyaWJlcnMgPSBtZXNzYWdlc1ttYXRjaGVkTWVzc2FnZV0sXG4gICAgICAgICAgICBjYWxsU3Vic2NyaWJlciA9IGltbWVkaWF0ZUV4Y2VwdGlvbnMgPyBjYWxsU3Vic2NyaWJlcldpdGhJbW1lZGlhdGVFeGNlcHRpb25zIDogY2FsbFN1YnNjcmliZXJXaXRoRGVsYXllZEV4Y2VwdGlvbnMsXG4gICAgICAgICAgICBzO1xuXG4gICAgICAgIGlmICggIW1lc3NhZ2VzLmhhc093blByb3BlcnR5KCBtYXRjaGVkTWVzc2FnZSApICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChzIGluIHN1YnNjcmliZXJzKXtcbiAgICAgICAgICAgIGlmICggc3Vic2NyaWJlcnMuaGFzT3duUHJvcGVydHkocykpe1xuICAgICAgICAgICAgICAgIGNhbGxTdWJzY3JpYmVyKCBzdWJzY3JpYmVyc1tzXSwgb3JpZ2luYWxNZXNzYWdlLCBkYXRhICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkZWxpdmVyTmFtZXNwYWNlZCgpe1xuICAgICAgICAgICAgdmFyIHRvcGljID0gU3RyaW5nKCBtZXNzYWdlICksXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG5cbiAgICAgICAgICAgIC8vIGRlbGl2ZXIgdGhlIG1lc3NhZ2UgYXMgaXQgaXMgbm93XG4gICAgICAgICAgICBkZWxpdmVyTWVzc2FnZShtZXNzYWdlLCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gdHJpbSB0aGUgaGllcmFyY2h5IGFuZCBkZWxpdmVyIG1lc3NhZ2UgdG8gZWFjaCBsZXZlbFxuICAgICAgICAgICAgd2hpbGUoIHBvc2l0aW9uICE9PSAtMSApe1xuICAgICAgICAgICAgICAgIHRvcGljID0gdG9waWMuc3Vic3RyKCAwLCBwb3NpdGlvbiApO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgICAgICAgICAgICBkZWxpdmVyTWVzc2FnZSggbWVzc2FnZSwgdG9waWMsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXNzYWdlSGFzU3Vic2NyaWJlcnMoIG1lc3NhZ2UgKXtcbiAgICAgICAgdmFyIHRvcGljID0gU3RyaW5nKCBtZXNzYWdlICksXG4gICAgICAgICAgICBmb3VuZCA9IEJvb2xlYW4obWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIHRvcGljICkgJiYgaGFzS2V5cyhtZXNzYWdlc1t0b3BpY10pKSxcbiAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoICcuJyApO1xuXG4gICAgICAgIHdoaWxlICggIWZvdW5kICYmIHBvc2l0aW9uICE9PSAtMSApe1xuICAgICAgICAgICAgdG9waWMgPSB0b3BpYy5zdWJzdHIoIDAsIHBvc2l0aW9uICk7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCAnLicgKTtcbiAgICAgICAgICAgIGZvdW5kID0gQm9vbGVhbihtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggdG9waWMgKSAmJiBoYXNLZXlzKG1lc3NhZ2VzW3RvcGljXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIHN5bmMsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKXtcbiAgICAgICAgbWVzc2FnZSA9ICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N5bWJvbCcpID8gbWVzc2FnZS50b1N0cmluZygpIDogbWVzc2FnZTtcblxuICAgICAgICB2YXIgZGVsaXZlciA9IGNyZWF0ZURlbGl2ZXJ5RnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKSxcbiAgICAgICAgICAgIGhhc1N1YnNjcmliZXJzID0gbWVzc2FnZUhhc1N1YnNjcmliZXJzKCBtZXNzYWdlICk7XG5cbiAgICAgICAgaWYgKCAhaGFzU3Vic2NyaWJlcnMgKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggc3luYyA9PT0gdHJ1ZSApe1xuICAgICAgICAgICAgZGVsaXZlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dCggZGVsaXZlciwgMCApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2hlcyB0aGUgbWVzc2FnZSwgcGFzc2luZyB0aGUgZGF0YSB0byBpdCdzIHN1YnNjcmliZXJzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHB1Ymxpc2hcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHB1Ymxpc2hcbiAgICAgKiBAcGFyYW0ge30gZGF0YSBUaGUgZGF0YSB0byBwYXNzIHRvIHN1YnNjcmliZXJzXG4gICAgICogQHJldHVybiB7IEJvb2xlYW4gfVxuICAgICAqL1xuICAgIFB1YlN1Yi5wdWJsaXNoID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgcmV0dXJuIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIGZhbHNlLCBQdWJTdWIuaW1tZWRpYXRlRXhjZXB0aW9ucyApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoZXMgdGhlIHRoZSBtZXNzYWdlIHN5bmNocm9ub3VzbHksIHBhc3NpbmcgdGhlIGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBwdWJsaXNoU3luY1xuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gcHVibGlzaFxuICAgICAqIEBwYXJhbSB7fSBkYXRhIFRoZSBkYXRhIHRvIHBhc3MgdG8gc3Vic2NyaWJlcnNcbiAgICAgKiBAcmV0dXJuIHsgQm9vbGVhbiB9XG4gICAgICovXG4gICAgUHViU3ViLnB1Ymxpc2hTeW5jID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgcmV0dXJuIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIHRydWUsIFB1YlN1Yi5pbW1lZGlhdGVFeGNlcHRpb25zICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdGhlIHBhc3NlZCBmdW5jdGlvbiB0byB0aGUgcGFzc2VkIG1lc3NhZ2UuIEV2ZXJ5IHJldHVybmVkIHRva2VuIGlzIHVuaXF1ZSBhbmQgc2hvdWxkIGJlIHN0b3JlZCBpZiB5b3UgbmVlZCB0byB1bnN1YnNjcmliZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHN1YnNjcmliZSB0b1xuICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGEgbmV3IG1lc3NhZ2UgaXMgcHVibGlzaGVkXG4gICAgICogQHJldHVybiB7IFN0cmluZyB9XG4gICAgICovXG4gICAgUHViU3ViLnN1YnNjcmliZSA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBmdW5jICl7XG4gICAgICAgIGlmICggdHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVzc2FnZSA9ICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N5bWJvbCcpID8gbWVzc2FnZS50b1N0cmluZygpIDogbWVzc2FnZTtcblxuICAgICAgICAvLyBtZXNzYWdlIGlzIG5vdCByZWdpc3RlcmVkIHlldFxuICAgICAgICBpZiAoICFtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggbWVzc2FnZSApICl7XG4gICAgICAgICAgICBtZXNzYWdlc1ttZXNzYWdlXSA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZm9yY2luZyB0b2tlbiBhcyBTdHJpbmcsIHRvIGFsbG93IGZvciBmdXR1cmUgZXhwYW5zaW9ucyB3aXRob3V0IGJyZWFraW5nIHVzYWdlXG4gICAgICAgIC8vIGFuZCBhbGxvdyBmb3IgZWFzeSB1c2UgYXMga2V5IG5hbWVzIGZvciB0aGUgJ21lc3NhZ2VzJyBvYmplY3RcbiAgICAgICAgdmFyIHRva2VuID0gJ3VpZF8nICsgU3RyaW5nKCsrbGFzdFVpZCk7XG4gICAgICAgIG1lc3NhZ2VzW21lc3NhZ2VdW3Rva2VuXSA9IGZ1bmM7XG4gICAgICAgIFxuICAgICAgICAvLyByZXR1cm4gdG9rZW4gZm9yIHVuc3Vic2NyaWJpbmdcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmVzIHRoZSBwYXNzZWQgZnVuY3Rpb24gdG8gdGhlIHBhc3NlZCBtZXNzYWdlIG9uY2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAYWxpYXMgc3Vic2NyaWJlT25jZVxuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gc3Vic2NyaWJlIHRvXG4gICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gYSBuZXcgbWVzc2FnZSBpcyBwdWJsaXNoZWRcbiAgICAgKiBAcmV0dXJuIHsgUHViU3ViIH1cbiAgICAgKi9cbiAgICBQdWJTdWIuc3Vic2NyaWJlT25jZSA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBmdW5jICl7XG4gICAgICAgIHZhciB0b2tlbiA9IFB1YlN1Yi5zdWJzY3JpYmUoIG1lc3NhZ2UsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvLyBiZWZvcmUgZnVuYyBhcHBseSwgdW5zdWJzY3JpYmUgbWVzc2FnZVxuICAgICAgICAgICAgUHViU3ViLnVuc3Vic2NyaWJlKCB0b2tlbiApO1xuICAgICAgICAgICAgZnVuYy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUHViU3ViO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIHN1YnNjcmlwdGlvbnNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQGFsaWFzIGNsZWFyQWxsU3Vic2NyaXB0aW9uc1xuICAgICAqL1xuICAgIFB1YlN1Yi5jbGVhckFsbFN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiBjbGVhckFsbFN1YnNjcmlwdGlvbnMoKXtcbiAgICAgICAgbWVzc2FnZXMgPSB7fTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgc3Vic2NyaXB0aW9ucyBieSB0aGUgdG9waWNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQGFsaWFzIGNsZWFyQWxsU3Vic2NyaXB0aW9uc1xuICAgICAqL1xuICAgIFB1YlN1Yi5jbGVhclN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiBjbGVhclN1YnNjcmlwdGlvbnModG9waWMpe1xuICAgICAgICB2YXIgbTtcbiAgICAgICAgZm9yIChtIGluIG1lc3NhZ2VzKXtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eShtKSAmJiBtLmluZGV4T2YodG9waWMpID09PSAwKXtcbiAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZXNbbV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBzdWJzY3JpcHRpb25zXG4gICAgICpcbiAgICAgKiAtIFdoZW4gcGFzc2VkIGEgdG9rZW4sIHJlbW92ZXMgYSBzcGVjaWZpYyBzdWJzY3JpcHRpb24uXG4gICAgICpcblx0ICogLSBXaGVuIHBhc3NlZCBhIGZ1bmN0aW9uLCByZW1vdmVzIGFsbCBzdWJzY3JpcHRpb25zIGZvciB0aGF0IGZ1bmN0aW9uXG4gICAgICpcblx0ICogLSBXaGVuIHBhc3NlZCBhIHRvcGljLCByZW1vdmVzIGFsbCBzdWJzY3JpcHRpb25zIGZvciB0aGF0IHRvcGljIChoaWVyYXJjaHkpXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVPbmNlXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIHwgRnVuY3Rpb24gfSB2YWx1ZSBBIHRva2VuLCBmdW5jdGlvbiBvciB0b3BpYyB0byB1bnN1YnNjcmliZSBmcm9tXG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyB3aXRoIGEgdG9rZW5cbiAgICAgKiB2YXIgdG9rZW4gPSBQdWJTdWIuc3Vic2NyaWJlKCdteXRvcGljJywgbXlGdW5jKTtcbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUodG9rZW4pO1xuICAgICAqIEBleGFtcGxlIC8vIFVuc3Vic2NyaWJpbmcgd2l0aCBhIGZ1bmN0aW9uXG4gICAgICogUHViU3ViLnVuc3Vic2NyaWJlKG15RnVuYyk7XG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyBmcm9tIGEgdG9waWNcbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUoJ215dG9waWMnKTtcbiAgICAgKi9cbiAgICBQdWJTdWIudW5zdWJzY3JpYmUgPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgIHZhciBkZXNjZW5kYW50VG9waWNFeGlzdHMgPSBmdW5jdGlvbih0b3BpYykge1xuICAgICAgICAgICAgICAgIHZhciBtO1xuICAgICAgICAgICAgICAgIGZvciAoIG0gaW4gbWVzc2FnZXMgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eShtKSAmJiBtLmluZGV4T2YodG9waWMpID09PSAwICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhIGRlc2NlbmRhbnQgb2YgdGhlIHRvcGljIGV4aXN0czpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzVG9waWMgICAgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICggbWVzc2FnZXMuaGFzT3duUHJvcGVydHkodmFsdWUpIHx8IGRlc2NlbmRhbnRUb3BpY0V4aXN0cyh2YWx1ZSkgKSxcbiAgICAgICAgICAgIGlzVG9rZW4gICAgPSAhaXNUb3BpYyAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnLFxuICAgICAgICAgICAgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlLFxuICAgICAgICAgICAgbSwgbWVzc2FnZSwgdDtcblxuICAgICAgICBpZiAoaXNUb3BpYyl7XG4gICAgICAgICAgICBQdWJTdWIuY2xlYXJTdWJzY3JpcHRpb25zKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoIG0gaW4gbWVzc2FnZXMgKXtcbiAgICAgICAgICAgIGlmICggbWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIG0gKSApe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlc1ttXTtcblxuICAgICAgICAgICAgICAgIGlmICggaXNUb2tlbiAmJiBtZXNzYWdlW3ZhbHVlXSApe1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZVt2YWx1ZV07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAvLyB0b2tlbnMgYXJlIHVuaXF1ZSwgc28gd2UgY2FuIGp1c3Qgc3RvcCBoZXJlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHQgaW4gbWVzc2FnZSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaGFzT3duUHJvcGVydHkodCkgJiYgbWVzc2FnZVt0XSA9PT0gdmFsdWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXNzYWdlW3RdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59KSk7XG4iLCJpbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudCc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCB7IHN0YXRlTW9kdWxlIGFzIFMgfSBmcm9tICdzdGF0ZWZ1bC1kZWFkJztcbmltcG9ydCB7IEdUTVB1c2ggfSBmcm9tICdAVXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZW51IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgXG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgICAvL2NvbnRhaW5lclxuICAgICAgICB2YXIgdmlldyA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3OyAvLyBpZiBwcmVyZW5kZXJlZCBhbmQgbm8gbmVlZCB0byByZW5kZXIgKG5vIGRhdGEgbWlzbWF0Y2gpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbmF2Jyk7XG4gICAgICAgIGxpc3Quc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ0luLXBhZ2UnKTtcbiAgICAgICAgbGlzdC5zZXRBdHRyaWJ1dGUoJ2FyaWEtY29udHJvbHMnLCAnbWFwLXZpZXcgYmFyLXZpZXcgd2FmZmxlLXZpZXcnKTtcbiAgICAgICAgbGlzdC5jbGFzc0xpc3QuYWRkKHMubWVudUxpc3QpO1xuICAgICAgICB0aGlzLnNlY3Rpb25zID0gdGhpcy5tb2RlbC5maWVsZHMuZmlsdGVyKGYgPT4gIWYuaXNTZWNvbmRhcnlPbmx5KTtcbiAgICAgICAgdGhpcy5zZWN0aW9ucy5mb3JFYWNoKHNlY3Rpb24gPT4ge1xuXG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKHMubmF2SXRlbVdyYXBwZXIpO1xuXG4gICAgICAgICAgICB2YXIgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChzLm5hdkxpbmspO1xuICAgICAgICAgICAgaXRlbS5ocmVmID0gYCMke3NlY3Rpb24ua2V5fWA7XG4gICAgICAgICAgICBpdGVtLmlubmVySFRNTCA9IGA8c3Bhbj4ke3NlY3Rpb24uaGVhZGluZ30gPHNwYW4+JHtzZWN0aW9uLnRleHR9PC9zcGFuPjwvc3Bhbj5gO1xuICAgICAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2VjdGlvbicsIHNlY3Rpb24ua2V5KTtcbiAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoaXRlbSk7XG4gICAgICAgICAgICBsaXN0LmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCB0aGlzLnNlY3Rpb25zLmxlbmd0aCAlIDIgPT09IDEgKXtcbiAgICAgICAgICAgIGxldCBleHRyYUl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGV4dHJhSXRlbS5jbGFzc0xpc3QuYWRkKHMubmF2TGluaywgcy5wbGFjZWhvbGRlck1lbnVJdGVtKTtcbiAgICAgICAgICAgIGV4dHJhSXRlbS5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICBsaXN0LmFwcGVuZENoaWxkKGV4dHJhSXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZpZXcuYXBwZW5kQ2hpbGQobGlzdCk7XG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIFxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIF90aGlzLmNsaWNrSGFuZGxlci5jYWxsKHRoaXMsIF90aGlzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDEzICl7IC8vIGVudGVyIGtleVxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNsaWNrSGFuZGxlci5jYWxsKHRoaXMsIF90aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGNsaWNrSGFuZGxlcihjb250ZXh0KXtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgR1RNUHVzaChgSElBfE5hdmlnYXRlfCR7Y29udGV4dC5uYW1lfXwke3RoaXMuZGF0YXNldC5zZWN0aW9ufWApO1xuICAgICAgICBTLnNldFN0YXRlKCd2aWV3JywgdGhpcy5kYXRhc2V0LnNlY3Rpb24pO1xuICAgIH1cbn0iLCIvKiohXG4gKiBAZmlsZU92ZXJ2aWV3IEtpY2thc3MgbGlicmFyeSB0byBjcmVhdGUgYW5kIHBsYWNlIHBvcHBlcnMgbmVhciB0aGVpciByZWZlcmVuY2UgZWxlbWVudHMuXG4gKiBAdmVyc2lvbiAxLjE1LjBcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgRmVkZXJpY28gWml2b2xvIGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICovXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxudmFyIGxvbmdlclRpbWVvdXRCcm93c2VycyA9IFsnRWRnZScsICdUcmlkZW50JywgJ0ZpcmVmb3gnXTtcbnZhciB0aW1lb3V0RHVyYXRpb24gPSAwO1xuZm9yICh2YXIgaSA9IDA7IGkgPCBsb25nZXJUaW1lb3V0QnJvd3NlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgaWYgKGlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7XG4gICAgdGltZW91dER1cmF0aW9uID0gMTtcbiAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5Qcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgZm4oKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgfVxuICB9O1xufVxuXG52YXIgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyICYmIHdpbmRvdy5Qcm9taXNlO1xuXG4vKipcbiogQ3JlYXRlIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBtZXRob2QsIHRoYXQncyBhc3luY2hyb25vdXNseSBkZWZlcnJlZFxuKiBidXQgY2FsbGVkIGluIHRoZSBtaW5pbXVtIHRpbWUgcG9zc2libGUuXG4qXG4qIEBtZXRob2RcbiogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmblxuKiBAcmV0dXJucyB7RnVuY3Rpb259XG4qL1xudmFyIGRlYm91bmNlID0gc3VwcG9ydHNNaWNyb1Rhc2tzID8gbWljcm90YXNrRGVib3VuY2UgOiB0YXNrRGVib3VuY2U7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj9cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgdmFyIGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9DaGVjayAmJiBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgY3NzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gIHJldHVybiBwcm9wZXJ0eSA/IGNzc1twcm9wZXJ0eV0gOiBjc3M7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50Tm9kZSBvciB0aGUgaG9zdCBvZiB0aGUgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50Lmhvc3Q7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2Nyb2xsaW5nIHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gc2Nyb2xsIHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBSZXR1cm4gYm9keSwgYGdldFNjcm9sbGAgd2lsbCB0YWtlIGNhcmUgdG8gZ2V0IHRoZSBjb3JyZWN0IGBzY3JvbGxUb3BgIGZyb20gaXRcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBzd2l0Y2ggKGVsZW1lbnQubm9kZU5hbWUpIHtcbiAgICBjYXNlICdIVE1MJzpcbiAgICBjYXNlICdCT0RZJzpcbiAgICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgICBjYXNlICcjZG9jdW1lbnQnOlxuICAgICAgcmV0dXJuIGVsZW1lbnQuYm9keTtcbiAgfVxuXG4gIC8vIEZpcmVmb3ggd2FudCB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuXG4gIHZhciBfZ2V0U3R5bGVDb21wdXRlZFByb3AgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dZO1xuXG4gIGlmICgvKGF1dG98c2Nyb2xsfG92ZXJsYXkpLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxudmFyIGlzSUUxMSA9IGlzQnJvd3NlciAmJiAhISh3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBpc0lFMTAgPSBpc0Jyb3dzZXIgJiYgL01TSUUgMTAvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgYnJvd3NlciBpcyBJbnRlcm5ldCBFeHBsb3JlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtOdW1iZXJ9IHZlcnNpb24gdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBpc0lFXG4gKi9cbmZ1bmN0aW9uIGlzSUUodmVyc2lvbikge1xuICBpZiAodmVyc2lvbiA9PT0gMTEpIHtcbiAgICByZXR1cm4gaXNJRTExO1xuICB9XG4gIGlmICh2ZXJzaW9uID09PSAxMCkge1xuICAgIHJldHVybiBpc0lFMTA7XG4gIH1cbiAgcmV0dXJuIGlzSUUxMSB8fCBpc0lFMTA7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb2Zmc2V0IHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgdmFyIG5vT2Zmc2V0UGFyZW50ID0gaXNJRSgxMCkgPyBkb2N1bWVudC5ib2R5IDogbnVsbDtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQgfHwgbnVsbDtcbiAgLy8gU2tpcCBoaWRkZW4gZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhbiBvZmZzZXRQYXJlbnRcbiAgd2hpbGUgKG9mZnNldFBhcmVudCA9PT0gbm9PZmZzZXRQYXJlbnQgJiYgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSAoZWxlbWVudCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKS5vZmZzZXRQYXJlbnQ7XG4gIH1cblxuICB2YXIgbm9kZU5hbWUgPSBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50Lm5vZGVOYW1lO1xuXG4gIGlmICghbm9kZU5hbWUgfHwgbm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gLm9mZnNldFBhcmVudCB3aWxsIHJldHVybiB0aGUgY2xvc2VzdCBUSCwgVEQgb3IgVEFCTEUgaW4gY2FzZVxuICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uXG4gIGlmIChbJ1RIJywgJ1REJywgJ1RBQkxFJ10uaW5kZXhPZihvZmZzZXRQYXJlbnQubm9kZU5hbWUpICE9PSAtMSAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50O1xufVxuXG5mdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnSFRNTCcgfHwgZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpID09PSBlbGVtZW50O1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSByb290IG5vZGUgKGRvY3VtZW50LCBzaGFkb3dET00gcm9vdCkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge0VsZW1lbnR9IHJvb3Qgbm9kZVxuICovXG5mdW5jdGlvbiBnZXRSb290KG5vZGUpIHtcbiAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBnZXRSb290KG5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2Rlc1xuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MVxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MlxuICogQHJldHVybnMge0VsZW1lbnR9IGNvbW1vbiBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGVsZW1lbnQyKSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgXCJzdGFydFwiIHRoZSBlbGVtZW50IHRoYXQgY29tZXMgZmlyc3QgaW4gdGhlIERPTVxuICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgdmFyIHN0YXJ0ID0gb3JkZXIgPyBlbGVtZW50MSA6IGVsZW1lbnQyO1xuICB2YXIgZW5kID0gb3JkZXIgPyBlbGVtZW50MiA6IGVsZW1lbnQxO1xuXG4gIC8vIEdldCBjb21tb24gYW5jZXN0b3IgY29udGFpbmVyXG4gIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7XG4gIHZhciBjb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gIC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnRcblxuICBpZiAoZWxlbWVudDEgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICYmIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciB8fCBzdGFydC5jb250YWlucyhlbmQpKSB7XG4gICAgaWYgKGlzT2Zmc2V0Q29udGFpbmVyKGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkge1xuICAgICAgcmV0dXJuIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQoY29tbW9uQW5jZXN0b3JDb250YWluZXIpO1xuICB9XG5cbiAgLy8gb25lIG9mIHRoZSBub2RlcyBpcyBpbnNpZGUgc2hhZG93RE9NLCBmaW5kIHdoaWNoIG9uZVxuICB2YXIgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XG4gIGlmIChlbGVtZW50MXJvb3QuaG9zdCkge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzaWRlIGB0b3BgIG9yIGBsZWZ0YFxuICogQHJldHVybnMge251bWJlcn0gYW1vdW50IG9mIHNjcm9sbGVkIHBpeGVsc1xuICovXG5mdW5jdGlvbiBnZXRTY3JvbGwoZWxlbWVudCkge1xuICB2YXIgc2lkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3RvcCc7XG5cbiAgdmFyIHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnRbdXBwZXJTaWRlXTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50W3VwcGVyU2lkZV07XG59XG5cbi8qXG4gKiBTdW0gb3Igc3VidHJhY3QgdGhlIGVsZW1lbnQgc2Nyb2xsIHZhbHVlcyAobGVmdCBhbmQgdG9wKSBmcm9tIGEgZ2l2ZW4gcmVjdCBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IC0gUmVjdCBvYmplY3QgeW91IHdhbnQgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHJldHVybiB7T2JqZWN0fSByZWN0IC0gVGhlIG1vZGlmaWVyIHJlY3Qgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCkge1xuICB2YXIgc3VidHJhY3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICB2YXIgbW9kaWZpZXIgPSBzdWJ0cmFjdCA/IC0xIDogMTtcbiAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbi8qXG4gKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xuICogUmVzdWx0IG9mIGBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHlgIG9uIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gYXhpcyAtIGB4YCBvciBgeWBcbiAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXNcbiAqL1xuXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsIGF4aXMpIHtcbiAgdmFyIHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7XG4gIHZhciBzaWRlQiA9IHNpZGVBID09PSAnTGVmdCcgPyAnUmlnaHQnIDogJ0JvdHRvbSc7XG5cbiAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUEgKyAnV2lkdGgnXSwgMTApICsgcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQiArICdXaWR0aCddLCAxMCk7XG59XG5cbmZ1bmN0aW9uIGdldFNpemUoYXhpcywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSkge1xuICByZXR1cm4gTWF0aC5tYXgoYm9keVsnb2Zmc2V0JyArIGF4aXNdLCBib2R5WydzY3JvbGwnICsgYXhpc10sIGh0bWxbJ2NsaWVudCcgKyBheGlzXSwgaHRtbFsnb2Zmc2V0JyArIGF4aXNdLCBodG1sWydzY3JvbGwnICsgYXhpc10sIGlzSUUoMTApID8gcGFyc2VJbnQoaHRtbFsnb2Zmc2V0JyArIGF4aXNdKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0JyldKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnQm90dG9tJyA6ICdSaWdodCcpXSkgOiAwKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2l6ZXMoZG9jdW1lbnQpIHtcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBpc0lFKDEwKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKVxuICB9O1xufVxuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cblxuXG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogR2l2ZW4gZWxlbWVudCBvZmZzZXRzLCBnZW5lcmF0ZSBhbiBvdXRwdXQgc2ltaWxhciB0byBnZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvZmZzZXRzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDbGllbnRSZWN0IGxpa2Ugb3V0cHV0XG4gKi9cbmZ1bmN0aW9uIGdldENsaWVudFJlY3Qob2Zmc2V0cykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG9mZnNldHMsIHtcbiAgICByaWdodDogb2Zmc2V0cy5sZWZ0ICsgb2Zmc2V0cy53aWR0aCxcbiAgICBib3R0b206IG9mZnNldHMudG9wICsgb2Zmc2V0cy5oZWlnaHRcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3RcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSB7fTtcblxuICAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0XG4gIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLlxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXG4gIHRyeSB7XG4gICAgaWYgKGlzSUUoMTApKSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgICAgIHJlY3QudG9wICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0O1xuICAgICAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3BcbiAgfTtcblxuICAvLyBzdWJ0cmFjdCBzY3JvbGxiYXIgc2l6ZSBmcm9tIHNpemVzXG4gIHZhciBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA/IGdldFdpbmRvd1NpemVzKGVsZW1lbnQub3duZXJEb2N1bWVudCkgOiB7fTtcbiAgdmFyIHdpZHRoID0gc2l6ZXMud2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCB8fCByZXN1bHQucmlnaHQgLSByZXN1bHQubGVmdDtcbiAgdmFyIGhlaWdodCA9IHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuYm90dG9tIC0gcmVzdWx0LnRvcDtcblxuICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gd2lkdGg7XG4gIHZhciB2ZXJ0U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBoZWlnaHQ7XG5cbiAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmBcbiAgLy8gd2UgbWFrZSB0aGlzIGNoZWNrIGNvbmRpdGlvbmFsIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIGlmIChob3JpelNjcm9sbGJhciB8fCB2ZXJ0U2Nyb2xsYmFyKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTtcbiAgICBob3JpelNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd4Jyk7XG4gICAgdmVydFNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd5Jyk7XG5cbiAgICByZXN1bHQud2lkdGggLT0gaG9yaXpTY3JvbGxiYXI7XG4gICAgcmVzdWx0LmhlaWdodCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICB9XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3QocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGNoaWxkcmVuLCBwYXJlbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBpc0lFMTAgPSBpc0lFKDEwKTtcbiAgdmFyIGlzSFRNTCA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xuICB2YXIgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTtcbiAgdmFyIHBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocGFyZW50KTtcbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChjaGlsZHJlbik7XG5cbiAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQpO1xuICB2YXIgYm9yZGVyVG9wV2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJUb3BXaWR0aCwgMTApO1xuICB2YXIgYm9yZGVyTGVmdFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyTGVmdFdpZHRoLCAxMCk7XG5cbiAgLy8gSW4gY2FzZXMgd2hlcmUgdGhlIHBhcmVudCBpcyBmaXhlZCwgd2UgbXVzdCBpZ25vcmUgbmVnYXRpdmUgc2Nyb2xsIGluIG9mZnNldCBjYWxjXG4gIGlmIChmaXhlZFBvc2l0aW9uICYmIGlzSFRNTCkge1xuICAgIHBhcmVudFJlY3QudG9wID0gTWF0aC5tYXgocGFyZW50UmVjdC50b3AsIDApO1xuICAgIHBhcmVudFJlY3QubGVmdCA9IE1hdGgubWF4KHBhcmVudFJlY3QubGVmdCwgMCk7XG4gIH1cbiAgdmFyIG9mZnNldHMgPSBnZXRDbGllbnRSZWN0KHtcbiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLFxuICAgIGxlZnQ6IGNoaWxkcmVuUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0IC0gYm9yZGVyTGVmdFdpZHRoLFxuICAgIHdpZHRoOiBjaGlsZHJlblJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0XG4gIH0pO1xuICBvZmZzZXRzLm1hcmdpblRvcCA9IDA7XG4gIG9mZnNldHMubWFyZ2luTGVmdCA9IDA7XG5cbiAgLy8gU3VidHJhY3QgbWFyZ2lucyBvZiBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBpdCdzIGJlaW5nIHVzZWQgYXMgcGFyZW50XG4gIC8vIHdlIGRvIHRoaXMgb25seSBvbiBIVE1MIGJlY2F1c2UgaXQncyB0aGUgb25seSBlbGVtZW50IHRoYXQgYmVoYXZlc1xuICAvLyBkaWZmZXJlbnRseSB3aGVuIG1hcmdpbnMgYXJlIGFwcGxpZWQgdG8gaXQuIFRoZSBtYXJnaW5zIGFyZSBpbmNsdWRlZCBpblxuICAvLyB0aGUgYm94IG9mIHRoZSBkb2N1bWVudEVsZW1lbnQsIGluIHRoZSBvdGhlciBjYXNlcyBub3QuXG4gIGlmICghaXNJRTEwICYmIGlzSFRNTCkge1xuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AsIDEwKTtcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQsIDEwKTtcblxuICAgIG9mZnNldHMudG9wIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMuYm90dG9tIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubGVmdCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuICAgIG9mZnNldHMucmlnaHQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcblxuICAgIC8vIEF0dGFjaCBtYXJnaW5Ub3AgYW5kIG1hcmdpbkxlZnQgYmVjYXVzZSBpbiBzb21lIGNpcmN1bXN0YW5jZXMgd2UgbWF5IG5lZWQgdGhlbVxuICAgIG9mZnNldHMubWFyZ2luVG9wID0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XG4gIH1cblxuICBpZiAoaXNJRTEwICYmICFmaXhlZFBvc2l0aW9uID8gcGFyZW50LmNvbnRhaW5zKHNjcm9sbFBhcmVudCkgOiBwYXJlbnQgPT09IHNjcm9sbFBhcmVudCAmJiBzY3JvbGxQYXJlbnQubm9kZU5hbWUgIT09ICdCT0RZJykge1xuICAgIG9mZnNldHMgPSBpbmNsdWRlU2Nyb2xsKG9mZnNldHMsIHBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKGVsZW1lbnQpIHtcbiAgdmFyIGV4Y2x1ZGVTY3JvbGwgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGVsZW1lbnQsIGh0bWwpO1xuICB2YXIgd2lkdGggPSBNYXRoLm1heChodG1sLmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgdmFyIGhlaWdodCA9IE1hdGgubWF4KGh0bWwuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG5cbiAgdmFyIHNjcm9sbFRvcCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwpIDogMDtcbiAgdmFyIHNjcm9sbExlZnQgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sLCAnbGVmdCcpIDogMDtcblxuICB2YXIgb2Zmc2V0ID0ge1xuICAgIHRvcDogc2Nyb2xsVG9wIC0gcmVsYXRpdmVPZmZzZXQudG9wICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luVG9wLFxuICAgIGxlZnQ6IHNjcm9sbExlZnQgLSByZWxhdGl2ZU9mZnNldC5sZWZ0ICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luTGVmdCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChvZmZzZXQpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGN1c3RvbUNvbnRhaW5lclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0byBcImlzRml4ZWQ/XCJcbiAqL1xuZnVuY3Rpb24gaXNGaXhlZChlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCAncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBwYXJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcbiAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkKHBhcmVudE5vZGUpO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBmaXJzdCBwYXJlbnQgb2YgYW4gZWxlbWVudCB0aGF0IGhhcyBhIHRyYW5zZm9ybWVkIHByb3BlcnR5IGRlZmluZWRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IGZpcnN0IHRyYW5zZm9ybWVkIHBhcmVudCBvciBkb2N1bWVudEVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5wYXJlbnRFbGVtZW50IHx8IGlzSUUoKSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgdmFyIGVsID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICB3aGlsZSAoZWwgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsLCAndHJhbnNmb3JtJykgPT09ICdub25lJykge1xuICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWwgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xufVxuXG4vKipcbiAqIENvbXB1dGVkIHRoZSBib3VuZGFyaWVzIGxpbWl0cyBhbmQgcmV0dXJuIHRoZW1cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQgLSBFbGVtZW50IHVzZWQgdG8gZGVmaW5lIHRoZSBib3VuZGFyaWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGZpeGVkUG9zaXRpb24gLSBJcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDb29yZGluYXRlcyBvZiB0aGUgYm91bmRhcmllc1xuICovXG5mdW5jdGlvbiBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcblxuICB2YXIgYm91bmRhcmllcyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG5cbiAgLy8gSGFuZGxlIHZpZXdwb3J0IGNhc2VcbiAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAndmlld3BvcnQnKSB7XG4gICAgYm91bmRhcmllcyA9IGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIEhhbmRsZSBvdGhlciBjYXNlcyBiYXNlZCBvbiBET00gZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXNcbiAgICB2YXIgYm91bmRhcmllc05vZGUgPSB2b2lkIDA7XG4gICAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShyZWZlcmVuY2UpKTtcbiAgICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd3aW5kb3cnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBib3VuZGFyaWVzRWxlbWVudDtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0cyA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShib3VuZGFyaWVzTm9kZSwgb2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcblxuICAgIC8vIEluIGNhc2Ugb2YgSFRNTCwgd2UgbmVlZCBhIGRpZmZlcmVudCBjb21wdXRhdGlvblxuICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnICYmICFpc0ZpeGVkKG9mZnNldFBhcmVudCkpIHtcbiAgICAgIHZhciBfZ2V0V2luZG93U2l6ZXMgPSBnZXRXaW5kb3dTaXplcyhwb3BwZXIub3duZXJEb2N1bWVudCksXG4gICAgICAgICAgaGVpZ2h0ID0gX2dldFdpbmRvd1NpemVzLmhlaWdodCxcbiAgICAgICAgICB3aWR0aCA9IF9nZXRXaW5kb3dTaXplcy53aWR0aDtcblxuICAgICAgYm91bmRhcmllcy50b3AgKz0gb2Zmc2V0cy50b3AgLSBvZmZzZXRzLm1hcmdpblRvcDtcbiAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7XG4gICAgICBib3VuZGFyaWVzLmxlZnQgKz0gb2Zmc2V0cy5sZWZ0IC0gb2Zmc2V0cy5tYXJnaW5MZWZ0O1xuICAgICAgYm91bmRhcmllcy5yaWdodCA9IHdpZHRoICsgb2Zmc2V0cy5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgYWxsIHRoZSBvdGhlciBET00gZWxlbWVudHMsIHRoaXMgb25lIGlzIGdvb2RcbiAgICAgIGJvdW5kYXJpZXMgPSBvZmZzZXRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYWRkaW5nc1xuICBwYWRkaW5nID0gcGFkZGluZyB8fCAwO1xuICB2YXIgaXNQYWRkaW5nTnVtYmVyID0gdHlwZW9mIHBhZGRpbmcgPT09ICdudW1iZXInO1xuICBib3VuZGFyaWVzLmxlZnQgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcubGVmdCB8fCAwO1xuICBib3VuZGFyaWVzLnRvcCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy50b3AgfHwgMDtcbiAgYm91bmRhcmllcy5yaWdodCAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5yaWdodCB8fCAwO1xuICBib3VuZGFyaWVzLmJvdHRvbSAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5ib3R0b20gfHwgMDtcblxuICByZXR1cm4gYm91bmRhcmllcztcbn1cblxuZnVuY3Rpb24gZ2V0QXJlYShfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDtcblxuICByZXR1cm4gd2lkdGggKiBoZWlnaHQ7XG59XG5cbi8qKlxuICogVXRpbGl0eSB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgYGF1dG9gIHBsYWNlbWVudCB0byB0aGUgcGxhY2VtZW50IHdpdGggbW9yZVxuICogYXZhaWxhYmxlIHNwYWNlLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQocGxhY2VtZW50LCByZWZSZWN0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIHBhZGRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDA7XG5cbiAgaWYgKHBsYWNlbWVudC5pbmRleE9mKCdhdXRvJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpO1xuXG4gIHZhciByZWN0cyA9IHtcbiAgICB0b3A6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiByZWZSZWN0LnRvcCAtIGJvdW5kYXJpZXMudG9wXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMucmlnaHQgLSByZWZSZWN0LnJpZ2h0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH0sXG4gICAgYm90dG9tOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5ib3R0b20gLSByZWZSZWN0LmJvdHRvbVxuICAgIH0sXG4gICAgbGVmdDoge1xuICAgICAgd2lkdGg6IHJlZlJlY3QubGVmdCAtIGJvdW5kYXJpZXMubGVmdCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNvcnRlZEFyZWFzID0gT2JqZWN0LmtleXMocmVjdHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGtleToga2V5XG4gICAgfSwgcmVjdHNba2V5XSwge1xuICAgICAgYXJlYTogZ2V0QXJlYShyZWN0c1trZXldKVxuICAgIH0pO1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIuYXJlYSAtIGEuYXJlYTtcbiAgfSk7XG5cbiAgdmFyIGZpbHRlcmVkQXJlYXMgPSBzb3J0ZWRBcmVhcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIHdpZHRoID0gX3JlZjIud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodDtcbiAgICByZXR1cm4gd2lkdGggPj0gcG9wcGVyLmNsaWVudFdpZHRoICYmIGhlaWdodCA+PSBwb3BwZXIuY2xpZW50SGVpZ2h0O1xuICB9KTtcblxuICB2YXIgY29tcHV0ZWRQbGFjZW1lbnQgPSBmaWx0ZXJlZEFyZWFzLmxlbmd0aCA+IDAgPyBmaWx0ZXJlZEFyZWFzWzBdLmtleSA6IHNvcnRlZEFyZWFzWzBdLmtleTtcblxuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgcmV0dXJuIGNvbXB1dGVkUGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7RWxlbWVudH0gZml4ZWRQb3NpdGlvbiAtIGlzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlKSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXG4gIHZhciBjb21tb25PZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG4gIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3V0ZXIgc2l6ZXMgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKG9mZnNldCBzaXplICsgbWFyZ2lucylcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVyU2l6ZXMoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wIHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luQm90dG9tIHx8IDApO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCB8fCAwKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCArIHksXG4gICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCArIHhcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50XG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudFxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgdmFyIGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIC0gQ1NTIHBvc2l0aW9uIHRoZSBQb3BwZXIgd2lsbCBnZXQgYXBwbGllZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhY2VtZW50IC0gb25lIG9mIHRoZSB2YWxpZCBwbGFjZW1lbnQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFBvcHBlck9mZnNldHMocG9wcGVyLCByZWZlcmVuY2VPZmZzZXRzLCBwbGFjZW1lbnQpIHtcbiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzXG4gIHZhciBwb3BwZXJSZWN0ID0gZ2V0T3V0ZXJTaXplcyhwb3BwZXIpO1xuXG4gIC8vIEFkZCBwb3NpdGlvbiwgd2lkdGggYW5kIGhlaWdodCB0byBvdXIgb2Zmc2V0cyBvYmplY3RcbiAgdmFyIHBvcHBlck9mZnNldHMgPSB7XG4gICAgd2lkdGg6IHBvcHBlclJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBwb3BwZXJSZWN0LmhlaWdodFxuICB9O1xuXG4gIC8vIGRlcGVuZGluZyBieSB0aGUgcG9wcGVyIHBsYWNlbWVudCB3ZSBoYXZlIHRvIGNvbXB1dGUgaXRzIG9mZnNldHMgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgdmFyIGlzSG9yaXogPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XG4gIHZhciBzZWNvbmRhcnlTaWRlID0gaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbbWFpblNpZGVdICsgcmVmZXJlbmNlT2Zmc2V0c1ttZWFzdXJlbWVudF0gLyAyIC0gcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyO1xuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gLSBwb3BwZXJSZWN0W3NlY29uZGFyeU1lYXN1cmVtZW50XTtcbiAgfSBlbHNlIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tnZXRPcHBvc2l0ZVBsYWNlbWVudChzZWNvbmRhcnlTaWRlKV07XG4gIH1cblxuICByZXR1cm4gcG9wcGVyT2Zmc2V0cztcbn1cblxuLyoqXG4gKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXlcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTtcbiAgfVxuXG4gIC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgXG4gIHJldHVybiBhcnIuZmlsdGVyKGNoZWNrKVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBtYXRjaGluZyBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgcHJvcCwgdmFsdWUpIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kSW5kZXggaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XG4gICAgcmV0dXJuIGFyci5maW5kSW5kZXgoZnVuY3Rpb24gKGN1cikge1xuICAgICAgcmV0dXJuIGN1cltwcm9wXSA9PT0gdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZFxuICB2YXIgbWF0Y2ggPSBmaW5kKGFyciwgZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmpbcHJvcF0gPT09IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIGFyci5pbmRleE9mKG1hdGNoKTtcbn1cblxuLyoqXG4gKiBMb29wIHRyb3VnaCB0aGUgbGlzdCBvZiBtb2RpZmllcnMgYW5kIHJ1biB0aGVtIGluIG9yZGVyLFxuICogZWFjaCBvZiB0aGVtIHdpbGwgdGhlbiBlZGl0IHRoZSBkYXRhIG9iamVjdC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5kcyAtIE9wdGlvbmFsIG1vZGlmaWVyIG5hbWUgdXNlZCBhcyBzdG9wcGVyXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH1cbiAqL1xuZnVuY3Rpb24gcnVuTW9kaWZpZXJzKG1vZGlmaWVycywgZGF0YSwgZW5kcykge1xuICB2YXIgbW9kaWZpZXJzVG9SdW4gPSBlbmRzID09PSB1bmRlZmluZWQgPyBtb2RpZmllcnMgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4KG1vZGlmaWVycywgJ25hbWUnLCBlbmRzKSk7XG5cbiAgbW9kaWZpZXJzVG9SdW4uZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAobW9kaWZpZXJbJ2Z1bmN0aW9uJ10pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICBjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7XG4gICAgfVxuICAgIHZhciBmbiA9IG1vZGlmaWVyWydmdW5jdGlvbiddIHx8IG1vZGlmaWVyLmZuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgIGlmIChtb2RpZmllci5lbmFibGVkICYmIGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAvLyBBZGQgcHJvcGVydGllcyB0byBvZmZzZXRzIHRvIG1ha2UgdGhlbSBhIGNvbXBsZXRlIGNsaWVudFJlY3Qgb2JqZWN0XG4gICAgICAvLyB3ZSBkbyB0aGlzIGJlZm9yZSBlYWNoIG1vZGlmaWVyIHRvIG1ha2Ugc3VyZSB0aGUgcHJldmlvdXMgb25lIGRvZXNuJ3RcbiAgICAgIC8vIG1lc3Mgd2l0aCB0aGVzZSB2YWx1ZXNcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuICAgICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSk7XG5cbiAgICAgIGRhdGEgPSBmbihkYXRhLCBtb2RpZmllcik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLCBjb21wdXRpbmcgdGhlIG5ldyBvZmZzZXRzIGFuZCBhcHBseWluZ1xuICogdGhlIG5ldyBzdHlsZS48YnIgLz5cbiAqIFByZWZlciBgc2NoZWR1bGVVcGRhdGVgIG92ZXIgYHVwZGF0ZWAgYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSByZWFzb25zLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIC8vIGlmIHBvcHBlciBpcyBkZXN0cm95ZWQsIGRvbid0IHBlcmZvcm0gYW55IGZ1cnRoZXIgdXBkYXRlXG4gIGlmICh0aGlzLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRhdGEgPSB7XG4gICAgaW5zdGFuY2U6IHRoaXMsXG4gICAgc3R5bGVzOiB7fSxcbiAgICBhcnJvd1N0eWxlczoge30sXG4gICAgYXR0cmlidXRlczoge30sXG4gICAgZmxpcHBlZDogZmFsc2UsXG4gICAgb2Zmc2V0czoge31cbiAgfTtcblxuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZU9mZnNldHModGhpcy5zdGF0ZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIGRhdGEucGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQodGhpcy5vcHRpb25zLnBsYWNlbWVudCwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICAvLyBzdG9yZSB0aGUgY29tcHV0ZWQgcGxhY2VtZW50IGluc2lkZSBgb3JpZ2luYWxQbGFjZW1lbnRgXG4gIGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcblxuICBkYXRhLnBvc2l0aW9uRml4ZWQgPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZDtcblxuICAvLyBjb21wdXRlIHRoZSBwb3BwZXIgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0UG9wcGVyT2Zmc2V0cyh0aGlzLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnO1xuXG4gIC8vIHJ1biB0aGUgbW9kaWZpZXJzXG4gIGRhdGEgPSBydW5Nb2RpZmllcnModGhpcy5tb2RpZmllcnMsIGRhdGEpO1xuXG4gIC8vIHRoZSBmaXJzdCBgdXBkYXRlYCB3aWxsIGNhbGwgYG9uQ3JlYXRlYCBjYWxsYmFja1xuICAvLyB0aGUgb3RoZXIgb25lcyB3aWxsIGNhbGwgYG9uVXBkYXRlYCBjYWxsYmFja1xuICBpZiAoIXRoaXMuc3RhdGUuaXNDcmVhdGVkKSB7XG4gICAgdGhpcy5zdGF0ZS5pc0NyZWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMub3B0aW9ucy5vbkNyZWF0ZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBpcyBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgbW9kaWZpZXJOYW1lKSB7XG4gIHJldHVybiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgICBlbmFibGVkID0gX3JlZi5lbmFibGVkO1xuICAgIHJldHVybiBlbmFibGVkICYmIG5hbWUgPT09IG1vZGlmaWVyTmFtZTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBwcmVmaXhlZCBzdXBwb3J0ZWQgcHJvcGVydHkgbmFtZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5IChjYW1lbENhc2UpXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeClcbiAqL1xuZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7XG4gIHZhciBwcmVmaXhlcyA9IFtmYWxzZSwgJ21zJywgJ1dlYmtpdCcsICdNb3onLCAnTyddO1xuICB2YXIgdXBwZXJQcm9wID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgIHZhciB0b0NoZWNrID0gcHJlZml4ID8gJycgKyBwcmVmaXggKyB1cHBlclByb3AgOiBwcm9wZXJ0eTtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50LmJvZHkuc3R5bGVbdG9DaGVja10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdG9DaGVjaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRGVzdHJveXMgdGhlIHBvcHBlci5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgdGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCA9IHRydWU7XG5cbiAgLy8gdG91Y2ggRE9NIG9ubHkgaWYgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGlzIGVuYWJsZWRcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKHRoaXMubW9kaWZpZXJzLCAnYXBwbHlTdHlsZScpKSB7XG4gICAgdGhpcy5wb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd4LXBsYWNlbWVudCcpO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUudG9wID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUubGVmdCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnJpZ2h0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUuYm90dG9tID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUud2lsbENoYW5nZSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlW2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyldID0gJyc7XG4gIH1cblxuICB0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuXG4gIC8vIHJlbW92ZSB0aGUgcG9wcGVyIGlmIHVzZXIgZXhwbGljaXR5IGFza2VkIGZvciB0aGUgZGVsZXRpb24gb24gZGVzdHJveVxuICAvLyBkbyBub3QgdXNlIGByZW1vdmVgIGJlY2F1c2UgSUUxMSBkb2Vzbid0IHN1cHBvcnQgaXRcbiAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kpIHtcbiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge1dpbmRvd31cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KGVsZW1lbnQpIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbn1cblxuZnVuY3Rpb24gYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbFBhcmVudCwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKSB7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQubm9kZU5hbWUgPT09ICdCT0RZJztcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IHNjcm9sbFBhcmVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogc2Nyb2xsUGFyZW50O1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICBpZiAoIWlzQm9keSkge1xuICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LnBhcmVudE5vZGUpLCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpO1xuICB9XG4gIHNjcm9sbFBhcmVudHMucHVzaCh0YXJnZXQpO1xufVxuXG4vKipcbiAqIFNldHVwIG5lZWRlZCBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIG9wdGlvbnMsIHN0YXRlLCB1cGRhdGVCb3VuZCkge1xuICAvLyBSZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gdXBkYXRlQm91bmQ7XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgLy8gU2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHZhciBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJlZmVyZW5jZSk7XG4gIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxFbGVtZW50LCAnc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQsIHN0YXRlLnNjcm9sbFBhcmVudHMpO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IHRydWU7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgYWRkIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCBzdGFydCByZWNhbGN1bGF0aW5nXG4gKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIHRoaXMuc3RhdGUgPSBzZXR1cEV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIHN0YXRlKSB7XG4gIC8vIFJlbW92ZSByZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcblxuICAvLyBSZW1vdmUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHN0YXRlLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGVcbiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsO1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBudWxsO1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIHJlbW92ZSByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgd29uJ3QgcmVjYWxjdWxhdGUgcG9wcGVyIHBvc2l0aW9uXG4gKiB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC4gSXQgYWxzbyB3b24ndCB0cmlnZ2VyIGBvblVwZGF0ZWAgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT0gLTEgJiYgaXNOdW1lcmljKHN0eWxlc1twcm9wXSkpIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIHN0YXRlKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICB2YXIgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICB2YXIgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQob3B0aW9ucy5wbGFjZW1lbnQsIHJlZmVyZW5jZU9mZnNldHMsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtCb29sZWFufSBzaG91bGRSb3VuZCAtIElmIHRoZSBvZmZzZXRzIHNob3VsZCBiZSByb3VuZGVkIGF0IGFsbFxuICogQHJldHVybnMge09iamVjdH0gVGhlIHBvcHBlcidzIHBvc2l0aW9uIG9mZnNldHMgcm91bmRlZFxuICpcbiAqIFRoZSB0YWxlIG9mIHBpeGVsLXBlcmZlY3QgcG9zaXRpb25pbmcuIEl0J3Mgc3RpbGwgbm90IDEwMCUgcGVyZmVjdCwgYnV0IGFzXG4gKiBnb29kIGFzIGl0IGNhbiBiZSB3aXRoaW4gcmVhc29uLlxuICogRGlzY3Vzc2lvbiBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9wdWxsLzcxNVxuICpcbiAqIExvdyBEUEkgc2NyZWVucyBjYXVzZSBhIHBvcHBlciB0byBiZSBibHVycnkgaWYgbm90IHVzaW5nIGZ1bGwgcGl4ZWxzIChTYWZhcmlcbiAqIGFzIHdlbGwgb24gSGlnaCBEUEkgc2NyZWVucykuXG4gKlxuICogRmlyZWZveCBwcmVmZXJzIG5vIHJvdW5kaW5nIGZvciBwb3NpdGlvbmluZyBhbmQgZG9lcyBub3QgaGF2ZSBibHVycmluZXNzIG9uXG4gKiBoaWdoIERQSSBzY3JlZW5zLlxuICpcbiAqIE9ubHkgaG9yaXpvbnRhbCBwbGFjZW1lbnQgYW5kIGxlZnQvcmlnaHQgdmFsdWVzIG5lZWQgdG8gYmUgY29uc2lkZXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgc2hvdWxkUm91bmQpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kLFxuICAgICAgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4gIHZhciBub1JvdW5kID0gZnVuY3Rpb24gbm9Sb3VuZCh2KSB7XG4gICAgcmV0dXJuIHY7XG4gIH07XG5cbiAgdmFyIHJlZmVyZW5jZVdpZHRoID0gcm91bmQocmVmZXJlbmNlLndpZHRoKTtcbiAgdmFyIHBvcHBlcldpZHRoID0gcm91bmQocG9wcGVyLndpZHRoKTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoZGF0YS5wbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIGlzVmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuaW5kZXhPZignLScpICE9PSAtMTtcbiAgdmFyIHNhbWVXaWR0aFBhcml0eSA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gcG9wcGVyV2lkdGggJSAyO1xuICB2YXIgYm90aE9kZFdpZHRoID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSAxICYmIHBvcHBlcldpZHRoICUgMiA9PT0gMTtcblxuICB2YXIgaG9yaXpvbnRhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiBpc1ZlcnRpY2FsIHx8IGlzVmFyaWF0aW9uIHx8IHNhbWVXaWR0aFBhcml0eSA/IHJvdW5kIDogZmxvb3I7XG4gIHZhciB2ZXJ0aWNhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiByb3VuZDtcblxuICByZXR1cm4ge1xuICAgIGxlZnQ6IGhvcml6b250YWxUb0ludGVnZXIoYm90aE9kZFdpZHRoICYmICFpc1ZhcmlhdGlvbiAmJiBzaG91bGRSb3VuZCA/IHBvcHBlci5sZWZ0IC0gMSA6IHBvcHBlci5sZWZ0KSxcbiAgICB0b3A6IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci50b3ApLFxuICAgIGJvdHRvbTogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLmJvdHRvbSksXG4gICAgcmlnaHQ6IGhvcml6b250YWxUb0ludGVnZXIocG9wcGVyLnJpZ2h0KVxuICB9O1xufVxuXG52YXIgaXNGaXJlZm94ID0gaXNCcm93c2VyICYmIC9GaXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVN0eWxlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIHggPSBvcHRpb25zLngsXG4gICAgICB5ID0gb3B0aW9ucy55O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICAvLyBSZW1vdmUgdGhpcyBsZWdhY3kgc3VwcG9ydCBpbiBQb3BwZXIuanMgdjJcblxuICB2YXIgbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdhcHBseVN0eWxlJztcbiAgfSkuZ3B1QWNjZWxlcmF0aW9uO1xuICBpZiAobGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBncHVBY2NlbGVyYXRpb25gIG9wdGlvbiBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllciBhbmQgd2lsbCBub3QgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBQb3BwZXIuanMhJyk7XG4gIH1cbiAgdmFyIGdwdUFjY2VsZXJhdGlvbiA9IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkID8gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIDogb3B0aW9ucy5ncHVBY2NlbGVyYXRpb247XG5cbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG5cbiAgLy8gU3R5bGVzXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcG9zaXRpb246IHBvcHBlci5wb3NpdGlvblxuICB9O1xuXG4gIHZhciBvZmZzZXRzID0gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgd2luZG93LmRldmljZVBpeGVsUmF0aW8gPCAyIHx8ICFpc0ZpcmVmb3gpO1xuXG4gIHZhciBzaWRlQSA9IHggPT09ICdib3R0b20nID8gJ3RvcCcgOiAnYm90dG9tJztcbiAgdmFyIHNpZGVCID0geSA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsXG4gIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZVxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXG4gIHZhciBwcmVmaXhlZFByb3BlcnR5ID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcblxuICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pXG4gIC8vIElmIHRoZSBjb250ZW50IG9mIHRoZSBwb3BwZXIgZ3Jvd3Mgb25jZSBpdCdzIGJlZW4gcG9zaXRpb25lZCwgaXRcbiAgLy8gbWF5IGhhcHBlbiB0aGF0IHRoZSBwb3BwZXIgZ2V0cyBtaXNwbGFjZWQgYmVjYXVzZSBvZiB0aGUgbmV3IGNvbnRlbnRcbiAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgcHJvdmlkZSB0d28gb3B0aW9ucyAoeCBhbmQgeSksIHdoaWNoIGFsbG93XG4gIC8vIHRoZSBjb25zdW1lciB0byBkZWZpbmUgdGhlIG9mZnNldCBvcmlnaW4uXG4gIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0XG4gIC8vIGB4YCB0byBgdG9wYCB0byBtYWtlIHRoZSBwb3BwZXIgZ3JvdyB0b3dhcmRzIGl0cyB0b3AgaW5zdGVhZCBvZlxuICAvLyBpdHMgYm90dG9tLlxuICB2YXIgbGVmdCA9IHZvaWQgMCxcbiAgICAgIHRvcCA9IHZvaWQgMDtcbiAgaWYgKHNpZGVBID09PSAnYm90dG9tJykge1xuICAgIC8vIHdoZW4gb2Zmc2V0UGFyZW50IGlzIDxodG1sPiB0aGUgcG9zaXRpb25pbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIChleGNsdWRpbmcgdGhlIHNjcm9sbGJhcilcbiAgICAvLyBhbmQgbm90IHRoZSBib3R0b20gb2YgdGhlIGh0bWwgZWxlbWVudFxuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudFJlY3QuaGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRvcCA9IG9mZnNldHMudG9wO1xuICB9XG4gIGlmIChzaWRlQiA9PT0gJ3JpZ2h0Jykge1xuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZWZ0ID0gb2Zmc2V0cy5sZWZ0O1xuICB9XG4gIGlmIChncHVBY2NlbGVyYXRpb24gJiYgcHJlZml4ZWRQcm9wZXJ0eSkge1xuICAgIHN0eWxlc1twcmVmaXhlZFByb3BlcnR5XSA9ICd0cmFuc2xhdGUzZCgnICsgbGVmdCArICdweCwgJyArIHRvcCArICdweCwgMCknO1xuICAgIHN0eWxlc1tzaWRlQV0gPSAwO1xuICAgIHN0eWxlc1tzaWRlQl0gPSAwO1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gJ3RyYW5zZm9ybSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3Rod2VyaXNlLCB3ZSB1c2UgdGhlIHN0YW5kYXJkIGB0b3BgLCBgbGVmdGAsIGBib3R0b21gIGFuZCBgcmlnaHRgIHByb3BlcnRpZXNcbiAgICB2YXIgaW52ZXJ0VG9wID0gc2lkZUEgPT09ICdib3R0b20nID8gLTEgOiAxO1xuICAgIHZhciBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7XG4gICAgc3R5bGVzW3NpZGVBXSA9IHRvcCAqIGludmVydFRvcDtcbiAgICBzdHlsZXNbc2lkZUJdID0gbGVmdCAqIGludmVydExlZnQ7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBzaWRlQSArICcsICcgKyBzaWRlQjtcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZXNcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7XG4gICAgJ3gtcGxhY2VtZW50JzogZGF0YS5wbGFjZW1lbnRcbiAgfTtcblxuICAvLyBVcGRhdGUgYGRhdGFgIGF0dHJpYnV0ZXMsIHN0eWxlcyBhbmQgYXJyb3dTdHlsZXNcbiAgZGF0YS5hdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIGRhdGEuYXR0cmlidXRlcyk7XG4gIGRhdGEuc3R5bGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcywgZGF0YS5zdHlsZXMpO1xuICBkYXRhLmFycm93U3R5bGVzID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5hcnJvdywgZGF0YS5hcnJvd1N0eWxlcyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgZGVwZW5kcyBmcm9tIGFub3RoZXIgb25lLjxiciAvPlxuICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllclxuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RlZE5hbWUgLSBuYW1lIG9mIHJlcXVlc3RlZCBtb2RpZmllclxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJSZXF1aXJlZChtb2RpZmllcnMsIHJlcXVlc3RpbmdOYW1lLCByZXF1ZXN0ZWROYW1lKSB7XG4gIHZhciByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgcmV0dXJuIG5hbWUgPT09IHJlcXVlc3RpbmdOYW1lO1xuICB9KTtcblxuICB2YXIgaXNSZXF1aXJlZCA9ICEhcmVxdWVzdGluZyAmJiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gcmVxdWVzdGVkTmFtZSAmJiBtb2RpZmllci5lbmFibGVkICYmIG1vZGlmaWVyLm9yZGVyIDwgcmVxdWVzdGluZy5vcmRlcjtcbiAgfSk7XG5cbiAgaWYgKCFpc1JlcXVpcmVkKSB7XG4gICAgdmFyIF9yZXF1ZXN0aW5nID0gJ2AnICsgcmVxdWVzdGluZ05hbWUgKyAnYCc7XG4gICAgdmFyIHJlcXVlc3RlZCA9ICdgJyArIHJlcXVlc3RlZE5hbWUgKyAnYCc7XG4gICAgY29uc29sZS53YXJuKHJlcXVlc3RlZCArICcgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJyArIF9yZXF1ZXN0aW5nICsgJyBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICcgKyBfcmVxdWVzdGluZyArICchJyk7XG4gIH1cbiAgcmV0dXJuIGlzUmVxdWlyZWQ7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzJGFycm93O1xuXG4gIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGFycm93RWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgYSBzdHJpbmcsIHN1cHBvc2UgaXQncyBhIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgbm90IGZvdW5kLCBkb24ndCBydW4gdGhlIG1vZGlmaWVyXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZVxuICAgIC8vIHByb3ZpZGVkIERPTSBub2RlIGlzIGNoaWxkIG9mIGl0cyBwb3BwZXIgbm9kZVxuICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgYXJyb3cuZWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhJyk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNpZGVDYXBpdGFsaXplZCA9IGlzVmVydGljYWwgPyAnVG9wJyA6ICdMZWZ0JztcbiAgdmFyIHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGFsdFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICB2YXIgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xuXG4gIC8vXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xuICAvLyByZWZlcmVuY2UgaGF2ZSBlbm91Z2ggcGl4ZWxzIGluIGNvbmp1bmN0aW9uXG4gIC8vXG5cbiAgLy8gdG9wL2xlZnQgc2lkZVxuICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPSBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcbiAgfVxuICAvLyBib3R0b20vcmlnaHQgc2lkZVxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSArPSByZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplIC0gcG9wcGVyW29wU2lkZV07XG4gIH1cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG5cbiAgLy8gY29tcHV0ZSBjZW50ZXIgb2YgdGhlIHBvcHBlclxuICB2YXIgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgc2lkZVZhbHVlIHVzaW5nIHRoZSB1cGRhdGVkIHBvcHBlciBvZmZzZXRzXG4gIC8vIHRha2UgcG9wcGVyIG1hcmdpbiBpbiBhY2NvdW50IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGlzIGluZm8gYXZhaWxhYmxlXG4gIHZhciBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgcG9wcGVyTWFyZ2luU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydtYXJnaW4nICsgc2lkZUNhcGl0YWxpemVkXSwgMTApO1xuICB2YXIgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydib3JkZXInICsgc2lkZUNhcGl0YWxpemVkICsgJ1dpZHRoJ10sIDEwKTtcbiAgdmFyIHNpZGVWYWx1ZSA9IGNlbnRlciAtIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlIC0gcG9wcGVyQm9yZGVyU2lkZTtcblxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcbiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTtcblxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcbiAgZGF0YS5vZmZzZXRzLmFycm93ID0gKF9kYXRhJG9mZnNldHMkYXJyb3cgPSB7fSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgc2lkZSwgTWF0aC5yb3VuZChzaWRlVmFsdWUpKSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgYWx0U2lkZSwgJycpLCBfZGF0YSRvZmZzZXRzJGFycm93KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvblxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pIHtcbiAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gJ3N0YXJ0JztcbiAgfSBlbHNlIGlmICh2YXJpYXRpb24gPT09ICdzdGFydCcpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHZhcmlhdGlvbjtcbn1cblxuLyoqXG4gKiBMaXN0IG9mIGFjY2VwdGVkIHBsYWNlbWVudHMgdG8gdXNlIGFzIHZhbHVlcyBvZiB0aGUgYHBsYWNlbWVudGAgb3B0aW9uLjxiciAvPlxuICogVmFsaWQgcGxhY2VtZW50cyBhcmU6XG4gKiAtIGBhdXRvYFxuICogLSBgdG9wYFxuICogLSBgcmlnaHRgXG4gKiAtIGBib3R0b21gXG4gKiAtIGBsZWZ0YFxuICpcbiAqIEVhY2ggcGxhY2VtZW50IGNhbiBoYXZlIGEgdmFyaWF0aW9uIGZyb20gdGhpcyBsaXN0OlxuICogLSBgLXN0YXJ0YFxuICogLSBgLWVuZGBcbiAqXG4gKiBWYXJpYXRpb25zIGFyZSBpbnRlcnByZXRlZCBlYXNpbHkgaWYgeW91IHRoaW5rIG9mIHRoZW0gYXMgdGhlIGxlZnQgdG8gcmlnaHRcbiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGBcbiAqIGlzIHJpZ2h0LjxiciAvPlxuICogVmVydGljYWxseSAoYGxlZnRgIGFuZCBgcmlnaHRgKSwgYHN0YXJ0YCBpcyB0b3AgYW5kIGBlbmRgIGlzIGJvdHRvbS5cbiAqXG4gKiBTb21lIHZhbGlkIGV4YW1wbGVzIGFyZTpcbiAqIC0gYHRvcC1lbmRgIChvbiB0b3Agb2YgcmVmZXJlbmNlLCByaWdodCBhbGlnbmVkKVxuICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKVxuICogLSBgYm90dG9tYCAob24gYm90dG9tLCBjZW50ZXJlZClcbiAqIC0gYGF1dG8tZW5kYCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHtcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cblxudmFyIEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZSdcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMV0gfHwgJyc7XG5cbiAgdmFyIGZsaXBPcmRlciA9IFtdO1xuXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xuICAgIGNhc2UgQkVIQVZJT1JTLkZMSVA6XG4gICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50LCB0cnVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yO1xuICB9XG5cbiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIHZhciByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XG4gICAgdmFyIG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICAgIC8vIGZsaXBzIHZhcmlhdGlvbiBpZiByZWZlcmVuY2UgZWxlbWVudCBvdmVyZmxvd3MgYm91bmRhcmllc1xuICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uQnlSZWYgPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnMgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0xlZnQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1JpZ2h0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NUb3AgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NCb3R0b20pO1xuXG4gICAgLy8gZmxpcHMgdmFyaWF0aW9uIGlmIHBvcHBlciBjb250ZW50IG92ZXJmbG93cyBib3VuZGFyaWVzXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQgPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NMZWZ0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NCb3R0b20gfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NUb3ApO1xuXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb24gPSBmbGlwcGVkVmFyaWF0aW9uQnlSZWYgfHwgZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudDtcblxuICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzIHx8IGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgIC8vIHRoaXMgYm9vbGVhbiB0byBkZXRlY3QgYW55IGZsaXAgbG9vcFxuICAgICAgZGF0YS5mbGlwcGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gZmxpcE9yZGVyW2luZGV4ICsgMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAgIHZhcmlhdGlvbiA9IGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGRhdGEucGxhY2VtZW50ID0gcGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcblxuICAgICAgLy8gdGhpcyBvYmplY3QgY29udGFpbnMgYHBvc2l0aW9uYCwgd2Ugd2FudCB0byBwcmVzZXJ2ZSBpdCBhbG9uZyB3aXRoXG4gICAgICAvLyBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0eSB3ZSBtYXkgYWRkIGluIHRoZSBmdXR1cmVcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLnBvcHBlciwgZ2V0UG9wcGVyT2Zmc2V0cyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpKTtcblxuICAgICAgZGF0YSA9IHJ1bk1vZGlmaWVycyhkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZGF0YSwgJ2ZsaXAnKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGtlZXBUb2dldGhlcihkYXRhKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAncmlnaHQnIDogJ2JvdHRvbSc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgaWYgKHBvcHBlcltzaWRlXSA8IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSAtIHBvcHBlclttZWFzdXJlbWVudF07XG4gIH1cbiAgaWYgKHBvcHBlcltvcFNpZGVdID4gZmxvb3IocmVmZXJlbmNlW3NpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtzaWRlXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBjb250YWluaW5nIHZhbHVlICsgdW5pdCBpbnRvIGEgcHggdmFsdWUgbnVtYmVyXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gc3RyIC0gVmFsdWUgKyB1bml0IHN0cmluZ1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IG1lYXN1cmVtZW50IC0gYGhlaWdodGAgb3IgYHdpZHRoYFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAcmV0dXJucyB7TnVtYmVyfFN0cmluZ31cbiAqIFZhbHVlIGluIHBpeGVscywgb3Igb3JpZ2luYWwgc3RyaW5nIGlmIG5vIHZhbHVlcyB3ZXJlIGV4dHJhY3RlZFxuICovXG5mdW5jdGlvbiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpIHtcbiAgLy8gc2VwYXJhdGUgdmFsdWUgZnJvbSB1bml0XG4gIHZhciBzcGxpdCA9IHN0ci5tYXRjaCgvKCg/OlxcLXxcXCspP1xcZCpcXC4/XFxkKikoLiopLyk7XG4gIHZhciB2YWx1ZSA9ICtzcGxpdFsxXTtcbiAgdmFyIHVuaXQgPSBzcGxpdFsyXTtcblxuICAvLyBJZiBpdCdzIG5vdCBhIG51bWJlciBpdCdzIGFuIG9wZXJhdG9yLCBJIGd1ZXNzXG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgaWYgKHVuaXQuaW5kZXhPZignJScpID09PSAwKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB2b2lkIDA7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICclcCc6XG4gICAgICAgIGVsZW1lbnQgPSBwb3BwZXJPZmZzZXRzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyUnOlxuICAgICAgY2FzZSAnJXInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZWxlbWVudCA9IHJlZmVyZW5jZU9mZnNldHM7XG4gICAgfVxuXG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0KGVsZW1lbnQpO1xuICAgIHJldHVybiByZWN0W21lYXN1cmVtZW50XSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2UgaWYgKHVuaXQgPT09ICd2aCcgfHwgdW5pdCA9PT0gJ3Z3Jykge1xuICAgIC8vIGlmIGlzIGEgdmggb3IgdncsIHdlIGNhbGN1bGF0ZSB0aGUgc2l6ZSBiYXNlZCBvbiB0aGUgdmlld3BvcnRcbiAgICB2YXIgc2l6ZSA9IHZvaWQgMDtcbiAgICBpZiAodW5pdCA9PT0gJ3ZoJykge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gICAgfVxuICAgIHJldHVybiBzaXplIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgaXMgYW4gZXhwbGljaXQgcGl4ZWwgdW5pdCwgd2UgZ2V0IHJpZCBvZiB0aGUgdW5pdCBhbmQga2VlcCB0aGUgdmFsdWVcbiAgICAvLyBpZiBpcyBhbiBpbXBsaWNpdCB1bml0LCBpdCdzIHB4LCBhbmQgd2UgcmV0dXJuIGp1c3QgdGhlIHZhbHVlXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYW4gYG9mZnNldGAgc3RyaW5nIHRvIGV4dHJhcG9sYXRlIGB4YCBhbmQgYHlgIG51bWVyaWMgb2Zmc2V0cy5cbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBvZmZzZXRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IGJhc2VQbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtBcnJheX0gYSB0d28gY2VsbHMgYXJyYXkgd2l0aCB4IGFuZCB5IG9mZnNldHMgaW4gbnVtYmVyc1xuICovXG5mdW5jdGlvbiBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMsIGJhc2VQbGFjZW1lbnQpIHtcbiAgdmFyIG9mZnNldHMgPSBbMCwgMF07XG5cbiAgLy8gVXNlIGhlaWdodCBpZiBwbGFjZW1lbnQgaXMgbGVmdCBvciByaWdodCBhbmQgaW5kZXggaXMgMCBvdGhlcndpc2UgdXNlIHdpZHRoXG4gIC8vIGluIHRoaXMgd2F5IHRoZSBmaXJzdCBvZmZzZXQgd2lsbCB1c2UgYW4gYXhpcyBhbmQgdGhlIHNlY29uZCBvbmVcbiAgLy8gd2lsbCB1c2UgdGhlIG90aGVyIG9uZVxuICB2YXIgdXNlSGVpZ2h0ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgLy8gU3BsaXQgdGhlIG9mZnNldCBzdHJpbmcgdG8gb2J0YWluIGEgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzXG4gIC8vIFRoZSByZWdleCBhZGRyZXNzZXMgdmFsdWVzIHdpdGggdGhlIHBsdXMgb3IgbWludXMgc2lnbiBpbiBmcm9udCAoKzEwLCAtMjAsIGV0YylcbiAgdmFyIGZyYWdtZW50cyA9IG9mZnNldC5zcGxpdCgvKFxcK3xcXC0pLykubWFwKGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcudHJpbSgpO1xuICB9KTtcblxuICAvLyBEZXRlY3QgaWYgdGhlIG9mZnNldCBzdHJpbmcgY29udGFpbnMgYSBwYWlyIG9mIHZhbHVlcyBvciBhIHNpbmdsZSBvbmVcbiAgLy8gdGhleSBjb3VsZCBiZSBzZXBhcmF0ZWQgYnkgY29tbWEgb3Igc3BhY2VcbiAgdmFyIGRpdmlkZXIgPSBmcmFnbWVudHMuaW5kZXhPZihmaW5kKGZyYWdtZW50cywgZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy5zZWFyY2goLyx8XFxzLykgIT09IC0xO1xuICB9KSk7XG5cbiAgaWYgKGZyYWdtZW50c1tkaXZpZGVyXSAmJiBmcmFnbWVudHNbZGl2aWRlcl0uaW5kZXhPZignLCcpID09PSAtMSkge1xuICAgIGNvbnNvbGUud2FybignT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLicpO1xuICB9XG5cbiAgLy8gSWYgZGl2aWRlciBpcyBmb3VuZCwgd2UgZGl2aWRlIHRoZSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMgdG8gZGl2aWRlXG4gIC8vIHRoZW0gYnkgb2ZzZXQgWCBhbmQgWS5cbiAgdmFyIHNwbGl0UmVnZXggPSAvXFxzKixcXHMqfFxccysvO1xuICB2YXIgb3BzID0gZGl2aWRlciAhPT0gLTEgPyBbZnJhZ21lbnRzLnNsaWNlKDAsIGRpdmlkZXIpLmNvbmNhdChbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzBdXSksIFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMV1dLmNvbmNhdChmcmFnbWVudHMuc2xpY2UoZGl2aWRlciArIDEpKV0gOiBbZnJhZ21lbnRzXTtcblxuICAvLyBDb252ZXJ0IHRoZSB2YWx1ZXMgd2l0aCB1bml0cyB0byBhYnNvbHV0ZSBwaXhlbHMgdG8gYWxsb3cgb3VyIGNvbXB1dGF0aW9uc1xuICBvcHMgPSBvcHMubWFwKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICAvLyBNb3N0IG9mIHRoZSB1bml0cyByZWx5IG9uIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgcG9wcGVyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gKGluZGV4ID09PSAxID8gIXVzZUhlaWdodCA6IHVzZUhlaWdodCkgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgcmV0dXJuIG9wXG4gICAgLy8gVGhpcyBhZ2dyZWdhdGVzIGFueSBgK2Agb3IgYC1gIHNpZ24gdGhhdCBhcmVuJ3QgY29uc2lkZXJlZCBvcGVyYXRvcnNcbiAgICAvLyBlLmcuOiAxMCArICs1ID0+IFsxMCwgKywgKzVdXG4gICAgLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKGFbYS5sZW5ndGggLSAxXSA9PT0gJycgJiYgWycrJywgJy0nXS5pbmRleE9mKGIpICE9PSAtMSkge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IHRydWU7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIGlmIChtZXJnZVdpdGhQcmV2aW91cykge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gKz0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gICAgICB9XG4gICAgfSwgW10pXG4gICAgLy8gSGVyZSB3ZSBjb252ZXJ0IHRoZSBzdHJpbmcgdmFsdWVzIGludG8gbnVtYmVyIHZhbHVlcyAoaW4gcHgpXG4gICAgLm1hcChmdW5jdGlvbiAoc3RyKSB7XG4gICAgICByZXR1cm4gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gTG9vcCB0cm91Z2ggdGhlIG9mZnNldHMgYXJyYXlzIGFuZCBleGVjdXRlIHRoZSBvcGVyYXRpb25zXG4gIG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICBvcC5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnLCBpbmRleDIpIHtcbiAgICAgIGlmIChpc051bWVyaWMoZnJhZykpIHtcbiAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEBhcmd1bWVudCB7TnVtYmVyfFN0cmluZ30gb3B0aW9ucy5vZmZzZXQ9MFxuICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIG9mZnNldChkYXRhLCBfcmVmKSB7XG4gIHZhciBvZmZzZXQgPSBfcmVmLm9mZnNldDtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LFxuICAgICAgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICB2YXIgb2Zmc2V0cyA9IHZvaWQgMDtcbiAgaWYgKGlzTnVtZXJpYygrb2Zmc2V0KSkge1xuICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0cyA9IHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyLCByZWZlcmVuY2UsIGJhc2VQbGFjZW1lbnQpO1xuICB9XG5cbiAgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdyaWdodCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAndG9wJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMV07XG4gIH1cblxuICBkYXRhLnBvcHBlciA9IHBvcHBlcjtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBib3VuZGFyaWVzRWxlbWVudCA9IG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQgfHwgZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcblxuICAvLyBJZiBvZmZzZXRQYXJlbnQgaXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSByZWFsbHkgd2FudCB0b1xuICAvLyBnbyBvbmUgc3RlcCB1cCBhbmQgdXNlIHRoZSBuZXh0IG9mZnNldFBhcmVudCBhcyByZWZlcmVuY2UgdG9cbiAgLy8gYXZvaWQgdG8gbWFrZSB0aGlzIG1vZGlmaWVyIGNvbXBsZXRlbHkgdXNlbGVzcyBhbmQgbG9vayBsaWtlIGJyb2tlblxuICBpZiAoZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UgPT09IGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gICAgYm91bmRhcmllc0VsZW1lbnQgPSBnZXRPZmZzZXRQYXJlbnQoYm91bmRhcmllc0VsZW1lbnQpO1xuICB9XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc2V0cyB0aGUgcG9wcGVyJ3MgcG9zaXRpb24gc28gdGhhdCB0aGUgZG9jdW1lbnQgc2l6ZSBjYW4gYmUgY2FsY3VsYXRlZCBleGNsdWRpbmdcbiAgLy8gdGhlIHNpemUgb2YgdGhlIHBvcHBlciBlbGVtZW50IGl0c2VsZlxuICB2YXIgdHJhbnNmb3JtUHJvcCA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG4gIHZhciBwb3BwZXJTdHlsZXMgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5zdHlsZTsgLy8gYXNzaWdubWVudCB0byBoZWxwIG1pbmlmaWNhdGlvblxuICB2YXIgdG9wID0gcG9wcGVyU3R5bGVzLnRvcCxcbiAgICAgIGxlZnQgPSBwb3BwZXJTdHlsZXMubGVmdCxcbiAgICAgIHRyYW5zZm9ybSA9IHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXTtcblxuICBwb3BwZXJTdHlsZXMudG9wID0gJyc7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gJyc7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9ICcnO1xuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQsIGRhdGEucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBzdHlsZSBwcm9wZXJ0aWVzIGFmdGVyIHRoZSBvZmZzZXRzIGhhdmUgYmVlbiBjb21wdXRlZFxuICBwb3BwZXJTdHlsZXMudG9wID0gdG9wO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9IGxlZnQ7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybTtcblxuICBvcHRpb25zLmJvdW5kYXJpZXMgPSBib3VuZGFyaWVzO1xuXG4gIHZhciBvcmRlciA9IG9wdGlvbnMucHJpb3JpdHk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIHZhciBjaGVjayA9IHtcbiAgICBwcmltYXJ5OiBmdW5jdGlvbiBwcmltYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW3BsYWNlbWVudF07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPCBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWF4KHBvcHBlcltwbGFjZW1lbnRdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBwbGFjZW1lbnQsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNlY29uZGFyeTogZnVuY3Rpb24gc2Vjb25kYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIG1haW5TaWRlID0gcGxhY2VtZW50ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbbWFpblNpZGVdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdID4gYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1pbihwb3BwZXJbbWFpblNpZGVdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0gLSAocGxhY2VtZW50ID09PSAncmlnaHQnID8gcG9wcGVyLndpZHRoIDogcG9wcGVyLmhlaWdodCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBtYWluU2lkZSwgdmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICB2YXIgc2lkZSA9IFsnbGVmdCcsICd0b3AnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xID8gJ3ByaW1hcnknIDogJ3NlY29uZGFyeSc7XG4gICAgcG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgY2hlY2tbc2lkZV0ocGxhY2VtZW50KSk7XG4gIH0pO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBwb3BwZXI7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHNoaWZ0KGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgc2hpZnR2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICAvLyBpZiBzaGlmdCBzaGlmdHZhcmlhdGlvbiBpcyBzcGVjaWZpZWQsIHJ1biB0aGUgbW9kaWZpZXJcbiAgaWYgKHNoaWZ0dmFyaWF0aW9uKSB7XG4gICAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcjtcblxuICAgIHZhciBpc1ZlcnRpY2FsID0gWydib3R0b20nLCAndG9wJ10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG4gICAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICAgIHZhciBzaGlmdE9mZnNldHMgPSB7XG4gICAgICBzdGFydDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSksXG4gICAgICBlbmQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbWVhc3VyZW1lbnRdIC0gcG9wcGVyW21lYXN1cmVtZW50XSlcbiAgICB9O1xuXG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIHNoaWZ0T2Zmc2V0c1tzaGlmdHZhcmlhdGlvbl0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBoaWRlKGRhdGEpIHtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdoaWRlJywgJ3ByZXZlbnRPdmVyZmxvdycpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciBib3VuZCA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAncHJldmVudE92ZXJmbG93JztcbiAgfSkuYm91bmRhcmllcztcblxuICBpZiAocmVmUmVjdC5ib3R0b20gPCBib3VuZC50b3AgfHwgcmVmUmVjdC5sZWZ0ID4gYm91bmQucmlnaHQgfHwgcmVmUmVjdC50b3AgPiBib3VuZC5ib3R0b20gfHwgcmVmUmVjdC5yaWdodCA8IGJvdW5kLmxlZnQpIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSB0cnVlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IGZhbHNlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaW5uZXIoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNIb3JpeiA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBzdWJ0cmFjdExlbmd0aCA9IFsndG9wJywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID09PSAtMTtcblxuICBwb3BwZXJbaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnXSA9IHJlZmVyZW5jZVtiYXNlUGxhY2VtZW50XSAtIChzdWJ0cmFjdExlbmd0aCA/IHBvcHBlcltpc0hvcml6ID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA6IDApO1xuXG4gIGRhdGEucGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QocG9wcGVyKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBNb2RpZmllciBmdW5jdGlvbiwgZWFjaCBtb2RpZmllciBjYW4gaGF2ZSBhIGZ1bmN0aW9uIG9mIHRoaXMgdHlwZSBhc3NpZ25lZFxuICogdG8gaXRzIGBmbmAgcHJvcGVydHkuPGJyIC8+XG4gKiBUaGVzZSBmdW5jdGlvbnMgd2lsbCBiZSBjYWxsZWQgb24gZWFjaCB1cGRhdGUsIHRoaXMgbWVhbnMgdGhhdCB5b3UgbXVzdFxuICogbWFrZSBzdXJlIHRoZXkgYXJlIHBlcmZvcm1hbnQgZW5vdWdoIHRvIGF2b2lkIHBlcmZvcm1hbmNlIGJvdHRsZW5lY2tzLlxuICpcbiAqIEBmdW5jdGlvbiBNb2RpZmllckZuXG4gKiBAYXJndW1lbnQge2RhdGFPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge2RhdGFPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuXG4vKipcbiAqIE1vZGlmaWVycyBhcmUgcGx1Z2lucyB1c2VkIHRvIGFsdGVyIHRoZSBiZWhhdmlvciBvZiB5b3VyIHBvcHBlcnMuPGJyIC8+XG4gKiBQb3BwZXIuanMgdXNlcyBhIHNldCBvZiA5IG1vZGlmaWVycyB0byBwcm92aWRlIGFsbCB0aGUgYmFzaWMgZnVuY3Rpb25hbGl0aWVzXG4gKiBuZWVkZWQgYnkgdGhlIGxpYnJhcnkuXG4gKlxuICogVXN1YWxseSB5b3UgZG9uJ3Qgd2FudCB0byBvdmVycmlkZSB0aGUgYG9yZGVyYCwgYGZuYCBhbmQgYG9uTG9hZGAgcHJvcHMuXG4gKiBBbGwgdGhlIG90aGVyIHByb3BlcnRpZXMgYXJlIGNvbmZpZ3VyYXRpb25zIHRoYXQgY291bGQgYmUgdHdlYWtlZC5cbiAqIEBuYW1lc3BhY2UgbW9kaWZpZXJzXG4gKi9cbnZhciBtb2RpZmllcnMgPSB7XG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHNoaWZ0IHRoZSBwb3BwZXIgb24gdGhlIHN0YXJ0IG9yIGVuZCBvZiBpdHMgcmVmZXJlbmNlXG4gICAqIGVsZW1lbnQuPGJyIC8+XG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgdmFyaWF0aW9uIG9mIHRoZSBgcGxhY2VtZW50YCBwcm9wZXJ0eS48YnIgLz5cbiAgICogSXQgY2FuIGJlIG9uZSBlaXRoZXIgYC1lbmRgIG9yIGAtc3RhcnRgLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgc2hpZnQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAxMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBzaGlmdFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgYG9mZnNldGAgbW9kaWZpZXIgY2FuIHNoaWZ0IHlvdXIgcG9wcGVyIG9uIGJvdGggaXRzIGF4aXMuXG4gICAqXG4gICAqIEl0IGFjY2VwdHMgdGhlIGZvbGxvd2luZyB1bml0czpcbiAgICogLSBgcHhgIG9yIHVuaXQtbGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzXG4gICAqIC0gYCVgIG9yIGAlcmAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICogLSBgJXBgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcbiAgICogLSBgdmhgLCBDU1Mgdmlld3BvcnQgaGVpZ2h0IHVuaXRcbiAgICpcbiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz5cbiAgICogVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBwbGFjZW1lbnQgaXMgYHRvcGAgb3IgYGJvdHRvbWAsIHRoZSBsZW5ndGggd2lsbCBiZSB0aGVcbiAgICogYHdpZHRoYC4gSW4gY2FzZSBvZiBgbGVmdGAgb3IgYHJpZ2h0YCwgaXQgd2lsbCBiZSB0aGUgYGhlaWdodGAuXG4gICAqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSBhIHNpbmdsZSB2YWx1ZSAoYXMgYE51bWJlcmAgb3IgYFN0cmluZ2ApLCBvciBhIHBhaXIgb2YgdmFsdWVzXG4gICAqIGFzIGBTdHJpbmdgIGRpdmlkZWQgYnkgYSBjb21tYSBvciBvbmUgKG9yIG1vcmUpIHdoaXRlIHNwYWNlcy48YnIgLz5cbiAgICogVGhlIGxhdHRlciBpcyBhIGRlcHJlY2F0ZWQgbWV0aG9kIGJlY2F1c2UgaXQgbGVhZHMgdG8gY29uZnVzaW9uIGFuZCB3aWxsIGJlXG4gICAqIHJlbW92ZWQgaW4gdjIuPGJyIC8+XG4gICAqIEFkZGl0aW9uYWxseSwgaXQgYWNjZXB0cyBhZGRpdGlvbnMgYW5kIHN1YnRyYWN0aW9ucyBiZXR3ZWVuIGRpZmZlcmVudCB1bml0cy5cbiAgICogTm90ZSB0aGF0IG11bHRpcGxpY2F0aW9ucyBhbmQgZGl2aXNpb25zIGFyZW4ndCBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIFZhbGlkIGV4YW1wbGVzIGFyZTpcbiAgICogYGBgXG4gICAqIDEwXG4gICAqICcxMCUnXG4gICAqICcxMCwgMTAnXG4gICAqICcxMCUsIDEwJ1xuICAgKiAnMTAgKyAxMCUnXG4gICAqICcxMCAtIDV2aCArIDMlJ1xuICAgKiAnLTEwcHggKyA1dmgsIDVweCAtIDYlJ1xuICAgKiBgYGBcbiAgICogPiAqKk5CKio6IElmIHlvdSBkZXNpcmUgdG8gYXBwbHkgb2Zmc2V0cyB0byB5b3VyIHBvcHBlcnMgaW4gYSB3YXkgdGhhdCBtYXkgbWFrZSB0aGVtIG92ZXJsYXBcbiAgICogPiB3aXRoIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50LCB1bmZvcnR1bmF0ZWx5LCB5b3Ugd2lsbCBoYXZlIHRvIGRpc2FibGUgdGhlIGBmbGlwYCBtb2RpZmllci5cbiAgICogPiBZb3UgY2FuIHJlYWQgbW9yZSBvbiB0aGlzIGF0IHRoaXMgW2lzc3VlXShodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9pc3N1ZXMvMzczKS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIG9mZnNldDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0yMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDIwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IG9mZnNldCxcbiAgICAvKiogQHByb3Age051bWJlcnxTdHJpbmd9IG9mZnNldD0wXG4gICAgICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgb2Zmc2V0OiAwXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gcHJldmVudCB0aGUgcG9wcGVyIGZyb20gYmVpbmcgcG9zaXRpb25lZCBvdXRzaWRlIHRoZSBib3VuZGFyeS5cbiAgICpcbiAgICogQSBzY2VuYXJpbyBleGlzdHMgd2hlcmUgdGhlIHJlZmVyZW5jZSBpdHNlbGYgaXMgbm90IHdpdGhpbiB0aGUgYm91bmRhcmllcy48YnIgLz5cbiAgICogV2UgY2FuIHNheSBpdCBoYXMgXCJlc2NhcGVkIHRoZSBib3VuZGFyaWVzXCIg4oCUIG9yIGp1c3QgXCJlc2NhcGVkXCIuPGJyIC8+XG4gICAqIEluIHRoaXMgY2FzZSB3ZSBuZWVkIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSBwb3BwZXIgc2hvdWxkIGVpdGhlcjpcbiAgICpcbiAgICogLSBkZXRhY2ggZnJvbSB0aGUgcmVmZXJlbmNlIGFuZCByZW1haW4gXCJ0cmFwcGVkXCIgaW4gdGhlIGJvdW5kYXJpZXMsIG9yXG4gICAqIC0gaWYgaXQgc2hvdWxkIGlnbm9yZSB0aGUgYm91bmRhcnkgYW5kIFwiZXNjYXBlIHdpdGggaXRzIHJlZmVyZW5jZVwiXG4gICAqXG4gICAqIFdoZW4gYGVzY2FwZVdpdGhSZWZlcmVuY2VgIGlzIHNldCB0b2B0cnVlYCBhbmQgcmVmZXJlbmNlIGlzIGNvbXBsZXRlbHlcbiAgICogb3V0c2lkZSBpdHMgYm91bmRhcmllcywgdGhlIHBvcHBlciB3aWxsIG92ZXJmbG93IChvciBjb21wbGV0ZWx5IGxlYXZlKVxuICAgKiB0aGUgYm91bmRhcmllcyBpbiBvcmRlciB0byByZW1haW4gYXR0YWNoZWQgdG8gdGhlIGVkZ2Ugb2YgdGhlIHJlZmVyZW5jZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHByZXZlbnRPdmVyZmxvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0zMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDMwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7QXJyYXl9IFtwcmlvcml0eT1bJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddXVxuICAgICAqIFBvcHBlciB3aWxsIHRyeSB0byBwcmV2ZW50IG92ZXJmbG93IGZvbGxvd2luZyB0aGVzZSBwcmlvcml0aWVzIGJ5IGRlZmF1bHQsXG4gICAgICogdGhlbiwgaXQgY291bGQgb3ZlcmZsb3cgb24gdGhlIGxlZnQgYW5kIG9uIHRvcCBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHByaW9yaXR5OiBbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIEFtb3VudCBvZiBwaXhlbCB1c2VkIHRvIGRlZmluZSBhIG1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgYm91bmRhcmllc1xuICAgICAqIGFuZCB0aGUgcG9wcGVyLiBUaGlzIG1ha2VzIHN1cmUgdGhlIHBvcHBlciBhbHdheXMgaGFzIGEgbGl0dGxlIHBhZGRpbmdcbiAgICAgKiBiZXR3ZWVuIHRoZSBlZGdlcyBvZiBpdHMgY29udGFpbmVyXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0nc2Nyb2xsUGFyZW50J1xuICAgICAqIEJvdW5kYXJpZXMgdXNlZCBieSB0aGUgbW9kaWZpZXIuIENhbiBiZSBgc2Nyb2xsUGFyZW50YCwgYHdpbmRvd2AsXG4gICAgICogYHZpZXdwb3J0YCBvciBhbnkgRE9NIGVsZW1lbnQuXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICdzY3JvbGxQYXJlbnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSBzdXJlIHRoZSByZWZlcmVuY2UgYW5kIGl0cyBwb3BwZXIgc3RheSBuZWFyIGVhY2ggb3RoZXJcbiAgICogd2l0aG91dCBsZWF2aW5nIGFueSBnYXAgYmV0d2VlbiB0aGUgdHdvLiBFc3BlY2lhbGx5IHVzZWZ1bCB3aGVuIHRoZSBhcnJvdyBpc1xuICAgKiBlbmFibGVkIGFuZCB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCBpdCBwb2ludHMgdG8gaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBJdCBjYXJlcyBvbmx5IGFib3V0IHRoZSBmaXJzdCBheGlzLiBZb3UgY2FuIHN0aWxsIGhhdmUgcG9wcGVycyB3aXRoIG1hcmdpblxuICAgKiBiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGtlZXBUb2dldGhlcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj00MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDQwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGtlZXBUb2dldGhlclxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGlzIG1vZGlmaWVyIGlzIHVzZWQgdG8gbW92ZSB0aGUgYGFycm93RWxlbWVudGAgb2YgdGhlIHBvcHBlciB0byBtYWtlXG4gICAqIHN1cmUgaXQgaXMgcG9zaXRpb25lZCBiZXR3ZWVuIHRoZSByZWZlcmVuY2UgZWxlbWVudCBhbmQgaXRzIHBvcHBlciBlbGVtZW50LlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIG91dGVyIHNpemUgb2YgdGhlIGBhcnJvd0VsZW1lbnRgIG5vZGUgdG8gZGV0ZWN0IGhvdyBtYW55XG4gICAqIHBpeGVscyBvZiBjb25qdW5jdGlvbiBhcmUgbmVlZGVkLlxuICAgKlxuICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXJyb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA1MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcnJvdyxcbiAgICAvKiogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gZWxlbWVudD0nW3gtYXJyb3ddJyAtIFNlbGVjdG9yIG9yIG5vZGUgdXNlZCBhcyBhcnJvdyAqL1xuICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpXG4gICAgICovXG4gICAgYmVoYXZpb3I6ICdmbGlwJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgZmxpcCBpZiBpdCBoaXRzIHRoZSBlZGdlcyBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3ZpZXdwb3J0J1xuICAgICAqIFRoZSBlbGVtZW50IHdoaWNoIHdpbGwgZGVmaW5lIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwb3BwZXIgcG9zaXRpb24uXG4gICAgICogVGhlIHBvcHBlciB3aWxsIG5ldmVyIGJlIHBsYWNlZCBvdXRzaWRlIG9mIHRoZSBkZWZpbmVkIGJvdW5kYXJpZXNcbiAgICAgKiAoZXhjZXB0IGlmIGBrZWVwVG9nZXRoZXJgIGlzIGVuYWJsZWQpXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICd2aWV3cG9ydCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGZsaXBWYXJpYXRpb25zPWZhbHNlXG4gICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuXG4gICAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50IG92ZXJsYXBzIGl0cyBib3VuZGFyaWVzLlxuICAgICAqXG4gICAgICogVGhlIG9yaWdpbmFsIHBsYWNlbWVudCBzaG91bGQgaGF2ZSBhIHNldCB2YXJpYXRpb24uXG4gICAgICovXG4gICAgZmxpcFZhcmlhdGlvbnM6IGZhbHNlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBmbGlwVmFyaWF0aW9uc0J5Q29udGVudD1mYWxzZVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBzd2l0Y2ggcGxhY2VtZW50IHZhcmlhdGlvbiBiZXR3ZWVuIGAtc3RhcnRgIGFuZCBgLWVuZGAgd2hlblxuICAgICAqIHRoZSBwb3BwZXIgZWxlbWVudCBvdmVybGFwcyBpdHMgcmVmZXJlbmNlIGJvdW5kYXJpZXMuXG4gICAgICpcbiAgICAgKiBUaGUgb3JpZ2luYWwgcGxhY2VtZW50IHNob3VsZCBoYXZlIGEgc2V0IHZhcmlhdGlvbi5cbiAgICAgKi9cbiAgICBmbGlwVmFyaWF0aW9uc0J5Q29udGVudDogZmFsc2VcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHRoZSBwb3BwZXIgZmxvdyB0b3dhcmQgdGhlIGlubmVyIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgd2hlbiB0aGlzIG1vZGlmaWVyIGlzIGRpc2FibGVkLCB0aGUgcG9wcGVyIHdpbGwgYmUgcGxhY2VkIG91dHNpZGVcbiAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaW5uZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA3MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPWZhbHNlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGlubmVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gaGlkZSB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dHNpZGUgb2YgdGhlXG4gICAqIHBvcHBlciBib3VuZGFyaWVzLiBJdCB3aWxsIHNldCBhIGB4LW91dC1vZi1ib3VuZGFyaWVzYCBhdHRyaWJ1dGUgd2hpY2ggY2FuXG4gICAqIGJlIHVzZWQgdG8gaGlkZSB3aXRoIGEgQ1NTIHNlbGVjdG9yIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGlzXG4gICAqIG91dCBvZiBib3VuZGFyaWVzLlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBoaWRlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTgwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaGlkZVxuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgc3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50IHRvIGdldHNcbiAgICogcHJvcGVybHkgcG9zaXRpb25lZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgbW9kaWZpZXIgd2lsbCBub3QgdG91Y2ggdGhlIERPTSwgaXQganVzdCBwcmVwYXJlcyB0aGUgc3R5bGVzXG4gICAqIHNvIHRoYXQgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGNhbiBhcHBseSBpdC4gVGhpcyBzZXBhcmF0aW9uIGlzIHVzZWZ1bFxuICAgKiBpbiBjYXNlIHlvdSBuZWVkIHRvIHJlcGxhY2UgYGFwcGx5U3R5bGVgIHdpdGggYSBjdXN0b20gaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIFRoaXMgbW9kaWZpZXIgaGFzIGA4NTBgIGFzIGBvcmRlcmAgdmFsdWUgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgKiB3aXRoIHByZXZpb3VzIHZlcnNpb25zIG9mIFBvcHBlci5qcy4gRXhwZWN0IHRoZSBtb2RpZmllcnMgb3JkZXJpbmcgbWV0aG9kXG4gICAqIHRvIGNoYW5nZSBpbiBmdXR1cmUgbWFqb3IgdmVyc2lvbnMgb2YgdGhlIGxpYnJhcnkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBjb21wdXRlU3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODUwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4NTAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBjb21wdXRlU3R5bGUsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSBjb21wdXRlZCBzdHlsZXMgdG8gdGhlIHBvcHBlciBlbGVtZW50LlxuICAgKlxuICAgKiBBbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIGFyZSBsaW1pdGVkIHRvIHRoaXMgbW9kaWZpZXIuIFRoaXMgaXMgdXNlZnVsIGluIGNhc2VcbiAgICogeW91IHdhbnQgdG8gaW50ZWdyYXRlIFBvcHBlci5qcyBpbnNpZGUgYSBmcmFtZXdvcmsgb3IgdmlldyBsaWJyYXJ5IGFuZCB5b3VcbiAgICogd2FudCB0byBkZWxlZ2F0ZSBhbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIHRvIGl0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgeW91IGRpc2FibGUgdGhpcyBtb2RpZmllciwgeW91IG11c3QgbWFrZSBzdXJlIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiBoYXMgaXRzIHBvc2l0aW9uIHNldCB0byBgYWJzb2x1dGVgIGJlZm9yZSBQb3BwZXIuanMgY2FuIGRvIGl0cyB3b3JrIVxuICAgKlxuICAgKiBKdXN0IGRpc2FibGUgdGhpcyBtb2RpZmllciBhbmQgZGVmaW5lIHlvdXIgb3duIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXBwbHlTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj05MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDkwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFwcGx5U3R5bGUsXG4gICAgLyoqIEBwcm9wIHtGdW5jdGlvbn0gKi9cbiAgICBvbkxvYWQ6IGFwcGx5U3R5bGVPbkxvYWQsXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjEwLjAsIHRoZSBwcm9wZXJ0eSBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllclxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdW5kZWZpbmVkXG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9uIHVzZWQgYnkgUG9wcGVyLmpzLlxuICogVGhpcyBvYmplY3QgaXMgcGFzc2VkIHRvIG1vZGlmaWVycyBhbmQgdG8gdGhlIGBvbkNyZWF0ZWAgYW5kIGBvblVwZGF0ZWAgY2FsbGJhY2tzLlxuICogQG5hbWUgZGF0YU9iamVjdFxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuaW5zdGFuY2UgVGhlIFBvcHBlci5qcyBpbnN0YW5jZVxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEucGxhY2VtZW50IFBsYWNlbWVudCBhcHBsaWVkIHRvIHBvcHBlclxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgUGxhY2VtZW50IG9yaWdpbmFsbHkgZGVmaW5lZCBvbiBpbml0XG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuZmxpcHBlZCBUcnVlIGlmIHBvcHBlciBoYXMgYmVlbiBmbGlwcGVkIGJ5IGZsaXAgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5oaWRlIFRydWUgaWYgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dCBvZiBib3VuZGFyaWVzLCB1c2VmdWwgdG8ga25vdyB3aGVuIHRvIGhpZGUgdGhlIHBvcHBlclxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZGF0YS5hcnJvd0VsZW1lbnQgTm9kZSB1c2VkIGFzIGFycm93IGJ5IGFycm93IG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5zdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5hcnJvd1N0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBhcnJvdy4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmJvdW5kYXJpZXMgT2Zmc2V0cyBvZiB0aGUgcG9wcGVyIGJvdW5kYXJpZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMgVGhlIG1lYXN1cmVtZW50cyBvZiBwb3BwZXIsIHJlZmVyZW5jZSBhbmQgYXJyb3cgZWxlbWVudHNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgcHJvdmlkZWQgdG8gUG9wcGVyLmpzIGNvbnN0cnVjdG9yLjxiciAvPlxuICogVGhlc2UgY2FuIGJlIG92ZXJyaWRkZW4gdXNpbmcgdGhlIGBvcHRpb25zYCBhcmd1bWVudCBvZiBQb3BwZXIuanMuPGJyIC8+XG4gKiBUbyBvdmVycmlkZSBhbiBvcHRpb24sIHNpbXBseSBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXG4gKiBzdHJ1Y3R1cmUgb2YgdGhlIGBvcHRpb25zYCBvYmplY3QsIGFzIHRoZSAzcmQgYXJndW1lbnQuIEZvciBleGFtcGxlOlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZiwgcG9wLCB7XG4gKiAgIG1vZGlmaWVyczoge1xuICogICAgIHByZXZlbnRPdmVyZmxvdzogeyBlbmFibGVkOiBmYWxzZSB9XG4gKiAgIH1cbiAqIH0pXG4gKiBgYGBcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBEZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFBvcHBlcidzIHBsYWNlbWVudC5cbiAgICogQHByb3Age1BvcHBlci5wbGFjZW1lbnRzfSBwbGFjZW1lbnQ9J2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG5cbiAgLyoqXG4gICAqIFNldCB0aGlzIHRvIHRydWUgaWYgeW91IHdhbnQgcG9wcGVyIHRvIHBvc2l0aW9uIGl0IHNlbGYgaW4gJ2ZpeGVkJyBtb2RlXG4gICAqIEBwcm9wIHtCb29sZWFufSBwb3NpdGlvbkZpeGVkPWZhbHNlXG4gICAqL1xuICBwb3NpdGlvbkZpeGVkOiBmYWxzZSxcblxuICAvKipcbiAgICogV2hldGhlciBldmVudHMgKHJlc2l6ZSwgc2Nyb2xsKSBhcmUgaW5pdGlhbGx5IGVuYWJsZWQuXG4gICAqIEBwcm9wIHtCb29sZWFufSBldmVudHNFbmFibGVkPXRydWVcbiAgICovXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxuICAgKiB5b3UgY2FsbCB0aGUgYGRlc3Ryb3lgIG1ldGhvZC5cbiAgICogQHByb3Age0Jvb2xlYW59IHJlbW92ZU9uRGVzdHJveT1mYWxzZVxuICAgKi9cbiAgcmVtb3ZlT25EZXN0cm95OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvbkNyZWF0ZX1cbiAgICovXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQuIFRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qcy5cbiAgICogQHByb3Age21vZGlmaWVyc31cbiAgICovXG4gIG1vZGlmaWVyczogbW9kaWZpZXJzXG59O1xuXG4vKipcbiAqIEBjYWxsYmFjayBvbkNyZWF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgb25VcGRhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8vIFV0aWxzXG4vLyBNZXRob2RzXG52YXIgUG9wcGVyID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBQb3BwZXIuanMgaW5zdGFuY2UuXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtFbGVtZW50fHJlZmVyZW5jZU9iamVjdH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIC8gWE1MIGVsZW1lbnQgdXNlZCBhcyB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlIC0gVGhlIGdlbmVyYXRlZCBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICovXG4gIGZ1bmN0aW9uIFBvcHBlcihyZWZlcmVuY2UsIHBvcHBlcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wcGVyKTtcblxuICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF90aGlzLnVwZGF0ZSk7XG4gICAgfTtcblxuICAgIC8vIG1ha2UgdXBkYXRlKCkgZGVib3VuY2VkLCBzbyB0aGF0IGl0IG9ubHkgcnVucyBhdCBtb3N0IG9uY2UtcGVyLXRpY2tcbiAgICB0aGlzLnVwZGF0ZSA9IGRlYm91bmNlKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuXG4gICAgLy8gd2l0aCB7fSB3ZSBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG9wdGlvbnMgaW5zaWRlIGl0XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXVxuICAgIH07XG5cbiAgICAvLyBnZXQgcmVmZXJlbmNlIGFuZCBwb3BwZXIgZWxlbWVudHMgKGFsbG93IGpRdWVyeSB3cmFwcGVycylcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xuICAgIHRoaXMucG9wcGVyID0gcG9wcGVyICYmIHBvcHBlci5qcXVlcnkgPyBwb3BwZXJbMF0gOiBwb3BwZXI7XG5cbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzLCBvcHRpb25zLm1vZGlmaWVycykpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnNbbmFtZV0gfHwge30sIG9wdGlvbnMubW9kaWZpZXJzID8gb3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gOiB7fSk7XG4gICAgfSk7XG5cbiAgICAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSlcbiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSwgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0pO1xuICAgIH0pXG4gICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXG4gICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICB9KTtcblxuICAgIC8vIG1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgd2hlbiBQb3BwZXIuanMgZ2V0IGluaXRlZFxuICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXJcbiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb25cbiAgICAvLyBCRSBBV0FSRTogZG9uJ3QgYWRkIG9wdGlvbnMgdG8gYG9wdGlvbnMubW9kaWZpZXJzLm5hbWVgIGJ1dCB0byBgbW9kaWZpZXJPcHRpb25zYCFcbiAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck9wdGlvbnMpIHtcbiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7XG4gICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoX3RoaXMucmVmZXJlbmNlLCBfdGhpcy5wb3BwZXIsIF90aGlzLm9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgX3RoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlXG4gICAgdGhpcy51cGRhdGUoKTtcblxuICAgIHZhciBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XG4gICAgaWYgKGV2ZW50c0VuYWJsZWQpIHtcbiAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnNcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xuICB9XG5cbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXG4gIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVic1xuXG5cbiAgY3JlYXRlQ2xhc3MoUG9wcGVyLCBbe1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSQkMSgpIHtcbiAgICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSQkMSgpIHtcbiAgICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBlbmFibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rpc2FibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZXMgYW4gdXBkYXRlLiBJdCB3aWxsIHJ1biBvbiB0aGUgbmV4dCBVSSB1cGRhdGUgYXZhaWxhYmxlLlxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2YgdXRpbGl0aWVzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY3VzdG9tIG1vZGlmaWVycy5cbiAgICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICAgKlxuICAgICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgICAqIER1ZSB0byB0aGUgaGlnaCBpbnN0YWJpbGl0eSBvZiB0aGUgbWV0aG9kcyBjb250YWluZWQgaW4gVXRpbHMsIHdlIGNhbid0XG4gICAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAgICogQG1lbWJlciBVdGlsc1xuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuICB9XSk7XG4gIHJldHVybiBQb3BwZXI7XG59KCk7XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAuXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cblxuXG5Qb3BwZXIuVXRpbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpLlBvcHBlclV0aWxzO1xuUG9wcGVyLnBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuUG9wcGVyLkRlZmF1bHRzID0gRGVmYXVsdHM7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci5qcy5tYXBcbiIsIi8qIGdsb2JhbCBwcm9jZXNzICovXG4vKmVzbGludCBuby11bnVzZWQtdmFyczogW1wiZXJyb3JcIiwgeyBcInZhcnNJZ25vcmVQYXR0ZXJuXCI6IFwiU3RyaW5nSGVscGVyc3xGYWRlSW5UZXh0XCIgfV0qLyAvL2FsbG93IFN0cmluZ0hlbHBlcnMgdG8gYmUgaXBvcnRlZCAoZGVmaW5lZCkgYW5kIG5vdCBiZWluZyBleHBsaWNpdGx5IGNhbGxlZFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyB3aXRob3V0IHRyaWdnZXJpbmcgZXNsaW50IGVycm9yXG5pbXBvcnQgeyBTdHJpbmdIZWxwZXJzLCBGYWRlSW5UZXh0IH0gZnJvbSAnQFV0aWxzJzsgLy8gc3RyaW5nIGhlbHBlcnMgaXMgYW4gSUlGRVxuaW1wb3J0IEhJQSBmcm9tICcuL2hpYS5qcyc7XG5pbXBvcnQgJy4vY3NzL3N0eWxlcy5zY3NzJztcbmltcG9ydCAnLi9jc3MvbW9kYWwtc3R5bGVzLnNjc3MnO1xuXG5cbmNvbnN0IHNlbGVjdG9yID0gJyNwZXctYXBwJztcbmNvbnN0IEFwcCA9IG5ldyBISUEoc2VsZWN0b3IsIHsgLy8gZXh0ZW5kcyBQQ1RBcHAtanMuIFBDVEFwcC1qcydzIGNvbnN0cnVjdG9yIG1ldGhvZCBpcyBjYWxsZWQsIHAxIGNvbnRhaXVuZXIsIHAyIG9wdGlvbnNcblx0bmVlZHNSb3V0ZXI6IGZhbHNlXG59KTtcblxuaWYgKCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyB8fCB3aW5kb3cuSVNfUFJFUkVOREVSSU5HICl7IC8vIHByb2Nlc3MgZGV2ZWxvcG1lbnQgbWVhbnMgdXNpbmcgV2ViUGFjayBkZXYgc2VydmVyLiB3aW5kb3cgaXMgcHJlcmVuZGVyaW5nIG1lYW5zIGluXG5cdFxuICAgIEFwcC5wcmVyZW5kZXIoKTtcbn0gZWxzZSB7XG4gICAgQXBwLmluaXQoKTtcbiAgICBcbn0iLCIvKiBnbG9iYWwgcHJvY2VzcyAqL1xuLy91dGlsc1xuaW1wb3J0IFBhcGEgZnJvbSAncGFwYXBhcnNlJztcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzLWNvbGxlY3Rpb24nO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHN0YXRlTW9kdWxlIGFzIFMgfSBmcm9tICdzdGF0ZWZ1bC1kZWFkJztcbmltcG9ydCBQUyBmcm9tICdwdWJzdWItc2V0dGVyJztcblxuLy9pbXBvcnQgeyBwdWJsaXNoV2luZG93UmVzaXplIH0gZnJvbSAnQFV0aWxzJztcblxuLy9kYXRhIFxuaW1wb3J0IGZpZWxkcyBmcm9tICcuL2RhdGEvbWV0YWRhdGEuanNvbic7XG5pbXBvcnQgc3RhdGVBYmJyZXZpYXRpb25zIGZyb20gJy4vZGF0YS9zdGF0ZS1hYmJyZXZpYXRpb25zLmpzb24nO1xuaW1wb3J0IGFiYnJldmlhdGlvbnMgZnJvbSAnLi9kYXRhL2FiYnJldmlhdGlvbnMuanNvbic7XG5cbi8vdmlld3NcbmltcG9ydCBNZW51VmlldyBmcm9tICcuL3ZpZXdzL21lbnUtdmlldy8nO1xuaW1wb3J0IFNlY3Rpb25WaWV3IGZyb20gJy4vdmlld3Mvc2VjdGlvbi12aWV3Lyc7XG5pbXBvcnQgRGV0YWlsc1ZpZXcgZnJvbSAnLi92aWV3cy9kZXRhaWxzLXZpZXcvJztcbmltcG9ydCBNYXNrVmlldyBmcm9tICcuL3ZpZXdzL21hc2stdmlldy8nO1xuLy9pbXBvcnQgRmlmdHlTdGF0ZVZpZXcgZnJvbSAnLi92aWV3cy9maWZ0eS1zdGF0ZS8nO1xuXG4vLyBhcHAgcHJvdG90eXBlXG5pbXBvcnQgUENUQXBwIGZyb20gJ0BBcHAnO1xuXG4vL3N0YXRpYyBjb250ZW50XG4vL2ltcG9ydCBzZWN0aW9ucyBmcm9tICcuL3BhcnRpYWxzL3NlY3Rpb25zLmh0bWwnO1xuLy9pbXBvcnQgZm9vdGVyIGZyb20gJy4vcGFydGlhbHMvZm9vdGVyLmh0bWwnO1xuXG4vL3B1Ymxpc2hXaW5kb3dSZXNpemUoUyk7XG5cbi8vIHNvbWUgb2YgdGhlIGRhdGEgaGFzIG11bHRpcGxlIHZhbHVlcyBpbiBhIGZpZWxkLiBzb21lIG9mIHRoZXNlIG5lZWQgdG8gYmUgc2VwYXJhdGVkIG91dCBzbyB0aGV5IGNhbiBiZVxuLy8gdmlzdWFsaXplZCBzZXBhcmF0ZWx5LiBpZGVudGlmeSB0aG9zZSBmaWVsZHMgaGVyZVxuXG5jb25zdCB5ZWFyQnVja2V0cyA9IFsyMDIwLDIwMTcsMjAxMywyMDA5XTtcblxuY29uc3QgbW9kZWwgPSB7XG4gICAgZmllbGRzLFxuICAgIHN0YXRlQWJicmV2aWF0aW9ucyxcbiAgICBhYmJyZXZpYXRpb25zLFxuICAgIG5lc3RCeToge31cbn07XG5mdW5jdGlvbiBhZGRJRHMoZGF0YSl7XG4gICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgIGQuaWQgPSBpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gY2xlYW5IZWFkZXJSb3cobWF0Y2gpe1xuICAgIHZhciBoZWFkZXJzID0gbWF0Y2guc3BsaXQoJywnKTtcbiAgICByZXR1cm4gaGVhZGVycy5tYXAoZnVuY3Rpb24oZWFjaCl7XG4gICAgICAgIHJldHVybiBlYWNoLnJlcGxhY2UoJy9HZW9ncmFwaGljIFNjb3BlJywgJycpLnJlcGxhY2UoJy8nLCAnIG9yICcpLnJlcGxhY2UoJ0hJQSAnLCAnJykucmVwbGFjZSgnLScsICcgJykuZG9DYW1lbENhc2UoKTtcbiAgICB9KS5qb2luKCcsJyk7XG59XG5cbmZ1bmN0aW9uIGdldFJ1bnRpbWVEYXRhKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZVdyYXBwZXIsIHJlamVjdFdyYXBwZXIpID0+IHtcbiAgICAgICAgUGFwYS5wYXJzZSgnaHR0cHM6Ly93d3cucGV3dHJ1c3RzLm9yZy9hcGkvaGlwbWFwYXBpL2dldGRvd25sb2FkP3Jlc291cmNlVHlwZXM9SElBJTIwcmVwb3J0cyZzb3J0Qnk9cmVsZXZhbmNlJnNvcnRPcmRlcj1hc2MmbG9hZEFsbFBhZ2VzPXRydWUmcGFnZUlkPXtkOWRjNDdmMS0yYzc2LTQ0NGEtYjRlMy1iNjBkMjliYjMyMzd9Jywge1xuICAgICAgICAgICAgYmVmb3JlRmlyc3RDaHVuazogZnVuY3Rpb24oY2h1bmspe1xuICAgICAgICAgICAgICAgIHZhciBuZXdDaHVuayA9IGNodW5rLnJlcGxhY2UoLy4qLywgZnVuY3Rpb24obWF0Y2gpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xlYW5IZWFkZXJSb3cobWF0Y2gpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdDaHVuaztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVzdWx0cyl7XG4gICAgICAgICAgICAgICAgYWRkSURzKHJlc3VsdHMuZGF0YSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZVdyYXBwZXIocmVzdWx0cy5kYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkb3dubG9hZDogdHJ1ZSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihlcnJvciwgZmlsZSl7XG4gICAgICAgICAgICAgICAgcmVqZWN0V3JhcHBlcih7ZXJyb3IsZmlsZX0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICAgIHNraXBFbXB0eUxpbmVzOiB0cnVlLFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBmdW5jdGlvbih2YWx1ZSwgaGVhZGVyTmFtZSl7XG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoID0gbW9kZWwuZmllbGRzLmZpbmQocyA9PiBzLmtleSA9PT0gaGVhZGVyTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKCBtYXRjaCAmJiBtYXRjaC5zcGxpdFRvQXJyYXkgKXtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC8oW2Etel0pLChbQS1aXSkvZywgJyQxfCQyJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zcGxpdCgnfCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhZGREYXRlQnVja2V0cyhkYXRhKXtcbiAgICBcbiAgICBkYXRhLmZvckVhY2goZCA9PiB7XG4gICAgICAgIGlmICggaXNOYU4ocGFyc2VJbnQoZC5wdWJsaWNhdGlvbkRhdGUpKSApIHtcbiAgICAgICAgICAgIGxldCBzdHIgPSBkLnB1YmxpY2F0aW9uRGF0ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgZC5kYXRlQnVja2V0ID0gW3N0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB5ZWFyQnVja2V0cy5mb3JFYWNoKCh0aHJlc2hvbGQsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIHBhcnNlSW50KGQucHVibGljYXRpb25EYXRlKSA8IHRocmVzaG9sZCApe1xuICAgICAgICAgICAgICAgICAgICBkLmRhdGVCdWNrZXQgPSBpID09PSB5ZWFyQnVja2V0cy5sZW5ndGggLSAxID8gWydQcmlvciB0byAnICsgdGhyZXNob2xkXSA6IFtgJHt5ZWFyQnVja2V0c1tpICsgMV194oCTJHt5ZWFyQnVja2V0c1tpXSAtIDF9YF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSElBIGV4dGVuZHMgUENUQXBwIHtcbiAgICBwcmVyZW5kZXIoKSB7XG4gICAgICAgIGdldFJ1bnRpbWVEYXRhLmNhbGwodGhpcykudGhlbigodikgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBtb2RlbC5kYXRhID0gYWRkRGF0ZUJ1Y2tldHModik7XG4gICAgICAgICAgICAvKiBzZXQgZGF0YS1oYXNoIGF0dHJpYnV0ZSBvbiBjb250YWluZXIgb24gcHJlcmVuZGVyLiBsYXRlciBvbiBpbml0IHRoZSBoYXNoIHdpbGwgYmUgY29tcGFyZWQgYWdhaW5zdCB0aGUgZGF0YSBmZXRjaGVkIGF0IHJ1bnRpbWUgdG8gc2VlXG4gICAgICAgICAgICAgICBpZiBpdCBpcyB0aGUgc2FtZSBvciBub3QuIGlmIG5vdGUgdGhlIHNhbWUsIHZpZXdzIHdpbGwgaGF2ZSB0byBiZSByZXJlbmRlcmVkLiAqL1xuICAgICAgICAgICAgdGhpcy5tb2RlbCA9IG1vZGVsO1xuICAgICAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0YS1oYXNoJywgSlNPTi5zdHJpbmdpZnkodikuaGFzaENvZGUoKSk7IC8vIGhhc2hDb2RlIGlzIGhlbHBlciBmdW5jdGlvbiBmcm9tIHV0aWxzLCBpbXBvcnRlZCBhbmQgSUlGRSdkIGluIGluZGV4LmpzXG4gICAgICAgICAgICB0aGlzLm5lc3REYXRhKCk7XG4gICAgICAgICAgICB0aGlzLnB1c2hWaWV3cygpO1xuICAgICAgICAgICAgY29uc29sZS5sb2cobW9kZWwpO1xuICAgICAgICAgICAgUHJvbWlzZS5hbGwodGhpcy52aWV3cy5tYXAodmlldyA9PiB2aWV3LmlzUmVhZHkpKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uVmlld3NSZWFkeSgpO1xuICAgICAgICAgICAgICAgIGlmICggcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy9BcHAucHJlcmVuZGVyIGlzIGNhbGwgb25seSBpZiBlbnYgPSBkZXZlbG9wbWVudCBvciB3aW5kb3cgaXNQcmVyZW5kZXJpbmcgc28gaGVyZSB3aW5kb3cgaXMgcHJlcmVuZGVyaW5nXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdhbGwtdmlld3MtcmVhZHknKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvblZpZXdzUmVhZHkoKXtcbiAgICAgICAgLy9hZGp1c3QgaGVhZGluZyBoZWlnaHRcbiAgICAgICAgdmFyIGhlaWdodCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1kcm9wZG93bicpLm9mZnNldEhlaWdodCArIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1sZWdlbmQnKS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1pbnN0cnVjdC1oZWFkaW5nJykuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcbiAgICB9XG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy53b3JrZXIgPSBuZXcgV29ya2VyKCd3b3JrZXIuanMnKTtcbiAgICAgICAgdGhpcy52aWV3cy5sZW5ndGggPSAwO1xuICAgICAgICBcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLmJvZHlFdmVudExpc3RlbmVyQmluZCA9IHRoaXMuYm9keUV2ZW50TGlzdGVuZXJIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgIFBTLnNldFN1YnMoW1xuICAgICAgICAgICAgWydzZWxlY3RQcmltYXJ5R3JvdXAnLCB0aGlzLmJvZHlFdmVudExpc3RlbmVyQmluZF0sXG4gICAgICAgICAgIC8vIFsnc2VsZWN0SElBJywgdGhpcy5ib2R5RXZlbnRMaXN0ZW5lckJpbmRdXG4gICAgICAgIF0pO1xuICAgICAgICBnZXRSdW50aW1lRGF0YS5jYWxsKHRoaXMpLnRoZW4oKHYpID0+IHtcbiAgICAgICAgICAgIG1vZGVsLmRhdGEgPSBhZGREYXRlQnVja2V0cyh2KTtcbiAgICAgICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcbiAgICAgICAgICAgIGlmICggdGhpcy5lbC5kYXRhc2V0LmRhdGFIYXNoICE9IEpTT04uc3RyaW5naWZ5KHYpLmhhc2hDb2RlKCkgKXtcbiAgICAgICAgICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgnZGF0YS1kYXRhLW1pc21hdGNoJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5pc01pc21hdGNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5uZXN0RGF0YSgpO1xuXG4gICAgICAgICAgICB0aGlzLnB1c2hWaWV3cygpO1xuICAgICAgICAgICAgdGhpcy52aWV3cy5mb3JFYWNoKHZpZXcgPT4ge1xuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICB2aWV3LmluaXQodGhpcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgIH1cbiAgICBwdXNoVmlld3MoKXtcbiAgICAgICAgdGhpcy52aWV3cy5wdXNoKFxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoTWVudVZpZXcsICdkaXYjbWVudS12aWV3JyksXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudChTZWN0aW9uVmlldywgJ2RpdiNzZWN0aW9uLXZpZXcnKSxcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KERldGFpbHNWaWV3LCAnZGl2I2RldGFpbHMtdmlldycpLFxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoTWFza1ZpZXcsICdkaXYjbWFzay12aWV3JylcbiAgICAgICAgKTtcbiAgICB9XG4gICAgbmVzdERhdGEoKXtcbiAgICAgICAgdmFyIGZpZWxkc1RoYXROZWVkVG9CZUFycmF5cyA9ICB0aGlzLm1vZGVsLmZpZWxkcy5maWx0ZXIocyA9PiBzLnNwbGl0VG9BcnJheSA9PT0gdHJ1ZSkubWFwKGVhY2ggPT4gZWFjaC5rZXkpO1xuICAgICAgICB2YXIgb3RoZXJGaWVsZHNUb0JlVmlzdWFsaXplZCA9IHRoaXMubW9kZWwuZmllbGRzLmZpbHRlcihzID0+IHMuc3BsaXRUb0FycmF5ICE9PSB0cnVlKS5tYXAoZWFjaCA9PiBlYWNoLmtleSk7XG4gICAgICAgIGZ1bmN0aW9uIG5lc3REYXRhKGZpZWxkLCBlbnRyaWVzKXtcbiAgICAgICAgICAgIC8vdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBkMy5uZXN0KCkua2V5KGQgPT4gZFtmaWVsZF0pLmVudHJpZXMoZW50cmllcykuc29ydCgoYSxiKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoID0gdGhpcy5tb2RlbC5maWVsZHMuZmluZChmID0+IGYua2V5ID09PSBmaWVsZCk7XG4gICAgICAgICAgICAgICAgaWYgKCBtYXRjaC5vcmRlciApe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIGEua2V5ID09PSAnJyA/IDEgOiBiLmtleSA9PT0gJycgPyAtMSA6IG1hdGNoLm9yZGVyLmluZGV4T2YoYS5rZXkpIC0gbWF0Y2gub3JkZXIuaW5kZXhPZihiLmtleSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5rZXkgPT09ICcnID8gMSA6IGIua2V5ID09PSAnJyA/IC0xIDogYS52YWx1ZXMubGVuZ3RoID49IGIudmFsdWVzLmxlbmd0aCA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgb3RoZXJGaWVsZHNUb0JlVmlzdWFsaXplZC5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgICAgIHRoaXMubW9kZWwubmVzdEJ5W2ZpZWxkXSA9IG5lc3REYXRhLmNhbGwodGhpcywgZmllbGQsIHRoaXMubW9kZWwuZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgICBmaWVsZHNUaGF0TmVlZFRvQmVBcnJheXMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICAgICAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICAgICAgICAgIHRoaXMubW9kZWwuZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgICAgIGRbZmllbGRdLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2QgPSBfLmNsb25lRGVlcChkKTtcbiAgICAgICAgICAgICAgICAgICAgX2RbZmllbGRdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGFycmF5LnB1c2goX2QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1vZGVsLm5lc3RCeVtmaWVsZF0gPSBuZXN0RGF0YS5jYWxsKHRoaXMsIGZpZWxkLCBhcnJheSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjbGVhbktleShrZXkpIHtcbiAgICAgICAgXG4gICAgICAgIGlmICgga2V5ID09PSB1bmRlZmluZWQgKXtcbiAgICAgICAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgICAgIH1cbiAgICAgICAga2V5ID0gdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgPyBrZXkgOiBrZXlbMF07XG4gICAgICAgIGlmICgga2V5ID09PSAnJyApe1xuICAgICAgICAgICAgcmV0dXJuICdub25lJztcbiAgICAgICAgfVxuICAgICAgICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bJ1wi4oCd4oCZ4oCc4oCYLC4hPzsoKSY6L10vZywgJycpLmRvQ2FtZWxDYXNlKCk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgICBib2R5RXZlbnRMaXN0ZW5lckhhbmRsZXIobXNnLGRhdGEpe1xuICAgICAgICB2YXIgaGFuZGxlciA9IHRoaXMuYm9keUNsaWNrQ2xlYXI7XG4gICAgICAgICAgICBpZiAoIGRhdGEgIT09IG51bGwgKXtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgYm9keUNsaWNrQ2xlYXIoKXtcbiAgICAgICAgaWYgKCAhZG9jdW1lbnQuYm9keS5VSUNvbnRyb2xJc09wZW4gJiYgIVMuZ2V0U3RhdGUoJ3Nob3dBbGxEZXRhaWxzJykgKXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgUy5zZXRTdGF0ZSgnc2VsZWN0UHJpbWFyeUdyb3VwJywgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLyogQGxpY2Vuc2VcblBhcGEgUGFyc2VcbnY0LjYuM1xuaHR0cHM6Ly9naXRodWIuY29tL21ob2x0L1BhcGFQYXJzZVxuTGljZW5zZTogTUlUXG4qL1xuQXJyYXkuaXNBcnJheXx8KEFycmF5LmlzQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSksZnVuY3Rpb24oZSx0KXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPXQoKTplLlBhcGE9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHMsZSxmPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09Zj9mOnt9LG49IWYuZG9jdW1lbnQmJiEhZi5wb3N0TWVzc2FnZSxvPW4mJi8oXFw/fCYpcGFwYXdvcmtlcig9fCZ8JCkvLnRlc3QoZi5sb2NhdGlvbi5zZWFyY2gpLGE9ITEsaD17fSx1PTAsaz17cGFyc2U6ZnVuY3Rpb24oZSx0KXt2YXIgcj0odD10fHx7fSkuZHluYW1pY1R5cGluZ3x8ITE7eihyKSYmKHQuZHluYW1pY1R5cGluZ0Z1bmN0aW9uPXIscj17fSk7aWYodC5keW5hbWljVHlwaW5nPXIsdC50cmFuc2Zvcm09ISF6KHQudHJhbnNmb3JtKSYmdC50cmFuc2Zvcm0sdC53b3JrZXImJmsuV09SS0VSU19TVVBQT1JURUQpe3ZhciBpPWZ1bmN0aW9uKCl7aWYoIWsuV09SS0VSU19TVVBQT1JURUQpcmV0dXJuITE7aWYoIWEmJm51bGw9PT1rLlNDUklQVF9QQVRIKXRocm93IG5ldyBFcnJvcihcIlNjcmlwdCBwYXRoIGNhbm5vdCBiZSBkZXRlcm1pbmVkIGF1dG9tYXRpY2FsbHkgd2hlbiBQYXBhIFBhcnNlIGlzIGxvYWRlZCBhc3luY2hyb25vdXNseS4gWW91IG5lZWQgdG8gc2V0IFBhcGEuU0NSSVBUX1BBVEggbWFudWFsbHkuXCIpO3ZhciBlPWsuU0NSSVBUX1BBVEh8fHM7ZSs9KC0xIT09ZS5pbmRleE9mKFwiP1wiKT9cIiZcIjpcIj9cIikrXCJwYXBhd29ya2VyXCI7dmFyIHQ9bmV3IGYuV29ya2VyKGUpO3JldHVybiB0Lm9ubWVzc2FnZT1tLHQuaWQ9dSsrLGhbdC5pZF09dH0oKTtyZXR1cm4gaS51c2VyU3RlcD10LnN0ZXAsaS51c2VyQ2h1bms9dC5jaHVuayxpLnVzZXJDb21wbGV0ZT10LmNvbXBsZXRlLGkudXNlckVycm9yPXQuZXJyb3IsdC5zdGVwPXoodC5zdGVwKSx0LmNodW5rPXoodC5jaHVuayksdC5jb21wbGV0ZT16KHQuY29tcGxldGUpLHQuZXJyb3I9eih0LmVycm9yKSxkZWxldGUgdC53b3JrZXIsdm9pZCBpLnBvc3RNZXNzYWdlKHtpbnB1dDplLGNvbmZpZzp0LHdvcmtlcklkOmkuaWR9KX12YXIgbj1udWxsO2suTk9ERV9TVFJFQU1fSU5QVVQsXCJzdHJpbmdcIj09dHlwZW9mIGU/bj10LmRvd25sb2FkP25ldyBjKHQpOm5ldyBfKHQpOiEwPT09ZS5yZWFkYWJsZSYmeihlLnJlYWQpJiZ6KGUub24pP249bmV3IGcodCk6KGYuRmlsZSYmZSBpbnN0YW5jZW9mIEZpbGV8fGUgaW5zdGFuY2VvZiBPYmplY3QpJiYobj1uZXcgcCh0KSk7cmV0dXJuIG4uc3RyZWFtKGUpfSx1bnBhcnNlOmZ1bmN0aW9uKGUsdCl7dmFyIGk9ITEsZz0hMCxtPVwiLFwiLHk9XCJcXHJcXG5cIixuPSdcIicscj0hMTshZnVuY3Rpb24oKXtpZihcIm9iamVjdFwiIT10eXBlb2YgdClyZXR1cm47XCJzdHJpbmdcIiE9dHlwZW9mIHQuZGVsaW1pdGVyfHxrLkJBRF9ERUxJTUlURVJTLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4tMSE9PXQuZGVsaW1pdGVyLmluZGV4T2YoZSl9KS5sZW5ndGh8fChtPXQuZGVsaW1pdGVyKTsoXCJib29sZWFuXCI9PXR5cGVvZiB0LnF1b3Rlc3x8QXJyYXkuaXNBcnJheSh0LnF1b3RlcykpJiYoaT10LnF1b3Rlcyk7XCJib29sZWFuXCIhPXR5cGVvZiB0LnNraXBFbXB0eUxpbmVzJiZcInN0cmluZ1wiIT10eXBlb2YgdC5za2lwRW1wdHlMaW5lc3x8KHI9dC5za2lwRW1wdHlMaW5lcyk7XCJzdHJpbmdcIj09dHlwZW9mIHQubmV3bGluZSYmKHk9dC5uZXdsaW5lKTtcInN0cmluZ1wiPT10eXBlb2YgdC5xdW90ZUNoYXImJihuPXQucXVvdGVDaGFyKTtcImJvb2xlYW5cIj09dHlwZW9mIHQuaGVhZGVyJiYoZz10LmhlYWRlcil9KCk7dmFyIHM9bmV3IFJlZ0V4cChNKG4pLFwiZ1wiKTtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9SlNPTi5wYXJzZShlKSk7aWYoQXJyYXkuaXNBcnJheShlKSl7aWYoIWUubGVuZ3RofHxBcnJheS5pc0FycmF5KGVbMF0pKXJldHVybiBvKG51bGwsZSxyKTtpZihcIm9iamVjdFwiPT10eXBlb2YgZVswXSlyZXR1cm4gbyhhKGVbMF0pLGUscil9ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZS5kYXRhJiYoZS5kYXRhPUpTT04ucGFyc2UoZS5kYXRhKSksQXJyYXkuaXNBcnJheShlLmRhdGEpJiYoZS5maWVsZHN8fChlLmZpZWxkcz1lLm1ldGEmJmUubWV0YS5maWVsZHMpLGUuZmllbGRzfHwoZS5maWVsZHM9QXJyYXkuaXNBcnJheShlLmRhdGFbMF0pP2UuZmllbGRzOmEoZS5kYXRhWzBdKSksQXJyYXkuaXNBcnJheShlLmRhdGFbMF0pfHxcIm9iamVjdFwiPT10eXBlb2YgZS5kYXRhWzBdfHwoZS5kYXRhPVtlLmRhdGFdKSksbyhlLmZpZWxkc3x8W10sZS5kYXRhfHxbXSxyKTt0aHJvd1wiZXhjZXB0aW9uOiBVbmFibGUgdG8gc2VyaWFsaXplIHVucmVjb2duaXplZCBpbnB1dFwiO2Z1bmN0aW9uIGEoZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUpcmV0dXJuW107dmFyIHQ9W107Zm9yKHZhciByIGluIGUpdC5wdXNoKHIpO3JldHVybiB0fWZ1bmN0aW9uIG8oZSx0LHIpe3ZhciBpPVwiXCI7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPUpTT04ucGFyc2UoZSkpLFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1KU09OLnBhcnNlKHQpKTt2YXIgbj1BcnJheS5pc0FycmF5KGUpJiYwPGUubGVuZ3RoLHM9IUFycmF5LmlzQXJyYXkodFswXSk7aWYobiYmZyl7Zm9yKHZhciBhPTA7YTxlLmxlbmd0aDthKyspMDxhJiYoaSs9bSksaSs9dihlW2FdLGEpOzA8dC5sZW5ndGgmJihpKz15KX1mb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIGg9bj9lLmxlbmd0aDp0W29dLmxlbmd0aCx1PSExLGY9bj8wPT09T2JqZWN0LmtleXModFtvXSkubGVuZ3RoOjA9PT10W29dLmxlbmd0aDtpZihyJiYhbiYmKHU9XCJncmVlZHlcIj09PXI/XCJcIj09PXRbb10uam9pbihcIlwiKS50cmltKCk6MT09PXRbb10ubGVuZ3RoJiYwPT09dFtvXVswXS5sZW5ndGgpLFwiZ3JlZWR5XCI9PT1yJiZuKXtmb3IodmFyIGQ9W10sbD0wO2w8aDtsKyspe3ZhciBjPXM/ZVtsXTpsO2QucHVzaCh0W29dW2NdKX11PVwiXCI9PT1kLmpvaW4oXCJcIikudHJpbSgpfWlmKCF1KXtmb3IodmFyIHA9MDtwPGg7cCsrKXswPHAmJiFmJiYoaSs9bSk7dmFyIF89biYmcz9lW3BdOnA7aSs9dih0W29dW19dLHApfW88dC5sZW5ndGgtMSYmKCFyfHwwPGgmJiFmKSYmKGkrPXkpfX1yZXR1cm4gaX1mdW5jdGlvbiB2KGUsdCl7aWYobnVsbD09ZSlyZXR1cm5cIlwiO2lmKGUuY29uc3RydWN0b3I9PT1EYXRlKXJldHVybiBKU09OLnN0cmluZ2lmeShlKS5zbGljZSgxLDI1KTtlPWUudG9TdHJpbmcoKS5yZXBsYWNlKHMsbituKTt2YXIgcj1cImJvb2xlYW5cIj09dHlwZW9mIGkmJml8fEFycmF5LmlzQXJyYXkoaSkmJmlbdF18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspaWYoLTE8ZS5pbmRleE9mKHRbcl0pKXJldHVybiEwO3JldHVybiExfShlLGsuQkFEX0RFTElNSVRFUlMpfHwtMTxlLmluZGV4T2YobSl8fFwiIFwiPT09ZS5jaGFyQXQoMCl8fFwiIFwiPT09ZS5jaGFyQXQoZS5sZW5ndGgtMSk7cmV0dXJuIHI/bitlK246ZX19fTtpZihrLlJFQ09SRF9TRVA9U3RyaW5nLmZyb21DaGFyQ29kZSgzMCksay5VTklUX1NFUD1TdHJpbmcuZnJvbUNoYXJDb2RlKDMxKSxrLkJZVEVfT1JERVJfTUFSSz1cIlxcdWZlZmZcIixrLkJBRF9ERUxJTUlURVJTPVtcIlxcclwiLFwiXFxuXCIsJ1wiJyxrLkJZVEVfT1JERVJfTUFSS10say5XT1JLRVJTX1NVUFBPUlRFRD0hbiYmISFmLldvcmtlcixrLlNDUklQVF9QQVRIPW51bGwsay5OT0RFX1NUUkVBTV9JTlBVVD0xLGsuTG9jYWxDaHVua1NpemU9MTA0ODU3NjAsay5SZW1vdGVDaHVua1NpemU9NTI0Mjg4MCxrLkRlZmF1bHREZWxpbWl0ZXI9XCIsXCIsay5QYXJzZXI9dixrLlBhcnNlckhhbmRsZT1yLGsuTmV0d29ya1N0cmVhbWVyPWMsay5GaWxlU3RyZWFtZXI9cCxrLlN0cmluZ1N0cmVhbWVyPV8say5SZWFkYWJsZVN0cmVhbVN0cmVhbWVyPWcsZi5qUXVlcnkpe3ZhciBkPWYualF1ZXJ5O2QuZm4ucGFyc2U9ZnVuY3Rpb24obyl7dmFyIHI9by5jb25maWd8fHt9LGg9W107cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKXtpZighKFwiSU5QVVRcIj09PWQodGhpcykucHJvcChcInRhZ05hbWVcIikudG9VcHBlckNhc2UoKSYmXCJmaWxlXCI9PT1kKHRoaXMpLmF0dHIoXCJ0eXBlXCIpLnRvTG93ZXJDYXNlKCkmJmYuRmlsZVJlYWRlcil8fCF0aGlzLmZpbGVzfHwwPT09dGhpcy5maWxlcy5sZW5ndGgpcmV0dXJuITA7Zm9yKHZhciB0PTA7dDx0aGlzLmZpbGVzLmxlbmd0aDt0KyspaC5wdXNoKHtmaWxlOnRoaXMuZmlsZXNbdF0saW5wdXRFbGVtOnRoaXMsaW5zdGFuY2VDb25maWc6ZC5leHRlbmQoe30scil9KX0pLGUoKSx0aGlzO2Z1bmN0aW9uIGUoKXtpZigwIT09aC5sZW5ndGgpe3ZhciBlLHQscixpLG49aFswXTtpZih6KG8uYmVmb3JlKSl7dmFyIHM9by5iZWZvcmUobi5maWxlLG4uaW5wdXRFbGVtKTtpZihcIm9iamVjdFwiPT10eXBlb2Ygcyl7aWYoXCJhYm9ydFwiPT09cy5hY3Rpb24pcmV0dXJuIGU9XCJBYm9ydEVycm9yXCIsdD1uLmZpbGUscj1uLmlucHV0RWxlbSxpPXMucmVhc29uLHZvaWQoeihvLmVycm9yKSYmby5lcnJvcih7bmFtZTplfSx0LHIsaSkpO2lmKFwic2tpcFwiPT09cy5hY3Rpb24pcmV0dXJuIHZvaWQgdSgpO1wib2JqZWN0XCI9PXR5cGVvZiBzLmNvbmZpZyYmKG4uaW5zdGFuY2VDb25maWc9ZC5leHRlbmQobi5pbnN0YW5jZUNvbmZpZyxzLmNvbmZpZykpfWVsc2UgaWYoXCJza2lwXCI9PT1zKXJldHVybiB2b2lkIHUoKX12YXIgYT1uLmluc3RhbmNlQ29uZmlnLmNvbXBsZXRlO24uaW5zdGFuY2VDb25maWcuY29tcGxldGU9ZnVuY3Rpb24oZSl7eihhKSYmYShlLG4uZmlsZSxuLmlucHV0RWxlbSksdSgpfSxrLnBhcnNlKG4uZmlsZSxuLmluc3RhbmNlQ29uZmlnKX1lbHNlIHooby5jb21wbGV0ZSkmJm8uY29tcGxldGUoKX1mdW5jdGlvbiB1KCl7aC5zcGxpY2UoMCwxKSxlKCl9fX1mdW5jdGlvbiBsKGUpe3RoaXMuX2hhbmRsZT1udWxsLHRoaXMuX2ZpbmlzaGVkPSExLHRoaXMuX2NvbXBsZXRlZD0hMSx0aGlzLl9pbnB1dD1udWxsLHRoaXMuX2Jhc2VJbmRleD0wLHRoaXMuX3BhcnRpYWxMaW5lPVwiXCIsdGhpcy5fcm93Q291bnQ9MCx0aGlzLl9zdGFydD0wLHRoaXMuX25leHRDaHVuaz1udWxsLHRoaXMuaXNGaXJzdENodW5rPSEwLHRoaXMuX2NvbXBsZXRlUmVzdWx0cz17ZGF0YTpbXSxlcnJvcnM6W10sbWV0YTp7fX0sZnVuY3Rpb24oZSl7dmFyIHQ9RShlKTt0LmNodW5rU2l6ZT1wYXJzZUludCh0LmNodW5rU2l6ZSksZS5zdGVwfHxlLmNodW5rfHwodC5jaHVua1NpemU9bnVsbCk7dGhpcy5faGFuZGxlPW5ldyByKHQpLCh0aGlzLl9oYW5kbGUuc3RyZWFtZXI9dGhpcykuX2NvbmZpZz10fS5jYWxsKHRoaXMsZSksdGhpcy5wYXJzZUNodW5rPWZ1bmN0aW9uKGUsdCl7aWYodGhpcy5pc0ZpcnN0Q2h1bmsmJnoodGhpcy5fY29uZmlnLmJlZm9yZUZpcnN0Q2h1bmspKXt2YXIgcj10aGlzLl9jb25maWcuYmVmb3JlRmlyc3RDaHVuayhlKTt2b2lkIDAhPT1yJiYoZT1yKX10aGlzLmlzRmlyc3RDaHVuaz0hMTt2YXIgaT10aGlzLl9wYXJ0aWFsTGluZStlO3RoaXMuX3BhcnRpYWxMaW5lPVwiXCI7dmFyIG49dGhpcy5faGFuZGxlLnBhcnNlKGksdGhpcy5fYmFzZUluZGV4LCF0aGlzLl9maW5pc2hlZCk7aWYoIXRoaXMuX2hhbmRsZS5wYXVzZWQoKSYmIXRoaXMuX2hhbmRsZS5hYm9ydGVkKCkpe3ZhciBzPW4ubWV0YS5jdXJzb3I7dGhpcy5fZmluaXNoZWR8fCh0aGlzLl9wYXJ0aWFsTGluZT1pLnN1YnN0cmluZyhzLXRoaXMuX2Jhc2VJbmRleCksdGhpcy5fYmFzZUluZGV4PXMpLG4mJm4uZGF0YSYmKHRoaXMuX3Jvd0NvdW50Kz1uLmRhdGEubGVuZ3RoKTt2YXIgYT10aGlzLl9maW5pc2hlZHx8dGhpcy5fY29uZmlnLnByZXZpZXcmJnRoaXMuX3Jvd0NvdW50Pj10aGlzLl9jb25maWcucHJldmlldztpZihvKWYucG9zdE1lc3NhZ2Uoe3Jlc3VsdHM6bix3b3JrZXJJZDprLldPUktFUl9JRCxmaW5pc2hlZDphfSk7ZWxzZSBpZih6KHRoaXMuX2NvbmZpZy5jaHVuaykmJiF0KXtpZih0aGlzLl9jb25maWcuY2h1bmsobix0aGlzLl9oYW5kbGUpLHRoaXMuX2hhbmRsZS5wYXVzZWQoKXx8dGhpcy5faGFuZGxlLmFib3J0ZWQoKSlyZXR1cm47bj12b2lkIDAsdGhpcy5fY29tcGxldGVSZXN1bHRzPXZvaWQgMH1yZXR1cm4gdGhpcy5fY29uZmlnLnN0ZXB8fHRoaXMuX2NvbmZpZy5jaHVua3x8KHRoaXMuX2NvbXBsZXRlUmVzdWx0cy5kYXRhPXRoaXMuX2NvbXBsZXRlUmVzdWx0cy5kYXRhLmNvbmNhdChuLmRhdGEpLHRoaXMuX2NvbXBsZXRlUmVzdWx0cy5lcnJvcnM9dGhpcy5fY29tcGxldGVSZXN1bHRzLmVycm9ycy5jb25jYXQobi5lcnJvcnMpLHRoaXMuX2NvbXBsZXRlUmVzdWx0cy5tZXRhPW4ubWV0YSksdGhpcy5fY29tcGxldGVkfHwhYXx8IXoodGhpcy5fY29uZmlnLmNvbXBsZXRlKXx8biYmbi5tZXRhLmFib3J0ZWR8fCh0aGlzLl9jb25maWcuY29tcGxldGUodGhpcy5fY29tcGxldGVSZXN1bHRzLHRoaXMuX2lucHV0KSx0aGlzLl9jb21wbGV0ZWQ9ITApLGF8fG4mJm4ubWV0YS5wYXVzZWR8fHRoaXMuX25leHRDaHVuaygpLG59fSx0aGlzLl9zZW5kRXJyb3I9ZnVuY3Rpb24oZSl7eih0aGlzLl9jb25maWcuZXJyb3IpP3RoaXMuX2NvbmZpZy5lcnJvcihlKTpvJiZ0aGlzLl9jb25maWcuZXJyb3ImJmYucG9zdE1lc3NhZ2Uoe3dvcmtlcklkOmsuV09SS0VSX0lELGVycm9yOmUsZmluaXNoZWQ6ITF9KX19ZnVuY3Rpb24gYyhlKXt2YXIgaTsoZT1lfHx7fSkuY2h1bmtTaXplfHwoZS5jaHVua1NpemU9ay5SZW1vdGVDaHVua1NpemUpLGwuY2FsbCh0aGlzLGUpLHRoaXMuX25leHRDaHVuaz1uP2Z1bmN0aW9uKCl7dGhpcy5fcmVhZENodW5rKCksdGhpcy5fY2h1bmtMb2FkZWQoKX06ZnVuY3Rpb24oKXt0aGlzLl9yZWFkQ2h1bmsoKX0sdGhpcy5zdHJlYW09ZnVuY3Rpb24oZSl7dGhpcy5faW5wdXQ9ZSx0aGlzLl9uZXh0Q2h1bmsoKX0sdGhpcy5fcmVhZENodW5rPWZ1bmN0aW9uKCl7aWYodGhpcy5fZmluaXNoZWQpdGhpcy5fY2h1bmtMb2FkZWQoKTtlbHNle2lmKGk9bmV3IFhNTEh0dHBSZXF1ZXN0LHRoaXMuX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMmJihpLndpdGhDcmVkZW50aWFscz10aGlzLl9jb25maWcud2l0aENyZWRlbnRpYWxzKSxufHwoaS5vbmxvYWQ9dyh0aGlzLl9jaHVua0xvYWRlZCx0aGlzKSxpLm9uZXJyb3I9dyh0aGlzLl9jaHVua0Vycm9yLHRoaXMpKSxpLm9wZW4oXCJHRVRcIix0aGlzLl9pbnB1dCwhbiksdGhpcy5fY29uZmlnLmRvd25sb2FkUmVxdWVzdEhlYWRlcnMpe3ZhciBlPXRoaXMuX2NvbmZpZy5kb3dubG9hZFJlcXVlc3RIZWFkZXJzO2Zvcih2YXIgdCBpbiBlKWkuc2V0UmVxdWVzdEhlYWRlcih0LGVbdF0pfWlmKHRoaXMuX2NvbmZpZy5jaHVua1NpemUpe3ZhciByPXRoaXMuX3N0YXJ0K3RoaXMuX2NvbmZpZy5jaHVua1NpemUtMTtpLnNldFJlcXVlc3RIZWFkZXIoXCJSYW5nZVwiLFwiYnl0ZXM9XCIrdGhpcy5fc3RhcnQrXCItXCIrciksaS5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLFwid2Via2l0LW5vLWNhY2hlXCIpfXRyeXtpLnNlbmQoKX1jYXRjaChlKXt0aGlzLl9jaHVua0Vycm9yKGUubWVzc2FnZSl9biYmMD09PWkuc3RhdHVzP3RoaXMuX2NodW5rRXJyb3IoKTp0aGlzLl9zdGFydCs9dGhpcy5fY29uZmlnLmNodW5rU2l6ZX19LHRoaXMuX2NodW5rTG9hZGVkPWZ1bmN0aW9uKCl7ND09PWkucmVhZHlTdGF0ZSYmKGkuc3RhdHVzPDIwMHx8NDAwPD1pLnN0YXR1cz90aGlzLl9jaHVua0Vycm9yKCk6KHRoaXMuX2ZpbmlzaGVkPSF0aGlzLl9jb25maWcuY2h1bmtTaXplfHx0aGlzLl9zdGFydD5mdW5jdGlvbihlKXt2YXIgdD1lLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1SYW5nZVwiKTtpZihudWxsPT09dClyZXR1cm4tMTtyZXR1cm4gcGFyc2VJbnQodC5zdWJzdHIodC5sYXN0SW5kZXhPZihcIi9cIikrMSkpfShpKSx0aGlzLnBhcnNlQ2h1bmsoaS5yZXNwb25zZVRleHQpKSl9LHRoaXMuX2NodW5rRXJyb3I9ZnVuY3Rpb24oZSl7dmFyIHQ9aS5zdGF0dXNUZXh0fHxlO3RoaXMuX3NlbmRFcnJvcihuZXcgRXJyb3IodCkpfX1mdW5jdGlvbiBwKGUpe3ZhciBpLG47KGU9ZXx8e30pLmNodW5rU2l6ZXx8KGUuY2h1bmtTaXplPWsuTG9jYWxDaHVua1NpemUpLGwuY2FsbCh0aGlzLGUpO3ZhciBzPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBGaWxlUmVhZGVyO3RoaXMuc3RyZWFtPWZ1bmN0aW9uKGUpe3RoaXMuX2lucHV0PWUsbj1lLnNsaWNlfHxlLndlYmtpdFNsaWNlfHxlLm1velNsaWNlLHM/KChpPW5ldyBGaWxlUmVhZGVyKS5vbmxvYWQ9dyh0aGlzLl9jaHVua0xvYWRlZCx0aGlzKSxpLm9uZXJyb3I9dyh0aGlzLl9jaHVua0Vycm9yLHRoaXMpKTppPW5ldyBGaWxlUmVhZGVyU3luYyx0aGlzLl9uZXh0Q2h1bmsoKX0sdGhpcy5fbmV4dENodW5rPWZ1bmN0aW9uKCl7dGhpcy5fZmluaXNoZWR8fHRoaXMuX2NvbmZpZy5wcmV2aWV3JiYhKHRoaXMuX3Jvd0NvdW50PHRoaXMuX2NvbmZpZy5wcmV2aWV3KXx8dGhpcy5fcmVhZENodW5rKCl9LHRoaXMuX3JlYWRDaHVuaz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuX2lucHV0O2lmKHRoaXMuX2NvbmZpZy5jaHVua1NpemUpe3ZhciB0PU1hdGgubWluKHRoaXMuX3N0YXJ0K3RoaXMuX2NvbmZpZy5jaHVua1NpemUsdGhpcy5faW5wdXQuc2l6ZSk7ZT1uLmNhbGwoZSx0aGlzLl9zdGFydCx0KX12YXIgcj1pLnJlYWRBc1RleHQoZSx0aGlzLl9jb25maWcuZW5jb2RpbmcpO3N8fHRoaXMuX2NodW5rTG9hZGVkKHt0YXJnZXQ6e3Jlc3VsdDpyfX0pfSx0aGlzLl9jaHVua0xvYWRlZD1mdW5jdGlvbihlKXt0aGlzLl9zdGFydCs9dGhpcy5fY29uZmlnLmNodW5rU2l6ZSx0aGlzLl9maW5pc2hlZD0hdGhpcy5fY29uZmlnLmNodW5rU2l6ZXx8dGhpcy5fc3RhcnQ+PXRoaXMuX2lucHV0LnNpemUsdGhpcy5wYXJzZUNodW5rKGUudGFyZ2V0LnJlc3VsdCl9LHRoaXMuX2NodW5rRXJyb3I9ZnVuY3Rpb24oKXt0aGlzLl9zZW5kRXJyb3IoaS5lcnJvcil9fWZ1bmN0aW9uIF8oZSl7dmFyIHI7bC5jYWxsKHRoaXMsZT1lfHx7fSksdGhpcy5zdHJlYW09ZnVuY3Rpb24oZSl7cmV0dXJuIHI9ZSx0aGlzLl9uZXh0Q2h1bmsoKX0sdGhpcy5fbmV4dENodW5rPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2ZpbmlzaGVkKXt2YXIgZT10aGlzLl9jb25maWcuY2h1bmtTaXplLHQ9ZT9yLnN1YnN0cigwLGUpOnI7cmV0dXJuIHI9ZT9yLnN1YnN0cihlKTpcIlwiLHRoaXMuX2ZpbmlzaGVkPSFyLHRoaXMucGFyc2VDaHVuayh0KX19fWZ1bmN0aW9uIGcoZSl7bC5jYWxsKHRoaXMsZT1lfHx7fSk7dmFyIHQ9W10scj0hMCxpPSExO3RoaXMucGF1c2U9ZnVuY3Rpb24oKXtsLnByb3RvdHlwZS5wYXVzZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5faW5wdXQucGF1c2UoKX0sdGhpcy5yZXN1bWU9ZnVuY3Rpb24oKXtsLnByb3RvdHlwZS5yZXN1bWUuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX2lucHV0LnJlc3VtZSgpfSx0aGlzLnN0cmVhbT1mdW5jdGlvbihlKXt0aGlzLl9pbnB1dD1lLHRoaXMuX2lucHV0Lm9uKFwiZGF0YVwiLHRoaXMuX3N0cmVhbURhdGEpLHRoaXMuX2lucHV0Lm9uKFwiZW5kXCIsdGhpcy5fc3RyZWFtRW5kKSx0aGlzLl9pbnB1dC5vbihcImVycm9yXCIsdGhpcy5fc3RyZWFtRXJyb3IpfSx0aGlzLl9jaGVja0lzRmluaXNoZWQ9ZnVuY3Rpb24oKXtpJiYxPT09dC5sZW5ndGgmJih0aGlzLl9maW5pc2hlZD0hMCl9LHRoaXMuX25leHRDaHVuaz1mdW5jdGlvbigpe3RoaXMuX2NoZWNrSXNGaW5pc2hlZCgpLHQubGVuZ3RoP3RoaXMucGFyc2VDaHVuayh0LnNoaWZ0KCkpOnI9ITB9LHRoaXMuX3N0cmVhbURhdGE9dyhmdW5jdGlvbihlKXt0cnl7dC5wdXNoKFwic3RyaW5nXCI9PXR5cGVvZiBlP2U6ZS50b1N0cmluZyh0aGlzLl9jb25maWcuZW5jb2RpbmcpKSxyJiYocj0hMSx0aGlzLl9jaGVja0lzRmluaXNoZWQoKSx0aGlzLnBhcnNlQ2h1bmsodC5zaGlmdCgpKSl9Y2F0Y2goZSl7dGhpcy5fc3RyZWFtRXJyb3IoZSl9fSx0aGlzKSx0aGlzLl9zdHJlYW1FcnJvcj13KGZ1bmN0aW9uKGUpe3RoaXMuX3N0cmVhbUNsZWFuVXAoKSx0aGlzLl9zZW5kRXJyb3IoZSl9LHRoaXMpLHRoaXMuX3N0cmVhbUVuZD13KGZ1bmN0aW9uKCl7dGhpcy5fc3RyZWFtQ2xlYW5VcCgpLGk9ITAsdGhpcy5fc3RyZWFtRGF0YShcIlwiKX0sdGhpcyksdGhpcy5fc3RyZWFtQ2xlYW5VcD13KGZ1bmN0aW9uKCl7dGhpcy5faW5wdXQucmVtb3ZlTGlzdGVuZXIoXCJkYXRhXCIsdGhpcy5fc3RyZWFtRGF0YSksdGhpcy5faW5wdXQucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIix0aGlzLl9zdHJlYW1FbmQpLHRoaXMuX2lucHV0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIix0aGlzLl9zdHJlYW1FcnJvcil9LHRoaXMpfWZ1bmN0aW9uIHIoZyl7dmFyIGEsbyxoLGk9L15cXHMqLT8oXFxkKlxcLj9cXGQrfFxcZCtcXC4/XFxkKikoZVstK10/XFxkKyk/XFxzKiQvaSxuPS8oXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSl8KFxcZHs0fS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkOlswLTVdXFxkKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSl8KFxcZHs0fS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSkvLHQ9dGhpcyxyPTAscz0wLHU9ITEsZT0hMSxmPVtdLGQ9e2RhdGE6W10sZXJyb3JzOltdLG1ldGE6e319O2lmKHooZy5zdGVwKSl7dmFyIGw9Zy5zdGVwO2cuc3RlcD1mdW5jdGlvbihlKXtpZihkPWUscCgpKWMoKTtlbHNle2lmKGMoKSwwPT09ZC5kYXRhLmxlbmd0aClyZXR1cm47cis9ZS5kYXRhLmxlbmd0aCxnLnByZXZpZXcmJnI+Zy5wcmV2aWV3P28uYWJvcnQoKTpsKGQsdCl9fX1mdW5jdGlvbiBtKGUpe3JldHVyblwiZ3JlZWR5XCI9PT1nLnNraXBFbXB0eUxpbmVzP1wiXCI9PT1lLmpvaW4oXCJcIikudHJpbSgpOjE9PT1lLmxlbmd0aCYmMD09PWVbMF0ubGVuZ3RofWZ1bmN0aW9uIGMoKXtpZihkJiZoJiYoeShcIkRlbGltaXRlclwiLFwiVW5kZXRlY3RhYmxlRGVsaW1pdGVyXCIsXCJVbmFibGUgdG8gYXV0by1kZXRlY3QgZGVsaW1pdGluZyBjaGFyYWN0ZXI7IGRlZmF1bHRlZCB0byAnXCIray5EZWZhdWx0RGVsaW1pdGVyK1wiJ1wiKSxoPSExKSxnLnNraXBFbXB0eUxpbmVzKWZvcih2YXIgZT0wO2U8ZC5kYXRhLmxlbmd0aDtlKyspbShkLmRhdGFbZV0pJiZkLmRhdGEuc3BsaWNlKGUtLSwxKTtyZXR1cm4gcCgpJiZmdW5jdGlvbigpe2lmKCFkKXJldHVybjtmb3IodmFyIGU9MDtwKCkmJmU8ZC5kYXRhLmxlbmd0aDtlKyspZm9yKHZhciB0PTA7dDxkLmRhdGFbZV0ubGVuZ3RoO3QrKyl7dmFyIHI9ZC5kYXRhW2VdW3RdO2cudHJpbUhlYWRlcnMmJihyPXIudHJpbSgpKSxmLnB1c2gocil9ZC5kYXRhLnNwbGljZSgwLDEpfSgpLGZ1bmN0aW9uKCl7aWYoIWR8fCFnLmhlYWRlciYmIWcuZHluYW1pY1R5cGluZyYmIWcudHJhbnNmb3JtKXJldHVybiBkO2Zvcih2YXIgZT0wO2U8ZC5kYXRhLmxlbmd0aDtlKyspe3ZhciB0LHI9Zy5oZWFkZXI/e306W107Zm9yKHQ9MDt0PGQuZGF0YVtlXS5sZW5ndGg7dCsrKXt2YXIgaT10LG49ZC5kYXRhW2VdW3RdO2cuaGVhZGVyJiYoaT10Pj1mLmxlbmd0aD9cIl9fcGFyc2VkX2V4dHJhXCI6Zlt0XSksZy50cmFuc2Zvcm0mJihuPWcudHJhbnNmb3JtKG4saSkpLG49XyhpLG4pLFwiX19wYXJzZWRfZXh0cmFcIj09PWk/KHJbaV09cltpXXx8W10scltpXS5wdXNoKG4pKTpyW2ldPW59ZC5kYXRhW2VdPXIsZy5oZWFkZXImJih0PmYubGVuZ3RoP3koXCJGaWVsZE1pc21hdGNoXCIsXCJUb29NYW55RmllbGRzXCIsXCJUb28gbWFueSBmaWVsZHM6IGV4cGVjdGVkIFwiK2YubGVuZ3RoK1wiIGZpZWxkcyBidXQgcGFyc2VkIFwiK3QscytlKTp0PGYubGVuZ3RoJiZ5KFwiRmllbGRNaXNtYXRjaFwiLFwiVG9vRmV3RmllbGRzXCIsXCJUb28gZmV3IGZpZWxkczogZXhwZWN0ZWQgXCIrZi5sZW5ndGgrXCIgZmllbGRzIGJ1dCBwYXJzZWQgXCIrdCxzK2UpKX1nLmhlYWRlciYmZC5tZXRhJiYoZC5tZXRhLmZpZWxkcz1mKTtyZXR1cm4gcys9ZC5kYXRhLmxlbmd0aCxkfSgpfWZ1bmN0aW9uIHAoKXtyZXR1cm4gZy5oZWFkZXImJjA9PT1mLmxlbmd0aH1mdW5jdGlvbiBfKGUsdCl7cmV0dXJuIHI9ZSxnLmR5bmFtaWNUeXBpbmdGdW5jdGlvbiYmdm9pZCAwPT09Zy5keW5hbWljVHlwaW5nW3JdJiYoZy5keW5hbWljVHlwaW5nW3JdPWcuZHluYW1pY1R5cGluZ0Z1bmN0aW9uKHIpKSwhMD09PShnLmR5bmFtaWNUeXBpbmdbcl18fGcuZHluYW1pY1R5cGluZyk/XCJ0cnVlXCI9PT10fHxcIlRSVUVcIj09PXR8fFwiZmFsc2VcIiE9PXQmJlwiRkFMU0VcIiE9PXQmJihpLnRlc3QodCk/cGFyc2VGbG9hdCh0KTpuLnRlc3QodCk/bmV3IERhdGUodCk6XCJcIj09PXQ/bnVsbDp0KTp0O3ZhciByfWZ1bmN0aW9uIHkoZSx0LHIsaSl7ZC5lcnJvcnMucHVzaCh7dHlwZTplLGNvZGU6dCxtZXNzYWdlOnIscm93Oml9KX10aGlzLnBhcnNlPWZ1bmN0aW9uKGUsdCxyKXt2YXIgaT1nLnF1b3RlQ2hhcnx8J1wiJztpZihnLm5ld2xpbmV8fChnLm5ld2xpbmU9ZnVuY3Rpb24oZSx0KXtlPWUuc3Vic3RyKDAsMTA0ODU3Nik7dmFyIHI9bmV3IFJlZ0V4cChNKHQpK1wiKFteXSo/KVwiK00odCksXCJnbVwiKSxpPShlPWUucmVwbGFjZShyLFwiXCIpKS5zcGxpdChcIlxcclwiKSxuPWUuc3BsaXQoXCJcXG5cIikscz0xPG4ubGVuZ3RoJiZuWzBdLmxlbmd0aDxpWzBdLmxlbmd0aDtpZigxPT09aS5sZW5ndGh8fHMpcmV0dXJuXCJcXG5cIjtmb3IodmFyIGE9MCxvPTA7bzxpLmxlbmd0aDtvKyspXCJcXG5cIj09PWlbb11bMF0mJmErKztyZXR1cm4gYT49aS5sZW5ndGgvMj9cIlxcclxcblwiOlwiXFxyXCJ9KGUsaSkpLGg9ITEsZy5kZWxpbWl0ZXIpeihnLmRlbGltaXRlcikmJihnLmRlbGltaXRlcj1nLmRlbGltaXRlcihlKSxkLm1ldGEuZGVsaW1pdGVyPWcuZGVsaW1pdGVyKTtlbHNle3ZhciBuPWZ1bmN0aW9uKGUsdCxyLGkpe2Zvcih2YXIgbixzLGEsbz1bXCIsXCIsXCJcXHRcIixcInxcIixcIjtcIixrLlJFQ09SRF9TRVAsay5VTklUX1NFUF0saD0wO2g8by5sZW5ndGg7aCsrKXt2YXIgdT1vW2hdLGY9MCxkPTAsbD0wO2E9dm9pZCAwO2Zvcih2YXIgYz1uZXcgdih7Y29tbWVudHM6aSxkZWxpbWl0ZXI6dSxuZXdsaW5lOnQscHJldmlldzoxMH0pLnBhcnNlKGUpLHA9MDtwPGMuZGF0YS5sZW5ndGg7cCsrKWlmKHImJm0oYy5kYXRhW3BdKSlsKys7ZWxzZXt2YXIgXz1jLmRhdGFbcF0ubGVuZ3RoO2QrPV8sdm9pZCAwIT09YT8xPF8mJihmKz1NYXRoLmFicyhfLWEpLGE9Xyk6YT0wfTA8Yy5kYXRhLmxlbmd0aCYmKGQvPWMuZGF0YS5sZW5ndGgtbCksKHZvaWQgMD09PXN8fHM8ZikmJjEuOTk8ZCYmKHM9ZixuPXUpfXJldHVybntzdWNjZXNzZnVsOiEhKGcuZGVsaW1pdGVyPW4pLGJlc3REZWxpbWl0ZXI6bn19KGUsZy5uZXdsaW5lLGcuc2tpcEVtcHR5TGluZXMsZy5jb21tZW50cyk7bi5zdWNjZXNzZnVsP2cuZGVsaW1pdGVyPW4uYmVzdERlbGltaXRlcjooaD0hMCxnLmRlbGltaXRlcj1rLkRlZmF1bHREZWxpbWl0ZXIpLGQubWV0YS5kZWxpbWl0ZXI9Zy5kZWxpbWl0ZXJ9dmFyIHM9RShnKTtyZXR1cm4gZy5wcmV2aWV3JiZnLmhlYWRlciYmcy5wcmV2aWV3KyssYT1lLG89bmV3IHYocyksZD1vLnBhcnNlKGEsdCxyKSxjKCksdT97bWV0YTp7cGF1c2VkOiEwfX06ZHx8e21ldGE6e3BhdXNlZDohMX19fSx0aGlzLnBhdXNlZD1mdW5jdGlvbigpe3JldHVybiB1fSx0aGlzLnBhdXNlPWZ1bmN0aW9uKCl7dT0hMCxvLmFib3J0KCksYT1hLnN1YnN0cihvLmdldENoYXJJbmRleCgpKX0sdGhpcy5yZXN1bWU9ZnVuY3Rpb24oKXt1PSExLHQuc3RyZWFtZXIucGFyc2VDaHVuayhhLCEwKX0sdGhpcy5hYm9ydGVkPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LHRoaXMuYWJvcnQ9ZnVuY3Rpb24oKXtlPSEwLG8uYWJvcnQoKSxkLm1ldGEuYWJvcnRlZD0hMCx6KGcuY29tcGxldGUpJiZnLmNvbXBsZXRlKGQpLGE9XCJcIn19ZnVuY3Rpb24gTShlKXtyZXR1cm4gZS5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZyxcIlxcXFwkJlwiKX1mdW5jdGlvbiB2KGUpe3ZhciBTLE89KGU9ZXx8e30pLmRlbGltaXRlcix4PWUubmV3bGluZSxUPWUuY29tbWVudHMsST1lLnN0ZXAsQT1lLnByZXZpZXcsRD1lLmZhc3RNb2RlLEw9Uz12b2lkIDA9PT1lLnF1b3RlQ2hhcj8nXCInOmUucXVvdGVDaGFyO2lmKHZvaWQgMCE9PWUuZXNjYXBlQ2hhciYmKEw9ZS5lc2NhcGVDaGFyKSwoXCJzdHJpbmdcIiE9dHlwZW9mIE98fC0xPGsuQkFEX0RFTElNSVRFUlMuaW5kZXhPZihPKSkmJihPPVwiLFwiKSxUPT09Tyl0aHJvd1wiQ29tbWVudCBjaGFyYWN0ZXIgc2FtZSBhcyBkZWxpbWl0ZXJcIjshMD09PVQ/VD1cIiNcIjooXCJzdHJpbmdcIiE9dHlwZW9mIFR8fC0xPGsuQkFEX0RFTElNSVRFUlMuaW5kZXhPZihUKSkmJihUPSExKSxcIlxcblwiIT09eCYmXCJcXHJcIiE9PXgmJlwiXFxyXFxuXCIhPT14JiYoeD1cIlxcblwiKTt2YXIgUD0wLEY9ITE7dGhpcy5wYXJzZT1mdW5jdGlvbihpLHQscil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGkpdGhyb3dcIklucHV0IG11c3QgYmUgYSBzdHJpbmdcIjt2YXIgbj1pLmxlbmd0aCxlPU8ubGVuZ3RoLHM9eC5sZW5ndGgsYT1ULmxlbmd0aCxvPXooSSksaD1bXSx1PVtdLGY9W10sZD1QPTA7aWYoIWkpcmV0dXJuIEMoKTtpZihEfHwhMSE9PUQmJi0xPT09aS5pbmRleE9mKFMpKXtmb3IodmFyIGw9aS5zcGxpdCh4KSxjPTA7YzxsLmxlbmd0aDtjKyspe2lmKGY9bFtjXSxQKz1mLmxlbmd0aCxjIT09bC5sZW5ndGgtMSlQKz14Lmxlbmd0aDtlbHNlIGlmKHIpcmV0dXJuIEMoKTtpZighVHx8Zi5zdWJzdHIoMCxhKSE9PVQpe2lmKG8pe2lmKGg9W10sayhmLnNwbGl0KE8pKSxSKCksRilyZXR1cm4gQygpfWVsc2UgayhmLnNwbGl0KE8pKTtpZihBJiZBPD1jKXJldHVybiBoPWguc2xpY2UoMCxBKSxDKCEwKX19cmV0dXJuIEMoKX1mb3IodmFyIHAsXz1pLmluZGV4T2YoTyxQKSxnPWkuaW5kZXhPZih4LFApLG09bmV3IFJlZ0V4cChNKEwpK00oUyksXCJnXCIpOzspaWYoaVtQXSE9PVMpaWYoVCYmMD09PWYubGVuZ3RoJiZpLnN1YnN0cihQLGEpPT09VCl7aWYoLTE9PT1nKXJldHVybiBDKCk7UD1nK3MsZz1pLmluZGV4T2YoeCxQKSxfPWkuaW5kZXhPZihPLFApfWVsc2UgaWYoLTEhPT1fJiYoXzxnfHwtMT09PWcpKWYucHVzaChpLnN1YnN0cmluZyhQLF8pKSxQPV8rZSxfPWkuaW5kZXhPZihPLFApO2Vsc2V7aWYoLTE9PT1nKWJyZWFrO2lmKGYucHVzaChpLnN1YnN0cmluZyhQLGcpKSx3KGcrcyksbyYmKFIoKSxGKSlyZXR1cm4gQygpO2lmKEEmJmgubGVuZ3RoPj1BKXJldHVybiBDKCEwKX1lbHNlIGZvcihwPVAsUCsrOzspe2lmKC0xPT09KHA9aS5pbmRleE9mKFMscCsxKSkpcmV0dXJuIHJ8fHUucHVzaCh7dHlwZTpcIlF1b3Rlc1wiLGNvZGU6XCJNaXNzaW5nUXVvdGVzXCIsbWVzc2FnZTpcIlF1b3RlZCBmaWVsZCB1bnRlcm1pbmF0ZWRcIixyb3c6aC5sZW5ndGgsaW5kZXg6UH0pLEUoKTtpZihwPT09bi0xKXJldHVybiBFKGkuc3Vic3RyaW5nKFAscCkucmVwbGFjZShtLFMpKTtpZihTIT09THx8aVtwKzFdIT09TCl7aWYoUz09PUx8fDA9PT1wfHxpW3AtMV0hPT1MKXt2YXIgeT1iKC0xPT09Zz9fOk1hdGgubWluKF8sZykpO2lmKGlbcCsxK3ldPT09Tyl7Zi5wdXNoKGkuc3Vic3RyaW5nKFAscCkucmVwbGFjZShtLFMpKSxQPXArMSt5K2UsXz1pLmluZGV4T2YoTyxQKSxnPWkuaW5kZXhPZih4LFApO2JyZWFrfXZhciB2PWIoZyk7aWYoaS5zdWJzdHIocCsxK3Yscyk9PT14KXtpZihmLnB1c2goaS5zdWJzdHJpbmcoUCxwKS5yZXBsYWNlKG0sUykpLHcocCsxK3YrcyksXz1pLmluZGV4T2YoTyxQKSxvJiYoUigpLEYpKXJldHVybiBDKCk7aWYoQSYmaC5sZW5ndGg+PUEpcmV0dXJuIEMoITApO2JyZWFrfXUucHVzaCh7dHlwZTpcIlF1b3Rlc1wiLGNvZGU6XCJJbnZhbGlkUXVvdGVzXCIsbWVzc2FnZTpcIlRyYWlsaW5nIHF1b3RlIG9uIHF1b3RlZCBmaWVsZCBpcyBtYWxmb3JtZWRcIixyb3c6aC5sZW5ndGgsaW5kZXg6UH0pLHArK319ZWxzZSBwKyt9cmV0dXJuIEUoKTtmdW5jdGlvbiBrKGUpe2gucHVzaChlKSxkPVB9ZnVuY3Rpb24gYihlKXt2YXIgdD0wO2lmKC0xIT09ZSl7dmFyIHI9aS5zdWJzdHJpbmcocCsxLGUpO3ImJlwiXCI9PT1yLnRyaW0oKSYmKHQ9ci5sZW5ndGgpfXJldHVybiB0fWZ1bmN0aW9uIEUoZSl7cmV0dXJuIHJ8fCh2b2lkIDA9PT1lJiYoZT1pLnN1YnN0cihQKSksZi5wdXNoKGUpLFA9bixrKGYpLG8mJlIoKSksQygpfWZ1bmN0aW9uIHcoZSl7UD1lLGsoZiksZj1bXSxnPWkuaW5kZXhPZih4LFApfWZ1bmN0aW9uIEMoZSl7cmV0dXJue2RhdGE6aCxlcnJvcnM6dSxtZXRhOntkZWxpbWl0ZXI6TyxsaW5lYnJlYWs6eCxhYm9ydGVkOkYsdHJ1bmNhdGVkOiEhZSxjdXJzb3I6ZCsodHx8MCl9fX1mdW5jdGlvbiBSKCl7SShDKCkpLGg9W10sdT1bXX19LHRoaXMuYWJvcnQ9ZnVuY3Rpb24oKXtGPSEwfSx0aGlzLmdldENoYXJJbmRleD1mdW5jdGlvbigpe3JldHVybiBQfX1mdW5jdGlvbiBtKGUpe3ZhciB0PWUuZGF0YSxyPWhbdC53b3JrZXJJZF0saT0hMTtpZih0LmVycm9yKXIudXNlckVycm9yKHQuZXJyb3IsdC5maWxlKTtlbHNlIGlmKHQucmVzdWx0cyYmdC5yZXN1bHRzLmRhdGEpe3ZhciBuPXthYm9ydDpmdW5jdGlvbigpe2k9ITAseSh0LndvcmtlcklkLHtkYXRhOltdLGVycm9yczpbXSxtZXRhOnthYm9ydGVkOiEwfX0pfSxwYXVzZTpiLHJlc3VtZTpifTtpZih6KHIudXNlclN0ZXApKXtmb3IodmFyIHM9MDtzPHQucmVzdWx0cy5kYXRhLmxlbmd0aCYmKHIudXNlclN0ZXAoe2RhdGE6W3QucmVzdWx0cy5kYXRhW3NdXSxlcnJvcnM6dC5yZXN1bHRzLmVycm9ycyxtZXRhOnQucmVzdWx0cy5tZXRhfSxuKSwhaSk7cysrKTtkZWxldGUgdC5yZXN1bHRzfWVsc2UgeihyLnVzZXJDaHVuaykmJihyLnVzZXJDaHVuayh0LnJlc3VsdHMsbix0LmZpbGUpLGRlbGV0ZSB0LnJlc3VsdHMpfXQuZmluaXNoZWQmJiFpJiZ5KHQud29ya2VySWQsdC5yZXN1bHRzKX1mdW5jdGlvbiB5KGUsdCl7dmFyIHI9aFtlXTt6KHIudXNlckNvbXBsZXRlKSYmci51c2VyQ29tcGxldGUodCksci50ZXJtaW5hdGUoKSxkZWxldGUgaFtlXX1mdW5jdGlvbiBiKCl7dGhyb3dcIk5vdCBpbXBsZW1lbnRlZC5cIn1mdW5jdGlvbiBFKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm4gZTt2YXIgdD1BcnJheS5pc0FycmF5KGUpP1tdOnt9O2Zvcih2YXIgciBpbiBlKXRbcl09RShlW3JdKTtyZXR1cm4gdH1mdW5jdGlvbiB3KGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7ZS5hcHBseSh0LGFyZ3VtZW50cyl9fWZ1bmN0aW9uIHooZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX1yZXR1cm4gbz9mLm9ubWVzc2FnZT1mdW5jdGlvbihlKXt2YXIgdD1lLmRhdGE7dm9pZCAwPT09ay5XT1JLRVJfSUQmJnQmJihrLldPUktFUl9JRD10LndvcmtlcklkKTtpZihcInN0cmluZ1wiPT10eXBlb2YgdC5pbnB1dClmLnBvc3RNZXNzYWdlKHt3b3JrZXJJZDprLldPUktFUl9JRCxyZXN1bHRzOmsucGFyc2UodC5pbnB1dCx0LmNvbmZpZyksZmluaXNoZWQ6ITB9KTtlbHNlIGlmKGYuRmlsZSYmdC5pbnB1dCBpbnN0YW5jZW9mIEZpbGV8fHQuaW5wdXQgaW5zdGFuY2VvZiBPYmplY3Qpe3ZhciByPWsucGFyc2UodC5pbnB1dCx0LmNvbmZpZyk7ciYmZi5wb3N0TWVzc2FnZSh7d29ya2VySWQ6ay5XT1JLRVJfSUQscmVzdWx0czpyLGZpbmlzaGVkOiEwfSl9fTprLldPUktFUlNfU1VQUE9SVEVEJiYoZT1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKSxzPWUubGVuZ3RoP2VbZS5sZW5ndGgtMV0uc3JjOlwiXCIsZG9jdW1lbnQuYm9keT9kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLGZ1bmN0aW9uKCl7YT0hMH0sITApOmE9ITApLChjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGwucHJvdG90eXBlKSkuY29uc3RydWN0b3I9YywocC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShsLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPXAsKF8ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoXy5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1fLChnLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGwucHJvdG90eXBlKSkuY29uc3RydWN0b3I9ZyxrfSk7IiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcy5mb3VuZGF0aW9uLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuOyhmdW5jdGlvbigpIHtcblxuICAvKiogVXNlZCBhcyBhIHNhZmUgcmVmZXJlbmNlIGZvciBgdW5kZWZpbmVkYCBpbiBwcmUtRVM1IGVudmlyb25tZW50cy4gKi9cbiAgdmFyIHVuZGVmaW5lZDtcblxuICAvKiogVXNlZCBhcyB0aGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuICovXG4gIHZhciBWRVJTSU9OID0gJzQuMTcuMTEnO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xuICB2YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuICAvKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG4gIHZhciBDT1JFX0VSUk9SX1RFWFQgPSAnVW5zdXBwb3J0ZWQgY29yZS1qcyB1c2UuIFRyeSBodHRwczovL25wbXMuaW8vc2VhcmNoP3E9cG9ueWZpbGwuJyxcbiAgICAgIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuICAvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG4gIHZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuICAvKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG4gIHZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBpbnRlcm5hbCBhcmd1bWVudCBwbGFjZWhvbGRlci4gKi9cbiAgdmFyIFBMQUNFSE9MREVSID0gJ19fbG9kYXNoX3BsYWNlaG9sZGVyX18nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG4gIHZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG4gIHZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgdmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICAgIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsXG4gICAgICBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcgPSA0LFxuICAgICAgV1JBUF9DVVJSWV9GTEFHID0gOCxcbiAgICAgIFdSQVBfQ1VSUllfUklHSFRfRkxBRyA9IDE2LFxuICAgICAgV1JBUF9QQVJUSUFMX0ZMQUcgPSAzMixcbiAgICAgIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQsXG4gICAgICBXUkFQX0FSWV9GTEFHID0gMTI4LFxuICAgICAgV1JBUF9SRUFSR19GTEFHID0gMjU2LFxuICAgICAgV1JBUF9GTElQX0ZMQUcgPSA1MTI7XG5cbiAgLyoqIFVzZWQgYXMgZGVmYXVsdCBvcHRpb25zIGZvciBgXy50cnVuY2F0ZWAuICovXG4gIHZhciBERUZBVUxUX1RSVU5DX0xFTkdUSCA9IDMwLFxuICAgICAgREVGQVVMVF9UUlVOQ19PTUlTU0lPTiA9ICcuLi4nO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbiAgdmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICAgIEhPVF9TUEFOID0gMTY7XG5cbiAgLyoqIFVzZWQgdG8gaW5kaWNhdGUgdGhlIHR5cGUgb2YgbGF6eSBpdGVyYXRlZXMuICovXG4gIHZhciBMQVpZX0ZJTFRFUl9GTEFHID0gMSxcbiAgICAgIExBWllfTUFQX0ZMQUcgPSAyLFxuICAgICAgTEFaWV9XSElMRV9GTEFHID0gMztcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbiAgdmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgICBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MSxcbiAgICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgsXG4gICAgICBOQU4gPSAwIC8gMDtcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xuICB2YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDQyOTQ5NjcyOTUsXG4gICAgICBNQVhfQVJSQVlfSU5ERVggPSBNQVhfQVJSQVlfTEVOR1RIIC0gMSxcbiAgICAgIEhBTEZfTUFYX0FSUkFZX0xFTkdUSCA9IE1BWF9BUlJBWV9MRU5HVEggPj4+IDE7XG5cbiAgLyoqIFVzZWQgdG8gYXNzb2NpYXRlIHdyYXAgbWV0aG9kcyB3aXRoIHRoZWlyIGJpdCBmbGFncy4gKi9cbiAgdmFyIHdyYXBGbGFncyA9IFtcbiAgICBbJ2FyeScsIFdSQVBfQVJZX0ZMQUddLFxuICAgIFsnYmluZCcsIFdSQVBfQklORF9GTEFHXSxcbiAgICBbJ2JpbmRLZXknLCBXUkFQX0JJTkRfS0VZX0ZMQUddLFxuICAgIFsnY3VycnknLCBXUkFQX0NVUlJZX0ZMQUddLFxuICAgIFsnY3VycnlSaWdodCcsIFdSQVBfQ1VSUllfUklHSFRfRkxBR10sXG4gICAgWydmbGlwJywgV1JBUF9GTElQX0ZMQUddLFxuICAgIFsncGFydGlhbCcsIFdSQVBfUEFSVElBTF9GTEFHXSxcbiAgICBbJ3BhcnRpYWxSaWdodCcsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHXSxcbiAgICBbJ3JlYXJnJywgV1JBUF9SRUFSR19GTEFHXVxuICBdO1xuXG4gIC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgICBkb21FeGNUYWcgPSAnW29iamVjdCBET01FeGNlcHRpb25dJyxcbiAgICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nLFxuICAgICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXScsXG4gICAgICB3ZWFrU2V0VGFnID0gJ1tvYmplY3QgV2Vha1NldF0nO1xuXG4gIHZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZS4gKi9cbiAgdmFyIHJlRW1wdHlTdHJpbmdMZWFkaW5nID0gL1xcYl9fcCBcXCs9ICcnOy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ01pZGRsZSA9IC9cXGIoX19wIFxcKz0pICcnIFxcKy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ1RyYWlsaW5nID0gLyhfX2VcXCguKj9cXCl8XFxiX190XFwpKSBcXCtcXG4nJzsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBIVE1MIGVudGl0aWVzIGFuZCBIVE1MIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUVzY2FwZWRIdG1sID0gLyYoPzphbXB8bHR8Z3R8cXVvdHwjMzkpOy9nLFxuICAgICAgcmVVbmVzY2FwZWRIdG1sID0gL1smPD5cIiddL2csXG4gICAgICByZUhhc0VzY2FwZWRIdG1sID0gUmVnRXhwKHJlRXNjYXBlZEh0bWwuc291cmNlKSxcbiAgICAgIHJlSGFzVW5lc2NhcGVkSHRtbCA9IFJlZ0V4cChyZVVuZXNjYXBlZEh0bWwuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGUgPSAvPCUtKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlRXZhbHVhdGUgPSAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVJbnRlcnBvbGF0ZSA9IC88JT0oW1xcc1xcU10rPyklPi9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC8sXG4gICAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gICAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICAgKi9cbiAgdmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxcbiAgICAgIHJlSGFzUmVnRXhwQ2hhciA9IFJlZ0V4cChyZVJlZ0V4cENoYXIuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xuICB2YXIgcmVUcmltID0gL15cXHMrfFxccyskL2csXG4gICAgICByZVRyaW1TdGFydCA9IC9eXFxzKy8sXG4gICAgICByZVRyaW1FbmQgPSAvXFxzKyQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdyYXAgZGV0YWlsIGNvbW1lbnRzLiAqL1xuICB2YXIgcmVXcmFwQ29tbWVudCA9IC9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy8sXG4gICAgICByZVdyYXBEZXRhaWxzID0gL1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLFxuICAgICAgcmVTcGxpdERldGFpbHMgPSAvLD8gJiAvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdvcmRzIGNvbXBvc2VkIG9mIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaFxuICAgKiBbRVMgdGVtcGxhdGUgZGVsaW1pdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbC1sZXhpY2FsLWNvbXBvbmVudHMpLlxuICAgKi9cbiAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG4gIHZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG4gIHZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG4gIHZhciByZUxhdGluID0gL1tcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx4ZmZcXHUwMTAwLVxcdTAxN2ZdL2c7XG5cbiAgLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVOb01hdGNoID0gLygkXikvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHVuZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbiAgdmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgICByc0RpbmdiYXRSYW5nZSA9ICdcXFxcdTI3MDAtXFxcXHUyN2JmJyxcbiAgICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICAgIHJzTm9uQ2hhclJhbmdlID0gJ1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZicsXG4gICAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgICAgcnNVcHBlclJhbmdlID0gJ0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZScsXG4gICAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xuICB2YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgICByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICAgIHJzTG93ZXIgPSAnWycgKyByc0xvd2VyUmFuZ2UgKyAnXScsXG4gICAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xuICB2YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc01pc2NVcHBlciA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzT3B0Q29udHJMb3dlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OmR8bGx8bXxyZXxzfHR8dmUpKT8nLFxuICAgICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICAgIHJzT3JkTG93ZXIgPSAnXFxcXGQqKD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aCkoPz1cXFxcYnxbQS1aX10pJyxcbiAgICAgIHJzT3JkVXBwZXIgPSAnXFxcXGQqKD86MVNUfDJORHwzUkR8KD8hWzEyM10pXFxcXGRUSCkoPz1cXFxcYnxbYS16X10pJyxcbiAgICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICAgIHJzRW1vamkgPSAnKD86JyArIFtyc0RpbmdiYXQsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzU2VxLFxuICAgICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYXBvc3Ryb3BoZXMuICovXG4gIHZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3MgZm9yIHN5bWJvbHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrc19mb3JfU3ltYm9scykuXG4gICAqL1xuICB2YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xuICB2YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbiAgdmFyIHJlVW5pY29kZVdvcmQgPSBSZWdFeHAoW1xuICAgIHJzVXBwZXIgKyAnPycgKyByc0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzVXBwZXIgKyAnPycgKyByc01pc2NMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlcixcbiAgICByc1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyLFxuICAgIHJzT3JkVXBwZXIsXG4gICAgcnNPcmRMb3dlcixcbiAgICByc0RpZ2l0cyxcbiAgICByc0Vtb2ppXG4gIF0uam9pbignfCcpLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG4gIHZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbiAgLyoqIFVzZWQgdG8gYXNzaWduIGRlZmF1bHQgYGNvbnRleHRgIG9iamVjdCBwcm9wZXJ0aWVzLiAqL1xuICB2YXIgY29udGV4dFByb3BzID0gW1xuICAgICdBcnJheScsICdCdWZmZXInLCAnRGF0YVZpZXcnLCAnRGF0ZScsICdFcnJvcicsICdGbG9hdDMyQXJyYXknLCAnRmxvYXQ2NEFycmF5JyxcbiAgICAnRnVuY3Rpb24nLCAnSW50OEFycmF5JywgJ0ludDE2QXJyYXknLCAnSW50MzJBcnJheScsICdNYXAnLCAnTWF0aCcsICdPYmplY3QnLFxuICAgICdQcm9taXNlJywgJ1JlZ0V4cCcsICdTZXQnLCAnU3RyaW5nJywgJ1N5bWJvbCcsICdUeXBlRXJyb3InLCAnVWludDhBcnJheScsXG4gICAgJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ1VpbnQxNkFycmF5JywgJ1VpbnQzMkFycmF5JywgJ1dlYWtNYXAnLFxuICAgICdfJywgJ2NsZWFyVGltZW91dCcsICdpc0Zpbml0ZScsICdwYXJzZUludCcsICdzZXRUaW1lb3V0J1xuICBdO1xuXG4gIC8qKiBVc2VkIHRvIG1ha2UgdGVtcGxhdGUgc291cmNlVVJMcyBlYXNpZXIgdG8gaWRlbnRpZnkuICovXG4gIHZhciB0ZW1wbGF0ZUNvdW50ZXIgPSAtMTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG4gIHZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xuICB0eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICB0eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbiAgdmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbiAgY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbiAgY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBMYXRpbiBVbmljb2RlIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy4gKi9cbiAgdmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgICAvLyBMYXRpbi0xIFN1cHBsZW1lbnQgYmxvY2suXG4gICAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICAgJ1xceGM3JzogJ0MnLCAgJ1xceGU3JzogJ2MnLFxuICAgICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAgICdcXHhlOCc6ICdlJywgICdcXHhlOSc6ICdlJywgJ1xceGVhJzogJ2UnLCAnXFx4ZWInOiAnZScsXG4gICAgJ1xceGNjJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAgICdcXHhkMSc6ICdOJywgICdcXHhmMSc6ICduJyxcbiAgICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgICAnXFx4ZDknOiAnVScsICAnXFx4ZGEnOiAnVScsICdcXHhkYic6ICdVJywgJ1xceGRjJzogJ1UnLFxuICAgICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICAgJ1xceGM2JzogJ0FlJywgJ1xceGU2JzogJ2FlJyxcbiAgICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAgICdcXHhkZic6ICdzcycsXG4gICAgLy8gTGF0aW4gRXh0ZW5kZWQtQSBibG9jay5cbiAgICAnXFx1MDEwMCc6ICdBJywgICdcXHUwMTAyJzogJ0EnLCAnXFx1MDEwNCc6ICdBJyxcbiAgICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgICAnXFx1MDEwNic6ICdDJywgICdcXHUwMTA4JzogJ0MnLCAnXFx1MDEwYSc6ICdDJywgJ1xcdTAxMGMnOiAnQycsXG4gICAgJ1xcdTAxMDcnOiAnYycsICAnXFx1MDEwOSc6ICdjJywgJ1xcdTAxMGInOiAnYycsICdcXHUwMTBkJzogJ2MnLFxuICAgICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgICAnXFx1MDExMic6ICdFJywgICdcXHUwMTE0JzogJ0UnLCAnXFx1MDExNic6ICdFJywgJ1xcdTAxMTgnOiAnRScsICdcXHUwMTFhJzogJ0UnLFxuICAgICdcXHUwMTEzJzogJ2UnLCAgJ1xcdTAxMTUnOiAnZScsICdcXHUwMTE3JzogJ2UnLCAnXFx1MDExOSc6ICdlJywgJ1xcdTAxMWInOiAnZScsXG4gICAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAgICdcXHUwMTFkJzogJ2cnLCAgJ1xcdTAxMWYnOiAnZycsICdcXHUwMTIxJzogJ2cnLCAnXFx1MDEyMyc6ICdnJyxcbiAgICAnXFx1MDEyNCc6ICdIJywgICdcXHUwMTI2JzogJ0gnLCAnXFx1MDEyNSc6ICdoJywgJ1xcdTAxMjcnOiAnaCcsXG4gICAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgICAnXFx1MDEyOSc6ICdpJywgICdcXHUwMTJiJzogJ2knLCAnXFx1MDEyZCc6ICdpJywgJ1xcdTAxMmYnOiAnaScsICdcXHUwMTMxJzogJ2knLFxuICAgICdcXHUwMTM0JzogJ0onLCAgJ1xcdTAxMzUnOiAnaicsXG4gICAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICAgJ1xcdTAxMzknOiAnTCcsICAnXFx1MDEzYic6ICdMJywgJ1xcdTAxM2QnOiAnTCcsICdcXHUwMTNmJzogJ0wnLCAnXFx1MDE0MSc6ICdMJyxcbiAgICAnXFx1MDEzYSc6ICdsJywgICdcXHUwMTNjJzogJ2wnLCAnXFx1MDEzZSc6ICdsJywgJ1xcdTAxNDAnOiAnbCcsICdcXHUwMTQyJzogJ2wnLFxuICAgICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgICAnXFx1MDE0NCc6ICduJywgICdcXHUwMTQ2JzogJ24nLCAnXFx1MDE0OCc6ICduJywgJ1xcdTAxNGInOiAnbicsXG4gICAgJ1xcdTAxNGMnOiAnTycsICAnXFx1MDE0ZSc6ICdPJywgJ1xcdTAxNTAnOiAnTycsXG4gICAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICAgJ1xcdTAxNTQnOiAnUicsICAnXFx1MDE1Nic6ICdSJywgJ1xcdTAxNTgnOiAnUicsXG4gICAgJ1xcdTAxNTUnOiAncicsICAnXFx1MDE1Nyc6ICdyJywgJ1xcdTAxNTknOiAncicsXG4gICAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAgICdcXHUwMTViJzogJ3MnLCAgJ1xcdTAxNWQnOiAncycsICdcXHUwMTVmJzogJ3MnLCAnXFx1MDE2MSc6ICdzJyxcbiAgICAnXFx1MDE2Mic6ICdUJywgICdcXHUwMTY0JzogJ1QnLCAnXFx1MDE2Nic6ICdUJyxcbiAgICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgICAnXFx1MDE2OCc6ICdVJywgICdcXHUwMTZhJzogJ1UnLCAnXFx1MDE2Yyc6ICdVJywgJ1xcdTAxNmUnOiAnVScsICdcXHUwMTcwJzogJ1UnLCAnXFx1MDE3Mic6ICdVJyxcbiAgICAnXFx1MDE2OSc6ICd1JywgICdcXHUwMTZiJzogJ3UnLCAnXFx1MDE2ZCc6ICd1JywgJ1xcdTAxNmYnOiAndScsICdcXHUwMTcxJzogJ3UnLCAnXFx1MDE3Myc6ICd1JyxcbiAgICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAgICdcXHUwMTc2JzogJ1knLCAgJ1xcdTAxNzcnOiAneScsICdcXHUwMTc4JzogJ1knLFxuICAgICdcXHUwMTc5JzogJ1onLCAgJ1xcdTAxN2InOiAnWicsICdcXHUwMTdkJzogJ1onLFxuICAgICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAgICdcXHUwMTMyJzogJ0lKJywgJ1xcdTAxMzMnOiAnaWonLFxuICAgICdcXHUwMTUyJzogJ09lJywgJ1xcdTAxNTMnOiAnb2UnLFxuICAgICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovXG4gIHZhciBodG1sRXNjYXBlcyA9IHtcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0OycsXG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmIzM5OydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgaHRtbFVuZXNjYXBlcyA9IHtcbiAgICAnJmFtcDsnOiAnJicsXG4gICAgJyZsdDsnOiAnPCcsXG4gICAgJyZndDsnOiAnPicsXG4gICAgJyZxdW90Oyc6ICdcIicsXG4gICAgJyYjMzk7JzogXCInXCJcbiAgfTtcblxuICAvKiogVXNlZCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHN0cmluZ0VzY2FwZXMgPSB7XG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgXCInXCI6IFwiJ1wiLFxuICAgICdcXG4nOiAnbicsXG4gICAgJ1xccic6ICdyJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbiAgdmFyIGZyZWVQYXJzZUZsb2F0ID0gcGFyc2VGbG9hdCxcbiAgICAgIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xuICB2YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuICAvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbiAgdmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbiAgdmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbiAgdmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuICAvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuICB2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbiAgLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG4gIHZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgICAgaWYgKHR5cGVzKSB7XG4gICAgICAgIHJldHVybiB0eXBlcztcbiAgICAgIH1cblxuICAgICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9KCkpO1xuXG4gIC8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG4gIHZhciBub2RlSXNBcnJheUJ1ZmZlciA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzQXJyYXlCdWZmZXIsXG4gICAgICBub2RlSXNEYXRlID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNEYXRlLFxuICAgICAgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXAsXG4gICAgICBub2RlSXNSZWdFeHAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1JlZ0V4cCxcbiAgICAgIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0LFxuICAgICAgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUFnZ3JlZ2F0b3JgIGZvciBhcnJheXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5QWdncmVnYXRvcihhcnJheSwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2hSaWdodChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZXZlcnlgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoIXByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogc3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXNXaXRoKGFycmF5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgICB9XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2VSaWdodChhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbLS1sZW5ndGhdO1xuICAgIH1cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYW4gQVNDSUkgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIHZhciBhc2NpaVNpemUgPSBiYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBBU0NJSSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhbiBBU0NJSSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmZpbmRLZXlgIGFuZCBgXy5maW5kTGFzdEtleWAsXG4gICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmBcbiAgICogdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCBvciBpdHMga2V5LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRLZXkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBlYWNoRnVuYykge1xuICAgIHZhciByZXN1bHQ7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRJbmRleGAgYW5kIGBfLmZpbmRMYXN0SW5kZXhgIHdpdGhvdXRcbiAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMSA6IC0xKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlSW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2ZXaXRoKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVhbmAgYW5kIGBfLm1lYW5CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZU1lYW4oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiBsZW5ndGggPyAoYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIC8gbGVuZ3RoKSA6IE5BTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlZHVjZWAgYW5kIGBfLnJlZHVjZVJpZ2h0YCwgd2l0aG91dCBzdXBwb3J0XG4gICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5pdEFjY3VtIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudCBvZlxuICAgKiAgYGNvbGxlY3Rpb25gIGFzIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgZWFjaEZ1bmMpIHtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaW5pdEFjY3VtXG4gICAgICAgID8gKGluaXRBY2N1bSA9IGZhbHNlLCB2YWx1ZSlcbiAgICAgICAgOiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydEJ5YCB3aGljaCB1c2VzIGBjb21wYXJlcmAgdG8gZGVmaW5lIHRoZVxuICAgKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gICAqIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmVyIFRoZSBmdW5jdGlvbiB0byBkZWZpbmUgc29ydCBvcmRlci5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU29ydEJ5KGFycmF5LCBjb21wYXJlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICBhcnJheS5zb3J0KGNvbXBhcmVyKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc3VtYCBhbmQgYF8uc3VtQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgcmVzdWx0LFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBpdGVyYXRlZShhcnJheVtpbmRleF0pO1xuICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGN1cnJlbnQgOiAocmVzdWx0ICsgY3VycmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICAgKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvUGFpcnNgIGFuZCBgXy50b1BhaXJzSW5gIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXlcbiAgICogb2Yga2V5LXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRvUGFpcnMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gW2tleSwgb2JqZWN0W2tleV1dO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAgICogYXJyYXkgb2YgYG9iamVjdGAgcHJvcGVydHkgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzXG4gICAqIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbVN0YXJ0YCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgYHBsYWNlaG9sZGVyYCBvY2N1cnJlbmNlcyBpbiBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgY291bnQuXG4gICAqL1xuICBmdW5jdGlvbiBjb3VudEhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gMDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGFycmF5W2xlbmd0aF0gPT09IHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICsrcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZGVidXJyYCB0byBjb252ZXJ0IExhdGluLTEgU3VwcGxlbWVudCBhbmQgTGF0aW4gRXh0ZW5kZWQtQVxuICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsZXR0ZXIgVGhlIG1hdGNoZWQgbGV0dGVyIHRvIGRlYnVyci5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICAgKi9cbiAgdmFyIGRlYnVyckxldHRlciA9IGJhc2VQcm9wZXJ0eU9mKGRlYnVycmVkTGV0dGVycyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciBlc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxFc2NhcGVzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy50ZW1wbGF0ZWAgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKGNocikge1xuICAgIHJldHVybiAnXFxcXCcgKyBzdHJpbmdFc2NhcGVzW2Nocl07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgc3ltYm9sIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGUudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBhIHdvcmQgY29tcG9zZWQgb2YgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgd29yZCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZVdvcmQudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBpdGVyYXRvcmAgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVyYXRvciBUaGUgaXRlcmF0b3IgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBpdGVyYXRvclRvQXJyYXkoaXRlcmF0b3IpIHtcbiAgICB2YXIgZGF0YSxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoIShkYXRhID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICByZXN1bHQucHVzaChkYXRhLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgYHBsYWNlaG9sZGVyYCBlbGVtZW50cyBpbiBgYXJyYXlgIHdpdGggYW4gaW50ZXJuYWwgcGxhY2Vob2xkZXJcbiAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlaXIgaW5kZXhlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gcmVwbGFjZS5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHZhbHVlID09PSBwbGFjZWhvbGRlciB8fCB2YWx1ZSA9PT0gUExBQ0VIT0xERVIpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gUExBQ0VIT0xERVI7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGl0cyB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb1BhaXJzKHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW3ZhbHVlLCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubGFzdEluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ICsgMTtcbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIHN5bWJvbHMgaW4gYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1NpemUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlU2l6ZShzdHJpbmcpXG4gICAgICA6IGFzY2lpU2l6ZShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKVxuICAgICAgOiBhc2NpaVRvQXJyYXkoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnVuZXNjYXBlYCB0byBjb252ZXJ0IEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gdW5lc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgdW5lc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxVbmVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGEgVW5pY29kZSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVNpemUoc3RyaW5nKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlVW5pY29kZS5sYXN0SW5kZXggPSAwO1xuICAgIHdoaWxlIChyZVVuaWNvZGUudGVzdChzdHJpbmcpKSB7XG4gICAgICArK3Jlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlV29yZCkgfHwgW107XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHVzaW5nIHRoZSBgY29udGV4dGAgb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSAxLjEuMFxuICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHQ9cm9vdF0gVGhlIGNvbnRleHQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBuZXcgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8ubWl4aW4oeyAnZm9vJzogXy5jb25zdGFudCgnZm9vJykgfSk7XG4gICAqXG4gICAqIHZhciBsb2Rhc2ggPSBfLnJ1bkluQ29udGV4dCgpO1xuICAgKiBsb2Rhc2gubWl4aW4oeyAnYmFyJzogbG9kYXNoLmNvbnN0YW50KCdiYXInKSB9KTtcbiAgICpcbiAgICogXy5pc0Z1bmN0aW9uKF8uZm9vKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKiBfLmlzRnVuY3Rpb24oXy5iYXIpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guZm9vKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmJhcik7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogLy8gQ3JlYXRlIGEgc3VwZWQtdXAgYGRlZmVyYCBpbiBOb2RlLmpzLlxuICAgKiB2YXIgZGVmZXIgPSBfLnJ1bkluQ29udGV4dCh7ICdzZXRUaW1lb3V0Jzogc2V0SW1tZWRpYXRlIH0pLmRlZmVyO1xuICAgKi9cbiAgdmFyIHJ1bkluQ29udGV4dCA9IChmdW5jdGlvbiBydW5JbkNvbnRleHQoY29udGV4dCkge1xuICAgIGNvbnRleHQgPSBjb250ZXh0ID09IG51bGwgPyByb290IDogXy5kZWZhdWx0cyhyb290Lk9iamVjdCgpLCBjb250ZXh0LCBfLnBpY2socm9vdCwgY29udGV4dFByb3BzKSk7XG5cbiAgICAvKiogQnVpbHQtaW4gY29uc3RydWN0b3IgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQXJyYXkgPSBjb250ZXh0LkFycmF5LFxuICAgICAgICBEYXRlID0gY29udGV4dC5EYXRlLFxuICAgICAgICBFcnJvciA9IGNvbnRleHQuRXJyb3IsXG4gICAgICAgIEZ1bmN0aW9uID0gY29udGV4dC5GdW5jdGlvbixcbiAgICAgICAgTWF0aCA9IGNvbnRleHQuTWF0aCxcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dC5PYmplY3QsXG4gICAgICAgIFJlZ0V4cCA9IGNvbnRleHQuUmVnRXhwLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0LlN0cmluZyxcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dC5UeXBlRXJyb3I7XG5cbiAgICAvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xuICAgIHZhciBjb3JlSnNEYXRhID0gY29udGV4dFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbiAgICAvKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG4gICAgdmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xuICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4gICAgLyoqIFVzZWQgdG8gZ2VuZXJhdGUgdW5pcXVlIElEcy4gKi9cbiAgICB2YXIgaWRDb3VudGVyID0gMDtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG4gICAgdmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICAgICAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gICAgICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gICAgICogb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIHZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xuICAgIHZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc3RvcmUgdGhlIG9yaWdpbmFsIGBfYCByZWZlcmVuY2UgaW4gYF8ubm9Db25mbGljdGAuICovXG4gICAgdmFyIG9sZERhc2ggPSByb290Ll87XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xuICAgIHZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gICAgICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4gICAgKTtcblxuICAgIC8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gY29udGV4dC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIFN5bWJvbCA9IGNvbnRleHQuU3ltYm9sLFxuICAgICAgICBVaW50OEFycmF5ID0gY29udGV4dC5VaW50OEFycmF5LFxuICAgICAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCksXG4gICAgICAgIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUsXG4gICAgICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlLFxuICAgICAgICBzcHJlYWRhYmxlU3ltYm9sID0gU3ltYm9sID8gU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltSXRlcmF0b3IgPSBTeW1ib2wgPyBTeW1ib2wuaXRlcmF0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICAgICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0oKSk7XG5cbiAgICAvKiogTW9ja2VkIGJ1aWx0LWlucy4gKi9cbiAgICB2YXIgY3R4Q2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQgIT09IHJvb3QuY2xlYXJUaW1lb3V0ICYmIGNvbnRleHQuY2xlYXJUaW1lb3V0LFxuICAgICAgICBjdHhOb3cgPSBEYXRlICYmIERhdGUubm93ICE9PSByb290LkRhdGUubm93ICYmIERhdGUubm93LFxuICAgICAgICBjdHhTZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0ICE9PSByb290LnNldFRpbWVvdXQgJiYgY29udGV4dC5zZXRUaW1lb3V0O1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xuICAgIHZhciBuYXRpdmVDZWlsID0gTWF0aC5jZWlsLFxuICAgICAgICBuYXRpdmVGbG9vciA9IE1hdGguZmxvb3IsXG4gICAgICAgIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLFxuICAgICAgICBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgbmF0aXZlSXNGaW5pdGUgPSBjb250ZXh0LmlzRmluaXRlLFxuICAgICAgICBuYXRpdmVKb2luID0gYXJyYXlQcm90by5qb2luLFxuICAgICAgICBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KSxcbiAgICAgICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluLFxuICAgICAgICBuYXRpdmVOb3cgPSBEYXRlLm5vdyxcbiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LFxuICAgICAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbSxcbiAgICAgICAgbmF0aXZlUmV2ZXJzZSA9IGFycmF5UHJvdG8ucmV2ZXJzZTtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbiAgICB2YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUoY29udGV4dCwgJ0RhdGFWaWV3JyksXG4gICAgICAgIE1hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnTWFwJyksXG4gICAgICAgIFByb21pc2UgPSBnZXROYXRpdmUoY29udGV4dCwgJ1Byb21pc2UnKSxcbiAgICAgICAgU2V0ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdTZXQnKSxcbiAgICAgICAgV2Vha01hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnV2Vha01hcCcpLFxuICAgICAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbiAgICAvKiogVXNlZCB0byBzdG9yZSBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgICB2YXIgbWV0YU1hcCA9IFdlYWtNYXAgJiYgbmV3IFdlYWtNYXA7XG5cbiAgICAvKiogVXNlZCB0byBsb29rdXAgdW5taW5pZmllZCBmdW5jdGlvbiBuYW1lcy4gKi9cbiAgICB2YXIgcmVhbE5hbWVzID0ge307XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xuICAgIHZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgICAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgICAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICAgICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuICAgIC8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xuICAgIHZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgaW1wbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzLiBNZXRob2RzIHRoYXQgb3BlcmF0ZSBvbiBhbmQgcmV0dXJuIGFycmF5cywgY29sbGVjdGlvbnMsXG4gICAgICogYW5kIGZ1bmN0aW9ucyBjYW4gYmUgY2hhaW5lZCB0b2dldGhlci4gTWV0aG9kcyB0aGF0IHJldHJpZXZlIGEgc2luZ2xlIHZhbHVlXG4gICAgICogb3IgbWF5IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgZW5kIHRoZSBjaGFpbiBzZXF1ZW5jZVxuICAgICAqIGFuZCByZXR1cm4gdGhlIHVud3JhcHBlZCB2YWx1ZS4gT3RoZXJ3aXNlLCB0aGUgdmFsdWUgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEV4cGxpY2l0IGNoYWluIHNlcXVlbmNlcywgd2hpY2ggbXVzdCBiZSB1bndyYXBwZWQgd2l0aCBgXyN2YWx1ZWAsIG1heSBiZVxuICAgICAqIGVuYWJsZWQgdXNpbmcgYF8uY2hhaW5gLlxuICAgICAqXG4gICAgICogVGhlIGV4ZWN1dGlvbiBvZiBjaGFpbmVkIG1ldGhvZHMgaXMgbGF6eSwgdGhhdCBpcywgaXQncyBkZWZlcnJlZCB1bnRpbFxuICAgICAqIGBfI3ZhbHVlYCBpcyBpbXBsaWNpdGx5IG9yIGV4cGxpY2l0bHkgY2FsbGVkLlxuICAgICAqXG4gICAgICogTGF6eSBldmFsdWF0aW9uIGFsbG93cyBzZXZlcmFsIG1ldGhvZHMgdG8gc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24uXG4gICAgICogU2hvcnRjdXQgZnVzaW9uIGlzIGFuIG9wdGltaXphdGlvbiB0byBtZXJnZSBpdGVyYXRlZSBjYWxsczsgdGhpcyBhdm9pZHNcbiAgICAgKiB0aGUgY3JlYXRpb24gb2YgaW50ZXJtZWRpYXRlIGFycmF5cyBhbmQgY2FuIGdyZWF0bHkgcmVkdWNlIHRoZSBudW1iZXIgb2ZcbiAgICAgKiBpdGVyYXRlZSBleGVjdXRpb25zLiBTZWN0aW9ucyBvZiBhIGNoYWluIHNlcXVlbmNlIHF1YWxpZnkgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlmIHRoZSBzZWN0aW9uIGlzIGFwcGxpZWQgdG8gYW4gYXJyYXkgYW5kIGl0ZXJhdGVlcyBhY2NlcHQgb25seVxuICAgICAqIG9uZSBhcmd1bWVudC4gVGhlIGhldXJpc3RpYyBmb3Igd2hldGhlciBhIHNlY3Rpb24gcXVhbGlmaWVzIGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpcyBzdWJqZWN0IHRvIGNoYW5nZS5cbiAgICAgKlxuICAgICAqIENoYWluaW5nIGlzIHN1cHBvcnRlZCBpbiBjdXN0b20gYnVpbGRzIGFzIGxvbmcgYXMgdGhlIGBfI3ZhbHVlYCBtZXRob2QgaXNcbiAgICAgKiBkaXJlY3RseSBvciBpbmRpcmVjdGx5IGluY2x1ZGVkIGluIHRoZSBidWlsZC5cbiAgICAgKlxuICAgICAqIEluIGFkZGl0aW9uIHRvIGxvZGFzaCBtZXRob2RzLCB3cmFwcGVycyBoYXZlIGBBcnJheWAgYW5kIGBTdHJpbmdgIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgQXJyYXlgIG1ldGhvZHMgYXJlOlxuICAgICAqIGBjb25jYXRgLCBgam9pbmAsIGBwb3BgLCBgcHVzaGAsIGBzaGlmdGAsIGBzb3J0YCwgYHNwbGljZWAsIGFuZCBgdW5zaGlmdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBTdHJpbmdgIG1ldGhvZHMgYXJlOlxuICAgICAqIGByZXBsYWNlYCBhbmQgYHNwbGl0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uIGFyZTpcbiAgICAgKiBgYXRgLCBgY29tcGFjdGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBkcm9wV2hpbGVgLCBgZmlsdGVyYCwgYGZpbmRgLFxuICAgICAqIGBmaW5kTGFzdGAsIGBoZWFkYCwgYGluaXRpYWxgLCBgbGFzdGAsIGBtYXBgLCBgcmVqZWN0YCwgYHJldmVyc2VgLCBgc2xpY2VgLFxuICAgICAqIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCwgYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGFuZCBgdG9BcnJheWBcbiAgICAgKlxuICAgICAqIFRoZSBjaGFpbmFibGUgd3JhcHBlciBtZXRob2RzIGFyZTpcbiAgICAgKiBgYWZ0ZXJgLCBgYXJ5YCwgYGFzc2lnbmAsIGBhc3NpZ25JbmAsIGBhc3NpZ25JbldpdGhgLCBgYXNzaWduV2l0aGAsIGBhdGAsXG4gICAgICogYGJlZm9yZWAsIGBiaW5kYCwgYGJpbmRBbGxgLCBgYmluZEtleWAsIGBjYXN0QXJyYXlgLCBgY2hhaW5gLCBgY2h1bmtgLFxuICAgICAqIGBjb21taXRgLCBgY29tcGFjdGAsIGBjb25jYXRgLCBgY29uZm9ybXNgLCBgY29uc3RhbnRgLCBgY291bnRCeWAsIGBjcmVhdGVgLFxuICAgICAqIGBjdXJyeWAsIGBkZWJvdW5jZWAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgZGVmZXJgLCBgZGVsYXlgLFxuICAgICAqIGBkaWZmZXJlbmNlYCwgYGRpZmZlcmVuY2VCeWAsIGBkaWZmZXJlbmNlV2l0aGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsXG4gICAgICogYGRyb3BSaWdodFdoaWxlYCwgYGRyb3BXaGlsZWAsIGBleHRlbmRgLCBgZXh0ZW5kV2l0aGAsIGBmaWxsYCwgYGZpbHRlcmAsXG4gICAgICogYGZsYXRNYXBgLCBgZmxhdE1hcERlZXBgLCBgZmxhdE1hcERlcHRoYCwgYGZsYXR0ZW5gLCBgZmxhdHRlbkRlZXBgLFxuICAgICAqIGBmbGF0dGVuRGVwdGhgLCBgZmxpcGAsIGBmbG93YCwgYGZsb3dSaWdodGAsIGBmcm9tUGFpcnNgLCBgZnVuY3Rpb25zYCxcbiAgICAgKiBgZnVuY3Rpb25zSW5gLCBgZ3JvdXBCeWAsIGBpbml0aWFsYCwgYGludGVyc2VjdGlvbmAsIGBpbnRlcnNlY3Rpb25CeWAsXG4gICAgICogYGludGVyc2VjdGlvbldpdGhgLCBgaW52ZXJ0YCwgYGludmVydEJ5YCwgYGludm9rZU1hcGAsIGBpdGVyYXRlZWAsIGBrZXlCeWAsXG4gICAgICogYGtleXNgLCBga2V5c0luYCwgYG1hcGAsIGBtYXBLZXlzYCwgYG1hcFZhbHVlc2AsIGBtYXRjaGVzYCwgYG1hdGNoZXNQcm9wZXJ0eWAsXG4gICAgICogYG1lbW9pemVgLCBgbWVyZ2VgLCBgbWVyZ2VXaXRoYCwgYG1ldGhvZGAsIGBtZXRob2RPZmAsIGBtaXhpbmAsIGBuZWdhdGVgLFxuICAgICAqIGBudGhBcmdgLCBgb21pdGAsIGBvbWl0QnlgLCBgb25jZWAsIGBvcmRlckJ5YCwgYG92ZXJgLCBgb3ZlckFyZ3NgLFxuICAgICAqIGBvdmVyRXZlcnlgLCBgb3ZlclNvbWVgLCBgcGFydGlhbGAsIGBwYXJ0aWFsUmlnaHRgLCBgcGFydGl0aW9uYCwgYHBpY2tgLFxuICAgICAqIGBwaWNrQnlgLCBgcGxhbnRgLCBgcHJvcGVydHlgLCBgcHJvcGVydHlPZmAsIGBwdWxsYCwgYHB1bGxBbGxgLCBgcHVsbEFsbEJ5YCxcbiAgICAgKiBgcHVsbEFsbFdpdGhgLCBgcHVsbEF0YCwgYHB1c2hgLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZWFyZ2AsIGByZWplY3RgLFxuICAgICAqIGByZW1vdmVgLCBgcmVzdGAsIGByZXZlcnNlYCwgYHNhbXBsZVNpemVgLCBgc2V0YCwgYHNldFdpdGhgLCBgc2h1ZmZsZWAsXG4gICAgICogYHNsaWNlYCwgYHNvcnRgLCBgc29ydEJ5YCwgYHNwbGljZWAsIGBzcHJlYWRgLCBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGB0YXBgLCBgdGhyb3R0bGVgLCBgdGhydWAsIGB0b0FycmF5YCxcbiAgICAgKiBgdG9QYWlyc2AsIGB0b1BhaXJzSW5gLCBgdG9QYXRoYCwgYHRvUGxhaW5PYmplY3RgLCBgdHJhbnNmb3JtYCwgYHVuYXJ5YCxcbiAgICAgKiBgdW5pb25gLCBgdW5pb25CeWAsIGB1bmlvbldpdGhgLCBgdW5pcWAsIGB1bmlxQnlgLCBgdW5pcVdpdGhgLCBgdW5zZXRgLFxuICAgICAqIGB1bnNoaWZ0YCwgYHVuemlwYCwgYHVuemlwV2l0aGAsIGB1cGRhdGVgLCBgdXBkYXRlV2l0aGAsIGB2YWx1ZXNgLFxuICAgICAqIGB2YWx1ZXNJbmAsIGB3aXRob3V0YCwgYHdyYXBgLCBgeG9yYCwgYHhvckJ5YCwgYHhvcldpdGhgLCBgemlwYCxcbiAgICAgKiBgemlwT2JqZWN0YCwgYHppcE9iamVjdERlZXBgLCBhbmQgYHppcFdpdGhgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgYXJlICoqbm90KiogY2hhaW5hYmxlIGJ5IGRlZmF1bHQgYXJlOlxuICAgICAqIGBhZGRgLCBgYXR0ZW1wdGAsIGBjYW1lbENhc2VgLCBgY2FwaXRhbGl6ZWAsIGBjZWlsYCwgYGNsYW1wYCwgYGNsb25lYCxcbiAgICAgKiBgY2xvbmVEZWVwYCwgYGNsb25lRGVlcFdpdGhgLCBgY2xvbmVXaXRoYCwgYGNvbmZvcm1zVG9gLCBgZGVidXJyYCxcbiAgICAgKiBgZGVmYXVsdFRvYCwgYGRpdmlkZWAsIGBlYWNoYCwgYGVhY2hSaWdodGAsIGBlbmRzV2l0aGAsIGBlcWAsIGBlc2NhcGVgLFxuICAgICAqIGBlc2NhcGVSZWdFeHBgLCBgZXZlcnlgLCBgZmluZGAsIGBmaW5kSW5kZXhgLCBgZmluZEtleWAsIGBmaW5kTGFzdGAsXG4gICAgICogYGZpbmRMYXN0SW5kZXhgLCBgZmluZExhc3RLZXlgLCBgZmlyc3RgLCBgZmxvb3JgLCBgZm9yRWFjaGAsIGBmb3JFYWNoUmlnaHRgLFxuICAgICAqIGBmb3JJbmAsIGBmb3JJblJpZ2h0YCwgYGZvck93bmAsIGBmb3JPd25SaWdodGAsIGBnZXRgLCBgZ3RgLCBgZ3RlYCwgYGhhc2AsXG4gICAgICogYGhhc0luYCwgYGhlYWRgLCBgaWRlbnRpdHlgLCBgaW5jbHVkZXNgLCBgaW5kZXhPZmAsIGBpblJhbmdlYCwgYGludm9rZWAsXG4gICAgICogYGlzQXJndW1lbnRzYCwgYGlzQXJyYXlgLCBgaXNBcnJheUJ1ZmZlcmAsIGBpc0FycmF5TGlrZWAsIGBpc0FycmF5TGlrZU9iamVjdGAsXG4gICAgICogYGlzQm9vbGVhbmAsIGBpc0J1ZmZlcmAsIGBpc0RhdGVgLCBgaXNFbGVtZW50YCwgYGlzRW1wdHlgLCBgaXNFcXVhbGAsXG4gICAgICogYGlzRXF1YWxXaXRoYCwgYGlzRXJyb3JgLCBgaXNGaW5pdGVgLCBgaXNGdW5jdGlvbmAsIGBpc0ludGVnZXJgLCBgaXNMZW5ndGhgLFxuICAgICAqIGBpc01hcGAsIGBpc01hdGNoYCwgYGlzTWF0Y2hXaXRoYCwgYGlzTmFOYCwgYGlzTmF0aXZlYCwgYGlzTmlsYCwgYGlzTnVsbGAsXG4gICAgICogYGlzTnVtYmVyYCwgYGlzT2JqZWN0YCwgYGlzT2JqZWN0TGlrZWAsIGBpc1BsYWluT2JqZWN0YCwgYGlzUmVnRXhwYCxcbiAgICAgKiBgaXNTYWZlSW50ZWdlcmAsIGBpc1NldGAsIGBpc1N0cmluZ2AsIGBpc1VuZGVmaW5lZGAsIGBpc1R5cGVkQXJyYXlgLFxuICAgICAqIGBpc1dlYWtNYXBgLCBgaXNXZWFrU2V0YCwgYGpvaW5gLCBga2ViYWJDYXNlYCwgYGxhc3RgLCBgbGFzdEluZGV4T2ZgLFxuICAgICAqIGBsb3dlckNhc2VgLCBgbG93ZXJGaXJzdGAsIGBsdGAsIGBsdGVgLCBgbWF4YCwgYG1heEJ5YCwgYG1lYW5gLCBgbWVhbkJ5YCxcbiAgICAgKiBgbWluYCwgYG1pbkJ5YCwgYG11bHRpcGx5YCwgYG5vQ29uZmxpY3RgLCBgbm9vcGAsIGBub3dgLCBgbnRoYCwgYHBhZGAsXG4gICAgICogYHBhZEVuZGAsIGBwYWRTdGFydGAsIGBwYXJzZUludGAsIGBwb3BgLCBgcmFuZG9tYCwgYHJlZHVjZWAsIGByZWR1Y2VSaWdodGAsXG4gICAgICogYHJlcGVhdGAsIGByZXN1bHRgLCBgcm91bmRgLCBgcnVuSW5Db250ZXh0YCwgYHNhbXBsZWAsIGBzaGlmdGAsIGBzaXplYCxcbiAgICAgKiBgc25ha2VDYXNlYCwgYHNvbWVgLCBgc29ydGVkSW5kZXhgLCBgc29ydGVkSW5kZXhCeWAsIGBzb3J0ZWRMYXN0SW5kZXhgLFxuICAgICAqIGBzb3J0ZWRMYXN0SW5kZXhCeWAsIGBzdGFydENhc2VgLCBgc3RhcnRzV2l0aGAsIGBzdHViQXJyYXlgLCBgc3R1YkZhbHNlYCxcbiAgICAgKiBgc3R1Yk9iamVjdGAsIGBzdHViU3RyaW5nYCwgYHN0dWJUcnVlYCwgYHN1YnRyYWN0YCwgYHN1bWAsIGBzdW1CeWAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRpbWVzYCwgYHRvRmluaXRlYCwgYHRvSW50ZWdlcmAsIGB0b0pTT05gLCBgdG9MZW5ndGhgLFxuICAgICAqIGB0b0xvd2VyYCwgYHRvTnVtYmVyYCwgYHRvU2FmZUludGVnZXJgLCBgdG9TdHJpbmdgLCBgdG9VcHBlcmAsIGB0cmltYCxcbiAgICAgKiBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBgdHJ1bmNhdGVgLCBgdW5lc2NhcGVgLCBgdW5pcXVlSWRgLCBgdXBwZXJDYXNlYCxcbiAgICAgKiBgdXBwZXJGaXJzdGAsIGB2YWx1ZWAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAbmFtZSBfXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDIsIDNdKTtcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYW4gdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIHdyYXBwZWQucmVkdWNlKF8uYWRkKTtcbiAgICAgKiAvLyA9PiA2XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGEgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB2YXIgc3F1YXJlcyA9IHdyYXBwZWQubWFwKHNxdWFyZSk7XG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzLnZhbHVlKCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2Rhc2godmFsdWUpIHtcbiAgICAgIGlmIChpc09iamVjdExpa2UodmFsdWUpICYmICFpc0FycmF5KHZhbHVlKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExvZGFzaFdyYXBwZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdfX3dyYXBwZWRfXycpKSB7XG4gICAgICAgICAgcmV0dXJuIHdyYXBwZXJDbG9uZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICAgICAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gd2hvc2UgcHJvdG90eXBlIGNoYWluIHNlcXVlbmNlIHdyYXBwZXJzIGluaGVyaXQgZnJvbS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUxvZGFzaCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgY29uc3RydWN0b3IgZm9yIGNyZWF0aW5nIGBsb2Rhc2hgIHdyYXBwZXIgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjaGFpbkFsbF0gRW5hYmxlIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTG9kYXNoV3JhcHBlcih2YWx1ZSwgY2hhaW5BbGwpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19jaGFpbl9fID0gISFjaGFpbkFsbDtcbiAgICAgIHRoaXMuX19pbmRleF9fID0gMDtcbiAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgZGVsaW1pdGVycyB1c2VkIGJ5IGxvZGFzaCBhcmUgbGlrZSB0aG9zZSBpblxuICAgICAqIGVtYmVkZGVkIFJ1YnkgKEVSQikgYXMgd2VsbCBhcyBFUzIwMTUgdGVtcGxhdGUgc3RyaW5ncy4gQ2hhbmdlIHRoZVxuICAgICAqIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2VzY2FwZSc6IHJlRXNjYXBlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGNvZGUgdG8gYmUgZXZhbHVhdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdldmFsdWF0ZSc6IHJlRXZhbHVhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2ludGVycG9sYXRlJzogcmVJbnRlcnBvbGF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIHJlZmVyZW5jZSB0aGUgZGF0YSBvYmplY3QgaW4gdGhlIHRlbXBsYXRlIHRleHQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgJ3ZhcmlhYmxlJzogJycsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBpbXBvcnQgdmFyaWFibGVzIGludG8gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgICdpbXBvcnRzJzoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c1xuICAgICAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICAnXyc6IGxvZGFzaFxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFbnN1cmUgd3JhcHBlcnMgYXJlIGluc3RhbmNlcyBvZiBgYmFzZUxvZGFzaGAuXG4gICAgbG9kYXNoLnByb3RvdHlwZSA9IGJhc2VMb2Rhc2gucHJvdG90eXBlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBsb2Rhc2g7XG5cbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTG9kYXNoV3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBsYXp5IHdyYXBwZXIgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGxhenkgZXZhbHVhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMYXp5V3JhcHBlcih2YWx1ZSkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2Rpcl9fID0gMTtcbiAgICAgIHRoaXMuX19maWx0ZXJlZF9fID0gZmFsc2U7XG4gICAgICB0aGlzLl9faXRlcmF0ZWVzX18gPSBbXTtcbiAgICAgIHRoaXMuX190YWtlQ291bnRfXyA9IE1BWF9BUlJBWV9MRU5HVEg7XG4gICAgICB0aGlzLl9fdmlld3NfXyA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgbGF6eSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xvbmVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eUNsb25lKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzLl9fd3JhcHBlZF9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2Rpcl9fID0gdGhpcy5fX2Rpcl9fO1xuICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRoaXMuX19maWx0ZXJlZF9fO1xuICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18gPSBjb3B5QXJyYXkodGhpcy5fX2l0ZXJhdGVlc19fKTtcbiAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gdGhpcy5fX3Rha2VDb3VudF9fO1xuICAgICAgcmVzdWx0Ll9fdmlld3NfXyA9IGNvcHlBcnJheSh0aGlzLl9fdmlld3NfXyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIHRoZSBkaXJlY3Rpb24gb2YgbGF6eSBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgcmV2ZXJzZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVJldmVyc2UoKSB7XG4gICAgICBpZiAodGhpcy5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gPSAtMTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fICo9IC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB0aGUgdW53cmFwcGVkIHZhbHVlIGZyb20gaXRzIGxhenkgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlWYWx1ZSgpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX193cmFwcGVkX18udmFsdWUoKSxcbiAgICAgICAgICBkaXIgPSB0aGlzLl9fZGlyX18sXG4gICAgICAgICAgaXNBcnIgPSBpc0FycmF5KGFycmF5KSxcbiAgICAgICAgICBpc1JpZ2h0ID0gZGlyIDwgMCxcbiAgICAgICAgICBhcnJMZW5ndGggPSBpc0FyciA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgdmlldyA9IGdldFZpZXcoMCwgYXJyTGVuZ3RoLCB0aGlzLl9fdmlld3NfXyksXG4gICAgICAgICAgc3RhcnQgPSB2aWV3LnN0YXJ0LFxuICAgICAgICAgIGVuZCA9IHZpZXcuZW5kLFxuICAgICAgICAgIGxlbmd0aCA9IGVuZCAtIHN0YXJ0LFxuICAgICAgICAgIGluZGV4ID0gaXNSaWdodCA/IGVuZCA6IChzdGFydCAtIDEpLFxuICAgICAgICAgIGl0ZXJhdGVlcyA9IHRoaXMuX19pdGVyYXRlZXNfXyxcbiAgICAgICAgICBpdGVyTGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgdGFrZUNvdW50ID0gbmF0aXZlTWluKGxlbmd0aCwgdGhpcy5fX3Rha2VDb3VudF9fKTtcblxuICAgICAgaWYgKCFpc0FyciB8fCAoIWlzUmlnaHQgJiYgYXJyTGVuZ3RoID09IGxlbmd0aCAmJiB0YWtlQ291bnQgPT0gbGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZShhcnJheSwgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKGxlbmd0aC0tICYmIHJlc0luZGV4IDwgdGFrZUNvdW50KSB7XG4gICAgICAgIGluZGV4ICs9IGRpcjtcblxuICAgICAgICB2YXIgaXRlckluZGV4ID0gLTEsXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W2luZGV4XTtcblxuICAgICAgICB3aGlsZSAoKytpdGVySW5kZXggPCBpdGVyTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBpdGVyYXRlZXNbaXRlckluZGV4XSxcbiAgICAgICAgICAgICAgaXRlcmF0ZWUgPSBkYXRhLml0ZXJhdGVlLFxuICAgICAgICAgICAgICB0eXBlID0gZGF0YS50eXBlLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICAgIGlmICh0eXBlID09IExBWllfTUFQX0ZMQUcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY29tcHV0ZWQ7XG4gICAgICAgICAgfSBlbHNlIGlmICghY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09IExBWllfRklMVEVSX0ZMQUcpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVhayBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSBgTGF6eVdyYXBwZXJgIGlzIGFuIGluc3RhbmNlIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXp5V3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgICAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgICAgIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuICAgIEhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuICAgIEhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG4gICAgSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbiAgICBIYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuICAgIEhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgZGF0YS5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIC0tdGhpcy5zaXplO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICsrdGhpcy5zaXplO1xuICAgICAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAgICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAgICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuICAgIE1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGFkZFxuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBhbGlhcyBwdXNoXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgICAgIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICAgICAgfVxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuICAgIFN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG4gICAgU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuICAgIFN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcbiAgICBTdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG4gICAgU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgICAgICkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtiYXNlUmFuZG9tKDAsIGxlbmd0aCAtIDEpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlU2l6ZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZVNpemUoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpLCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2h1ZmZsZShhcnJheSkge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gICAgICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcShvYmplY3Rba2V5XSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZ2dyZWdhdGVzIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBvbiBgYWNjdW11bGF0b3JgIHdpdGgga2V5cyB0cmFuc2Zvcm1lZFxuICAgICAqIGJ5IGBpdGVyYXRlZWAgYW5kIHZhbHVlcyBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBZ2dyZWdhdG9yKGNvbGxlY3Rpb24sIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAgICAgKiB2YWx1ZSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXQob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgc2tpcCA9IG9iamVjdCA9PSBudWxsO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gc2tpcCA/IHVuZGVmaW5lZCA6IGdldChvYmplY3QsIHBhdGhzW2luZGV4XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsYW1wYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmIChudW1iZXIgPT09IG51bWJlcikge1xuICAgICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA8PSB1cHBlciA/IG51bWJlciA6IHVwcGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyID49IGxvd2VyID8gbnVtYmVyIDogbG93ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICAgICAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBEZWVwIGNsb25lXG4gICAgICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gICAgICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2spIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgICAgICBpc0ZsYXQgPSBiaXRtYXNrICYgQ0xPTkVfRkxBVF9GTEFHLFxuICAgICAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgICAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSAoaXNGbGF0IHx8IGlzRnVuYykgPyB7fSA6IGluaXRDbG9uZU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICAgICAgPyBjb3B5U3ltYm9sc0luKHZhbHVlLCBiYXNlQXNzaWduSW4ocmVzdWx0LCB2YWx1ZSkpXG4gICAgICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQ7XG4gICAgICB9XG4gICAgICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgICAgIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSkge1xuICAgICAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc01hcCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbbGVuZ3RoXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gICAgICogdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBleGNsdWRpbmcgbXVsdGlwbGUgYXJyYXlzIG9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXModmFsdWVzLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2hSaWdodCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd25SaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gICAgICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgICAgICA6IGNvbXBhcmF0b3IoY3VycmVudCwgY29tcHV0ZWQpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVuZCA9IHN0YXJ0ID4gZW5kID8gMCA6IHRvTGVuZ3RoKGVuZCk7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gICAgICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICAgICAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93blJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBmaWx0ZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gICAgICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pblJhbmdlYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCwgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgICAgIG1heExlbmd0aCA9IEluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgICAgID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJyYXkgPSBhcnJheXNbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmICghKHNlZW5cbiAgICAgICAgICAgICAgPyBjYWNoZUhhcyhzZWVuLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEoY2FjaGVcbiAgICAgICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gICAgICogYG9iamVjdGAgd2l0aCB2YWx1ZXMgdHJhbnNmb3JtZWQgYnkgYGl0ZXJhdGVlYCBhbmQgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludm9rZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogbWV0aG9kIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0RhdGVgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gICAgICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gICAgICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICAgICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICAgICAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1JlZ0V4cGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAgICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgYmFzZU1lcmdlLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICAgICAgc3JjVmFsdWUgPSBzYWZlR2V0KHNvdXJjZSwga2V5KSxcbiAgICAgICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgc3RhY2tlZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIGlzQ29tbW9uID0gbmV3VmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmIGlzQnVmZmVyKHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgIGlmIChpc0FyciB8fCBpc0J1ZmYgfHwgaXNUeXBlZCkge1xuICAgICAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVCdWZmZXIoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgaWYgKGlzQXJndW1lbnRzKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KG9ialZhbHVlKSB8fCBpc0Z1bmN0aW9uKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm50aGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTnRoKGFycmF5LCBuKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbiArPSBuIDwgMCA/IGxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gaXNJbmRleChuLCBsZW5ndGgpID8gYXJyYXlbbl0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ub3JkZXJCeWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLmxlbmd0aCA/IGl0ZXJhdGVlcyA6IFtpZGVudGl0eV0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucGlja2Agd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgICAgIGJhc2VTZXQocmVzdWx0LCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBbGxCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgICAqIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleE9mID0gY29tcGFyYXRvciA/IGJhc2VJbmRleE9mV2l0aCA6IGJhc2VJbmRleE9mLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICBzZWVuID0gYXJyYXk7XG5cbiAgICAgIGlmIChhcnJheSA9PT0gdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gYXJyYXkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBpbmRleGVzIG9yIGNhcHR1cmluZyB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBpbmRleGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICAgICAgaWYgKGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlVW5zZXQoYXJyYXksIGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpIHtcbiAgICAgIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZ2VgIGFuZCBgXy5yYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XG4gICAgICogY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgICAgICBzdGFydCArPSBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXBlYXRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVwZWF0KHN0cmluZywgbikge1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgaWYgKCFzdHJpbmcgfHwgbiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIExldmVyYWdlIHRoZSBleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyBhbGdvcml0aG0gZm9yIGEgZmFzdGVyIHJlcGVhdC5cbiAgICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeHBvbmVudGlhdGlvbl9ieV9zcXVhcmluZyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgZG8ge1xuICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuYXRpdmVGbG9vcihuIC8gMik7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAobik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhcnJheVNhbXBsZSh2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZVNpemVgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZVNpemUoY29sbGVjdGlvbiwgbikge1xuICAgICAgdmFyIGFycmF5ID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGFycmF5LCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICAgIG5lc3RlZCA9IG9iamVjdDtcblxuICAgICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgICAgIG5ld1ZhbHVlID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIGtleSwgbmVzdGVkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICAgICAgPyBvYmpWYWx1ZVxuICAgICAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2h1ZmZsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuICFyZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleGAgYW5kIGBfLnNvcnRlZExhc3RJbmRleGAgd2hpY2hcbiAgICAgKiBwZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggb2YgYGFycmF5YCB0byBkZXRlcm1pbmUgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgICAgICBpZiAoY29tcHV0ZWQgIT09IG51bGwgJiYgIWlzU3ltYm9sKGNvbXB1dGVkKSAmJlxuICAgICAgICAgICAgICAocmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSkpKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGlkZW50aXR5LCByZXRIaWdoZXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleEJ5YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4QnlgXG4gICAgICogd2hpY2ggaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlXG4gICAgICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFsdWUgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICB2YWxJc05hTiA9IHZhbHVlICE9PSB2YWx1ZSxcbiAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKSxcbiAgICAgICAgICB2YWxJc1VuZGVmaW5lZCA9IHZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgIHZhciBtaWQgPSBuYXRpdmVGbG9vcigobG93ICsgaGlnaCkgLyAyKSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUoYXJyYXlbbWlkXSksXG4gICAgICAgICAgICBvdGhJc0RlZmluZWQgPSBjb21wdXRlZCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gY29tcHV0ZWQgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IGNvbXB1dGVkID09PSBjb21wdXRlZCxcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2woY29tcHV0ZWQpO1xuXG4gICAgICAgIGlmICh2YWxJc05hTikge1xuICAgICAgICAgIHZhciBzZXRMb3cgPSByZXRIaWdoZXN0IHx8IG90aElzUmVmbGV4aXZlO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzVW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgKHJldEhpZ2hlc3QgfHwgb3RoSXNEZWZpbmVkKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc051bGwpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzTnVsbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgIW90aElzTnVsbCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNTeW1ib2wpO1xuICAgICAgICB9IGVsc2UgaWYgKG90aElzTnVsbCB8fCBvdGhJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldExvdyA9IHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXRMb3cpIHtcbiAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVNaW4oaGlnaCwgTUFYX0FSUkFZX0lOREVYKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRVbmlxYCBhbmQgYF8uc29ydGVkVW5pcUJ5YCB3aXRob3V0XG4gICAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkVW5pcShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICBpZiAoIWluZGV4IHx8ICFlcShjb21wdXRlZCwgc2VlbikpIHtcbiAgICAgICAgICB2YXIgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvTnVtYmVyYCB3aGljaCBkb2Vzbid0IGVuc3VyZSBjb3JyZWN0XG4gICAgICogY29udmVyc2lvbnMgb2YgYmluYXJ5LCBoZXhhZGVjaW1hbCwgb3Igb2N0YWwgc3RyaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIHJldHVybiArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gICAgICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHNlZW4gPSByZXN1bHQ7XG5cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChsZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICB2YXIgc2V0ID0gaXRlcmF0ZWUgPyBudWxsIDogY3JlYXRlU2V0KGFycmF5KTtcbiAgICAgICAgaWYgKHNldCkge1xuICAgICAgICAgIHJldHVybiBzZXRUb0FycmF5KHNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgc2VlbiA9IG5ldyBTZXRDYWNoZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWVuID0gaXRlcmF0ZWUgPyBbXSA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChzZWVuSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gcmVzdWx0KSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwcm9wZXJ0eSBwYXRoIHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgfHwgZGVsZXRlIG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udXBkYXRlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICByZXR1cm4gYmFzZVNldChvYmplY3QsIHBhdGgsIHVwZGF0ZXIoYmFzZUdldChvYmplY3QsIHBhdGgpKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRyb3BXaGlsZWAgYW5kIGBfLnRha2VXaGlsZWBcbiAgICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0Ryb3BdIFNwZWNpZnkgZHJvcHBpbmcgZWxlbWVudHMgaW5zdGVhZCBvZiB0YWtpbmcgdGhlbS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUsIGlzRHJvcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTE7XG5cbiAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpICYmXG4gICAgICAgIHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHt9XG5cbiAgICAgIHJldHVybiBpc0Ryb3BcbiAgICAgICAgPyBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyAwIDogaW5kZXgpLCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogbGVuZ3RoKSlcbiAgICAgICAgOiBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiAwKSwgKGZyb21SaWdodCA/IGxlbmd0aCA6IGluZGV4KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHdyYXBwZXJWYWx1ZWAgd2hpY2ggcmV0dXJucyB0aGUgcmVzdWx0IG9mXG4gICAgICogcGVyZm9ybWluZyBhIHNlcXVlbmNlIG9mIGFjdGlvbnMgb24gdGhlIHVud3JhcHBlZCBgdmFsdWVgLCB3aGVyZSBlYWNoXG4gICAgICogc3VjY2Vzc2l2ZSBhY3Rpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhY3Rpb25zIEFjdGlvbnMgdG8gcGVyZm9ybSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXcmFwcGVyVmFsdWUodmFsdWUsIGFjdGlvbnMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVJlZHVjZShhY3Rpb25zLCBmdW5jdGlvbihyZXN1bHQsIGFjdGlvbikge1xuICAgICAgICByZXR1cm4gYWN0aW9uLmZ1bmMuYXBwbHkoYWN0aW9uLnRoaXNBcmcsIGFycmF5UHVzaChbcmVzdWx0XSwgYWN0aW9uLmFyZ3MpKTtcbiAgICAgIH0sIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLnhvcmAsIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVhvcihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlVW5pcShhcnJheXNbMF0pIDogW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbaW5kZXhdLFxuICAgICAgICAgICAgb3RoSW5kZXggPSAtMTtcblxuICAgICAgICB3aGlsZSAoKytvdGhJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChvdGhJbmRleCAhPSBpbmRleCkge1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGJhc2VEaWZmZXJlbmNlKHJlc3VsdFtpbmRleF0gfHwgYXJyYXksIGFycmF5c1tvdGhJbmRleF0sIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihyZXN1bHQsIDEpLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnppcE9iamVjdGAgd2hpY2ggYXNzaWducyB2YWx1ZXMgdXNpbmcgYGFzc2lnbkZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduRnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VaaXBPYmplY3QocHJvcHMsIHZhbHVlcywgYXNzaWduRnVuYykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHZhbHNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpbmRleCA8IHZhbHNMZW5ndGggPyB2YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICBhc3NpZ25GdW5jKHJlc3VsdCwgcHJvcHNbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYW4gZW1wdHkgYXJyYXkgaWYgaXQncyBub3QgYW4gYXJyYXkgbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpID8gdmFsdWUgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGBiYXNlUmVzdGAgYWxpYXMgd2hpY2ggY2FuIGJlIHJlcGxhY2VkIHdpdGggYGlkZW50aXR5YCBieSBtb2R1bGVcbiAgICAgKiByZXBsYWNlbWVudCBwbHVnaW5zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgY2FzdFJlc3QgPSBiYXNlUmVzdDtcblxuICAgIC8qKlxuICAgICAqIENhc3RzIGBhcnJheWAgdG8gYSBzbGljZSBpZiBpdCdzIG5lZWRlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHNsaWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kO1xuICAgICAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYGNsZWFyVGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL2NsZWFyVGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfE9iamVjdH0gaWQgVGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0IG9mIHRoZSB0aW1lciB0byBjbGVhci5cbiAgICAgKi9cbiAgICB2YXIgY2xlYXJUaW1lb3V0ID0gY3R4Q2xlYXJUaW1lb3V0IHx8IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gcm9vdC5jbGVhclRpbWVvdXQoaWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICAgICAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZXMgdmFsdWVzIHRvIHNvcnQgdGhlbSBpbiBhc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKHZhbHVlLCBvdGhlcikge1xuICAgICAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgICAgICB2YXIgdmFsSXNEZWZpbmVkID0gdmFsdWUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG4gICAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKTtcblxuICAgICAgICB2YXIgb3RoSXNEZWZpbmVkID0gb3RoZXIgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBvdGhlciA9PT0gb3RoZXIsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKG90aGVyKTtcblxuICAgICAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuICAgICAgICAgICAgKHZhbElzU3ltYm9sICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSAmJiAhb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgICh2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhdmFsSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sICYmICFvdGhJc1N5bWJvbCAmJiB2YWx1ZSA8IG90aGVyKSB8fFxuICAgICAgICAgICAgKG90aElzU3ltYm9sICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSAmJiAhdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCFvdGhJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhb3RoSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub3JkZXJCeWAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICAgICAqIGFuZCBzdGFibGUgc29ydCB0aGVtLlxuICAgICAqXG4gICAgICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSxcbiAgICAgKiBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvciBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyXG4gICAgICogb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFuW118c3RyaW5nW119IG9yZGVycyBUaGUgb3JkZXIgdG8gc29ydCBieSBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICAgICAgb3RoQ3JpdGVyaWEgPSBvdGhlci5jcml0ZXJpYSxcbiAgICAgICAgICBsZW5ndGggPSBvYmpDcml0ZXJpYS5sZW5ndGgsXG4gICAgICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID49IG9yZGVyc0xlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG9yZGVyID0gb3JkZXJzW2luZGV4XTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICogKG9yZGVyID09ICdkZXNjJyA/IC0xIDogMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgICAgIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gICAgICAvLyBgb2JqZWN0YCBhbmQgYG90aGVyYC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9wdWxsLzEyNDdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBhbHNvIGVuc3VyZXMgYSBzdGFibGUgc29ydCBpbiBWOCBhbmQgb3RoZXIgZW5naW5lcy5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLFxuICAgICAqIHBsYWNlaG9sZGVycywgYW5kIHByb3ZpZGVkIGFyZ3VtZW50cyBpbnRvIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVmdExlbmd0aCArIHJhbmdlTGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtob2xkZXJzW2FyZ3NJbmRleF1dID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAocmFuZ2VMZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4KytdID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgY29tcG9zZUFyZ3NgIGV4Y2VwdCB0aGF0IHRoZSBhcmd1bWVudHMgY29tcG9zaXRpb25cbiAgICAgKiBpcyB0YWlsb3JlZCBmb3IgYF8ucGFydGlhbFJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0luZGV4ID0gLTEsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIHJpZ2h0SW5kZXggPSAtMSxcbiAgICAgICAgICByaWdodExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkocmFuZ2VMZW5ndGggKyByaWdodExlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCByYW5nZUxlbmd0aCkge1xuICAgICAgICByZXN1bHRbYXJnc0luZGV4XSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgIH1cbiAgICAgIHZhciBvZmZzZXQgPSBhcmdzSW5kZXg7XG4gICAgICB3aGlsZSAoKytyaWdodEluZGV4IDwgcmlnaHRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIHJpZ2h0SW5kZXhdID0gcGFydGlhbHNbcmlnaHRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytob2xkZXJzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W29mZnNldCArIGhvbGRlcnNbaG9sZGVyc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgICAgIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gICAgICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXcpIHtcbiAgICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uZ3JvdXBCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaW5pdGlhbGl6ZXJdIFRoZSBhY2N1bXVsYXRvciBvYmplY3QgaW5pdGlhbGl6ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBZ2dyZWdhdG9yKHNldHRlciwgaW5pdGlhbGl6ZXIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUFnZ3JlZ2F0b3IgOiBiYXNlQWdncmVnYXRvcixcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gaW5pdGlhbGl6ZXIgPyBpbml0aWFsaXplcigpIDoge307XG5cbiAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgc2V0dGVyLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGFjY3VtdWxhdG9yKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ubG93ZXJGaXJzdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgU3RyaW5nYCBjYXNlIG1ldGhvZCB0byB1c2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDYXNlRmlyc3QobWV0aG9kTmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICAgICAgPyBzdHJpbmdUb0FycmF5KHN0cmluZylcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgY2hyID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gc3RyU3ltYm9sc1swXVxuICAgICAgICAgIDogc3RyaW5nLmNoYXJBdCgwKTtcblxuICAgICAgICB2YXIgdHJhaWxpbmcgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbignJylcbiAgICAgICAgICA6IHN0cmluZy5zbGljZSgxKTtcblxuICAgICAgICByZXR1cm4gY2hyW21ldGhvZE5hbWVdKCkgKyB0cmFpbGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uY2FtZWxDYXNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZWFjaCB3b3JkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICByZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykucmVwbGFjZShyZUFwb3MsICcnKSksIGNhbGxiYWNrLCAnJyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGFuIGluc3RhbmNlIG9mIGBDdG9yYCByZWdhcmRsZXNzIG9mXG4gICAgICogd2hldGhlciBpdCB3YXMgaW52b2tlZCBhcyBwYXJ0IG9mIGEgYG5ld2AgZXhwcmVzc2lvbiBvciBieSBgY2FsbGAgb3IgYGFwcGx5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gQ3RvciBUaGUgY29uc3RydWN0b3IgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN0b3IoQ3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBVc2UgYSBgc3dpdGNoYCBzdGF0ZW1lbnQgdG8gd29yayB3aXRoIGNsYXNzIGNvbnN0cnVjdG9ycy4gU2VlXG4gICAgICAgIC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtZnVuY3Rpb24tb2JqZWN0cy1jYWxsLXRoaXNhcmd1bWVudC1hcmd1bWVudHNsaXN0XG4gICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEN0b3I7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7XG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7XG4gICAgICAgICAgY2FzZSA3OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gYmFzZUNyZWF0ZShDdG9yLnByb3RvdHlwZSksXG4gICAgICAgICAgICByZXN1bHQgPSBDdG9yLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcblxuICAgICAgICAvLyBNaW1pYyB0aGUgY29uc3RydWN0b3IncyBgcmV0dXJuYCBiZWhhdmlvci5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDEzLjIuMiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IHRoaXNCaW5kaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gZW5hYmxlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFyaXR5IFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSkge1xuICAgICAgdmFyIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKTtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaG9sZGVycyA9IChsZW5ndGggPCAzICYmIGFyZ3NbMF0gIT09IHBsYWNlaG9sZGVyICYmIGFyZ3NbbGVuZ3RoIC0gMV0gIT09IHBsYWNlaG9sZGVyKVxuICAgICAgICAgID8gW11cbiAgICAgICAgICA6IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcblxuICAgICAgICBsZW5ndGggLT0gaG9sZGVycy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB1bmRlZmluZWQsXG4gICAgICAgICAgICBhcmdzLCBob2xkZXJzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkgLSBsZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmluZGAgb3IgYF8uZmluZExhc3RgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaW5kSW5kZXhGdW5jIFRoZSBmdW5jdGlvbiB0byBmaW5kIHRoZSBjb2xsZWN0aW9uIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZpbmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZChmaW5kSW5kZXhGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgdmFyIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgICAgICBjb2xsZWN0aW9uID0ga2V5cyhjb2xsZWN0aW9uKTtcbiAgICAgICAgICBwcmVkaWNhdGUgPSBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IGZpbmRJbmRleEZ1bmMoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpO1xuICAgICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGl0ZXJhYmxlW2l0ZXJhdGVlID8gY29sbGVjdGlvbltpbmRleF0gOiBpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5mbG93YCBvciBgXy5mbG93UmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbG93IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZsb3coZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oZnVuY3MpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcHJlcmVxID0gTG9kYXNoV3JhcHBlci5wcm90b3R5cGUudGhydTtcblxuICAgICAgICBpZiAoZnJvbVJpZ2h0KSB7XG4gICAgICAgICAgZnVuY3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBmdW5jc1tpbmRleF07XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByZXJlcSAmJiAhd3JhcHBlciAmJiBnZXRGdW5jTmFtZShmdW5jKSA9PSAnd3JhcHBlcicpIHtcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gbmV3IExvZGFzaFdyYXBwZXIoW10sIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IHdyYXBwZXIgPyBpbmRleCA6IGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBmdW5jID0gZnVuY3NbaW5kZXhdO1xuXG4gICAgICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgICAgIGRhdGEgPSBmdW5jTmFtZSA9PSAnd3JhcHBlcicgPyBnZXREYXRhKGZ1bmMpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGRhdGEgJiYgaXNMYXppYWJsZShkYXRhWzBdKSAmJlxuICAgICAgICAgICAgICAgIGRhdGFbMV0gPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykgJiZcbiAgICAgICAgICAgICAgICAhZGF0YVs0XS5sZW5ndGggJiYgZGF0YVs5XSA9PSAxXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgd3JhcHBlciA9IHdyYXBwZXJbZ2V0RnVuY05hbWUoZGF0YVswXSldLmFwcGx5KHdyYXBwZXIsIGRhdGFbM10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gKGZ1bmMubGVuZ3RoID09IDEgJiYgaXNMYXppYWJsZShmdW5jKSlcbiAgICAgICAgICAgICAgPyB3cmFwcGVyW2Z1bmNOYW1lXSgpXG4gICAgICAgICAgICAgIDogd3JhcHBlci50aHJ1KGZ1bmMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIHZhbHVlID0gYXJnc1swXTtcblxuICAgICAgICAgIGlmICh3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB3cmFwcGVyLnBsYW50KHZhbHVlKS52YWx1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgICAgICByZXN1bHQgPSBsZW5ndGggPyBmdW5jc1tpbmRleF0uYXBwbHkodGhpcywgYXJncykgOiB2YWx1ZTtcblxuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jc1tpbmRleF0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLCBwYXJ0aWFsIGFwcGxpY2F0aW9uLCBhbmQgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc1JpZ2h0XSBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZFxuICAgICAqICB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzUmlnaHRdIFRoZSBgcGFydGlhbHNSaWdodGAgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVIeWJyaWQoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNBcnkgPSBiaXRtYXNrICYgV1JBUF9BUllfRkxBRyxcbiAgICAgICAgICBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRyxcbiAgICAgICAgICBpc0N1cnJpZWQgPSBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyksXG4gICAgICAgICAgaXNGbGlwID0gYml0bWFzayAmIFdSQVBfRkxJUF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ3VycmllZCkge1xuICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKSxcbiAgICAgICAgICAgICAgaG9sZGVyc0NvdW50ID0gY291bnRIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHMpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzUmlnaHQpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnNDb3VudDtcbiAgICAgICAgaWYgKGlzQ3VycmllZCAmJiBsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHZhciBuZXdIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB0aGlzQXJnLFxuICAgICAgICAgICAgYXJncywgbmV3SG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5IC0gbGVuZ3RoXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcyxcbiAgICAgICAgICAgIGZuID0gaXNCaW5kS2V5ID8gdGhpc0JpbmRpbmdbZnVuY10gOiBmdW5jO1xuXG4gICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICBpZiAoYXJnUG9zKSB7XG4gICAgICAgICAgYXJncyA9IHJlb3JkZXIoYXJncywgYXJnUG9zKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0ZsaXAgJiYgbGVuZ3RoID4gMSkge1xuICAgICAgICAgIGFyZ3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FyeSAmJiBhcnkgPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzLmxlbmd0aCA9IGFyeTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSB7XG4gICAgICAgICAgZm4gPSBDdG9yIHx8IGNyZWF0ZUN0b3IoZm4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5pbnZlcnRCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0b0l0ZXJhdGVlIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZlcnRlcihzZXR0ZXIsIHRvSXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIHRvSXRlcmF0ZWUoaXRlcmF0ZWUpLCB7fSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgdXNlZCBmb3IgYHVuZGVmaW5lZGAgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlTWF0aE9wZXJhdGlvbihvcGVyYXRvciwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIG90aGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvU3RyaW5nKG90aGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9OdW1iZXIob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLm92ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhcnJheUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgb3ZlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVPdmVyKGFycmF5RnVuYykge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGl0ZXJhdGVlcykge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG4gICAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgdmFyIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBhcnJheUZ1bmMoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYCBiYXNlZCBvbiBgbGVuZ3RoYC4gVGhlIGBjaGFyc2Agc3RyaW5nXG4gICAgICogaXMgdHJ1bmNhdGVkIGlmIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBleGNlZWRzIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFkZGluZyhsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBjaGFycyA9IGNoYXJzID09PSB1bmRlZmluZWQgPyAnICcgOiBiYXNlVG9TdHJpbmcoY2hhcnMpO1xuXG4gICAgICB2YXIgY2hhcnNMZW5ndGggPSBjaGFycy5sZW5ndGg7XG4gICAgICBpZiAoY2hhcnNMZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBjaGFyc0xlbmd0aCA/IGJhc2VSZXBlYXQoY2hhcnMsIGxlbmd0aCkgOiBjaGFycztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlUmVwZWF0KGNoYXJzLCBuYXRpdmVDZWlsKGxlbmd0aCAvIHN0cmluZ1NpemUoY2hhcnMpKSk7XG4gICAgICByZXR1cm4gaGFzVW5pY29kZShjaGFycylcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShyZXN1bHQpLCAwLCBsZW5ndGgpLmpvaW4oJycpXG4gICAgICAgIDogcmVzdWx0LnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZ1xuICAgICAqIG9mIGB0aGlzQXJnYCBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVmdExlbmd0aCArIGFyZ3NMZW5ndGgpLFxuICAgICAgICAgICAgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuXG4gICAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChhcmdzTGVuZ3RoLS0pIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleCsrXSA9IGFyZ3VtZW50c1srK2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8ucmFuZ2VgIG9yIGBfLnJhbmdlUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByYW5nZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSYW5nZShmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kLCBzdGVwKSB7XG4gICAgICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICAgICAgZW5kID0gc3RlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBzdGVwID0gc3RlcCA9PT0gdW5kZWZpbmVkID8gKHN0YXJ0IDwgZW5kID8gMSA6IC0xKSA6IHRvRmluaXRlKHN0ZXApO1xuICAgICAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcmVsYXRpb25hbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZWxhdGlvbmFsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKG9wZXJhdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIGlmICghKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgb3RoZXIgPSB0b051bWJlcihvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBjb250aW51ZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBGdW5jIFRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGBmdW5jYCB3cmFwcGVyLlxuICAgICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWN1cnJ5KGZ1bmMsIGJpdG1hc2ssIHdyYXBGdW5jLCBwbGFjZWhvbGRlciwgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQ3VycnkgPSBiaXRtYXNrICYgV1JBUF9DVVJSWV9GTEFHLFxuICAgICAgICAgIG5ld0hvbGRlcnMgPSBpc0N1cnJ5ID8gaG9sZGVycyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdIb2xkZXJzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogaG9sZGVycyxcbiAgICAgICAgICBuZXdQYXJ0aWFscyA9IGlzQ3VycnkgPyBwYXJ0aWFscyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdQYXJ0aWFsc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IHBhcnRpYWxzO1xuXG4gICAgICBiaXRtYXNrIHw9IChpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX0ZMQUcgOiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICBiaXRtYXNrICY9IH4oaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHIDogV1JBUF9QQVJUSUFMX0ZMQUcpO1xuXG4gICAgICBpZiAoIShiaXRtYXNrICYgV1JBUF9DVVJSWV9CT1VORF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIG5ld1BhcnRpYWxzLCBuZXdIb2xkZXJzLCBuZXdQYXJ0aWFsc1JpZ2h0LFxuICAgICAgICBuZXdIb2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHdyYXBGdW5jLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICBpZiAoaXNMYXppYWJsZShmdW5jKSkge1xuICAgICAgICBzZXREYXRhKHJlc3VsdCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcocmVzdWx0LCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5yb3VuZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgTWF0aGAgbWV0aG9kIHRvIHVzZSB3aGVuIHJvdW5kaW5nLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJvdW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJvdW5kKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gTWF0aFttZXRob2ROYW1lXTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihudW1iZXIsIHByZWNpc2lvbikge1xuICAgICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT0gbnVsbCA/IDAgOiBuYXRpdmVNaW4odG9JbnRlZ2VyKHByZWNpc2lvbiksIDI5Mik7XG4gICAgICAgIGlmIChwcmVjaXNpb24pIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICAgICAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICAgICAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgICAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICAgICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBnZXREYXRhID0gIW1ldGFNYXAgPyBub29wIDogZnVuY3Rpb24oZnVuYykge1xuICAgICAgcmV0dXJuIG1ldGFNYXAuZ2V0KGZ1bmMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRGdW5jTmFtZShmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKGZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICBhcnJheSA9IHJlYWxOYW1lc1tyZXN1bHRdLFxuICAgICAgICAgIGxlbmd0aCA9IGhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCByZXN1bHQpID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXJyYXlbbGVuZ3RoXSxcbiAgICAgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcbiAgICAgICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIb2xkZXIoZnVuYykge1xuICAgICAgdmFyIG9iamVjdCA9IGhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLCAncGxhY2Vob2xkZXInKSA/IGxvZGFzaCA6IGZ1bmM7XG4gICAgICByZXR1cm4gb2JqZWN0LnBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcHJvcHJpYXRlIFwiaXRlcmF0ZWVcIiBmdW5jdGlvbi4gSWYgYF8uaXRlcmF0ZWVgIGlzIGN1c3RvbWl6ZWQsXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgYmFzZUl0ZXJhdGVlYC5cbiAgICAgKiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY2hvc2VuIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCB0aGVtIGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgdGhlIGNyZWF0ZWQgaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjaG9zZW4gZnVuY3Rpb24gb3IgaXRzIHJlc3VsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJdGVyYXRlZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2guaXRlcmF0ZWUgfHwgaXRlcmF0ZWU7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IGl0ZXJhdGVlID8gYmFzZUl0ZXJhdGVlIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByZXN1bHQoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICAgICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICAgICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICAgICAgOiBkYXRhLm1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgd2hpbGUgKG9iamVjdCkge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgICAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuICAgIC8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbiAgICBpZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAgICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgICAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgICAgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICAgICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2aWV3LCBhcHBseWluZyBhbnkgYHRyYW5zZm9ybXNgIHRvIHRoZSBgc3RhcnRgIGFuZCBgZW5kYCBwb3NpdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRyYW5zZm9ybXMgVGhlIHRyYW5zZm9ybWF0aW9ucyB0byBhcHBseSB0byB0aGUgdmlldy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgc3RhcnRgIGFuZCBgZW5kYFxuICAgICAqICBwb3NpdGlvbnMgb2YgdGhlIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VmlldyhzdGFydCwgZW5kLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0cmFuc2Zvcm1zW2luZGV4XSxcbiAgICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkcm9wJzogICAgICBzdGFydCArPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICdkcm9wUmlnaHQnOiBlbmQgLT0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZSc6ICAgICAgZW5kID0gbmF0aXZlTWluKGVuZCwgc3RhcnQgKyBzaXplKTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZVJpZ2h0Jzogc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQsIGVuZCAtIHNpemUpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgJ3N0YXJ0Jzogc3RhcnQsICdlbmQnOiBlbmQgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdyYXBwZXIgZGV0YWlscy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaCA9IHNvdXJjZS5tYXRjaChyZVdyYXBEZXRhaWxzKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gICAgICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICAgICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgICAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgd3JhcHBlciBgZGV0YWlsc2AgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIGBzb3VyY2VgIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzb3VyY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCBkZXRhaWxzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBkZXRhaWxzW2xhc3RJbmRleF0gPSAobGVuZ3RoID4gMSA/ICcmICcgOiAnJykgKyBkZXRhaWxzW2xhc3RJbmRleF07XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgICAgIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCAne1xcbi8qIFt3cmFwcGVkIHdpdGggJyArIGRldGFpbHMgKyAnXSAqL1xcbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAgICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICAgICAgKSB7XG4gICAgICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAgICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgICAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgICAgIDogKHZhbHVlID09PSBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mIG90aGVyICE9ICdmdW5jdGlvbicgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICByZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICAgICAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGlzIGNhcGFibGUgb2YgYmVpbmcgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2thYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgdmFyIGlzTWFza2FibGUgPSBjb3JlSnNEYXRhID8gaXNGdW5jdGlvbiA6IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgICAgIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICAgICAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICAgICAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICAgICAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyB1c2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uLlxuICAgICAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gICAgICogbWF5IGJlIGFwcGxpZWQgcmVnYXJkbGVzcyBvZiBleGVjdXRpb24gb3JkZXIuIE1ldGhvZHMgbGlrZSBgXy5hcnlgIGFuZFxuICAgICAqIGBfLnJlYXJnYCBtb2RpZnkgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlXG4gICAgICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gICAgICogYW4gZXhjZXB0aW9uIGZvciBhIHNhZmUgY29tYmluZWQgY2FzZSB3aGVyZSBjdXJyaWVkIGZ1bmN0aW9ucyBoYXZlIGBfLmFyeWBcbiAgICAgKiBhbmQgb3IgYF8ucmVhcmdgIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGRlc3RpbmF0aW9uIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGF0YWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICAgICAgdmFyIGJpdG1hc2sgPSBkYXRhWzFdLFxuICAgICAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgICAgIGlzQ29tbW9uID0gbmV3Qml0bWFzayA8IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyB8IFdSQVBfQVJZX0ZMQUcpO1xuXG4gICAgICB2YXIgaXNDb21ibyA9XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9SRUFSR19GTEFHKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKTtcblxuICAgICAgLy8gRXhpdCBlYXJseSBpZiBtZXRhZGF0YSBjYW4ndCBiZSBtZXJnZWQuXG4gICAgICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYHRoaXNBcmdgIGlmIGF2YWlsYWJsZS5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAgICAgLy8gU2V0IHdoZW4gY3VycnlpbmcgYSBib3VuZCBmdW5jdGlvbi5cbiAgICAgICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIGFyZ3VtZW50cy5cbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogc291cmNlWzRdO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgICAgIHZhbHVlID0gc291cmNlWzVdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICAgICAgZGF0YVs1XSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3NSaWdodChwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs2XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkYXRhWzddID0gdmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9BUllfRkxBRykge1xuICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gICAgICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW9yZGVyIGBhcnJheWAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgaW5kZXhlcyB3aGVyZSB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcnJheSBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXIoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgICAgIG9sZEFycmF5ID0gY29weUFycmF5KGFycmF5KTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGlzSW5kZXgoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHRoaXMgZnVuY3Rpb24gYmVjb21lcyBob3QsIGkuZS4gaXMgaW52b2tlZCBhIGxvdCBpbiBhIHNob3J0XG4gICAgICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eVxuICAgICAqIGZ1bmN0aW9uIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZVxuICAgICAqIFtWOCBpc3N1ZSAyMDcwXShodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDcwKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0RGF0YSA9IHNob3J0T3V0KGJhc2VTZXREYXRhKTtcblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BzZXRUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vc2V0VGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBzZXRUaW1lb3V0ID0gY3R4U2V0VGltZW91dCB8fCBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgICByZXR1cm4gcm9vdC5zZXRUaW1lb3V0KGZ1bmMsIHdhaXQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgd3JhcHBlcmAgdG8gbWltaWMgdGhlIHNvdXJjZSBvZiBgcmVmZXJlbmNlYFxuICAgICAqIHdpdGggd3JhcHBlciBkZXRhaWxzIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBzb3VyY2UgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGB3cmFwcGVyYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXcmFwVG9TdHJpbmcod3JhcHBlciwgcmVmZXJlbmNlLCBiaXRtYXNrKSB7XG4gICAgICB2YXIgc291cmNlID0gKHJlZmVyZW5jZSArICcnKTtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gICAgICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIHdoaWNoIG11dGF0ZXMgYW5kIHNldHMgdGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPWFycmF5Lmxlbmd0aF0gVGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlU2VsZihhcnJheSwgc2l6ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHNpemUgPSBzaXplID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBzaXplO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBzaXplKSB7XG4gICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbcmFuZF07XG5cbiAgICAgICAgYXJyYXlbcmFuZF0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYXJyYXkubGVuZ3RoID0gc2l6ZTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICB2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICB9XG4gICAgICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgICAgIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNsb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcbiAgICAgIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICAgICAqIElmIGBhcnJheWAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gICAgICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzFdO1xuICAgICAqIHZhciBvdGhlciA9IF8uY29uY2F0KGFycmF5LCAyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGggLSAxKSxcbiAgICAgICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxCeWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgW3sgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gICAgICogcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbFdpdGhgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxscyBlbGVtZW50cyBvZiBgYXJyYXlgIHdpdGggYHZhbHVlYCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3RcbiAgICAgKiBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5maWxsKGFycmF5LCAnYScpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAgICAgKlxuICAgICAqIF8uZmlsbChBcnJheSgzKSwgMik7XG4gICAgICogLy8gPT4gWzIsIDIsIDJdXG4gICAgICpcbiAgICAgKiBfLmZpbGwoWzQsIDYsIDgsIDEwXSwgJyonLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgJiYgdHlwZW9mIHN0YXJ0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdwZWJibGVzJzsgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDBcbiAgICAgICAgICA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMClcbiAgICAgICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVucyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbiBgYXJyYXlgIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVwdGgoYXJyYXksIGRlcHRoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIGZyb20ga2V5LXZhbHVlIGBwYWlyc2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGZpcnN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGVhZChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uaGVhZChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYXJyYXlbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gICAgICogb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjFdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGlmIChpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlc1xuICAgICAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbGwgZWxlbWVudHMgaW4gYGFycmF5YCBpbnRvIGEgc3RyaW5nIHNlcGFyYXRlZCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwYXJhdG9yPScsJ10gVGhlIGVsZW1lbnQgc2VwYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gICAgICogLy8gPT4gJ2F+Yn5jJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAnJyA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICAgICAqIGVsZW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgLTIpO1xuICAgICAqIC8vID0+ICdjJztcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZ2l2ZW4gdmFsdWVzIGZyb20gYGFycmF5YCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICAgICAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAnYScsICdjJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGwoYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VCeWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAzIH0sIHsgJ3gnOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsQnkoYXJyYXksIFt7ICd4JzogMSB9LCB7ICd4JzogMyB9XSwgJ3gnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbEJ5KGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxXaXRoKGFycmF5LCBbeyAneCc6IDMsICd5JzogNCB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDUsICd5JzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIGBpbmRleGVzYCBhbmQgcmV0dXJucyBhblxuICAgICAqIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqIHZhciBwdWxsZWQgPSBfLnB1bGxBdChhcnJheSwgWzEsIDNdKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICAgICAqIC8vID0+IFsnYicsICdkJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuXG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgfSkuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAgICAgKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsyLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICAgICAqIGVsZW1lbnQgYmVjb21lcyB0aGUgc2Vjb25kIHRvIGxhc3QsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BBcnJheSNyZXZlcnNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvcmV2ZXJzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLnJldmVyc2UoYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gYXJyYXkgOiBuYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW5zdGVhZCBvZlxuICAgICAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmIGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICAgICAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICAgICAqIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkTGFzdEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5sYXN0SW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSkgLSAxO1xuICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcShbMSwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcUJ5YCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcUJ5KFsxLjEsIDEuMiwgMi4zLCAyLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4xLCAyLjNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFpbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgZmFsc2UsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuIEVsZW1lbnRzXG4gICAgICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbSB0aGUgZmlyc3RcbiAgICAgKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gICAgICogdGhlIGZpcnN0IGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAgICAgKiBpcyBrZXB0LiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyXG4gICAgICogaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcShbMiwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlXG4gICAgICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaXFXaXRoKG9iamVjdHMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgYXJyYXkgPSBhcnJheUZpbHRlcihhcnJheSwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgcmVncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAgICAgKiAvLyA9PiBbWzEsIDEwLCAxMDBdLCBbMiwgMjAsIDIwMF1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMywgMzAsIDMwMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqL1xuICAgIHZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAgICAgKiBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyXG4gICAgICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy53aXRob3V0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgeG9yID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWRcbiAgICAgKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICAgICAqIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMiwgMy40XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy54b3JCeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnhvcldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogc2Vjb25kIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqL1xuICAgIHZhciB6aXAgPSBiYXNlUmVzdCh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICAgICAqIG9uZSBvZiBwcm9wZXJ0eSBpZGVudGlmaWVycyBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBhc3NpZ25WYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdERlZXAoWydhLmJbMF0uYycsICdhLmJbMV0uZCddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB1bnppcFdpdGgoYXJyYXlzLCBpdGVyYXRlZSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC4gVGhlIHJlc3VsdCBvZiBzdWNoIHNlcXVlbmNlcyBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF9cbiAgICAgKiAgIC5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgICAgcmV0dXJuIG8udXNlciArICcgaXMgJyArIG8uYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgYGludGVyY2VwdG9yYCBhbmQgcmV0dXJucyBgdmFsdWVgLiBUaGUgaW50ZXJjZXB0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0b1xuICAgICAqIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZSBpbiBvcmRlciB0byBtb2RpZnkgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICAvLyBNdXRhdGUgaW5wdXQgYXJyYXkuXG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udGFwYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInBhc3MgdGhydVwiIHZhbHVlcyByZXBsYWNpbmcgaW50ZXJtZWRpYXRlXG4gICAgICogcmVzdWx0cyBpbiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLmF0YC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGF0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8ob2JqZWN0KS5hdChbJ2FbMF0uYi5jJywgJ2FbMV0nXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckF0ID0gZmxhdFJlc3QoZnVuY3Rpb24ocGF0aHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgIGludGVyY2VwdG9yID0gZnVuY3Rpb24ob2JqZWN0KSB7IHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7IH07XG5cbiAgICAgIGlmIChsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8XG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB8fCAhaXNJbmRleChzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKHN0YXJ0LCArc3RhcnQgKyAobGVuZ3RoID8gMSA6IDApKTtcbiAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICdhcmdzJzogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICBpZiAobGVuZ3RoICYmICFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB3aXRoIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKS5oZWFkKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRoIGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpXG4gICAgICogICAuY2hhaW4oKVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNvbW1pdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV4dCB2YWx1ZSBvbiBhIHdyYXBwZWQgb2JqZWN0IGZvbGxvd2luZyB0aGVcbiAgICAgKiBbaXRlcmF0b3IgcHJvdG9jb2xdKGh0dHBzOi8vbWRuLmlvL2l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmF0b3IpLlxuICAgICAqXG4gICAgICogQG5hbWUgbmV4dFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5leHQgaXRlcmF0b3IgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAxIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMiB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogdHJ1ZSwgJ3ZhbHVlJzogdW5kZWZpbmVkIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyTmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICB2YXIgZG9uZSA9IHRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBkb25lID8gdW5kZWZpbmVkIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuXG4gICAgICByZXR1cm4geyAnZG9uZSc6IGRvbmUsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgd3JhcHBlciB0byBiZSBpdGVyYWJsZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIFN5bWJvbC5pdGVyYXRvclxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWRbU3ltYm9sLml0ZXJhdG9yXSgpID09PSB3cmFwcGVkO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIEFycmF5LmZyb20od3JhcHBlZCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluIHNlcXVlbmNlIHBsYW50aW5nIGB2YWx1ZWAgYXMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBwbGFudFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBsYW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pLm1hcChzcXVhcmUpO1xuICAgICAqIHZhciBvdGhlciA9IHdyYXBwZWQucGxhbnQoWzMsIDRdKTtcbiAgICAgKlxuICAgICAqIG90aGVyLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgY2xvbmUuX19pbmRleF9fID0gMDtcbiAgICAgICAgY2xvbmUuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8ucmV2ZXJzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLnJldmVyc2UoKTtcbiAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICAgJ2FyZ3MnOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIHRvSlNPTiwgdmFsdWVPZlxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICsrcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gICAgICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAgICAgKiBlbGVtZW50cyBvZiBlbXB0eSBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLnJlamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICAgICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAgICAgKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHNhZmUgaW50ZWdlci4gQSBzYWZlIGludGVnZXIgY2FuIGJlIGNvbXBhcmVkIGFuZFxuICAgICAqIHJlcHJlc2VudGVkIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gOTAwNzE5OTI1NDc0MDk5MVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIC1NQVhfU0FGRV9JTlRFR0VSLCBNQVhfU0FGRV9JTlRFR0VSKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAgICAgKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKG51bGwpO1xuICAgICAqIC8vID0+ICcnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKC0wKTtcbiAgICAgKiAvLyA9PiAnLTAnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gJzEsMiwzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIFN1YnNlcXVlbnQgc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BPYmplY3QuYXNzaWduYF0oaHR0cHM6Ly9tZG4uaW8vT2JqZWN0L2Fzc2lnbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBpZiAoaXNQcm90b3R5cGUoc291cmNlKSB8fCBpc0FycmF5TGlrZShzb3VyY2UpKSB7XG4gICAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBzb3VyY2UgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbkluKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMywgJ2QnOiA0IH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW4gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25JbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRXaXRoXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gYHBhdGhzYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXy5hdChvYmplY3QsIFsnYVswXS5iLmMnLCAnYVsxXSddKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgYXQgPSBmbGF0UmVzdChiYXNlQXQpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBgcHJvdG90eXBlYCBvYmplY3QuIElmIGFcbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0IGlzIGdpdmVuLCBpdHMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXNcbiAgICAgKiBhcmUgYXNzaWduZWQgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBUaGUgcHJvcGVydGllcyB0byBhc3NpZ24gdG8gdGhlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICAgKiAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQ2lyY2xlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFNoYXBlLnByb3RvdHlwZSwge1xuICAgICAqICAgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBDaXJjbGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgU2hhcGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gcHJvcGVydGllcyA9PSBudWxsID8gcmVzdWx0IDogYmFzZUFzc2lnbihyZXN1bHQsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2VcbiAgICAgKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAgICAgKiByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogT25jZSBhIHByb3BlcnR5IGlzIHNldCwgYWRkaXRpb25hbCB2YWx1ZXMgb2YgdGhlIHNhbWUgcHJvcGVydHkgYXJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgbGVuZ3RoID0gc291cmNlcy5sZW5ndGg7XG4gICAgICB2YXIgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgIHZhciBwcm9wcyA9IGtleXNJbihzb3VyY2UpO1xuICAgICAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgICAgICB2YXIgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsrcHJvcHNJbmRleCA8IHByb3BzTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kZWZhdWx0c2AgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgYXNzaWduc1xuICAgICAqIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0c0RlZXAoeyAnYSc6IHsgJ2InOiAyIH0gfSwgeyAnYSc6IHsgJ2InOiAxLCAnYyc6IDMgfSB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IDIsICdjJzogMyB9IH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHNEZWVwID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgYXJncy5wdXNoKHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSk7XG4gICAgICByZXR1cm4gYXBwbHkobWVyZ2VXaXRoLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiByZXR1cm5zICdwZWJibGVzJyBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93blJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW5cbiAgICAgKiBvYmplY3QgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdFxuICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3Iob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JJbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW5SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2MnLCAnYicsIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvckluYCBsb2dzICdhJywgJ2InLCB0aGVuICdjJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3JSaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBhbmRcbiAgICAgKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uXG4gICAgICogZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yT3duYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdiJyB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JPd25gIGxvZ3MgJ2EnIHRoZW4gJ2InLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93blJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAgICAqIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc0luXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9ucyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGFuZCBpbmhlcml0ZWRcbiAgICAgKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9uc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9uc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gICAgICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IHsgJ2InOiAyIH0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvdGhlciwgJ2EnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBpbnZlcnRlZCBrZXlzIGFuZCB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICogSWYgYG9iamVjdGAgY29udGFpbnMgZHVwbGljYXRlIHZhbHVlcywgc3Vic2VxdWVudCB2YWx1ZXMgb3ZlcndyaXRlXG4gICAgICogcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnQob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogJ2MnLCAnMic6ICdiJyB9XG4gICAgICovXG4gICAgdmFyIGludmVydCA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRbdmFsdWVdID0ga2V5O1xuICAgIH0sIGNvbnN0YW50KGlkZW50aXR5KSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludmVydGAgZXhjZXB0IHRoYXQgdGhlIGludmVydGVkIG9iamVjdCBpcyBnZW5lcmF0ZWRcbiAgICAgKiBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogY29ycmVzcG9uZGluZyBpbnZlcnRlZCB2YWx1ZSBvZiBlYWNoIGludmVydGVkIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzXG4gICAgICogcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGludmVydGVkIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAnZ3JvdXAnICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnZ3JvdXAxJzogWydhJywgJ2MnXSwgJ2dyb3VwMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0QnkgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXS5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbdmFsdWVdID0gW2tleV07XG4gICAgICB9XG4gICAgfSwgZ2V0SXRlcmF0ZWUpO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IFsxLCAyLCAzLCA0XSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmludm9rZShvYmplY3QsICdhWzBdLmIuYy5zbGljZScsIDEsIDMpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIHZhciBpbnZva2UgPSBiYXNlUmVzdChiYXNlSW52b2tlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAgICAgKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5cyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLmtleXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1hcFZhbHVlc2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICogc2FtZSB2YWx1ZXMgYXMgYG9iamVjdGAgYW5kIGtleXMgZ2VuZXJhdGVkIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZVxuICAgICAqIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcFZhbHVlc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcEtleXMoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICByZXR1cm4ga2V5ICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYTEnOiAxLCAnYjInOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBLZXlzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWRcbiAgICAgKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBLZXlzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdmcmVkJzogICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICAgICAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICAgICAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gICAgICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gICAgICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIG90aGVyID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVyZ2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBtZXJnZWQgdmFsdWVzIG9mIHRoZSBkZXN0aW5hdGlvbiBhbmQgc291cmNlXG4gICAgICogcHJvcGVydGllcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIG1lcmdpbmcgaXMgaGFuZGxlZCBieSB0aGVcbiAgICAgKiBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggc2l4IGFyZ3VtZW50czpcbiAgICAgKiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiBvYmpWYWx1ZS5jb25jYXQoc3JjVmFsdWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogWzFdLCAnYic6IFsyXSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiBbM10sICdiJzogWzRdIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlV2l0aChvYmplY3QsIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogWzEsIDNdLCAnYic6IFsyLCA0XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICAgICAqIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgcGF0aHMgb2YgYG9iamVjdGAgdGhhdCBhcmUgbm90IG9taXR0ZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gb21pdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdChvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIHZhciBvbWl0ID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gICAgICBwYXRocyA9IGFycmF5TWFwKHBhdGhzLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfSk7XG4gICAgICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJlc3VsdCA9IGJhc2VDbG9uZShyZXN1bHQsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX0ZMQVRfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9tT21pdENsb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tCeWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mXG4gICAgICogdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYG9iamVjdGAgdGhhdFxuICAgICAqIGBwcmVkaWNhdGVgIGRvZXNuJ3QgcmV0dXJuIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3b1xuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXRCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9taXRCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHBpY2tCeShvYmplY3QsIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBgb2JqZWN0YCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGljayhvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBwaWNrID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8ge30gOiBiYXNlUGljayhvYmplY3QsIHBhdGhzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBgb2JqZWN0YCBwcm9wZXJ0aWVzIGBwcmVkaWNhdGVgIHJldHVybnNcbiAgICAgKiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGlja0J5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGlja0J5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0gYXJyYXlNYXAoZ2V0QWxsS2V5c0luKG9iamVjdCksIGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICAgIH0pO1xuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlKTtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUodmFsdWUsIHBhdGhbMF0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5nZXRgIGV4Y2VwdCB0aGF0IGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBhXG4gICAgICogZnVuY3Rpb24gaXQncyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGl0cyBwYXJlbnQgb2JqZWN0IGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYzEnOiAzLCAnYzInOiBfLmNvbnN0YW50KDQpIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMScpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMicpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCBfLmNvbnN0YW50KCdkZWZhdWx0JykpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGxvb3AgaXMgZW50ZXJlZCB3aGVuIHBhdGggaXMgZW1wdHkuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICBvYmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFt0b0tleShwYXRoW2luZGV4XSldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IGlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgYSBwb3J0aW9uIG9mIGBwYXRoYCBkb2Vzbid0IGV4aXN0LFxuICAgICAqIGl0J3MgY3JlYXRlZC4gQXJyYXlzIGFyZSBjcmVhdGVkIGZvciBtaXNzaW5nIGluZGV4IHByb3BlcnRpZXMgd2hpbGUgb2JqZWN0c1xuICAgICAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gICAgICogYHBhdGhgIGNyZWF0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCAnYVswXS5iLmMnLCA0KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnNldFdpdGgob2JqZWN0LCAnWzBdWzFdJywgJ2EnLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdpdGgob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGBcbiAgICAgKiB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXAgb3Igc2V0LCBpdHNcbiAgICAgKiBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlycyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzID0gY3JlYXRlVG9QYWlycyhrZXlzKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnNcbiAgICAgKiBmb3IgYG9iamVjdGAgd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwXG4gICAgICogb3Igc2V0LCBpdHMgZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc0luXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlyc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl0sIFsnYycsIDNdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzSW4gPSBjcmVhdGVUb1BhaXJzKGtleXNJbik7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgdGhydSBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvblxuICAgICAqIHBvdGVudGlhbGx5IG11dGF0aW5nIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gSWYgYGFjY3VtdWxhdG9yYCBpcyBub3RcbiAgICAgKiBwcm92aWRlZCwgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgYFtbUHJvdG90eXBlXV1gIHdpbGwgYmUgdXNlZC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICAgICAqICAgcmVzdWx0LnB1c2gobiAqPSBuKTtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgOV1cbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBpc0Fyckxpa2UgPSBpc0FyciB8fCBpc0J1ZmZlcihvYmplY3QpIHx8IGlzVHlwZWRBcnJheShvYmplY3QpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KTtcbiAgICAgIGlmIChhY2N1bXVsYXRvciA9PSBudWxsKSB7XG4gICAgICAgIHZhciBDdG9yID0gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKGlzQXJyTGlrZSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnIgPyBuZXcgQ3RvciA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzRnVuY3Rpb24oQ3RvcikgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIChpc0Fyckxpa2UgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcHJvcGVydHkgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogNyB9IH1dIH07XG4gICAgICogXy51bnNldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udW5zZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdHJ1ZSA6IGJhc2VVbnNldChvYmplY3QsIHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBhY2NlcHRzIGB1cGRhdGVyYCB0byBwcm9kdWNlIHRoZVxuICAgICAqIHZhbHVlIHRvIHNldC4gVXNlIGBfLnVwZGF0ZVdpdGhgIHRvIGN1c3RvbWl6ZSBgcGF0aGAgY3JlYXRpb24uIFRoZSBgdXBkYXRlcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ2FbMF0uYi5jJywgZnVuY3Rpb24obikgeyByZXR1cm4gbiAqIG47IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gOVxuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAneFswXS55LnonLCBmdW5jdGlvbihuKSB7IHJldHVybiBuID8gbiArIDEgOiAwOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVwZGF0ZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlV2l0aChvYmplY3QsICdbMF1bMV0nLCBfLmNvbnN0YW50KCdhJyksIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV2l0aChvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlciksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKCdoaScpO1xuICAgICAqIC8vID0+IFsnaCcsICdpJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5XG4gICAgICogdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDbGFtcHMgYG51bWJlcmAgd2l0aGluIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNsYW1wKC0xMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IC01XG4gICAgICpcbiAgICAgKiBfLmNsYW1wKDEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gdG9OdW1iZXIodXBwZXIpO1xuICAgICAgICB1cHBlciA9IHVwcGVyID09PSB1cHBlciA/IHVwcGVyIDogMDtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gdG9OdW1iZXIobG93ZXIpO1xuICAgICAgICBsb3dlciA9IGxvd2VyID09PSBsb3dlciA/IGxvd2VyIDogMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlQ2xhbXAodG9OdW1iZXIobnVtYmVyKSwgbG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gSWZcbiAgICAgKiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLCBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICogSWYgYHN0YXJ0YCBpcyBncmVhdGVyIHRoYW4gYGVuZGAgdGhlIHBhcmFtcyBhcmUgc3dhcHBlZCB0byBzdXBwb3J0XG4gICAgICogbmVnYXRpdmUgcmFuZ2VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLnJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDMsIDIsIDQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCA4KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgyLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDEuMiwgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDUuMiwgNCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgtMywgLTIsIC02KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgfVxuICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgIHJldHVybiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICogSWYgb25seSBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXJcbiAgICAgKiBpcyByZXR1cm5lZC4gSWYgYGZsb2F0aW5nYCBpcyBgdHJ1ZWAsIG9yIGVpdGhlciBgbG93ZXJgIG9yIGB1cHBlcmAgYXJlXG4gICAgICogZmxvYXRzLCBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyPTBdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3VwcGVyPTFdIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZ10gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMCwgNSk7XG4gICAgICogLy8gPT4gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUpO1xuICAgICAqIC8vID0+IGFsc28gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUsIHRydWUpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMS4yLCA1LjIpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMS4yIGFuZCA1LjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5kb20obG93ZXIsIHVwcGVyLCBmbG9hdGluZykge1xuICAgICAgaWYgKGZsb2F0aW5nICYmIHR5cGVvZiBmbG9hdGluZyAhPSAnYm9vbGVhbicgJiYgaXNJdGVyYXRlZUNhbGwobG93ZXIsIHVwcGVyLCBmbG9hdGluZykpIHtcbiAgICAgICAgdXBwZXIgPSBmbG9hdGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXBwZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSB1cHBlcjtcbiAgICAgICAgICB1cHBlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbG93ZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID09PSB1bmRlZmluZWQgJiYgdXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIHVwcGVyID0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsb3dlciA9IHRvRmluaXRlKGxvd2VyKTtcbiAgICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cHBlciA9IHRvRmluaXRlKHVwcGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID4gdXBwZXIpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1cHBlcjtcbiAgICAgICAgdXBwZXIgPSB0ZW1wO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nIHx8IGxvd2VyICUgMSB8fCB1cHBlciAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihsb3dlciArIChyYW5kICogKHVwcGVyIC0gbG93ZXIgKyBmcmVlUGFyc2VGbG9hdCgnMWUtJyArICgocmFuZCArICcnKS5sZW5ndGggLSAxKSkpKSwgdXBwZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhbWVsIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICovXG4gICAgdmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgd29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UgYW5kIHRoZSByZW1haW5pbmdcbiAgICAgKiB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgICAgcmV0dXJuIHVwcGVyRmlyc3QodG9TdHJpbmcoc3RyaW5nKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAgICAgKiBbTGF0aW4tMSBTdXBwbGVtZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbi0xX1N1cHBsZW1lbnRfKFVuaWNvZGVfYmxvY2spI0NoYXJhY3Rlcl90YWJsZSlcbiAgICAgKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gICAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICAgICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICAgICAqIC8vID0+ICdkZWphIHZ1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4sIGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyaywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBlbmRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249c3RyaW5nLmxlbmd0aF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5kc1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGVuZ3RoXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBlbmQgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uIC09IHRhcmdldC5sZW5ndGg7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIGVuZCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIGFuZCBcIidcIiBpbiBgc3RyaW5nYCB0byB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICAgICAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gICAgICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICAgICAqIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAgICAgKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXNcbiAgICAgKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICAgICAqIFhTUyB2ZWN0b3JzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIHRoZSBgUmVnRXhwYCBzcGVjaWFsIGNoYXJhY3RlcnMgXCJeXCIsIFwiJFwiLCBcIlxcXCIsIFwiLlwiLCBcIipcIiwgXCIrXCIsXG4gICAgICogXCI/XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIGFuZCBcInxcIiBpbiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlUmVnRXhwKCdbbG9kYXNoXShodHRwczovL2xvZGFzaC5jb20vKScpO1xuICAgICAqIC8vID0+ICdcXFtsb2Rhc2hcXF1cXChodHRwczovL2xvZGFzaFxcLmNvbS9cXCknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzUmVnRXhwQ2hhci50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBba2ViYWIgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3BlY2lhbF9jYXNlX3N0eWxlcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBrZWJhYiBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKi9cbiAgICB2YXIga2ViYWJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGcmVkJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnZlJFRCdcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9Mb3dlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLlxuICAgICAqIFBhZGRpbmcgY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgY2FuJ3QgYmUgZXZlbmx5IGRpdmlkZWQgYnkgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgpO1xuICAgICAqIC8vID0+ICcgIGFiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1hYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc3RyTGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIG1pZCA9IChsZW5ndGggLSBzdHJMZW5ndGgpIC8gMjtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlRmxvb3IobWlkKSwgY2hhcnMpICtcbiAgICAgICAgc3RyaW5nICtcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVDZWlsKG1pZCksIGNoYXJzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSByaWdodCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRFbmQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChzdHJpbmcgKyBjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJyAgIGFiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdfLV9hYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSArIHN0cmluZylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gaW50ZWdlciBvZiB0aGUgc3BlY2lmaWVkIHJhZGl4LiBJZiBgcmFkaXhgIGlzXG4gICAgICogYHVuZGVmaW5lZGAgb3IgYDBgLCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyBgdmFsdWVgIGlzIGFcbiAgICAgKiBoZXhhZGVjaW1hbCwgaW4gd2hpY2ggY2FzZSBhIGByYWRpeGAgb2YgYDE2YCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGFsaWducyB3aXRoIHRoZVxuICAgICAqIFtFUzUgaW1wbGVtZW50YXRpb25dKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi4yKSBvZiBgcGFyc2VJbnRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXg9MTBdIFRoZSByYWRpeCB0byBpbnRlcnByZXQgYHZhbHVlYCBieS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhcnNlSW50KCcwOCcpO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICcwOCcsICcxMCddLCBfLnBhcnNlSW50KTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCB8fCByYWRpeCA9PSBudWxsKSB7XG4gICAgICAgIHJhZGl4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocmFkaXgpIHtcbiAgICAgICAgcmFkaXggPSArcmFkaXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQodG9TdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyksIHJhZGl4IHx8IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGVhdHMgdGhlIGdpdmVuIHN0cmluZyBgbmAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnKicsIDMpO1xuICAgICAqIC8vID0+ICcqKionXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMik7XG4gICAgICogLy8gPT4gJ2FiY2FiYydcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAwKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmVwZWF0KHRvU3RyaW5nKHN0cmluZyksIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIG1hdGNoZXMgZm9yIGBwYXR0ZXJuYCBpbiBgc3RyaW5nYCB3aXRoIGByZXBsYWNlbWVudGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNyZXBsYWNlYF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3JlcGxhY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gcmVwbGFjZW1lbnQgVGhlIG1hdGNoIHJlcGxhY2VtZW50LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBsYWNlKCdIaSBGcmVkJywgJ0ZyZWQnLCAnQmFybmV5Jyk7XG4gICAgICogLy8gPT4gJ0hpIEJhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoYXJnc1swXSk7XG5cbiAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA8IDMgPyBzdHJpbmcgOiBzdHJpbmcucmVwbGFjZShhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzbmFrZSBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbmFrZV9jYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNuYWtlIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCctLUZPTy1CQVItLScpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqL1xuICAgIHZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnXycgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNzcGxpdGBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9zcGxpdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBzZXBhcmF0b3IgVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHNwbGl0IGJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGltaXRdIFRoZSBsZW5ndGggdG8gdHJ1bmNhdGUgcmVzdWx0cyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHN0cmluZyBzZWdtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zcGxpdCgnYS1iLWMnLCAnLScsIDIpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcGxpdChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIGlmIChsaW1pdCAmJiB0eXBlb2YgbGltaXQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBsaW1pdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGxpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9BUlJBWV9MRU5HVEggOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmICghbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKFxuICAgICAgICAgICAgdHlwZW9mIHNlcGFyYXRvciA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgKHNlcGFyYXRvciAhPSBudWxsICYmICFpc1JlZ0V4cChzZXBhcmF0b3IpKVxuICAgICAgICAgICkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gYmFzZVRvU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgICAgIGlmICghc2VwYXJhdG9yICYmIGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShzdHJpbmcpLCAwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc3RhcnQgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3R5bGlzdGljX29yX3NwZWNpYWxpc2VkX3VzYWdlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0YXJ0IGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgc3RhcnRDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgdXBwZXJGaXJzdCh3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj0wXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09IG51bGxcbiAgICAgICAgPyAwXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIHN0cmluZy5sZW5ndGgpO1xuXG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgdGFyZ2V0Lmxlbmd0aCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAgICAgKiBpbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVycywgSFRNTC1lc2NhcGUgaW50ZXJwb2xhdGVkIGRhdGEgcHJvcGVydGllcyBpblxuICAgICAqIFwiZXNjYXBlXCIgZGVsaW1pdGVycywgYW5kIGV4ZWN1dGUgSmF2YVNjcmlwdCBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy4gRGF0YVxuICAgICAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gICAgICogb2JqZWN0IGlzIGdpdmVuLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAgICAgKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAgICAgKiBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gICAgICogW2xvZGFzaCdzIGN1c3RvbSBidWlsZHMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9sb2Rhc2guY29tL2N1c3RvbS1idWlsZHMpLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gICAgICogW0Nocm9tZSdzIGV4dGVuc2lvbnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHRlbXBsYXRlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlPV8udGVtcGxhdGVTZXR0aW5ncy5lc2NhcGVdXG4gICAgICogIFRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gICAgICogIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzPV8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXVxuICAgICAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGVdXG4gICAgICogIFRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbbl0nXVxuICAgICAqICBUaGUgc291cmNlVVJMIG9mIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFyaWFibGU9J29iaiddXG4gICAgICogIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyIHRvIGVzY2FwZSBkYXRhIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIF8uZm9yRWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2Jhcm5leScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEVTIHRlbXBsYXRlIGxpdGVyYWwgZGVsaW1pdGVyIGFzIGFuIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogLy8gRGlzYWJsZSBzdXBwb3J0IGJ5IHJlcGxhY2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdwZWJibGVzJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgYmFja3NsYXNoZXMgdG8gdHJlYXQgZGVsaW1pdGVycyBhcyBwbGFpbiB0ZXh0LlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlPSBcIlxcXFw8JS0gdmFsdWUgJVxcXFw+XCIgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICdpZ25vcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnPCUtIHZhbHVlICU+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgLlxuICAgICAqIHZhciB0ZXh0ID0gJzwlIGpxLmVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPic7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZVVSTGAgb3B0aW9uIHRvIHNwZWNpZnkgYSBjdXN0b20gc291cmNlVVJMIGZvciB0aGUgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJywgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IEZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3IuXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICAgICAqIC8vICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEudXNlciApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgICAqIC8vICAgcmV0dXJuIF9fcDtcbiAgICAgKiAvLyB9XG4gICAgICpcbiAgICAgKiAvLyBVc2UgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMuXG4gICAgICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyB7eyB1c2VyIH19IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIHN0YWNrIHRyYWNlcy5cbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnanN0LmpzJyksICdcXFxuICAgICAqICAgdmFyIEpTVCA9IHtcXFxuICAgICAqICAgICBcIm1haW5cIjogJyArIF8udGVtcGxhdGUobWFpblRleHQpLnNvdXJjZSArICdcXFxuICAgICAqICAgfTtcXFxuICAgICAqICcpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRlbXBsYXRlKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpIHtcbiAgICAgIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbiAgICAgIC8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMgKGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1QpLlxuICAgICAgdmFyIHNldHRpbmdzID0gbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3M7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSkge1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIG9wdGlvbnMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMsIHNldHRpbmdzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcblxuICAgICAgdmFyIGltcG9ydHMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMuaW1wb3J0cywgc2V0dGluZ3MuaW1wb3J0cywgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiksXG4gICAgICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICAgICAgdmFyIGlzRXNjYXBpbmcsXG4gICAgICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cChcbiAgICAgICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgICAgICwgJ2cnKTtcblxuICAgICAgLy8gVXNlIGEgc291cmNlVVJMIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoJ3NvdXJjZVVSTCcgaW4gb3B0aW9uc1xuICAgICAgICAgID8gb3B0aW9ucy5zb3VyY2VVUkxcbiAgICAgICAgICA6ICgnbG9kYXNoLnRlbXBsYXRlU291cmNlc1snICsgKCsrdGVtcGxhdGVDb3VudGVyKSArICddJylcbiAgICAgICAgKSArICdcXG4nO1xuXG4gICAgICBzdHJpbmcucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG5cbiAgICAgICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW4ndCBiZSBpbmNsdWRlZCBpbiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICAgIHNvdXJjZSArPSBzdHJpbmcuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShyZVVuZXNjYXBlZFN0cmluZywgZXNjYXBlU3RyaW5nQ2hhcik7XG5cbiAgICAgICAgLy8gUmVwbGFjZSBkZWxpbWl0ZXJzIHdpdGggc25pcHBldHMuXG4gICAgICAgIGlmIChlc2NhcGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXNjYXBpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgICAgICBpc0V2YWx1YXRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZVZhbHVlICsgXCI7XFxuX19wICs9ICdcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbigoX190ID0gKFwiICsgaW50ZXJwb2xhdGVWYWx1ZSArIFwiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICAgIC8vIFRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgbmVlZHMgYG1hdGNoYCByZXR1cm5lZCBpblxuICAgICAgICAvLyBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcblxuICAgICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgICAgLy8gSWYgYHZhcmlhYmxlYCBpcyBub3Qgc3BlY2lmaWVkIHdyYXAgYSB3aXRoLXN0YXRlbWVudCBhcm91bmQgdGhlIGdlbmVyYXRlZFxuICAgICAgLy8gY29kZSB0byBhZGQgdGhlIGRhdGEgb2JqZWN0IHRvIHRoZSB0b3Agb2YgdGhlIHNjb3BlIGNoYWluLlxuICAgICAgdmFyIHZhcmlhYmxlID0gb3B0aW9ucy52YXJpYWJsZTtcbiAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gICAgICB9XG4gICAgICAvLyBDbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MuXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIEZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgICAgICh2YXJpYWJsZVxuICAgICAgICAgID8gJydcbiAgICAgICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBcInZhciBfX3QsIF9fcCA9ICcnXCIgK1xuICAgICAgICAoaXNFc2NhcGluZ1xuICAgICAgICAgICA/ICcsIF9fZSA9IF8uZXNjYXBlJ1xuICAgICAgICAgICA6ICcnXG4gICAgICAgICkgK1xuICAgICAgICAoaXNFdmFsdWF0aW5nXG4gICAgICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgICAgICA6ICc7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgc291cmNlICtcbiAgICAgICAgJ3JldHVybiBfX3BcXG59JztcblxuICAgICAgdmFyIHJlc3VsdCA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKVxuICAgICAgICAgIC5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAgICAgLy8gdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIGxvd2VyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b0xvd2VyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9Mb3dlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tZm9vLWJhci0tJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vYmFyJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdfX2Zvb19iYXJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xvd2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIHVwcGVyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b1VwcGVyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9VcHBlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tRk9PLUJBUi0tJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PQkFSJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdfX0ZPT19CQVJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1VwcGVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8udHJpbSgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnICBmb28gICcsICcgIGJhciAgJ10sIF8udHJpbSk7XG4gICAgICogLy8gPT4gWydmb28nLCAnYmFyJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltRW5kLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHRoZVxuICAgICAqIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdCB0byBgc3JjVmFsdWVgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZVxuICAgICAqIG9iamVjdCB2YWx1ZSBpcyBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3RcbiAgICAgKiBgc3JjVmFsdWVgIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlXG4gICAgICogYF8uaXNFcXVhbGAgZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSxcbiAgICAgKiAgIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZChvYmplY3RzLCBfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDQpKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgYmFzZUNsb25lKHNyY1ZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMikgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDEpIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZCgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoWydhJywgJ2InXSkpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciBtZXRob2QgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1ldGhvZGA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiB0aGUgbWV0aG9kIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBfLnRpbWVzKDMsIF8uY29uc3RhbnQpLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZE9mID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYWxsIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlXG4gICAgICogb2JqZWN0IHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuIElmIGBvYmplY3RgIGlzIGEgZnVuY3Rpb24sIHRoZW4gbWV0aG9kc1xuICAgICAqIGFyZSBhZGRlZCB0byBpdHMgcHJvdG90eXBlIGFzIHdlbGwuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVXNlIGBfLnJ1bkluQ29udGV4dGAgdG8gY3JlYXRlIGEgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdG9cbiAgICAgKiBhdm9pZCBjb25mbGljdHMgY2F1c2VkIGJ5IG1vZGlmeWluZyB0aGUgb3JpZ2luYWwuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBbb2JqZWN0PWxvZGFzaF0gVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgZnVuY3Rpb25zIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNoYWluPXRydWVdIFNwZWNpZnkgd2hldGhlciBtaXhpbnMgYXJlIGNoYWluYWJsZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiB2b3dlbHMoc3RyaW5nKSB7XG4gICAgICogICByZXR1cm4gXy5maWx0ZXIoc3RyaW5nLCBmdW5jdGlvbih2KSB7XG4gICAgICogICAgIHJldHVybiAvW2FlaW91XS9pLnRlc3Qodik7XG4gICAgICogICB9KTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9KTtcbiAgICAgKiBfLnZvd2VscygnZnJlZCcpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaXhpbihvYmplY3QsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpLFxuICAgICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIHByb3BzKTtcblxuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCAmJlxuICAgICAgICAgICEoaXNPYmplY3Qoc291cmNlKSAmJiAobWV0aG9kTmFtZXMubGVuZ3RoIHx8ICFwcm9wcy5sZW5ndGgpKSkge1xuICAgICAgICBvcHRpb25zID0gc291cmNlO1xuICAgICAgICBzb3VyY2UgPSBvYmplY3Q7XG4gICAgICAgIG9iamVjdCA9IHRoaXM7XG4gICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgICB9XG4gICAgICB2YXIgY2hhaW4gPSAhKGlzT2JqZWN0KG9wdGlvbnMpICYmICdjaGFpbicgaW4gb3B0aW9ucykgfHwgISFvcHRpb25zLmNoYWluLFxuICAgICAgICAgIGlzRnVuYyA9IGlzRnVuY3Rpb24ob2JqZWN0KTtcblxuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICAgIHZhciBmdW5jID0gc291cmNlW21ldGhvZE5hbWVdO1xuICAgICAgICBvYmplY3RbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICBpZiAoaXNGdW5jKSB7XG4gICAgICAgICAgb2JqZWN0LnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX187XG4gICAgICAgICAgICBpZiAoY2hhaW4gfHwgY2hhaW5BbGwpIHtcbiAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCh0aGlzLl9fd3JhcHBlZF9fKSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbnMgPSByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG5cbiAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKHsgJ2Z1bmMnOiBmdW5jLCAnYXJncyc6IGFyZ3VtZW50cywgJ3RoaXNBcmcnOiBvYmplY3QgfSk7XG4gICAgICAgICAgICAgIHJlc3VsdC5fX2NoYWluX18gPSBjaGFpbkFsbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KG9iamVjdCwgYXJyYXlQdXNoKFt0aGlzLnZhbHVlKCldLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnRzIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzIHByZXZpb3VzIHZhbHVlIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvXG4gICAgICogdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgbG9kYXNoID0gXy5ub0NvbmZsaWN0KCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAgIGlmIChyb290Ll8gPT09IHRoaXMpIHtcbiAgICAgICAgcm9vdC5fID0gb2xkRGFzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vb3AoKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGdldHMgdGhlIGFyZ3VtZW50IGF0IGluZGV4IGBuYC4gSWYgYG5gIGlzIG5lZ2F0aXZlLFxuICAgICAqIHRoZSBudGggYXJndW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBhcmd1bWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFzcy10aHJ1IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKDEpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoLTIpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGhBcmcobikge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHJldHVybiBiYXNlTnRoKGFyZ3MsIG4pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgaXRlcmF0ZWVzYCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXNcbiAgICAgKiBhbmQgcmV0dXJucyB0aGVpciByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlcihbTWF0aC5tYXgsIE1hdGgubWluXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDEsIDIsIDMsIDQpO1xuICAgICAqIC8vID0+IFs0LCAxXVxuICAgICAqL1xuICAgIHZhciBvdmVyID0gY3JlYXRlT3ZlcihhcnJheU1hcCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbGwqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJFdmVyeShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlckV2ZXJ5ID0gY3JlYXRlT3ZlcihhcnJheUV2ZXJ5KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFueSoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlclNvbWUoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlclNvbWUgPSBjcmVhdGVPdmVyKGFycmF5U29tZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucHJvcGVydHlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHZhbHVlIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMCwgMSwgMl0sXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICAgICAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAqIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoLTQpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJhbmdlYCBleGNlcHQgdGhhdCBpdCBwb3B1bGF0ZXMgdmFsdWVzIGluXG4gICAgICogZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoNCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoLTQpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDUpO1xuICAgICAqIC8vID0+IFs0LCAzLCAyLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTUsIDEwLCA1LCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2VSaWdodCA9IGNyZWF0ZVJhbmdlKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICAgICAqIC8vID0+IFtbXSwgW11dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gICAgICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5zdHViT2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7fSwge31dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJPYmplY3QoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJycsICcnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViVHJ1ZSk7XG4gICAgICogLy8gPT4gW3RydWUsIHRydWVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlRydWUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICAgICAqIGVhY2ggaW52b2NhdGlvbi4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnLCAnMiddXG4gICAgICpcbiAgICAgKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAgICAgKiAvLyA9PiBbMCwgMCwgMCwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIGlmIChuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBNQVhfQVJSQVlfTEVOR1RILFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSk7XG4gICAgICBuIC09IE1BWF9BUlJBWV9MRU5HVEg7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlVGltZXMobGVuZ3RoLCBpdGVyYXRlZSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBnaXZlbiwgdGhlIElEIGlzIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeD0nJ10gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiB0b1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdG90YWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgdmFyIGFkZCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpZGVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzb3IgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBxdW90aWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaXZpZGUoNiwgNCk7XG4gICAgICogLy8gPT4gMS41XG4gICAgICovXG4gICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1heGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtZWFuIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1lYW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbihhcnJheSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZWFuYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgYXZlcmFnZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1pbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGllciBUaGUgZmlyc3QgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpY2FuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHByb2R1Y3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubXVsdGlwbHkoNiwgNCk7XG4gICAgICogLy8gPT4gMjRcbiAgICAgKi9cbiAgICB2YXIgbXVsdGlwbHkgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG11bHRpcGxpZXIsIG11bHRpcGxpY2FuZCkge1xuICAgICAgcmV0dXJuIG11bHRpcGxpZXIgKiBtdWx0aXBsaWNhbmQ7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYsIDIpO1xuICAgICAqIC8vID0+IDQuMDFcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQxMDBcbiAgICAgKi9cbiAgICB2YXIgcm91bmQgPSBjcmVhdGVSb3VuZCgncm91bmQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWludWVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnRyYWhlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1YnRyYWN0KDYsIDQpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG1pbnVlbmQsIHN1YnRyYWhlbmQpIHtcbiAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnN1bWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIHN1bW1lZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zdW1CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hc3NpZ25JbiA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5hc3NpZ25JbldpdGggPSBhc3NpZ25JbldpdGg7XG4gICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY2h1bmsgPSBjaHVuaztcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtcbiAgICBsb2Rhc2guY29uZCA9IGNvbmQ7XG4gICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZXB0aCA9IGZsYXRNYXBEZXB0aDtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsYXR0ZW5EZXB0aCA9IGZsYXR0ZW5EZXB0aDtcbiAgICBsb2Rhc2guZmxpcCA9IGZsaXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZyb21QYWlycyA9IGZyb21QYWlycztcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5mdW5jdGlvbnNJbiA9IGZ1bmN0aW9uc0luO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uQnkgPSBpbnRlcnNlY3Rpb25CeTtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52ZXJ0QnkgPSBpbnZlcnRCeTtcbiAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgIGxvZGFzaC5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuICAgIGxvZGFzaC5rZXlCeSA9IGtleUJ5O1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgbG9kYXNoLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBsb2Rhc2gubWV0aG9kT2YgPSBtZXRob2RPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5udGhBcmcgPSBudGhBcmc7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbWl0QnkgPSBvbWl0Qnk7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICBsb2Rhc2gub3ZlciA9IG92ZXI7XG4gICAgbG9kYXNoLm92ZXJBcmdzID0gb3ZlckFyZ3M7XG4gICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICBsb2Rhc2gub3ZlclNvbWUgPSBvdmVyU29tZTtcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eU9mID0gcHJvcGVydHlPZjtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnB1bGxBbGwgPSBwdWxsQWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsQnkgPSBwdWxsQWxsQnk7XG4gICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgbG9kYXNoLnB1bGxBdCA9IHB1bGxBdDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNldFdpdGggPSBzZXRXaXRoO1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcUJ5ID0gc29ydGVkVW5pcUJ5O1xuICAgIGxvZGFzaC5zcGxpdCA9IHNwbGl0O1xuICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgbG9kYXNoLnRhaWwgPSB0YWlsO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BhaXJzID0gdG9QYWlycztcbiAgICBsb2Rhc2gudG9QYWlyc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgbG9kYXNoLnRvUGxhaW5PYmplY3QgPSB0b1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaW9uQnkgPSB1bmlvbkJ5O1xuICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC51bmlxQnkgPSB1bmlxQnk7XG4gICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgbG9kYXNoLnVuc2V0ID0gdW5zZXQ7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudXBkYXRlID0gdXBkYXRlO1xuICAgIGxvZGFzaC51cGRhdGVXaXRoID0gdXBkYXRlV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICBsb2Rhc2gueG9yV2l0aCA9IHhvcldpdGg7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC56aXBPYmplY3REZWVwID0gemlwT2JqZWN0RGVlcDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZW50cmllcyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLmVudHJpZXNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgIGxvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7XG4gICAgbG9kYXNoLmNvbmZvcm1zVG8gPSBjb25mb3Jtc1RvO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmRlZmF1bHRUbyA9IGRlZmF1bHRUbztcbiAgICBsb2Rhc2guZGl2aWRlID0gZGl2aWRlO1xuICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgIGxvZGFzaC5lcSA9IGVxO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5oYXNJbiA9IGhhc0luO1xuICAgIGxvZGFzaC5oZWFkID0gaGVhZDtcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICBsb2Rhc2guaXNNYXAgPSBpc01hcDtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLmlzU2V0ID0gaXNTZXQ7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2guaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuICAgIGxvZGFzaC5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgIGxvZGFzaC5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5sb3dlckNhc2UgPSBsb3dlckNhc2U7XG4gICAgbG9kYXNoLmxvd2VyRmlyc3QgPSBsb3dlckZpcnN0O1xuICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgIGxvZGFzaC5sdGUgPSBsdGU7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICBsb2Rhc2gubWVhbiA9IG1lYW47XG4gICAgbG9kYXNoLm1lYW5CeSA9IG1lYW5CeTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5taW5CeSA9IG1pbkJ5O1xuICAgIGxvZGFzaC5zdHViQXJyYXkgPSBzdHViQXJyYXk7XG4gICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICBsb2Rhc2guc3R1Yk9iamVjdCA9IHN0dWJPYmplY3Q7XG4gICAgbG9kYXNoLnN0dWJTdHJpbmcgPSBzdHViU3RyaW5nO1xuICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgIGxvZGFzaC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIGxvZGFzaC5udGggPSBudGg7XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZEVuZCA9IHBhZEVuZDtcbiAgICBsb2Rhc2gucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlcGVhdCA9IHJlcGVhdDtcbiAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleEJ5ID0gc29ydGVkSW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhPZiA9IHNvcnRlZEluZGV4T2Y7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4QnkgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4T2YgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC5zdW1CeSA9IHN1bUJ5O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0Zpbml0ZSA9IHRvRmluaXRlO1xuICAgIGxvZGFzaC50b0ludGVnZXIgPSB0b0ludGVnZXI7XG4gICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgbG9kYXNoLnRvTG93ZXIgPSB0b0xvd2VyO1xuICAgIGxvZGFzaC50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBsb2Rhc2gudG9VcHBlciA9IHRvVXBwZXI7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltRW5kID0gdHJpbUVuZDtcbiAgICBsb2Rhc2gudHJpbVN0YXJ0ID0gdHJpbVN0YXJ0O1xuICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgbG9kYXNoLnVwcGVyRmlyc3QgPSB1cHBlckZpcnN0O1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZpcnN0ID0gaGVhZDtcblxuICAgIG1peGluKGxvZGFzaCwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaC5wcm90b3R5cGUsIG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSksIHsgJ2NoYWluJzogZmFsc2UgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQgPyAxIDogbmF0aXZlTWF4KHRvSW50ZWdlcihuKSwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXgpXG4gICAgICAgICAgPyBuZXcgTGF6eVdyYXBwZXIodGhpcylcbiAgICAgICAgICA6IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXykge1xuICAgICAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdC5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuX192aWV3c19fLnB1c2goe1xuICAgICAgICAgICAgJ3NpemUnOiBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCksXG4gICAgICAgICAgICAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdSaWdodCddID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbbWV0aG9kTmFtZV0obikucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdGhhdCBhY2NlcHQgYW4gYGl0ZXJhdGVlYCB2YWx1ZS5cbiAgICBhcnJheUVhY2goWydmaWx0ZXInLCAnbWFwJywgJ3Rha2VXaGlsZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHR5cGUgPSBpbmRleCArIDEsXG4gICAgICAgICAgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fLnB1c2goe1xuICAgICAgICAgICdpdGVyYXRlZSc6IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSxcbiAgICAgICAgICAndHlwZSc6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmhlYWRgIGFuZCBgXy5sYXN0YC5cbiAgICBhcnJheUVhY2goWydoZWFkJywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8udGFpbGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICd0YWlsJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKE1BWF9BUlJBWV9MRU5HVEgpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNoZWNrSXRlcmF0ZWUgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW2lzVGFrZXIgPyAoJ3Rha2UnICsgKG1ldGhvZE5hbWUgPT0gJ2xhc3QnID8gJ1JpZ2h0JyA6ICcnKSkgOiBtZXRob2ROYW1lXSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSBpc1Rha2VyIHx8IC9eZmluZC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgaWYgKCFsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGFyZ3MgPSBpc1Rha2VyID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcixcbiAgICAgICAgICAgIGl0ZXJhdGVlID0gYXJnc1swXSxcbiAgICAgICAgICAgIHVzZUxhenkgPSBpc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoRnVuYy5hcHBseShsb2Rhc2gsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgICAgcmV0dXJuIChpc1Rha2VyICYmIGNoYWluQWxsKSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLFxuICAgICAgICAgICAgaXNVbndyYXBwZWQgPSByZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsLFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ubHlMYXp5ID8gdmFsdWUgOiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbndyYXBwZWQgJiYgb25seUxhenkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyAoaXNUYWtlciA/IHJlc3VsdC52YWx1ZSgpWzBdIDogcmVzdWx0LnZhbHVlKCkpIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgQXJyYXlgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ3BvcCcsICdwdXNoJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIXRoaXMuX19jaGFpbl9fKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbbWV0aG9kTmFtZV07XG4gICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICB2YXIga2V5ID0gKGxvZGFzaEZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICAgIG5hbWVzID0gcmVhbE5hbWVzW2tleV0gfHwgKHJlYWxOYW1lc1trZXldID0gW10pO1xuXG4gICAgICAgIG5hbWVzLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkLCBXUkFQX0JJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tcbiAgICAgICduYW1lJzogJ3dyYXBwZXInLFxuICAgICAgJ2Z1bmMnOiB1bmRlZmluZWRcbiAgICB9XTtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMYXp5V3JhcHBlcmAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluIHNlcXVlbmNlIG1ldGhvZHMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnBsYW50ID0gd3JhcHBlclBsYW50O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucmV2ZXJzZSA9IHdyYXBwZXJSZXZlcnNlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBsYXp5IGFsaWFzZXMuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcblxuICAgIGlmIChzeW1JdGVyYXRvcikge1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZGFzaDtcbiAgfSk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZTpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvZGFzaCBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIExvZGFzaCBpc1xuICAgIC8vIGxvYWRlZCBieSBhIHNjcmlwdCB0YWcgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRCBsb2FkZXIuXG4gICAgLy8gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvLyBVc2UgYF8ubm9Db25mbGljdGAgdG8gcmVtb3ZlIExvZGFzaCBmcm9tIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBpdC5cbiAgZWxzZSBpZiAoZnJlZU1vZHVsZSkge1xuICAgIC8vIEV4cG9ydCBmb3IgTm9kZS5qcy5cbiAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwiaW1wb3J0IEVsZW1lbnQgZnJvbSAnQFVJL2VsZW1lbnQnO1xuaW1wb3J0IHMgZnJvbSAnLi9zdHlsZXMuc2Nzcyc7XG5pbXBvcnQgeyBzdGF0ZU1vZHVsZSBhcyBTIH0gZnJvbSAnc3RhdGVmdWwtZGVhZCc7XG5pbXBvcnQgUFMgZnJvbSAncHVic3ViLXNldHRlcic7XG4vL2ltcG9ydCB7IEdUTVB1c2ggfSBmcm9tICdAVXRpbHMnO1xuXG5pbXBvcnQgTWVudSBmcm9tICdAUHJvamVjdC9jb21wb25lbnRzL21lbnUnO1xuXG4vKiBNZW51VmlldyB3aWxsIGJlIHRoZSBmaXJzdCBwYWdlIG1lbnUgYWxsb3dpbmcgdXNlcnMgdG8gc2VsZWN0IGhvdyB0aGV5IHdhbnQgdG8gdmlldyB0aGUgZGF0YSAqL1xuLy8gV0lMTCBCRSBTSEFSRUQuIENhbGxlZCBvbmNlIGJ5IGhpYS5qcyAoIGB0aGlzYCA9PSBBcHAgKSBmb3IgdGhlIG1haW4gbWVudSB2aWV3IGFuZCB0aGVuXG4vLyBhbHNvIGJ5IFNlY3Rpb25WaWV3LiBNZW51Q2xhc3Mgc3R5bGVzIHNob3VsZCBiZSBtaW5pbWFsOyBhbGxvdyBjYWxsaW5nIGNvbnRleHQgdG8gcHJvdmlkZSB0aGUgYnVsa1xuY29uc3QgbWVudVRpdGxlID0gJ0V4cGxvcmUgSGVhbHRoIEltcGFjdCBBc3Nlc3NtZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lbnVWaWV3IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgXG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgICAvL2NvbnRhaW5lclxuICAgICAgICB2YXIgdmlldyA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnTWVudVZpZXcnO1xuICAgICAgICB0aGlzLm1lbnUgPSB0aGlzLmNyZWF0ZUNvbXBvbmVudChNYWluTWVudSwgJ2RpdiNtZW51LW1haW4nKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZHJlbihbXG4gICAgICAgICAgICB0aGlzLm1lbnVcbiAgICAgICAgXSk7XG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHZpZXc7IC8vIGlmIHByZXJlbmRlcmVkIGFuZCBubyBuZWVkIHRvIHJlbmRlciAobm8gZGF0YSBtaXNtYXRjaClcbiAgICAgICAgfVxuICAgICAgICB2aWV3LmNsYXNzTGlzdC5hZGQocy5tZW51Vmlldyk7XG4gICAgICAgIHZpZXcuY2xhc3NMaXN0LmFkZCgnbWVudS12aWV3Jyk7XG4gICAgICAgIHZhciBoZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcbiAgICAgICAgaGVhZGluZy50ZXh0Q29udGVudCA9IG1lbnVUaXRsZTtcblxuICAgICAgICBcbiAgICAgICAgdmlldy5hcHBlbmRDaGlsZChoZWFkaW5nKTtcblxuICAgICAgICByZXR1cm4gdmlldzsgICAgICAgICAgICBcbiAgICB9XG4gICAgaW5pdCgpe1xuICAgICAgICBcblxuICAgICAgICBQUy5zZXRTdWJzKFtbJ2lzU2VsZWN0ZWQnLCB0aGlzLmhpZGVTZWN0aW9uLmJpbmQodGhpcyldXSk7XG4gICAgICAgIC8qdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2hpbGQuaW5pdCgpO1xuICAgICAgICB9KTsqL1xuICAgICAgICAvKiB0byBkbyovICAgICAgXG4gICAgICAgIC8qIGdldCBlYWNoIHNlY3Rpb24gYW5kIGF0dGFjaGUgZXZlbnRsaXN0ZW5lciB0byBoYW5kbGUgY2xpY2sgKi9cbiAgICB9XG4gICAgaGlkZVNlY3Rpb24oKXtcbiAgICAgICAgdGhpcy5lbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbn1cblxuY2xhc3MgTWFpbk1lbnUgZXh0ZW5kcyBNZW51IHtcbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgdmFyIHZpZXcgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ01haW5NZW51JztcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlldzsgLy8gaWYgcHJlcmVuZGVyZWQgYW5kIG5vIG5lZWQgdG8gcmVuZGVyIChubyBkYXRhIG1pc21hdGNoKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIGNsaWNrSGFuZGxlcihjb250ZXh0KXtcbiAgICAgICAgc3VwZXIuY2xpY2tIYW5kbGVyKGNvbnRleHQpO1xuICAgICAgICBTLnNldFN0YXRlKCdpc1NlbGVjdGVkJywgdHJ1ZSk7XG4gICAgfVxufSIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJtZW51Vmlld1wiOlwic3JjLXZpZXdzLW1lbnUtdmlldy0tbWVudVZpZXdcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIm1lbnVMaXN0XCI6XCJzcmMtY29tcG9uZW50cy1tZW51LS1tZW51TGlzdFwiLFwibmF2SXRlbVdyYXBwZXJcIjpcInNyYy1jb21wb25lbnRzLW1lbnUtLW5hdkl0ZW1XcmFwcGVyXCIsXCJuYXZMaW5rXCI6XCJzcmMtY29tcG9uZW50cy1tZW51LS1uYXZMaW5rXCIsXCJhY3RpdmVcIjpcInNyYy1jb21wb25lbnRzLW1lbnUtLWFjdGl2ZVwiLFwicGxhY2Vob2xkZXJNZW51SXRlbVwiOlwic3JjLWNvbXBvbmVudHMtbWVudS0tcGxhY2Vob2xkZXJNZW51SXRlbVwifTsiLCJpbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudCc7XG5pbXBvcnQgUFMgZnJvbSAncHVic3ViLXNldHRlcic7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbi8vaW1wb3J0IHsgc3RhdGVNb2R1bGUgYXMgUyB9IGZyb20gJ3N0YXRlZnVsLWRlYWQnO1xuLy9pbXBvcnQgeyBHVE1QdXNoIH0gZnJvbSAnQFV0aWxzJztcblxuLy8gdmlld3NcbmltcG9ydCBNYXBWaWV3IGZyb20gJy4vLi4vbWFwLXZpZXcvaW5kZXguanMnO1xuaW1wb3J0IEJhclZpZXcgZnJvbSAnLi8uLi9iYXItdmlldy9pbmRleC5qcyc7XG5pbXBvcnQgV2FmZmxlVmlldyBmcm9tICcuLy4uL3dhZmZsZS12aWV3L2luZGV4LmpzJztcblxuaW1wb3J0IE1lbnUgZnJvbSAnQFByb2plY3QvY29tcG9uZW50cy9tZW51JztcblxuLyogU2VjdGlvblZpZXcgd2lsbCBiZSB0aGUgc2hhcmVkIHNjYWZmb2xkaW5nIGZvciBhbGwgdmlld3MgZXhjZXB0IE1lbnVWaWV3LiBJdCB3aWxsIGluY2x1ZGUgdGhlIHRvcCBtZW51LCB0aGUgY29udGFpbmVyIGZvciBlaXRoZXIgTWFwVmlldyBvciBCYXJWaWV3LFxuYW5kIHRoZSBjb250YWluZXIgZm9yIFdhZmZsZVZpZXcgKi9cblxuLy8gVE9ETyBjYW4gTWVudVZpZXcgYW5kIHRoZSB0b3AgbWVudSBvZiBTZWN0aW9uVmlldyB1dGlsaXplIHRoZSBzYW1lIGNvZGU/XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uVmlldyBleHRlbmRzIEVsZW1lbnQge1xuICAgIFxuICAgIHByZXJlbmRlcigpe1xuICAgICAgICAgLy9jb250YWluZXJcbiAgICAgICAgdmFyIHZpZXcgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1NlY3Rpb25WaWV3JztcbiAgICAgICAgdGhpcy5iYXJWaWV3cyA9IHRoaXMubW9kZWwuZmllbGRzLmZpbHRlcihmID0+ICFmLmlzU2Vjb25kYXJ5T25seSAmJiBmLmtleSAhPT0gJ3N0YXRlT3JUZXJyaXRvcnknICkubWFwKGYgPT4gdGhpcy5jcmVhdGVDb21wb25lbnQoQmFyVmlldywgYHNlY3Rpb24jYmFyLXZpZXctJHtmLmtleX1gLCB7ZGF0YToge3ByaW1hcnk6IGYua2V5fX0pKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZHJlbihbXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudChUb3BNZW51LCAnZGl2I3RvcC1tZW51JyksXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudChNYXBWaWV3LCAnc2VjdGlvbiNtYXAtdmlldycpLFxuICAgICAgICAgICAgLi4udGhpcy5iYXJWaWV3cyxcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KFdhZmZsZVZpZXcsICdzZWN0aW9uI3dhZmZsZS12aWV3JylcbiAgICAgICAgXSk7XG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHZpZXc7IC8vIGlmIHByZXJlbmRlcmVkIGFuZCBubyBuZWVkIHRvIHJlbmRlciAobm8gZGF0YSBtaXNtYXRjaClcbiAgICAgICAgfVxuICAgICAgICB2aWV3LmNsYXNzTGlzdC5hZGQoJ3NlY3Rpb24tdmlldycsIHMuc2VjdGlvblZpZXcpO1xuICAgICAgICAvL3ZpZXcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgLyogdG8gZG8gKi9cbiAgICAgICAgXG4gICAgICAgIC8qXG4gICAgICAgIGhlcmUgZG8gYWxsIHRoZSB0aGluZ3MgdG8gcmVuZGVyIHRoZSBzZWN0aW9uIHZpZXcgc2NhZmZvbGRpbmcgdXNpbmcgXG4gICAgICAgIC4uLlxuICAgICAgICAuLi5cbiAgICAgICAgLi4uXG5cbiAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgXG4gICAgICAgIHZhciBzaG93U2VjdGlvbkJpbmQgPSB0aGlzLnNob3dTZWN0aW9uLmJpbmQodGhpcylcbiAgICAgICAgUFMuc2V0U3VicyhbXG4gICAgICAgICAgICBbJ2lzU2VsZWN0ZWQnLCBzaG93U2VjdGlvbkJpbmRdLFxuICAgICAgICAgICAgWydzZWxlY3RISUEnLCB0aGlzLmJsdXJTZWN0aW9uLmJpbmQodGhpcyldXG4gICAgICAgICAgIFxuICAgICAgICBdKTtcbiAgICAgICAgLyp0aGlzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjaGlsZC5pbml0KCk7XG4gICAgICAgIH0pOypcbiAgICAgICAgLyogdG8gZG8qL1xuICAgICAgICAvKiBnZXQgZWFjaCB0b3AgbWVudSBpdGVtIGFuZCBhdHRhY2hlIGV2ZW50bGlzdGVuZXIgdG8gaGFuZGxlIGNsaWNrXG4gICAgICAgICAgICBTLnNlU3RhdGUoKS5cblxuICAgICAgICAgICAgYWxzbyBQUy5zZXRTdWJzKCkgdG8gaW5kaWNhdGUgYWN0aXZlIHRvcCBtZW51IHNlY3Rpb25cbiAgICAgICAgICAgIGFuZCB0byBjaGFuZ2UgdGhlIHZpZXdzXG4gICAgICAgICovXG4gICAgfVxuICAgIGJsdXJTZWN0aW9uKG1zZyxkYXRhKXtcbiAgICAgICAgaWYgKCBkYXRhICl7XG4gICAgICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQocy5pc0JsdXJyZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKHMuaXNCbHVycmVkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzaG93U2VjdGlvbigpe1xuICAgICAgICB0aGlzLmVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICByZXR1cm47XG4gICAgfVxufVxuXG5jbGFzcyBUb3BNZW51IGV4dGVuZHMgTWVudSB7XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIHZhciB2aWV3ID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdUb3BNZW51JztcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlldzsgLy8gaWYgcHJlcmVuZGVyZWQgYW5kIG5vIG5lZWQgdG8gcmVuZGVyIChubyBkYXRhIG1pc21hdGNoKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICBcbiAgICAgICAgUFMuc2V0U3VicyhbXG4gICAgICAgICAgICBbJ3ZpZXcnLCB0aGlzLmluZGljYXRlQWN0aXZlU2VjdGlvbi5iaW5kKHRoaXMpXVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgaW5kaWNhdGVBY3RpdmVTZWN0aW9uKG1zZyxkYXRhKXtcbiAgICAgICAgdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCdhJykuZm9yRWFjaChsaW5rID0+IHtcbiAgICAgICAgICAgIGxpbmsuY2xhc3NMaXN0LnJlbW92ZShzLmFjdGl2ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoYGFbZGF0YS1zZWN0aW9uPVwiJHtkYXRhfVwiYCkuY2xhc3NMaXN0LmFkZChzLmFjdGl2ZSk7XG4gICAgfVxufSIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJzZWN0aW9uVmlld1wiOlwic3JjLXZpZXdzLXNlY3Rpb24tdmlldy0tc2VjdGlvblZpZXdcIixcImFjdGl2ZVwiOlwic3JjLXZpZXdzLXNlY3Rpb24tdmlldy0tYWN0aXZlXCIsXCJpc0JsdXJyZWRcIjpcInNyYy12aWV3cy1zZWN0aW9uLXZpZXctLWlzQmx1cnJlZFwifTsiLCJpbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudCc7XG5pbXBvcnQgbWFwU1ZHIGZyb20gJ2h0bWwtbG9hZGVyIS4vbWFwLnN2Zyc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcblxuXG5pbXBvcnQgY2hyb21hIGZyb20gJ2Nocm9tYS1qcyc7XG5pbXBvcnQgdGlwcHkgZnJvbSAndGlwcHkuanMnO1xuaW1wb3J0IFBTIGZyb20gJ3B1YnN1Yi1zZXR0ZXInO1xuaW1wb3J0IHsgc3RhdGVNb2R1bGUgYXMgUyB9IGZyb20gJ3N0YXRlZnVsLWRlYWQnO1xuaW1wb3J0IHsgR1RNUHVzaCB9IGZyb20gJ0BVdGlscyc7XG5cbi8vY29uc3QgZ3JhZGllbnQgPSBbJyM1QUM3QkUnLCAnIzI5NkVDMyddO1xuY29uc3QgZ3JhZGllbnQgPSBbJyMyYzc1Y2UnLCAnIzA5MTMyYSddO1xuY29uc3QgbGVnZW5kVGl0bGUgPSAnTnVtYmVyIG9mIGhlYWx0aCBpbXBhY3QgYXNzZXNzbWVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXBWaWV3IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgXG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgICAvL2NvbnRhaW5lclxuICAgICAgICB2YXIgdmlldyA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnTWFwVmlldyc7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnZhbHVlc0FycmF5ID0gdGhpcy5tb2RlbC5uZXN0Qnkuc3RhdGVPclRlcnJpdG9yeS5tYXAoZCA9PiBkLnZhbHVlcy5sZW5ndGgpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5nZXRNYXhDb3VudCgpO1xuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3OyAvLyBpZiBwcmVyZW5kZXJlZCBhbmQgbm8gbmVlZCB0byByZW5kZXIgKG5vIGRhdGEgbWlzbWF0Y2gpXG4gICAgICAgIH1cbiAgICAgICAgXG5cbiAgICAgICAgLy90aXRsZVxuICAgICAgICB2YXIgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgICAgICB0aXRsZS50ZXh0Q29udGVudCA9IHRoaXMubW9kZWwuZmllbGRzLmZpbmQoZCA9PiBkLmtleSA9PT0gJ3N0YXRlT3JUZXJyaXRvcnknKS50ZXh0O1xuICAgICAgICB0aXRsZS5jbGFzc0xpc3QuYWRkKCdzZWN0aW9uLXRpdGxlJyk7XG5cblxuICAgICAgICAvL21hcFxuICAgICAgICB2YXIgbWFwQ29udGFpbmVyID0gdGhpcy5wcmVyZW5kZXJNYXAoKTtcbiAgICAgICAgdmFyIGxlZ2VuZCA9IHRoaXMucHJlcmVuZGVyTGVnZW5kKCk7XG5cbiAgICAgICAgLy9ub3RlXG4gICAgICAgIHZhciBtYXBOb3RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICBtYXBOb3RlLnRleHRDb250ZW50ID0gJ09ubHkgVVMgdGVycml0b3JpZXMgdGhhdCBoYXZlIGNvbmR1Y3RlZCBISUFzIGFyZSByZXByZXNlbnRlZCBvbiB0aGUgbWFwLic7XG5cbiAgICAgICAgdmlldy5hcHBlbmRDaGlsZCh0aXRsZSk7XG4gICAgICAgIHZpZXcuYXBwZW5kQ2hpbGQobWFwQ29udGFpbmVyKTtcbiAgICAgICAgdmlldy5hcHBlbmRDaGlsZChsZWdlbmQpO1xuICAgICAgICB2aWV3LmFwcGVuZENoaWxkKG1hcE5vdGUpO1xuXG4gICAgICAgLy92aWV3LmlubmVyVGV4dCA9IHRoaXMubmFtZTtcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIHByZXJlbmRlck1hcCgpe1xuICAgICAgICB2YXIgbWFwQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG1hcENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHMubWFwQ29udGFpbmVyLCAnanMtbWFwLWNvbnRhaW5lcicpO1xuICAgICAgICBtYXBDb250YWluZXIuaW5uZXJIVE1MID0gbWFwU1ZHO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jb2xvclNjYWxlID0gY2hyb21hLnNjYWxlKGdyYWRpZW50KS5kb21haW4oWzEsIE1hdGgubG9nKHRoaXMubWF4TGVnZW5kKV0pO1xuXG5cbiAgICAgICAgdGhpcy5tb2RlbC5uZXN0Qnkuc3RhdGVPclRlcnJpdG9yeS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgdmFyIHN0YXRlR3JvdXAgPSBtYXBDb250YWluZXIucXVlcnlTZWxlY3RvcignLnN0YXRlLScgKyB0aGlzLm1vZGVsLnN0YXRlQWJicmV2aWF0aW9uc1tkLmtleV0pO1xuICAgICAgICAgICAgdmFyIHN0YXRlQm94ID0gbWFwQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zdGF0ZS1ib3gtJyArIHRoaXMubW9kZWwuc3RhdGVBYmJyZXZpYXRpb25zW2Qua2V5XSk7XG4gICAgICAgICAgICBpZiAoIGQua2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBzdGF0ZUdyb3VwICl7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlR3JvdXAuY2xhc3NMaXN0LmFkZCgnaXMtbm90LW51bGwnKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhYmVsID0gc3RhdGVHcm91cC5xdWVyeVNlbGVjdG9yKCcuc3RhdGVfX2xhYmVsJyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXRoICA9IHN0YXRlR3JvdXAucXVlcnlTZWxlY3RvcignLnN0YXRlX19wYXRoJyk7XG4gICAgICAgICAgICAgICAgICAgIHBhdGguc3R5bGUuZmlsbCA9IHRoaXMuY29sb3JTY2FsZShNYXRoLmxvZyhkLnZhbHVlcy5sZW5ndGgpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnN0eWxlLmZvbnRXZWlnaHQgPSAnYm9sZCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5zdHlsZS5maWxsID0gJyNmZmYnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICggc3RhdGVCb3ggKXtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVCb3guY2xhc3NMaXN0LmFkZCgnaXMtbm90LW51bGwnKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY3QgPSBzdGF0ZUJveC5xdWVyeVNlbGVjdG9yKCdyZWN0Jyk7XG4gICAgICAgICAgICAgICAgICAgIHJlY3Quc3R5bGUuZmlsbCA9IHRoaXMuY29sb3JTY2FsZShNYXRoLmxvZyhkLnZhbHVlcy5sZW5ndGgpKTtcbiAgICAgICAgICAgICAgICAgICAgcmVjdC5zdHlsZS5zdHJva2UgPSB0aGlzLmNvbG9yU2NhbGUoTWF0aC5sb2coZC52YWx1ZXMubGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlQm94LnF1ZXJ5U2VsZWN0b3IoJy5zdGF0ZS1ib3hfX2xhYmVsJykuc3R5bGUuZmlsbCA9ICcjZmZmJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBtYXBDb250YWluZXI7XG4gICAgfVxuICAgIHByZXJlbmRlckxlZ2VuZCgpe1xuICAgICAgICB2YXIgbGVnZW5kQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGxlZ2VuZENvbnRhaW5lci50ZXh0Q29udGVudCA9IGxlZ2VuZFRpdGxlO1xuICAgICAgICBsZWdlbmRDb250YWluZXIuY2xhc3NMaXN0LmFkZChzLmxlZ2VuZENvbnRhaW5lcik7XG5cbiAgICAgICAgdmFyIGxlZ2VuZFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgbGVnZW5kV3JhcHBlci5jbGFzc0xpc3QuYWRkKHMubGVnZW5kV3JhcHBlcik7XG5cblxuICAgICAgICB2YXIgZ3JhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBncmFkLnN0eWxlLmJhY2tncm91bmQgPSBgbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAke2dyYWRpZW50LmpvaW4oJywnKX1gO1xuICAgICAgICBncmFkLmNsYXNzTGlzdC5hZGQocy5ncmFkaWVudCk7XG4gICAgICAgIFxuICAgICAgICBsZWdlbmRXcmFwcGVyLmFwcGVuZENoaWxkKGdyYWQpO1xuXG4gICAgICAgIFsxLCBNYXRoLmZsb29yKHRoaXMubWF4TGVnZW5kIC8gMTApLCB0aGlzLm1heExlZ2VuZF0uZm9yRWFjaCgodGljaywgaSkgPT4ge1xuICAgICAgICAgICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKHMudGljayk7XG4gICAgICAgICAgICBsYWJlbC50ZXh0Q29udGVudCA9IHRpY2s7XG4gICAgICAgICAgICBsYWJlbC5zdHlsZS5sZWZ0ID0gaSA9PT0gMCA/IDAgOiBpID09PSAxID8gKCBNYXRoLmxvZyh0aWNrKSAvIE1hdGgubG9nKHRoaXMubWF4TGVnZW5kKSApICogMTAwICsgJyUnIDogJzEwMCUnO1xuICAgICAgICAgICAgbGVnZW5kV3JhcHBlci5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxlZ2VuZENvbnRhaW5lci5hcHBlbmRDaGlsZChsZWdlbmRXcmFwcGVyKTtcbiAgICAgICAgcmV0dXJuIGxlZ2VuZENvbnRhaW5lcjtcbiAgICB9XG4gICAgZ2V0TWF4Q291bnQoKXtcbiAgICAgICAgLyogZnV0dXJlIHByb29maW5nIHRoZSBsZWdlbmQuIGFzIG9mIG5vdywgbGVnZW5kIGdvZXMgZnJvbSAxIHRvIDEwMCBvbiBsb2cgc2NhbGUuIGhpZ2hlc3QgY291bnQgaXMgODMuIGluIGZ1dHVyZSBpdCdzXG4gICAgICAgICAgICBwb3NzaWJsZSB0aGUgbWF4IGlzIG1vcmUgdGhhbiAxMDA7IGluIHRoYXQgY2FzZSB0aGUgbGVnZW5kJ3MgbWF4IHdpbGwgYmUgdGhlIG1heCBjb3VudFxuICAgICAgICAqL1xuICAgICAgICB0aGlzLm1heENvdW50ID0gTWF0aC5tYXgoLi4udGhpcy52YWx1ZXNBcnJheSk7XG4gICAgICAgIHRoaXMubWF4TGVnZW5kID0gdGhpcy5tYXhDb3VudCA8IDEwMCA/IDEwMCA6IHRoaXMubWF4Q291bnQ7IFxuICAgIH1cbiAgICB0b2dnbGVBY3RpdmUobXNnLGRhdGEpe1xuICAgICAgICBpZiAoIGRhdGEgPT09ICdzdGF0ZU9yVGVycml0b3J5JyApe1xuICAgICAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKHMuYWN0aXZlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZShzLmFjdGl2ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5pdCgpe1xuICAgICAgICBcblxuICAgICAgICBQUy5zZXRTdWJzKFtcbiAgICAgICAgICAgIFsnaG92ZXJQcmltYXJ5R3JvdXAnLCB0aGlzLmhpZ2hsaWdodFN0YXRlLmJpbmQodGhpcyldLFxuICAgICAgICAgICAgWyd1bkhvdmVyUHJpbWFyeUdyb3VwJywgdGhpcy5oaWdobGlnaHRTdGF0ZS5iaW5kKHRoaXMpXSxcbiAgICAgICAgICAgIFsndmlldycsIHRoaXMudG9nZ2xlQWN0aXZlLmJpbmQodGhpcyldXG4gICAgICAgIF0pO1xuXG5cbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0VGlwcHlzKCk7XG5cbiAgICAgICAgdGhpcy5tYXBDb250YWluZXIgPSB0aGlzLm1hcENvbnRhaW5lciB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbWFwLWNvbnRhaW5lcicpO1xuICAgICAgICB0aGlzLm1vZGVsLm5lc3RCeS5zdGF0ZU9yVGVycml0b3J5LmZvckVhY2goZCA9PiB7XG4gICAgICAgICAgICB2YXIgc3RhdGVHcm91cCA9IHRoaXMubWFwQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zdGF0ZS0nICsgdGhpcy5tb2RlbC5zdGF0ZUFiYnJldmlhdGlvbnNbZC5rZXldKTtcbiAgICAgICAgICAgIHZhciBzdGF0ZUJveCA9IHRoaXMubWFwQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zdGF0ZS1ib3gtJyArIHRoaXMubW9kZWwuc3RhdGVBYmJyZXZpYXRpb25zW2Qua2V5XSk7XG4gICAgICAgICAgICBpZiAoIGQua2V5ICE9PSBcIm51bGxcIikge1xuICAgICAgICAgICAgICAgIGlmICggc3RhdGVHcm91cCApe1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZUdyb3VwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQ2xpY2tIYW5kbGVyLmNhbGwodGhpcywgZCwgZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZUdyb3VwLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgUy5zZXRTdGF0ZSgnaG92ZXJQcmltYXJ5R3JvdXAnLCBkLmtleSwge2ZvcmNlQ2hhbmdlOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZUdyb3VwLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgUy5zZXRTdGF0ZSgndW5Ib3ZlclByaW1hcnlHcm91cCcsIGQua2V5LCB7Zm9yY2VDaGFuZ2U6IHRydWV9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICggc3RhdGVCb3ggKXtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVCb3guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVDbGlja0hhbmRsZXIuY2FsbCh0aGlzLCBkLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlQm94LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgUy5zZXRTdGF0ZSgnaG92ZXJQcmltYXJ5R3JvdXAnLCBkLmtleSwge2ZvcmNlQ2hhbmdlOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZUJveC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIFMuc2V0U3RhdGUoJ3VuSG92ZXJQcmltYXJ5R3JvdXAnLCBkLmtleSwge2ZvcmNlQ2hhbmdlOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7IFxuXG4gICAgfVxuICAgIGhpZ2hsaWdodFN0YXRlKG1zZyxkYXRhKXtcbiAgICAgICAgdmFyIHN0YXRlQ29kZSA9IHRoaXMubW9kZWwuc3RhdGVBYmJyZXZpYXRpb25zW2RhdGFdO1xuICAgICAgICB2YXIgcGF0aCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdGF0ZS0nICsgc3RhdGVDb2RlKTtcbiAgICAgICAgdmFyIGJveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdGF0ZS1ib3gtJyArIHN0YXRlQ29kZSk7XG4gICAgICAgIGlmICggbXNnID09PSAnaG92ZXJQcmltYXJ5R3JvdXAnICl7XG4gICAgICAgICAgICBpZiAoIHBhdGggKXtcbiAgICAgICAgICAgICAgICBwYXRoLmNsYXNzTGlzdC5hZGQocy5ob3Zlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIGJveCApe1xuICAgICAgICAgICAgICAgIGJveC5jbGFzc0xpc3QuYWRkKHMuaG92ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICggbXNnID09PSAndW5Ib3ZlclByaW1hcnlHcm91cCcgKXtcbiAgICAgICAgICAgIGlmICggcGF0aCApe1xuICAgICAgICAgICAgICAgIHBhdGguY2xhc3NMaXN0LnJlbW92ZShzLmhvdmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggYm94ICl7XG4gICAgICAgICAgICAgICAgYm94LmNsYXNzTGlzdC5yZW1vdmUocy5ob3Zlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGVDbGlja0hhbmRsZXIoZCxlKXtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgUy5zZXRTdGF0ZSgnc2VsZWN0UHJpbWFyeUdyb3VwLm1hcCcsIGQua2V5KTtcbiAgICAgICAgR1RNUHVzaChgSElBfFNlbGVjdHxTdGF0ZXwke2Qua2V5fWApO1xuICAgIH1cbiAgICBcbiAgICBzZXRUaXBweXMoKXtcbiAgICAgICAgZnVuY3Rpb24gc2V0VGlwcHkobm9kZSxkKXtcbiAgICAgICAgICAgIHRpcHB5KG5vZGUsIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiBgPHN0cm9uZz4ke2QudmFsdWVzLmxlbmd0aH0gSElBJHtkLnZhbHVlcy5sZW5ndGggPiAxID8gJ3MnIDogJyd9PC9zdHJvbmc+PGJyIC8+Q2xpY2sgZm9yIGRldGFpbHNgLFxuICAgICAgICAgICAgICAgIGZvbGxvd0N1cnNvcjogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXBDb250YWluZXIgPSB0aGlzLm1hcENvbnRhaW5lciB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbWFwLWNvbnRhaW5lcicpO1xuICAgICAgICB0aGlzLm1vZGVsLm5lc3RCeS5zdGF0ZU9yVGVycml0b3J5LmZvckVhY2goZCA9PiB7XG4gICAgICAgICAgICB2YXIgc3RhdGVHcm91cCA9IHRoaXMubWFwQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zdGF0ZS0nICsgdGhpcy5tb2RlbC5zdGF0ZUFiYnJldmlhdGlvbnNbZC5rZXldKTtcbiAgICAgICAgICAgIHZhciBzdGF0ZUJveCA9IHRoaXMubWFwQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zdGF0ZS1ib3gtJyArIHRoaXMubW9kZWwuc3RhdGVBYmJyZXZpYXRpb25zW2Qua2V5XSk7XG4gICAgICAgICAgICBpZiAoIGQua2V5ICE9PSBcIm51bGxcIikge1xuICAgICAgICAgICAgICAgIGlmICggc3RhdGVHcm91cCApe1xuICAgICAgICAgICAgICAgICAgICBzZXRUaXBweShzdGF0ZUdyb3VwLCBkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCBzdGF0ZUJveCApe1xuICAgICAgICAgICAgICAgICAgICBzZXRUaXBweShzdGF0ZUJveCwgZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTsgICBcbiAgICB9XG4gICAgY2xpY2tIYW5kbGVyKCl7XG4gICAgICAgIC8qIHRvIGRvICovXG5cbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmVyc2lvbj1cXFwiMS4xXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHhtbG5zOnhsaW5rPVxcXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXFxcIiB2aWV3Qm94PVxcXCIwIDAgNjg5IDQwMlxcXCI+XFxuICAgPHN0eWxlPlxcbiAgICAuc3RhdGUgLnN0YXRlX19sYWJlbCB7XFxuICAgICAgICBmaWxsOiBibGFjazsgZm9udC1zaXplOiAxMnB4OyB0ZXh0LWFuY2hvcjogbWlkZGxlOyBkb21pbmFudC1iYXNlbGluZTogbWlkZGxlOyBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIH1cXG4gICAgLnN0YXRlX19sYWJlbC5pbnZlcnQge1xcbiAgICAgICAgZmlsbDogYmxhY2s7IGZvbnQtc2l6ZTogMTJweDsgdGV4dC1hbmNob3I6IG1pZGRsZTsgZG9taW5hbnQtYmFzZWxpbmU6IG1pZGRsZTsgY3Vyc29yOiBwb2ludGVyO1xcbiAgICB9XFxuICAgIC5zdGF0ZV9fcGF0aCwgLnN0YXRlLWJveF9fYmFja2dyb3VuZCB7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICB0cmFuc2l0aW9uOiBmaWxsIDAuMjVzIGVhc2UtaW4tb3V0IDBzLCBzdHJva2UgMC4yNXMgZWFzZS1pbi1vdXQgMHM7XFxuICAgICAgICBmaWxsOiB1cmwoI2RpYWdvbmFsSGF0Y2gpO1xcbiAgICAgICAgc3Ryb2tlOiAjZmZmO1xcbiAgICAgICAgc3Ryb2tlLXdpZHRoOiAxcHg7XFxuICAgIH1cXG4gICAgLnN0YXRlLWJveF9fYmFja2dyb3VuZCB7XFxuICAgICAgICB3aWR0aDogNDBweDtcXG4gICAgICAgIGhlaWdodDogMjJweDtcXG4gICAgICAgIGZpbGw6IHVybCgjZGlhZ29uYWxIYXRjaCk7XFxuICAgICAgICBzdHJva2U6ICNjY2M7XFxuICAgICAgICBzdHJva2Utd2lkdGg6IDFweDtcXG5cXG4gICAgfVxcbiAgICAuc3RhdGUtYm94ZXMgdGV4dCB7XFxuICAgICAgICBmaWxsOiAjMDAwOyB0ZXh0LWFuY2hvcjogbWlkZGxlOyBmb250LXNpemU6IDEycHg7IGN1cnNvcjogcG9pbnRlcjtcXG4gICAgfVxcbiAgIDwvc3R5bGU+XFxuICAgPHBhdHRlcm4gaWQ9XFxcImRpYWdvbmFsSGF0Y2hcXFwiIHBhdHRlcm5Vbml0cz1cXFwidXNlclNwYWNlT25Vc2VcXFwiIHdpZHRoPVxcXCI4XFxcIiBoZWlnaHQ9XFxcIjhcXFwiPlxcbiAgICAgPHJlY3Qgd2lkdGg9XFxcIjhcXFwiIGhlaWdodD1cXFwiOFxcXCIgZmlsbD1cXFwiI2ZmZlxcXCI+PC9yZWN0PlxcbiAgICAgPHBhdGggZD1cXFwiTS0xLDEgbDQsLTRcXG4gICAgICAgICAgICAgIE0wLDggbDgsLThcXG4gICAgICAgICAgICAgIE03LDkgbDQsLTRcXFwiIFxcbiAgICAgICAgICAgc3R5bGU9XFxcInN0cm9rZTojY2NjOyBzdHJva2Utd2lkdGg6MlxcXCIgLz5cXG4gICA8L3BhdHRlcm4+XFxuICAgIDxnIGNsYXNzPVxcXCJzdGF0ZXNcXFwiPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLUFMXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk00NjkuNTM5NTgxMTU1MTE1LDMwNy40MzYzODUzNTExMzU3NUw0NTguMzMzNzU5Mjk3NzUxOCwzMDguODQ1NDc0MTQyMDc1MjZMNDM2Ljc0NTY5MTY3MDE5MTYsMzEwLjg3MzY3NTA2ODQ5MDNMNDM2Ljk3NTM3NzkyMzI1MDIsMzEzLjQ2OTQ5ODYzNjk4OTdMNDM5Ljg3MzQzODY1MDQzOTU0LDMxNS4zNDk4MDQ3NDA3NTk5TDQzOS4wMzk2MjQ4MzQ2OTQxLDMyMS4yODc1MTc2NTc0NDIyN0w0MzUuODgyNDgzMjU1NjIxNywzMjEuODAzODAxMDkzODcxOEw0MzMuMzUxMTAzMjAwNTk1MTYsMzE4LjkzMzYyOTU2NzcwOTY2TDQzMy42MjI3MjIyNzUwODQzNiwzMTYuNzcyMDg3MDYyMjg0OEw0MzEuMzI4NzM5NTk3MTM4OSwzMTYuNTY5ODYxNzAwODYxN0w0MzEuMjQ5MzM1NTAwNjg5OCwzMjEuMDg5NjU0MTY0MDI4NzNMNDI3LjU4MDUyMjc2OTE5NDYsMzIwLjkxNDI4NDg1NDA4MjY3TDQyNi45ODgwNTE0Njg4NzU3LDMxMy41MTkwMTY3NDU0NzE1TDQyNS4yMTA5OTIzOTMwMDg3LDMwMi41NjMxMjIzMDAyODA2TDQyNC44NTI5MTEyMDA5NjkxLDI5Mi40MzI4OTUwMTI0NjQ5TDQyNS4zNjQwNjIxMjk1NjEsMjg3LjcwNTUxMzQxNDU4NUw0MjUuMTc0NjYzMTc1NDAzNywyNzQuNDQzNjc5MTcxOTA1NEw0MjUuODU5MTc3MjE0NjM0MSwyNjEuNDkyNjY0NjUwMDA4TDQyNS42NTg5MDA3MDE4NjkyNCwyNTMuODYxNzg0MjQ0NjY4MTJMNDI0LjY3ODExNDM3MjQxNDYsMjUyLjQyOTAwMzMxMTk1MTNMNDU1LjQ2NTEzODE4MDI0NTQsMjQ5LjYyOTg4NDQ4MjUyODJMNDU5LjAxODUwMjUxODg4OTkzLDI2Mi4wOTQ4NzkzODA5MDA4Nkw0NjIuODc3NjMxNDk5NzcyNCwyNzYuODIyNDQwODAxOTcxN0w0NjUuNDU5OTgzNjY0NTI0MDMsMjgzLjg2MzAzMDkxMjYxODhMNDY2LjkzNDc1NzAwNDA5ODA2LDI4NS4wNDc1MTgwMzIzMTEzTDQ2OC4zNDAwMDYxMTg5NDU2LDI4OS40MjY2MTE0ODE4MTg5NUw0NjYuNzE3Nzg5ODY4MzYyNzMsMjkwLjg5MDE2OTA5OTQ3MTczTDQ2Ni41ODE4NzA1NTcyNTE5LDI5Ny41MTUyNjg2NTcwNjA4TDQ2Ny41NjI0NTY3NDA4MjkyNSwyOTguMTk4Mjk3NTM5ODVMNDY3LjkyMjI5ODY2MTgyNDM2LDMwNS4yMzc5NjM3MjQyOTYxNVpcXFwiPjwvcGF0aD48dGV4dCBjbGFzcz1cXFwic3RhdGVfX2xhYmVsXFxcIiB4PVxcXCI0NDQuMDI1NzI3MTA2NDEyNFxcXCIgeT1cXFwiMjgzLjY3MzY5NjU3OTA1OTZcXFwiIGR4PVxcXCIwXFxcIiBkeT1cXFwiMFxcXCI+QUw8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUgc3RhdGUtQVJcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGNsYXNzPVxcXCJzdGF0ZV9fcGF0aFxcXCIgZD1cXFwiTTQwNS4yODgwNTIyODgxMzQxLDIzOC45NzE3OTc5MzE4MzI0NEw0MDYuMjUwMjEyMzY2MjcxMSwyNDAuNjYwMDEzNzUwNTMxNDVMNDAyLjk5Mzg0ODI1NTU3MjIzLDI0Mi45NDMwNzk2MzQ5Njk1NEw0MDMuMTgwOTk1ODM2OTM4MDUsMjQ1Ljg3Njg3ODIzNjUzOTgyTDQwMS4xMTI2OTI1NTg3MTE0LDI0Ni45NjIwODYwNzA2NzA2NEw0MDEuNzQ1ODc3Njg5MzYyMiwyNTAuMjY1NTc2NzE5MjE3MjhMNDAwLjY3MzAyMTQ3Njk2Nzg1LDI1My43NTM0ODUyODQxNTM1NkwzOTkuNDExNTkxNjE5NzA2MywyNTQuMjI3NjkwNTc3NTQ3MDRMNDAwLjM1NTM5NDQ4MDgyMzEsMjU1LjYwMjcwNzYzNTI2MjY4TDM5OC4yNjU4MjYxOTQxMjMxLDI1Ni42ODIyNTIwNTMwOTEzNkwzOTYuMzIxNDMyNjE5ODU5NywyNjAuMzczNjAxNTU0OTAxMzdMMzk2LjkwNjgzMzE5MDM2MjE0LDI2My4wNDM0MjE4NzcyNTcyTDM5Mi4zNjE5MTA5NjE4MjU5LDI2Ny4xODkxOTMzMjg4ODcxNEwzOTAuNTMxNzI3NDE1Nzg4NCwyNzMuODc4MTg3MDE5MTE0NEwzODkuMzI2OTkzMzQwOTE5NiwyNzYuMDAzODMxMDc3ODA2NDdMMzkwLjc0Njk4MjE4MjU4MjMsMjc4LjA3NTM4OTc1NDg2MDVMMzkxLjQwOTQ5MzQzODU4NDYsMjgyLjQwNjc4MTYwMDk5ODA0TDM5MC42Mjc3NDg1MDMwODc0NSwyODQuMzUxMjY1ODI2MzE5NkwzNzcuODYyODc0MzQ3MzU1OCwyODQuODUxNjk1NDc1Mzk4OUwzNTUuNDA1NTEzNjQ1NjQ2MywyODUuMzczMzQ2OTUwNjk5OEwzNTUuMjQzNDg3NDUwMjQ0MiwyNzcuNTI3NDgxMDc2NzkxNzNMMzUwLjg2NDI5NjM0MDU0MDIsMjc3LjI5MjQwNDc5MzYxNDdMMzQ5Ljk3MzExOTA3NjY3NDksMjc2LjI3NjA2MTMyMDgxM0wzNDkuNzMyNzE4OTYyODA2NSwyNjEuMzYwNTM1MjgxNDY3M0wzNTAuMTExNTk5ODc0NDUwNiwyNTguMTc4MDUwMjgwNTIwMkwzNDkuOTU0NDAzNzIzODE1NywyNDguNjQ4MjUxNzM4Nzc2N0wzNDkuMDQ3NzEwMTkzMTQ5NywyNDUuMjQ2MDAzOTg1NjY3NjRMMzQ3LjYwNjE4ODk2NjMyNjA0LDIzMy45MDE2NDM5MzQxNjgyTDM3MS41OTEzNjk4NTAwMTM3LDIzMy4yOTMwMjc2NTMwMDMzOEwzOTkuNzU5NzkwMjk4MDk5NCwyMzEuOTE3NzI2NzI2NzY3NDZMNDAxLjEyNDU1MDYxMjY2MDQ3LDIzMy41MDU0NjMzNTY5MUw0MDAuNDI1NDQyMzA4NDYxNiwyMzUuODU4NDgwMDQ3ODg5MDNMMzk3LjY4MDU4OTM4MTkyMjA2LDIzOS41MjgwNTExNzk2NTI0NFpcXFwiPjwvcGF0aD48dGV4dCBjbGFzcz1cXFwic3RhdGVfX2xhYmVsXFxcIiB4PVxcXCIzNzMuOTM0NjY2NTMxMzgwNFxcXCIgeT1cXFwiMjU2Ljk3OTk5NDMxNjY5ODk0XFxcIiBkeD1cXFwiMFxcXCIgZHk9XFxcIjBcXFwiPkFSPC90ZXh0PlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLURDXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk01NDUuNjA4NjM3MDE0NDcyNiwxNzguMzY3OTU4OTA5NzU0M0w1NDQuMDAxMDQyODgxNzMxLDE3Ni41ODM1NjQxOTE1NDc1N0w1NDYuNTM4NjcwOTc1NDk3LDE3Ni44MDAwNjc1MDgxMTc0MlpcXFwiPjwvcGF0aD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1GTFxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNNDM5LjAzOTYyNDgzNDY5NDEsMzIxLjI4NzUxNzY1NzQ0MjI3TDQzOS44NzM0Mzg2NTA0Mzk1NCwzMTUuMzQ5ODA0NzQwNzU5OUw0MzYuOTc1Mzc3OTIzMjUwMiwzMTMuNDY5NDk4NjM2OTg5N0w0MzYuNzQ1NjkxNjcwMTkxNiwzMTAuODczNjc1MDY4NDkwM0w0NTguMzMzNzU5Mjk3NzUxOCwzMDguODQ1NDc0MTQyMDc1MjZMNDY5LjUzOTU4MTE1NTExNSwzMDcuNDM2Mzg1MzUxMTM1NzVMNDcxLjgzMzIzNDEzNzI2NzQsMzExLjQ2MDgwODc1NTE3MzlMNTA0Ljk0NjgyNDUwOTUxMSwzMDkuMjQzMjA5MTc5MTEyOEw1MDUuODE4ODAxMzk4NjM2NzcsMzEyLjA2NjE1NTY4MzQ5OTQ2TDUwNy45MDg1ODkxMTAzNjE5NiwzMTAuNjQxOTczOTAwNjkzMzZMNTA2LjgwMDcxNTA1NTI2MjIzLDMwNi4yNTg0MzI3NTM3ODQyTDUwNy41NDYyMTQ1OTYxNzAxLDMwNS4xMTAzNDgzNDM2NzMyTDUxNC41MTMxNTI5NTIyMjU3LDMwNS43MzE0ODI2NjI1NzA5TDUxNS45Mzg5NTYzMDQwMTgyLDMxMS45NzgyNjU4NjcyNTA0TDUxOC41OTI4MTc3NTQ5Njk5LDMxNy4xNTA1NzQwMzgxODI3NUw1MTguOTcwMTYzMjc2NTc4LDMxOS41NjM5MDgyNzg3MDQzM0w1MjMuOTU4OTY0MzgzMjA5MSwzMjcuNTQzNzcwMTkzMjE4NEw1MzAuMjg0NjAzOTgzMTMxNCwzMzQuNzI1MzA1NDQ1MjY4MUw1MzEuNDY0NTQ5NTEyMzY1NSwzNDEuOTMyNDcyNzkzNDY0MTdMNTM5LjIwMjM3NjMwMDMwMjUsMzU0LjA3NjQ3NDUzODE3NTJMNTQxLjQzODI2MzMzNDcwODYsMzU4Ljc3ODA5Njc2ODk5MzI0TDU0Mi4yODc3MDY2NTQ0MTE3LDM2My43ODgzNTM0ODQ4OTU2NUw1NDIuMjE4NTQ2ODEzNzAxNiwzNjkuMTA3MTg3MzAxNDY2Nkw1NDMuMDc1NDQ0Njc1NTQxLDM3NC4xODQ2ODIyNTgxNjU2TDU0MC44NDU5MjUxODE3OTQ1LDM3OC4zNTIwMjU1MzIzMzA3TDU0MC41ODIzMDIzMTkwMDEyLDM4Mi42NTkwMzAwNjUxMTY0NEw1MzUuNjA1NTIwOTkzMzQ3LDM4NS4yMDc5MTgyMjA0ODcxTDUzMC43NjMxNjEwOTYyMDgxLDM4NS41ODYwMzQ4ODUzMjM1Nkw1MzAuMDcyNTgxMTM3MTE1NywzODEuMjAxOTQzOTQyNjY5M0w1MjYuOTQ2NzI3MzkzNTUzMSwzNzYuODAwMjM2MjEzMzQwNEw1MjQuMzM1MTg0Nzk1MDk1NSwzNzUuNjI1Njc1NTk5Nzg0TDUyMi4wNTYzNTI0MjY5MzIzLDM3Ni42MDQ4Mzc2MTE5NDA0TDUyMC45MDg3OTk4NDYzNjUxLDM3NS40MzczMzIxMTMwNzA0NUw1MTcuOTg0NTIxNDI2OTM5MywzNjguODUwMzcyMDM4NzM4NEw1MTUuMDM5MTk2Mjc4MDgxNiwzNjguNDk3MTU4MTU5ODUyTDUxNS4zNTM3NDk1NzU3MTY4LDM2NC4xMDQ5Nzg4OTYwMjE3NUw1MTQuMDE1MTYzMjM3NDE2NiwzNjEuNTM0OTk3MjE2Njc4OUw1MTMuOTMyMDgwOTU4MTcxMSwzNjQuMjM1MzE0MjY3NzEyODVMNTEyLjU3NzkzMDAwMDE4MDEsMzY0LjgyODMzNTQ2NTIxNTA1TDUwNy4xNDM5NDU0Nzg4NzI0LDM1Ni45OTE2NjY0ODk0MTg5TDUwNC45MzYyNTcxOTE4NzI0LDM1NC44NTA5NDcxNTI0NDk0TDUwOC41MTk4OTU3Mjg2MjYxLDM0OS45ODYzNzI5NDg4MjgwM0w1MDYuNTUwMTUyNTE2MTExOSwzNDkuNDc2MjU4MTQ4Nzk0NjdMNTA0LjUzMjY4MTExNDM1Nzk2LDM1MS45NzkxNzYzMDI0NzkyM0w1MDIuODk3OTgxNDM0NzgzMDUsMzUwLjQ2NjExNTU4OTA4NTc1TDUwMi42MDI2NzExNTE2NjgsMzQ0Ljk2MTg4MjgzNDE1MzM2TDUwMy44ODI1MTkyNTAzMzQ2LDM0MC42NTg2MTk2MTMyODgyTDUwMi40NTYxODE0MzU4MTUxNSwzMzMuODc0OTA0NjkyMDEzNzNMNTAwLjY1NTUwMTgxNTg5NDA3LDMzMS4wMjk4MzkyMzI4NDY2NUw0OTcuNDk0NjI2Mjg0MDc4NSwzMzEuNzg1MDU1MjY0NjM0Mkw0OTQuNjA0MjM3MTQ5NTE3ODcsMzI3LjY1MTEwMjY0ODA5Mjk0TDQ5Mi4xNTYwOTM2NDc1Nzc1LDMyNi43MDg1MzMwMjAxODUxTDQ5MS44NTQ0ODYwNDg4MTQzNSwzMjQuNDQ0NTgwNzg4MDc1M0w0ODguNzE0NDUzMTU4MDQwNDQsMzIxLjY4MDM3MzYxNDg2MjhMNDgzLjc3NTQzMTgwNDExMzQsMzE5LjEzODM5MTM4MzY1MTM3TDQ3OC45MjQ3OTYyMDUyOTE4LDMyMC44NTY4NDE4Njg5MTg2TDQ3OS42MDk4OTY3Mzc0MDkxNCwzMjIuNjc4NDY2NzY4NjA0OTVMNDc3LjMwOTA1NDY3MDAyNDgsMzIyLjcyMTYyODExMzk0MTg1TDQ3MS43MzY1NTYyMTY5NTg5LDMyNi4zMTk3MjY1MzI5OTIwNEw0NjcuNjY4OTQwNzIxOTI4MSwzMjcuMTAzMTMyNTk5NTY3NUw0NjYuODY5MjUyMTc3MTI3NDYsMzI0LjEwMDkzMDM1NjQzNzFMNDU5LjA3MDMyOTgzMjAyOTIsMzIwLjAzNzU0OTUzMDYwNTkzTDQ1NC4zMzM5Njk3NDM3NDU3LDMxOC41NDk4NzM5Njk0NDU2TDQ0OS43NTc5NjU0ODYyNzYyNSwzMTguNTM0ODU0NDM1OTgwNFpNNTI2LjExNTg5MTE2MzU1NjYsMzkzLjYyNTgyNTcyNjgxMDFMNTI4LjU1NzI4NDM1MzkzNTYsMzkzLjQ4NjA2OTQyMTk0OTk0TDUyMy40ODI1NDk0MDY5Njc3LDM5NS43NTQwMDE5MjgwODI4NlpcXFwiPjwvcGF0aD48dGV4dCBjbGFzcz1cXFwic3RhdGVfX2xhYmVsXFxcIiB4PVxcXCI1MDYuMDUyMjU0ODA4NDY4OTRcXFwiIHk9XFxcIjMzNy42OTQyNjAyMjcyMzgxXFxcIiBkeD1cXFwiMSVcXFwiIGR5PVxcXCIwXFxcIj5GTDwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1HQVxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNNTE0LjUxMzE1Mjk1MjIyNTcsMzA1LjczMTQ4MjY2MjU3MDlMNTA3LjU0NjIxNDU5NjE3MDEsMzA1LjExMDM0ODM0MzY3MzJMNTA2LjgwMDcxNTA1NTI2MjIzLDMwNi4yNTg0MzI3NTM3ODQyTDUwNy45MDg1ODkxMTAzNjE5NiwzMTAuNjQxOTczOTAwNjkzMzZMNTA1LjgxODgwMTM5ODYzNjc3LDMxMi4wNjYxNTU2ODM0OTk0Nkw1MDQuOTQ2ODI0NTA5NTExLDMwOS4yNDMyMDkxNzkxMTI4TDQ3MS44MzMyMzQxMzcyNjc0LDMxMS40NjA4MDg3NTUxNzM5TDQ2OS41Mzk1ODExNTUxMTUsMzA3LjQzNjM4NTM1MTEzNTc1TDQ2Ny45MjIyOTg2NjE4MjQzNiwzMDUuMjM3OTYzNzI0Mjk2MTVMNDY3LjU2MjQ1Njc0MDgyOTI1LDI5OC4xOTgyOTc1Mzk4NUw0NjYuNTgxODcwNTU3MjUxOSwyOTcuNTE1MjY4NjU3MDYwOEw0NjYuNzE3Nzg5ODY4MzYyNzMsMjkwLjg5MDE2OTA5OTQ3MTczTDQ2OC4zNDAwMDYxMTg5NDU2LDI4OS40MjY2MTE0ODE4MTg5NUw0NjYuOTM0NzU3MDA0MDk4MDYsMjg1LjA0NzUxODAzMjMxMTNMNDY1LjQ1OTk4MzY2NDUyNDAzLDI4My44NjMwMzA5MTI2MTg4TDQ2Mi44Nzc2MzE0OTk3NzI0LDI3Ni44MjI0NDA4MDE5NzE3TDQ1OS4wMTg1MDI1MTg4ODk5MywyNjIuMDk0ODc5MzgwOTAwODZMNDU1LjQ2NTEzODE4MDI0NTQsMjQ5LjYyOTg4NDQ4MjUyODJMNDcwLjgwOTM4NDU2MjI2OTMsMjQ3Ljc1ODgzODk4NzI2NzMyTDQ4NC44Mzg4NjAyNTY5OTA0LDI0NS43NzU0NjU2NzU5MDAzTDQ4Mi43MTg1ODE0MjY2ODcsMjQ5LjM0NzI5NjY4MjgyMTI1TDQ4Mi45MTg5MTg0OTcyNDksMjUwLjg0MjQ1NDc2NzI4MzEzTDQ4Ny4xODUyMjc2MjYxNjEsMjUzLjM4Nzc5MTAwNDg5MDhMNDg4Ljg4NzEyNTAwNjQ5OTksMjUzLjA3MjQyMDI0ODIzMzA3TDQ5MS4yODQyMzQ1MDI2OTIzNiwyNTcuNzA1NzQyMTA2MTU2OUw0OTMuMzgzMDI2MzE0MDQ4NywyNjAuMTMzNTkxOTI2MjEyMjZMNDk2LjY3MDgyODgxNjEzNTY3LDI2MS41ODUzOTk5MDkyMzA2TDQ5OC44ODk3NTgwOTgzODYsMjY0LjcwODc3MjgzNzQ3MzY1TDUwMi42ODg5Nzc2NzUyNjU2LDI2Ni40NzE1MjM4NTUzNDgzTDUwNS4xMDc3NzMwMDg5NDYyNSwyNzAuNzU3NDczODc4Mzc4MzNMNTA4LjQwMzU3OTkxOTg3NTgsMjcxLjkzODkxNDE3MDYzNjVMNTEwLjY5MDkwODc3NTY4MTEsMjc4LjA3ODYyMjAwODQ3MjZMNTEzLjA2MjQwODMzODk0NzgsMjc4LjkxMTM0MTk5NjgwNjlMNTE0Ljg0NTIxMjcxNDI1NjEsMjgxLjY3NjM3NDkwMDUyNTg0TDUxNS4zMTQzMTQ5Njg4MzY3LDI4NC42NDcxMzI0NzkzMjA3Nkw1MTguMTI5NDUwMzE0Mzg1LDI4NS4zMjEwNjgyMjYzMDc5NEw1MTkuMDg1NDgyNDkxMjg0MiwyODUuNjQ4MzMwOTU1MjUyODVMNTE2LjQwOTk0MjU0MzE5ODMsMjg4LjcxOTEyNjQwNzU5MTI2TDUxNi4xMTczMzc5MTg4Njc1LDI5Mi42MDgyMTI1NTc3MzgzTDUxMy45OTQ2MzEzNDY1Njg5LDI5OS40MTg5NDI5NDgxMzIwNFpcXFwiPjwvcGF0aD48dGV4dCBjbGFzcz1cXFwic3RhdGVfX2xhYmVsXFxcIiB4PVxcXCI0ODUuNzcxMTM4ODE3MzUwMTZcXFwiIHk9XFxcIjI4MC45OTIzMjA5NDYzMDFcXFwiIGR4PVxcXCIwXFxcIiBkeT1cXFwiMFxcXCI+R0E8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUgc3RhdGUtSElcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGNsYXNzPVxcXCJzdGF0ZV9fcGF0aFxcXCIgZD1cXFwiTTE1OS42NDExNjg4OTcwNTk3NCwzNDYuMjUwMTI5MDQ3NzQwNzZMMTYwLjYyODQ2OTQ3Mzg1OTI0LDM0Ni4zMzc0MTE3MDk4MDAzNEwxNjAuNTk0NDk4MzI3NjEwODYsMzUwLjAwNDM2NjgzNDgxMTU1TDE1OS41OTM1MDI2NjMxNDA2NCwzNTEuMjQzOTk5NDkzNDk0ODdMMTU2LjYyOTI5NzI4ODQwNzQ2LDM1MC44MjQwOTU1MjUwNjc1TDE1NC42NzU0NzE0NzkzMzg5NywzNDguNTM5NzI4ODU2NDY0NzZMMTU3LjY2NTEzMDczMjU2MjM1LDM0Ni4yMzA3MTI5NTQ1MjY5NVpNMTc4LjM3ODQ4MzQyOTE1ODUsMzU0LjgwOTU1MTk1ODExMzA1TDE3OS4zNzMyMDU3NzM1Nzc0NCwzNTMuNzE5OTc2OTUwNDgzNkwxODEuMzQxMzQ0MjEzMDQ3MzQsMzU3LjMyMTMzNDU5NDU5NjA3TDE4My44MTEwNDY3MjMzMzk2LDM2MC4zNzc5MDQwMzI0MTM2NUwxNzkuMzUwNzkyNTY4NDAwNCwzNTkuNDI0ODI1MzQxMzExMkwxNzcuODYxMTcxMjYzODgzODUsMzU5Ljg4NzgyNzMzMDQ3MDU0TDE3NC45MDY3MjkwMzk2MTE3MiwzNTUuODA4OTQ0NzcyOTI0Wk0xODkuMjY2NDY4MTAzNDg2MzcsMzYwLjg1NzQ3NjA3MTAwMkwxOTcuMjA1MDQzNjAxOTEyMywzNjIuMjY1NDI2NjkwODM2MjVMMTk0LjIyNzg0MDYyOTIyNjI4LDM2My41MTkzNDk0NDA4NTk0NkwxODguMjcxODIzMTA3MzI5ODgsMzYyLjY1NTM1ODcyODEyNDY3Wk0xOTMuMjM0OTczOTMyODI3ODQsMzY1LjMxOTQ3MzM0MDM0MTYzTDE5NS43MTkwNzYxNzM1NDA5LDM2Ni4yNTc5NDAxNTkzNTc3NkwxOTMuMjM0OTc5NjAyMjg2MDcsMzY3Ljc0NjQyMjYzODAwNjVaTTE5OC4xOTk4NzI4ODIxMzczOCwzNjMuOTA3MjQ2NTM5Njc4TDE5OS42OTI2MzE3NzIwMTA5NywzNjUuNzA0OTQwMTgxMjM5NzVMMjAyLjY3MDk5MzA3NzM0MiwzNjQuOTE1NTE3MjYzMjAzMDdMMjA3LjE0OTU5NzA5OTkxNzQ2LDM2Ny4xNzA5MzEzMzk1MjQ3N0wyMDYuNjU5Nzc3NjYxNTgxMjIsMzY5LjA1MjI3ODkxODMwNDg2TDIwMS4xOTMwNzEyMjg3NzgyOCwzNzAuMjQzNzQ5NDIyMzA2N0wyMDAuNjg5NDE3MTYxODI5NjIsMzY3LjI2ODc0NTIyNDE1NDJMMTk3LjcwNjI1NjI4NDA2MDIzLDM2Ni4xNzc2OTgwMDkzNTM4Wk0yMDkuNjcxNzQyMDcyMzk3NiwzNzUuMjMwMjQ4MTk2NTY1NEwyMTIuNjcwMDkyNjMyOTM1NCwzNzcuMDE4NTg3NTg5MzU4OEwyMTYuNjY1MDA4NTA4NDE5NjIsMzc4LjI0OTM3MzA4MDkyNjdMMjE5LjE3NDcwNzgzNDg1Mjk0LDM4MC41ODU1NDQ4MjI3MjUyTDIxOS4xOTA3NTUyNjc0ODUxNCwzODIuNzgyODg3NTgxNTUyTDIyMy4yMDcwMTA0NTQ0ODEzMiwzODUuNDk5MTIwMjY0MDAwNTdMMjIxLjcyOTE5MDA1MzE3OTE3LDM4OC4xMDMwNDQ0ODY5Mjk4M0wyMTcuMjM5MTg5MTY4NjE0NSwzODkuNDcxNjYyNTE0NjQ3MDVMMjEzLjI1MDAyMDA1NzE5MzUyLDM5MS41MzkzMDkyNTYwMzA4M0wyMTEuNzY0ODQxNDQ1MjY3OTYsMzk0LjYxMjg0Mjg2MzY5MjlMMjA4LjI0OTYyMDM3NzY2MDkzLDM5Mi4zNDk4MDA3MjA5MDY5TDIwOC4yMzEwNzc4NDk3MTkwNywzODcuOTQ5ODYyNjUwMDExNUwyMDYuMjA5ODE4MTE2MzY3MTMsMzgxLjk5MDYzNDcyMzA5ODZMMjA5LjE5MTI4ODM4NzU0MDksMzc5LjE1MzcyNjc5NzQwMjk1TDIwOC4xNzk4MTQ3MjI5OTIyLDM3NS43ODU2ODYxMzUwMzAyWlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWwgaW52ZXJ0XFxcIiB4PVxcXCIyMDMuMjQ5Nzk3MDMyMzkxMVxcXCIgeT1cXFwiMzc1Ljk0NjYyNzg0MDIwOTRcXFwiIGR4PVxcXCItMiVcXFwiIGR5PVxcXCIyJVxcXCI+SEk8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUgc3RhdGUtSUxcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGNsYXNzPVxcXCJzdGF0ZV9fcGF0aFxcXCIgZD1cXFwiTTQyMi45MDY4OTEwMzM4MzU5LDIxMC43ODUzNzU2OTAzMTE0TDQyMS44MDE1Mzk1NjEyMjAzNSwyMTIuNDczMzAzOTY1NTkxOThMNDIyLjkwNTExNzY3MzQzOSwyMTUuNzMyNjE2NTEzMjA0MUw0MTguNDI1NDk3MzgyMzMxNTcsMjE3LjA1NDc2MDAxODQ2NjZMNDE5LjIwMDIzNjIyODYwNzQsMjIxLjUzOTQ2NzgxNDY0OTAyTDQxNy45ODg4OTAyNzYyOTY5LDIyMi4xMTM4OTI3NjIwMTQ3Nkw0MTMuMjMwMzE0MzMwOTE5MywyMjAuMDg1NzYyMDU1ODQwNEw0MTAuNTM2NTYxODczODY1NSwyMjMuMzExOTU4NjUwOTMyM0w0MTEuNDIyMDc1ODQ0NjA1NDQsMjIzLjk2NTQ3ODI1OTU5NTQ0TDQwNy4wMjExODg5NjUyMDUsMjIwLjkyODY5NTc5NDQ0MDVMNDA3LjY2NTc3MzI0NTkxMTQ1LDIxOC4xNzQzNzQ4Mzg2OTA2TDQwNi4yOTYxNzg3NDk0ODI3LDIxNi40MzU2NDUyNzY2NjE2TDQwNi4wOTU1ODQyMDQzNzk1LDIxMy41MDA0OTQzOTM5NjE3M0w0MDAuOTc0NjE2MzA2NzE3MDUsMjExLjI4ODgxMDcxNzU1NTc1TDQwMC44ODg1NjI3MzAxNTA4LDIwOS45Mzk4MDEyMzEzMTE5TDM5Ny40ODI2MDg5MDQ1MDIzLDIwOC4zMTk1MjM1NTc5NTIyN0wzOTUuNjIxMzE0MDQ1NDI2MywyMDQuNzY2OTg3NTcxNjM4NzdMMzk3LjgxMTk2ODAxMzE5MTg2LDIwMC4yNTM2NTA4NzY0NTI5OEwzOTguMDE4NzY5NzkxNDQ5MiwxOTYuOTc0OTA5Njk2MjYyNTZMMzkzLjg1MjAxMDc2NjA0NDQsMTk1LjU1MjM0MjgwODc1MDg0TDM5Mi43MDk2MTc2OTI4MzI4LDE5Ni45NzE4NTcwNTM5Mjk0TDM5MS4zODIzODUzMjM2MDg5LDE5NS4xMzU2MTg0ODk3NzI1OEwzOTEuMjEzOTg3NzkzODQ1MiwxOTIuMTE5Mzg4ODg0OTNMMzgzLjEzMzE0NDIzNjE4Mzc0LDE4NC42NjE3MjQ5NDc2ODAzNEwzODEuNzMwMTY1OTUyMzQ4NywxODAuNTkyMDQ2NTk2MzQ5M0wzODEuNTE1MjkzMDQxODY5OCwxNzYuMDY4MzM2MDExNjkyNUwzODIuMjYzNTk3NjM0NTgxMiwxNzQuOTk4NTgxNDI0MTEzTDM4Mi44OTM2NjMyMTAzMjExNywxNzEuNTQ4MzExMzE0NDY5NTJMMzg1LjI0MDk2NzY2MTI5NzEzLDE3MC43MTQ4OTA1ODQ0OTM4TDM4NS41MDI3NzU0NDA5MjMzNiwxNjguMDc3MjQ4MzQwNDYyNTdMMzg3LjAyMzU4NDcwMTk2NjQ2LDE2Ni44MDQ4MDY5MzM3NzQ3OEwzODYuODYzMzcwOTY4MDk4OCwxNjMuNzkyMDcyODcwMDQ1OUwzODUuMjExOTM1Nzk4OTgwMSwxNjIuNDQ3ODAwNTYwNzk4NDRMMzg1LjQ1MzIxMDU3MzgwNDI2LDE1OS40OTQ2NjgwOTIxNzU2M0wzODkuNzMzMzI5MzU5ODg1LDE1OC41NDc3MzE2NzUzNDI4TDM5My4xNTE1Mjk3OTIwODY3NiwxNTYuNDQyMTY5MjU1ODAxNjdMMzk0Ljg3MDkyNjU0NTI2NzgsMTUyLjQ0MzY2Mjg0OTkwNjhMMzk0LjYyMjU5NzY2MTg5NzUsMTQ4LjQwNjc5MzIzNDEzNzI0TDM5MS44MDg5OTUxMTY2Nzk0LDE0Ni45ODc2MDgwODc5OTcyN0wzODkuMjUyMDY2MjQzMTM3OSwxNDMuMDg2MTU4NzAzOTM4ODVMNDA3LjQyMzU3MzM1NDU4NzcsMTQyLjA1NDgwNjQ5NjE1MDVMNDE5Ljc3NjE5NTE1NTA5NTkzLDE0MS4wNjA0ODE3NzAxMzk4Nkw0MTkuNzIzOTA5Njk1Mjc0NjQsMTQ0Ljk2MzI5NDgzMDgzNTI1TDQyMS40NzM5MzgzMzU2MjI2LDE0Ny4xMTkwNzc1OTQ1NDU2Mkw0MjMuNTEyNzY2NzMxOTkzNiwxNTIuNDMyNzIzODI5MDYyOThMNDI2LjY0NzQ2MTI5NjgyMDYsMTg3LjU1NzU4NTA2NTc4NTAyTDQyNS43MzcyMzA5NTIwOTczLDE5MS4wNjk5Njk0MzAwNDY3NEw0MjcuNTYxNzg2ODk2NTEzNCwxOTMuMjIyNDIwMzg0NzU4OTVMNDI3LjkwMjQ1MjQ2NjE3OTQsMTk3LjAyMzQyOTczNDQwMzNMNDI1LjM1NjQ1ODIyODU5MDU1LDIwMC43NjAyNTcyOTIwMDA4TDQyMy43MzIyMzIzNTEzMjk0NiwyMDUuODQ3OTY5MDQzMjM0NTdMNDIyLjYwNzY3MzUyMjAwMDI1LDIwNy4yMTk3NDUyMjA5MTExNFpcXFwiPjwvcGF0aD48dGV4dCBjbGFzcz1cXFwic3RhdGVfX2xhYmVsXFxcIiB4PVxcXCI0MDcuMjY0OTQ4NDMwNjI0N1xcXCIgeT1cXFwiMTc4LjYzNjI0NDQ0NTcyODVcXFwiIGR4PVxcXCIwXFxcIiBkeT1cXFwiMFxcXCI+SUw8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUgc3RhdGUtS1NcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGNsYXNzPVxcXCJzdGF0ZV9fcGF0aFxcXCIgZD1cXFwiTTM0Ny40OTgyMTE1NTg5ODQ3NCwyMjYuNTA5MTUxMTQ3MjcwMjVMMzE0LjQ2NjA2ODg4MDg5MzI2LDIyNi40OTg4MDkyMDE3NzY0NUwyOTAuNjQzMzAwMTE3MDE5NjMsMjI1Ljc5OTg2MDUyMDY5MTZMMjYwLjk4NTM0ODA4NzA0ODg2LDIyNC40Njk5NTQ2OTgyMzU2TDI2My44MzQwNDY3NTY0NjIxLDE3OS43MjE2NDkxOTYyNDM2N0wyODkuODc5NjI2MzA5NTE0OCwxODEuMDU4OTYyMTI1NTg0NDZMMzA5LjEzMDE5Nzc3NTY0MSwxODEuNjM1OTAyMzU3MDAxTDMzOS4yMjE0NDQ5OTkyMzgsMTgxLjgzODUyOTg5MDU1NzU0TDM0MC44NDI2ODcxNDA0MzI3NiwxODMuNjUzMDA3ODU5Mzc5NEwzNDMuMjUwNTc4NzkwMjg0OSwxODMuMzEwODY3MjM0Nzc5MzhMMzQxLjI5MjczNDA2Nzc4OTIsMTg4LjgxNTAzNzE4MDE3MTg4TDM0My43NDQ0MjcxMTUxMTc5NiwxOTEuMjUzNjI1NTQxODg4MzdMMzQ0LjU4NDM5Nzc3MzA2MTk0LDE5My43MDgwMTU5MzAwMTkyTDM0Ny4wMzM3MjA2NzMzOTczLDE5NC43MDg1NTg3Mjg2MDc5NVpcXFwiPjwvcGF0aD48dGV4dCBjbGFzcz1cXFwic3RhdGVfX2xhYmVsXFxcIiB4PVxcXCIzMDQuMTc5MjA1NjQ2MTE0MVxcXCIgeT1cXFwiMjAzLjk4MjY3ODEzMjUxNzcyXFxcIiBkeD1cXFwiMFxcXCIgZHk9XFxcIjBcXFwiPktTPC90ZXh0PlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLUtZXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk00NzUuMzgwNjc0MTA0MDQyMjcsMjIzLjA2ODY5NDY5ODMxODE1TDQ2OC4zMTE3MjA1NjUxMDQzNCwyMjQuMTI4NjE3MTk3MzY5NzVMNDU2LjE1MTQyOTYzNTg4MTY0LDIyNS4wODg3MTk0OTE0NDMxNkw0NDkuNDc2NjI2NDM3OTkzNzMsMjI1LjkwMTg2NDUxNDM0MzA2TDQ0Mi4zMTQ5MTg0ODUzOTIsMjI2LjA4Mzk0NjkxNzIzNjYzTDQyNi40NTYzNDc4NzM5ODI1LDIyNy45NTg4MDgyNDE3NTY4Nkw0MjMuODc4MDQ3NDU2NzMzNjcsMjI3LjM3OTMzNTcwMzI1MTRMNDI0LjUyOTEzMDUzODM4NzcsMjMwLjExNjgxOTc5ODAwNjg3TDQwOC41ODA1MjgyNzQ5MTQzLDIzMS4zMzk5OTYwNzAzMzg2Nkw0MDguODY3NDkwNTE4MDQ0MDYsMjI5LjQwNzU2Mzk1MzYyN0w0MTAuOTg2MDc5Nzk4MDM1NywyMjkuNTc2MzIwODMxODQ2MzdMNDExLjQyMjA3NTg0NDYwNTQ0LDIyMy45NjU0NzgyNTk1OTU0NEw0MTAuNTM2NTYxODczODY1NSwyMjMuMzExOTU4NjUwOTMyM0w0MTMuMjMwMzE0MzMwOTE5MywyMjAuMDg1NzYyMDU1ODQwNEw0MTcuOTg4ODkwMjc2Mjk2OSwyMjIuMTEzODkyNzYyMDE0NzZMNDE5LjIwMDIzNjIyODYwNzQsMjIxLjUzOTQ2NzgxNDY0OTAyTDQxOC40MjU0OTczODIzMzE1NywyMTcuMDU0NzYwMDE4NDY2Nkw0MjIuOTA1MTE3NjczNDM5LDIxNS43MzI2MTY1MTMyMDQxTDQyMS44MDE1Mzk1NjEyMjAzNSwyMTIuNDczMzAzOTY1NTkxOThMNDIyLjkwNjg5MTAzMzgzNTksMjEwLjc4NTM3NTY5MDMxMTRMNDI0LjAwMTc5NDE4NTA5MDI2LDIwOS4wMTcxMTIxMjY3MzQ1Nkw0MjguMTkzNDczMTE5MjIxMjcsMjA5LjUzMDU2Mjc2MjY2NjdMNDI3LjYyNzU5NjI1MjY0NiwyMDcuODI0NTUxODg2Mjg0MzNMNDM0LjA0NTE5MDcxOTU0MDQ3LDIwOS45NTMxMjIxMjA3OTU0Nkw0MzQuMjkyMzE5ODYzNDc2MzQsMjA4LjE3MjY5ODUzMzgwNDdMNDM3LjA1NDczMzM0NjMzOTg0LDIwNi43MDk1NjAyNDQ5NDA4TDQzNy41OTY2ODg3MTg5MjE1LDIwOC4wMTQ5MDc0MzczNjc3TDQ0MC40MjY1MDM3MTg5NDQ1LDIwNy4yNTU0NDg2MzAwNTdMNDQwLjUzNDY1MjEyMDU4ODEzLDIwNC4yMDc4MDc4Nzc0MzEzOEw0NDMuOTkyMDQ5NTE1ODM5MzcsMjA1LjYxMjg4MTExMDg5MjU0TDQ0Ni44NjMxMDI3ODg5MTIwNCwyMDUuMzExMjI5OTk4MTUyMDRMNDQ3LjY1OTY3MzYwOTE3MDYsMjAxLjE0NzY1NjgwOTU0MzVMNDUxLjc1NTAwMDMxMjMzMTMsMTk3LjA5OTEyMjAwNTExOTVMNDUxLjAzOTk3OTE4NzMwMTM2LDE5NC4zNzg4MTE4MzExMTYyTDQ1My45MjYzNTQxNzU1OTE3LDE5NC40NTM1NDQ1NTE3NDE2M0w0NTguMjIzMTI4ODI0MDczNTcsMTkyLjUxMzcxNjgwNDczMjJMNDU3LjY2MjkyMTU3MzkxMDcsMTg3Ljc3NjU5NTU0MzgyMDI0TDQ2Mi4xMjg5ODk2MjQxMjczNywxODcuNDc5MjQ5MDgzMjU3NjNMNDY0LjY0NjA0NTgwNTIzNjgsMTkxLjI1MzkzNDM5Njc5MDJMNDcxLjc3MjI3NTE5NjYxNjUzLDE5Mi4yNjc4ODg2NTUyNzcyNkw0NzcuNTYwNzM3MjMyMzY3NywxOTIuMzc2ODc1NDg4MTU5Nkw0ODAuMTQ0OTI4Nzk1Njg4NjYsMTkwLjE3NTI1NTQyMTA1NzVMNDgwLjkyMjQ2MjkwNzE3NjA1LDE5Mi43OTYzNzY0Njg4MzE2OEw0ODQuMDYxNDcyNTIzNDI3NSwxOTQuNTIyNTg1NzY1NzQ2MDRMNDg0LjU1MzU4Mzc2NTE0NywxOTcuOTg2Mzc2NzIxMzQ2MTJMNDg2LjM2MTcwMDUwODIxMDMzLDIwMS45MDUwNjExMzY5NDY5OEw0ODguOTA4MDQwODAzMDgzMSwyMDUuMDcyNzE3NzMzNTE5ODhMNDkyLjkwMTA4MjE0MjI0NDQsMjA2LjU3NTcwMjE0MTIxNTc0TDQ4OS4zNjM4NDA1MzU5MTg1LDIxMS4xMTI3MjUxNjYyOTA2TDQ4NS4xMzcxNzQxMTUwMTE3LDIxMy45NjQ0MjU4NjM5NTE2NUw0ODMuOTc2MDg5MTI5MzUyMywyMTcuNzM5MTY2OTU3MTI4NzZMNDgxLjU0MDgwODYyNTcyNCwyMTguNDc2MTAzMDQzNTkzMThMNDgxLjM1MTE5NTY0MzA4NTM2LDIyMC4xODY5NDg4NTYzNjUzNVpNNDA3Ljc0MDY1ODYzNDE4OCwyMzEuMzk4MDMxOTc2MDQzMTdMNDA2LjkwMDc0NTM5NDkyNTYsMjMxLjQ1NTQzMzQ1OTI2ODA4TDQwNy43NDA2NTg2MzQxODgsMjMxLjM5ODAzMTk3NjA0MzE3WlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjQ1NC44MzEyOTgxNjkwODI4NlxcXCIgeT1cXFwiMjExLjY3NzI1MzQ4MjM2MjAzXFxcIiBkeD1cXFwiMFxcXCIgZHk9XFxcIjBcXFwiPktZPC90ZXh0PlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLUxBXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk0zNTkuMTczNjUyMDgwNjk5NDcsMzM0LjQ1NjE4NTEwMTE1ODg0TDM1Ny43Njc4NTg2OTc4NTg4NiwzMzMuMTQ3OTgxNzY0MTg1M0wzNjAuNDIzMjg1NDk0NjQ5OCwzMjkuMTQ1NDk0Mjc5MDc2MUwzNjAuMjMxNzI3MTYwNDEyNzMsMzIxLjE4MTE0OTA2NTIzODA2TDM2MS45Njg0NDE2NjUzNzQ5LDMxOC4wNTg1OTk5OTMyMTEzTDM2Mi4yNzM2NDUwMzczNzIsMzEyLjM2MjIzNTAzNjgwMzA0TDM2MC40MzA5ODY5MTk5MjMxNiwzMTAuNzQ4NzYxMTgwMDE4MDVMMzU5LjkwNTA0OTA1MjMyNzMsMzA3LjU5ODk4MjM3NDU2MDc2TDM1OC41NDQzNjM1NDc4ODA4MywzMDYuOTk4MzAxNzYxMDQwODZMMzU4LjQ2MTAxODcyOTMxNzIzLDMwMy4zNjE2OTkxNzYwOTk1TDM1NS43MTc3Njg4NjQ4NjU5LDMwMC40OTM4MTkwNTkyMDEyNkwzNTUuNDA1NTEzNjQ1NjQ2MywyODUuMzczMzQ2OTUwNjk5OEwzNzcuODYyODc0MzQ3MzU1OCwyODQuODUxNjk1NDc1Mzk4OUwzOTAuNjI3NzQ4NTAzMDg3NDUsMjg0LjM1MTI2NTgyNjMxOTZMMzkyLjAzNDAyMTYxMTE0MiwyODUuOTQ0OTYzMzIwMzgwN0wzOTAuOTE3NzI2MTMwNTMxOTUsMjkwLjA0NzUzMDkwOTUxMDFMMzkzLjEyMzkyNTcxNTI5MjY3LDI4OS44NTM4MzAxMDA2ODk0NEwzOTEuNDYxMjE0MDg2OTQ0NywyOTIuMDAyMDMxODgwMzYxMzZMMzk0LjIyODE1NDA2MzAwMDQzLDI5My45MTgyNjQ3NTk0NzM3TDM5MS4yODgwMTM0MDA1NDcyLDI5Ny4zMjEzODMyNTk4NjY5TDM5My4wODgwMzI1NTU2MTk0LDI5Ny42MjQ1ODU0NTc4MzE4N0wzOTEuMDEwODYxMTc5NzkzLDMwMC42NjI4MTU2ODM3MTg5TDM4OS4yNjEyMjMzMDA2MDEsMzAxLjQ2MjcxMzAyOTkyMDFMMzg4LjU4MTg0NzQ1ODc0MzUsMzA1LjkyOTUxOTAyMTQzNDVMMzg3LjI1MjQxMTA5MDAzNzg3LDMwNi4zMDk1MTQyMDE3OTY4NEwzODcuNDM0NzA0NjAwMzAyODQsMzEwLjE3ODE2MTY2Mjk5Njk2TDM4Ni4xOTgwODI1MDEzMTcsMzEyLjY4NzY3MTMwMzc5OTA1TDM4OC45Nzc5Njk2NTQ0NjQ4LDMxNC4xMzgyMjQyNjkyOTYxTDQxMC4xNjg3NDAyNzk2Njc5LDMxMi44NDc5MjQ0MjI0OTAwNUw0MDkuMDE2MTA1NzU3NzEsMzE2LjAwOTczMTM1ODMwMzA0TDQwOS43MTQ5MDc1OTM0NzQ4LDMxOS43NjA5ODAzOTA1NTAxTDQxMS4xMzc1OTA4NDU3OTE4NiwzMjAuNjE2MTk2NTA0NTA0NEw0MTIuMjk4NzM0NTU5OTg3NTcsMzI0LjMzMzM3MDIzODg5OTdMNDEzLjcwMTQ1NjkzMTc3OTI2LDMyNC43OTE1NzY4MDEyMjE1NEw0MDkuMzE2MjgzMDkyMzcwNiwzMjcuNjkwNDI2NDMyOTY3Nkw0MTMuMDg4NjY0MjkyNDE1NiwzMjkuMjU3OTE4NjQwMjczNDNMNDEyLjk2NjQzMDI3MDM4MzU3LDMyNy40NDkyNzY0MTEzNjYxTDQxNy4yMjI2NTgxOTE2MjAyNywzMjkuMjg3NDQxODg4OTgzMUw0MTUuNTU4NzI3MjEyODUxMSwzMzEuNzczNzk2NTc3NjkxNkw0MTIuMzAwOTE5MDcwNTIyNjQsMzMxLjIwNjIwMjA4ODU5NzVMNDEyLjA3ODI1OTA3NTAzODksMzM0Ljc3MzI1NTE1MzY3NjRMNDIxLjEwOTEzNzA2NTM1MDQsMzM4LjQwMTc2NjIxODE2N0w0MTkuNDk5Njc5MjIwNzExNzYsMzQxLjc1MzE5NTM4MTcyOTZMNDE1LjEyODgwNjIyNjU1OTk2LDMzOC45MDYzODc0MTk1NDU3NUw0MTAuNDM2MDM5NzY4NjE4MywzMzcuODc5MTE3ODM3NTc0OTRMNDEwLjI3MjgyMzExOTk3MTc1LDMzNS4zNjUzMDUyNjQ4MjAzNEw0MDcuOTkxNDgxNTU3MTQyNTUsMzM1Ljc0Nzk1NDk1NzA3NUw0MDguMjE5MjUzNzEwNTU3NiwzMzkuMzYxNTYyMjkzOTIwNDNMNDA2LjQ3NzcyOTc4ODUzMzUsMzQxLjEyNTUwNTcwNjk4NzdMNDA0LjQ5MDcxNzYzMjcxNTc2LDMzOC44ODEzMzA5MTE1MTYzM0w0MDAuNzk3MTE1Njc1ODk2NzUsMzM4LjkzOTY3NDEwMjc0Nzg2TDQwMC4wMDQwMzUyNzMzNzE0LDM0MS4yNzAxMzYwMjY5MjQ4TDM5Ny43NjA2OTkzMjk5NjI4LDM0Mi41NzU4OTg3OTM2MTk2TDM5Ni43NDg0NTYyMDk3NjYxLDM0MC45NzYwNDU2Mzg4MDMyN0wzOTEuMTAzOTYwOTUxNDAxMiwzMzkuMDU5MjQyMzE3MTI0OEwzOTIuODk4NjU2NjYwNTEzOCwzMzguMDI0MjEwMDgxNTM2MkwzOTEuODkyMTA5NDc2NzM3MjMsMzM2LjM0MDUwMTY4ODk4OTY2TDM4OC42NDE0ODExNDEwOTgyLDMzNS43ODg0Njk5NzI5MjQxTDM4Ny4xMjIyMTk1ODQwMDI0NCwzMzIuNzg0MDU4MjU1MzQxNzNMMzg0Ljc4MjM0NTUxNjk1ODg2LDMzMS43ODUyODU3MjA1MDI5TDM4MC4yNzAwMTEzOTgxODIzLDMzMy42MzE2NzQ4NjEwODNMMzgxLjcxNzQwNzM2NjQwMDQ0LDMzNS4zMDY4MDQyMjIyOTUzNEwzNzguNTMzNDMzNTI3NzAwNywzMzYuMjIyNjg5NTM4MjUxMkwzNzIuOTc4MDg5NDAyNDIyNywzMzUuMjQzNTI0ODMxNjIxNjRMMzY3LjM5NzQ3ODQ0MjkzMTk3LDMzMy4wNTc2MjIxODQ0ODYyNkwzNjMuNzMwNTkzOTU4NTk4OSwzMzMuMTYxMDYyNTE2ODgxNDNaTTQxNy41NDQ4OTg2MjI1MDg5LDMyNy4zNjgyMDYxMjAxMzE5TDQxNi4xMjY1NTkwMTAzOTUyLDMyNi43NTc0MTMxOTkyNzYyNEw0MTcuODIwNTE3MjkyMjMxODQsMzI0LjgxOTIyMzIwNDQwMzdaTTM4NS4wMDQ0MDI4NDA3NjIwNSwzMzYuODIxMzk4ODAwOTY1MjZMMzgyLjE4NjQ2NjQ0MDQ2NTEsMzM1LjUyMzc0MzE1NDU5OTQ2TDM4My41MjM2ODc2ODY2MDM4NiwzMzQuNTIxMTA4MTAxODk1NkwzODYuMzMzODQ1OTk5MzUzMjMsMzM1LjY1ODUyODgxNTEwMThaXFxcIj48L3BhdGg+PHRleHQgY2xhc3M9XFxcInN0YXRlX19sYWJlbFxcXCIgeD1cXFwiMzgxLjk0NzE2NTE2Nzk0NDI2XFxcIiB5PVxcXCIzMTMuNjQzNTAyMDA2OTMyN1xcXCIgZHg9XFxcIi0xJVxcXCIgZHk9XFxcIjBcXFwiPkxBPC90ZXh0PlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLU1FXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk01OTguODA4NDExMTk5NzY2NiwxMDAuNjgwNzA0MzU4OTg1NEw1OTQuNjg5NzI1NjgxNjQ1LDk3LjIwNDQ4MjAxNDkxNDQ1TDU5MS4yMzUxNzY2ODkxMDgyLDg0LjM3OTY3NzY4OTM2MTE5TDU4OC42MzYxNTM1NjA2ODM2LDc2LjE2OTUxNjExNjc3MDNMNTg2LjEzNzE2NzIzMTUxNzksNjkuNzM5NDEyNjcyNDQ4MzRMNTg4Ljk1NzYyNDg4MDUxNzQsNzAuMjAzMTU3OTI0MTMwNjZMNTg4LjkzODE2OTA2MzQwNzgsNjUuODgyNDM3NTg4MDU1NUw1OTEuNjUxMjYzODQyMDQ2MSw2MS43OTE5NjA3NDkxMTg5N0w1OTIuMTUwNzkxNjQ4OTkxNSw1OS40NDk1MzEzNzM5MTYzM0w1OTEuMDYwODY4MTk2NjI2OSw1Ni44OTU2MzEwMDg4MTE5Nkw1OTAuOTg1MTUyNjMyMDcwNSw1Mi41MTI3NzcxNTIzMDYxN0w1OTIuMTYxNTEyODkxODExOCw1MS4yODc1MDgxMDkwNDQyMUw1OTEuNzQwODExNjAzODY3OSw0Ny4wODQ4Mzk3MTQ2NjMxOUw1OTUuOTUzNzM5Njc1ODg0NCwzNC4xNTE1MjEzMjA5MDcwMkw1OTcuODMzNzQ2NjMzNDQ1OSwzNC4xNzYwODcyNzI2ODA4OUw1OTguNTU2NDA3Njc0MTgwMywzNi42NTYzNjM0NTQ4MDMzNEw2MDAuMjI3OTcwMTA4MDM0NywzNy4yMjg2ODUyMTAwMzM5N0w2MDYuMDYyMjQ3Njk4MDg1NywzMi44MDA5NDcyMDQwMjM0OUw2MTEuMzg5NDk0NTk2NTQwNywzNS40NDEwMTY3OTk2ODQ2OUw2MTcuMzgyOTQ2MjIzMTQxMyw1NS4wNDI4MDUzODc5MzQ4OUw2MjAuNjI2NzE5OTAzMDA5Myw1NS41Mjc4Nzc5ODA5MTE5N0w2MjIuNDcwNDYyMDA3OTAxOSw2MC4yMzM4MzIwNjM4NDM0NjVMNjI0LjAyNzI0ODQ2OTM0Nyw2MS40ODM3NzA2MjMyNzg3TDYyNS45OTYyMjg3MDY3Mzk0LDYwLjI5MTU4Njc4OTk5MzUyTDYyOS40MDgyNDc1OTQ4Njc2LDY0LjkyMjIxMTUxNzExNzI2TDYyNy4wODQ3NTQ4NjA1MzE4LDY4Ljc5MjYwMzUwNDk5MzRMNjIxLjY0MjE1MDIyNjQ5OTYsNzEuNTQzOTU0Mzg0MDAwODFMNjIwLjI4Mzk4ODk3NDU1ODYsNzQuODQ0NDExNDM2NjUyNDJMNjE5LjM1MjM5MDE4NTgyMDQsNzMuMDYzODM5NjMwMzY2MTVMNjE3LjcwOTk0Mzk2MDMwNzgsNzQuMTM1Mzg1NDYzMDc3MTFMNjE5LjYwNzg4MDk4ODk1NSw3NS4yMTM2MTc4MTI2Nzc4NUw2MTYuNDI0MTg2NTg0NTMxOCw3Ny43MzM5MDU4MjUxMjk4TDYxMi41NDY4Mjk0NDU4NjE2LDc1LjI1NzU4NTA3Mjc1MDY2TDYxMC44NzQzMTA2NjU1NDkzLDc2LjI0MTYyODY2NTU4ODc5TDYxMS4zMzQ3NDgyODE5ODIsODEuODY2Njk0NTM5MzA4MTNMNjA4LjA2ODUwMDMxODEwNzcsODQuMjA4NzM1NjIzOTM5MUw2MDcuODYxNDM3MDI0OTE4Niw4Ni4yNDE0MzQ2MTM4NjE1NEw2MDUuMDI0OTM0NTY5MDY1LDg4Ljc3MzcwMDEyMTcyMDM3TDYwMi40NDQxMTg3NDkwMjIyLDg4LjAyMDkyMjUxNjUyNzg5TDYwMS4xNzE0MDUyODQ5MTU5LDg5LjExNDkwNzM1OTE4OTk0TDYwMS45OTgzMTAxNTc0MDU1LDkyLjA4NjIxMzk2NjU0MzgyTDYwMC4zOTI4ODQ1ODQwNjc3LDkzLjQzNDMzMzc3OTIwMTU1TDYwMC42MTQxMzc3OTk4OTUyLDk1LjY3MTQ1NzE3MzgyMzQ2WlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjYwNC40MjExODczNzI0NTU3XFxcIiB5PVxcXCI2My44NDU1MjYxMTA2ODY0NjRcXFwiIGR4PVxcXCIwXFxcIiBkeT1cXFwiMFxcXCI+TUU8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUgc3RhdGUtTUlcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGNsYXNzPVxcXCJzdGF0ZV9fcGF0aFxcXCIgZD1cXFwiTTQwMy43NjcyOTA1NDUxODQ0NCw1OS4zNDAxOTQ4MTM5NjQyMkw0MDYuNTQ0MzMwMDUxMTMyOSw1OC4zMzkwNTk2MDU2MDY1MUw0MDQuMjM2Nzk3MjcxMDMyMSw2MC43OTE2ODY0MzIwMDEzN0wzOTkuNDU1MzYyODE2MDk3MTQsNjMuODkwOTY4NDQwNjQ2MzZMMzk4Ljk4MTI0ODUwNDMxOTg2LDYyLjI4MDE4NjIzNzM5NDQ0NlpNNDM4LjM4MzExODY1ODk4OTksOTAuNzM1MzEwNTQzOTg1ODZMNDM5LjM5NDU0NTUxNzA5NTMsOTMuMTU3MjgwNzIyMDYxNjFMNDM3Ljk0MDYxNTA1NTQ3OTksOTMuNDc1OTM3ODQxOTIwMlpNNDE4LjY5MDE2ODcwNDQ2MjgsMTAyLjU4ODAyMjQ2MzI2OUw0MTcuMTI5NDQzMTQ0OTk4NiwxMDEuODU1MTQyMDI2MDkyNjFMNDE3LjU4Nzk0NDkwMTczMDMsOTguNTcyMDUxNzcyNDUyMDNMNDE1LjM2OTA0NjAzNDQ0MjY1LDk4Ljc2NTAwODY1NjE5NzY3TDQxNS42ODc2NjYyNTQ4MTUzLDkzLjgzNzk5MzAyOTYzN0w0MTIuMjY0NDA0NzEyOTg5Myw5Mi43ODYwNDIxMjc4MzExNEw0MTIuMTA3OTU1MzU3NTE4OCw5MC45MDQ2NTc3MTAxNTQwOEw0MDcuOTUzOTE4MDcxMzk2LDg5Ljc0MjQ0MTI2Mjg0NzgyTDQwNC42Mzc3MDU2OTcyNzM2NSw4OS43NjIxMDA5MTQ0NjYxNUw0MDEuOTYzNjk4MjU2NTg3OCw4OC40NjI5MzIxMzM3NDk4NkwzOTEuMTY3MTg3NDIzNTA4ODQsODYuMjc2ODQ3MDYzOTIyNjdMMzkwLjI5NzkzMDcxNDk3MTIsODQuMDQ4NjkwNzQ2MzAyNTVMMzg4LjA1MjA0ODA2NzMyMTQ0LDgzLjE2MTEwMTg2MDM5NjEyTDM5Mi4zMDQ3Mzk5ODY5OTcsODEuMDkyNzk2OTMzODE2NDNMMzkzLjk5NzgzMjY5NTE2NDcsNzkuMDk3MjkxNTU3MDE4MTRMMzk4LjMwMjU0ODE5MzIyNyw3OC4xNzc1NjU0NDc2Mjk3Mkw0MDcuNDU1NTkwOTQ1MDI3LDY5LjcxMzQ4MTY2Mzg3ODE2TDQxMC45MzI1OTM3NzUwOTgsNjguMDkzNDYyNzI4Nzk5ODZMNDE0LjI1MTg3MjIzNDIyMDg1LDY4LjkwODgyMzcxNzkyMDU0TDQwOS40NjEwNTY0MjM1NzAxLDcyLjE0MzEzOTQ3ODEzODIxTDQwNy41NzYwODUzMzU3OTkzNSw3NS43NTQzNDg1NDE5MjAwOEw0MDcuNDMyMDEwMjk4NzcwMzYsNzguNTE4Nzk4NDExNzcwNDlMNDA5LjQzOTE2Mjg4NzEyNjcsNzYuMzExODM1MDQzNDAwNzJMNDEzLjA3MjM0NTQxMzI5ODM2LDc2LjI0NDM0NzI0ODEyODk3TDQxNi4xMDc4ODY0NzQyNTM0Niw3Ny42MzMzMjkwOTA3MjY3Nkw0MTguNjQ3NzM3MDU2Mzc1Miw4MS41MDIzMjg0Mzg3MjAwNEw0MjIuNjIxMzcyMTY2ODE2OSw4MC44OTY4MTQ2ODcyNTk3M0w0MjYuMDExNzczMzg2ODc3Miw4MS44MzEwNTUxNDk3NzM3Nkw0MzAuNzkxMDcyOTY1ODc4Nyw3OC4zNTAxMDI0NDAwNzE4NUw0MzcuNjM0NTM2NjExMDU4LDc3LjI5OTczNzUxMDQ4NDNMNDQyLjg5NTI2NzMxOTM1NTg3LDc1LjI3OTUzODgyNTYzMzVMNDQyLjI2MjczNzQzMDkzMDMsNzkuMzAzMDA5NjQ2ODI2MzVMNDQ3LjQ4NzAzMTA0MzY5NDQ2LDc5Ljk1MDIxMzc0MzczODY5TDQ0OS4xMzc3OTMyOTE0Njg3Nyw3OC40MDQzMjgyMzYzNzk1N0w0NTEuNzQwOTc1MzY2OTUzMjUsNzguNjM0ODA1NzkyNTM1ODdMNDUxLjEwMDE0MzQwMTEwNTgsODIuMzU2MDU0MDM1MDA5MzhMNDU1LjE3NTcxMzM0Nzc1NjEsODUuMzI3Mjc3Njc4MTk1MTdMNDUwLjE3MjU5OTcxNDExMjQsODYuODI3MTc2OTIwMzgxMDJMNDQ3LjAzNDIwNTcxNjU1NjcsODUuMzg2MTg3MzI3NDQ3MjZMNDQ3LjAzMzAzNDEzNzA5NzQsODguNDc1MTQ0Njc1Mzg0OTdMNDQzLjgzMjExODExMjE1OTMsODYuNDc2NzU1OTA4MzQ3NEw0MzkuMjkxMjc1MDM4MjAyNyw4NS41NzAzNzk5NjMyNzM0N0w0MzcuMzA3MDkyODg1NDkxLDg3LjY4ODIxNTYxNzQwMTYyTDQzMC43NzA3OTc4MjA2MTI5LDg4Ljg1NTY3MTU0NTEzMzg3TDQzMC4yNjk2MjMyMDcxODA1LDkxLjE5OTkwODQ2NTA1NzY2TDQyOC40ODkyMjcyNzYxNDgwMyw5MS45MzMwNTkxNjIwMDk2MUw0MjUuNzU4MDc2NDE0MzI2Miw5MC41NDIxNTA2MjczNjcyOEw0MjQuMTg1NTM3Mzg3NTA0NSw5My40NjAxNjUxNjA5OTY0NEw0MjMuNTk0NTM0MjIxNDIxNTUsOTEuMTQ1MTk4MTk5OTgyMzZMNDIwLjg1ODAyNTQ5Njc5ODIsOTcuNjQ1Njk4NDc2MzQyMDlMNDE4LjI0OTM5NDAxNDk3MzQ2LDEwMS44MzU4MDM4Njc5Mjk4M1pNNDY3LjgzNTI3NjQ2Mzg5MDY0LDE0Ny4xMTQ0MjI2MjkxNTAzNEw0NTMuMTM4NjMyMDU1ODExOTcsMTQ5LjUxOTEzMjY4NDM1OTJMNDUzLjAyNjgzMjExOTQwNTUsMTQ4LjU3Mzc1MDY3NTE3Mjg1TDQzMS4yMzYwMTk1NTA4OTY0NiwxNTAuOTE3MzMxNDY2NDQyODdMNDMzLjM3NzM5OTc5NzU3NjYzLDE0OC43MTQ5NDA5ODM1ODA5Nkw0MzUuMjUzMjc4Nzg3NzAxODQsMTQzLjk4NDE2Mzg4NTg1NTc2TDQzNi42MDExMDU3NTk2MDE1LDEzOC4xMDk3MjQyOTcxMTY1TDQzNS45ODIyNTczODA2OTQsMTMyLjEyMTczODQ0MzcwMDU2TDQzMS42NzQxMTY1MjI3NzksMTIzLjgwOTMzNTQ3MzQwNjM1TDQzMi41MjU3Mzc3MTA0NDYwNCwxMjAuODYyNDkxOTE5NjkxOTNMNDMxLjQzNzk5MTcwNDQzMjQsMTE3LjYzNTIwOTQzNDQ1NDg1TDQzMy4yMzIwMDM1NDAxMDI2NSwxMTIuODQ3NTQ2OTQyMjM4MThMNDMzLjAwMDc2NDA2NDI1ODc2LDEwNi45MTk2NjcyNDc0ODY4MUw0MzguOTk2NTAxNDgxODg3NjYsOTkuNjk5NTA1MTYxMzk0NDNMNDM5LjI0NDA0NzQ5NTkzNTcsMTA1LjM4MzgxNjE0Njk3ODM1TDQ0MC43MzMzMzQwMTA0NzgxLDEwNS4yMTk2NjA4MTEyNTA4M0w0NDEuNTc3NjU3MjAyOTY5NiwxMDIuNjY1MTc2Nzk2MjI0MzlMNDQxLjAyNDI2MzQ2NTMyNCw5Ny43MzAxNDkyNDM1Mjk4MUw0NDUuNjE1MTc3NjA4NzA1NDQsOTUuMzgwMTkxOTYwMjM3MDhMNDQzLjEwNzAzMjYyMjY5ODQsOTMuMDU1MDMzMzIwNTIxODNMNDQ2LjQwMzAyMzQwMTIxODEsODkuNDIxNjE4MTkwMjA0OThMNDQ5LjkzNzY4NzAyNzUyMzcsOTAuOTc3NjczNTUxNTU1NjVMNDUyLjUzNDg4Njg3NTQzMDMsOTAuODk1MDE0Njk1MzQxNjJMNDUzLjQ5NDE1NjAzMzYxODk0LDkyLjU5OTc0MjYxNzYyOTY2TDQ2MC40NDc5ODAyMjkwMTg0LDk0LjMyMzIyMjY0MTAxNDU4TDQ2My4yNzc2NzUzMjE1MTc2LDk4LjYzNjE2NDI5MzgzOTc4TDQ2MS4zNTU3NTE3MzU5NzIsOTguMzM2NTM5NDk4NTg2MzhMNDYzLjE5MTQwODg2MTExNzIsMTAwLjc5NjA0NTkxNzI4MzY2TDQ2My44ODk4NDEwMjg5NjkxNiwxMDguODI0NDEwMTk1MDI0MDNMNDYyLjEzNTA5MTQxNDg3ODczLDEwOS45MzQyMzYzMTI2MTU1NUw0NjEuMTgwNjM5NzYxODQzMTcsMTE0LjI4MjgxNzkwOTI1MzE0TDQ1OC42OTA1MTI5NzcyMTIwNSwxMTUuNzIwMjE2NjU2NzY2M0w0NTkuMTYxNzQxNjI2ODc0NjMsMTE5LjQwNjE4MDY2NTYwODQyTDQ2MS41NDk3ODc1NjM3OTA4NiwxMjAuMDU1MDUzNDkyNTY3NDhMNDY1LjQxNzkwODkxNjE5NTYsMTE0LjUxODAzMjMzOTQ4MTAxTDQ2OC45MDM3MTUwNjc3MzE0NywxMTIuMDQ3NTE3NDc1NDczNjhMNDcyLjQwMDk4ODMzNzk2OTY0LDExNS4xNDg3OTcxMjU3Mjc0N0w0NzQuOTI3MzQ1OTAwMTQ0OSwxMjQuNzc3NTIzMTE1NzAwMzJMNDc2LjQwNDgwNTQ3MjEwOSwxMjYuOTY1MDA5NDc2NzM1NTNMNDc1LjQ0OTA4NDc1MDMxMTgsMTMzLjkwMzEzOTcwMjI4NDA4TDQ3NC4wMTIxNzA3MDI1OTAyNSwxMzIuMDI1OTMwNzg5OTI1MDRMNDcyLjM5NDM1MDI1NTcwNjcsMTM0LjQxMjQ0NjYwNTA4MTk4TDQ3Mi42OTk4MzQ0NDA2MDEyNSwxMzYuNjEwMzAyNjg5MDc3MTJMNDcwLjI3Nzk0MTY0MTM1NjE2LDEzOC45NDQwMDMzMjE4MjYyNEw0NzAuMzg0MDk3MTg0MDQ5NTUsMTQyLjYxMDQyNTEwMTk5NzE4TDQ2OC42MjAzMDI3Nzc3NywxNDQuMTI4ODUwMzkyMzE4MVpNNDU4LjYxMTk5NTM1MDU5MzUsODYuMDcwMjMxMDgzMzM3OTRMNDU1LjYzMDc2MDU4ODY1MzIsODUuOTgyMzc5NTQyNjQzTDQ1Ny4yMzE3NjUzMjU2ODg5Nyw4NC4wMzA2NTM4OTkzMTQ4N1pcXFwiPjwvcGF0aD48dGV4dCBjbGFzcz1cXFwic3RhdGVfX2xhYmVsXFxcIiB4PVxcXCI0NDIuNTM1ODQ1MzQ4NTY1MjZcXFwiIHk9XFxcIjExMS43NTg1MTYzMjk4ODkwMlxcXCIgZHg9XFxcIjElXFxcIiBkeT1cXFwiMiVcXFwiPk1JPC90ZXh0PlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLU1OXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk0zMjYuNjIzMDQ5MTYxMjg3MjcsMTMwLjA2NDUzODM3MTQxMzk2TDMyNi43NDc2ODA4OTk3MDgsMTAzLjI5OTE2OTAzOTQ3NTcxTDMyNC4xNTgyNDQxMzkxOTg2NCwxMDEuNzA4MjQwMDQ5NjcyMUwzMjIuNzA1NjEyMjU3MDQyMSw5OC4xNTM0MDczNjQzNjc1OEwzMjQuNTYxOTA3MTY0NTM5OTUsOTYuOTg3NDk4MTAwNjg5NjZMMzI1LjY4Njc2MjA0MDI0NzksOTQuMDA1MjYzMzUxMjI2MjlMMzI1LjM1NDA5MTY5MzMwMzI1LDg4LjI2NTU4MTk1Mzg5OTUzTDMyMy4xOTUyMDEzODI3OTk3LDgzLjkzMTQ1Njc0NzI4NjM1TDMyMi45NDkwMDQ3MzYyMjc2Niw3MC41MzAxNDg0NDkxNzAxNkwzMjAuMTczNTQ0MjA1NDQ3OSw2Mi4yMTc3NzE4MTg0NDYxOEwzMjAuMjg0MjMwNzAwNjc0Myw1Mi44NjM2NTQyMjEwOTk3NUwzMTkuMjc1MTA5ODE1OTk1NDUsNDkuMTE2MDU2MzM4Mzk5NEwzMzkuNjQwMjQ3MzkyODExNiw0OS4xNTcwNDQzNDUyOTg1N0wzMzkuNTkxNjIzNDYyMjk1MTYsNDMuNzE4MzMzMjYwMTE0NDlMMzQyLjc0MjcxMzgzOTczNjUsNDQuNDYxMjY5NzQ3NDM0MDJMMzQ0LjI1MjA1OTI4NjU0OTksNTIuNTI4MTA4NTYzNzQyMzFMMzQ4LjUxMjA3ODUxMzI3NjY2LDU0LjE3MjY3ODE2MjMyMzIyTDM1Mi43NTUxNTg3MDQwNzcxMyw1NC4zOTY2Njg0MTkzMDg4N0wzNTIuNzkwODU5OTIwNDQxMiw1NS45NTQ0MjczNTMyNTIwN0wzNTYuMzE3MTQwNjYwNDAyMzQsNTUuNDc3MjIxMTkzNzk3MzlMMzU4Ljc1MDQ0ODY1NDIwMTQsNTQuMDA2MjY1MTc0NzM2OTk2TDM2NS45MTIwMTMwNTI2NjAyLDU2LjU3NTU4MTQyNDAzMDdMMzY3LjEwMTIxNTk4NDQyNDksNTkuODg2NzM5ODE1Mjk2MDk2TDM2OC4wOTAzNjc2ODc0NTE4LDU3Ljg5NzA4MjYxNDQxNzA2TDM3MC4yMTM1NDg3MzQzOTI3LDU3LjczMzQ1NjUxMjMxMjg0TDM3MS4zNTYyMjU4OTg4OTg3LDU5LjU1OTA1NjE2MDM0NDJMMzczLjg2MjU1MjU0NzE5MDMsNTkuOTE3NjEwMjU0MTgwMzJMMzc1LjM5MjU1OTIwMjU3NTMsNjIuMTkxMzMxMDgwNDI1NDdMMzc3Ljg2MTU3MDE5NTgzNTIsNjEuNjAzNjcyMjU1MTI2OThMMzgyLjM0Njk0NDkzNTQ5NjYsNTguNzkyMjg1NjE2NjExNDhMMzgzLjE3NjU5NTYzMzEyNjQsNjAuOTM1MjA1NzE2NjU1MTA1TDM5MC42NTE1NzYwNDE0OTMzLDYwLjY1MDE5MjMzNzM0NzQ1TDM5MS4wNzEyNjAyMDM1NDg4Myw2MS42NDA2NTAxNzE4OTk0NEwzOTUuMzYxNzkwNTA3MzMxOCw2MS42NzE4NDUxNTIxMTA3OUwzOTIuNjMxMTU1NzIxNTQ1MDQsNjMuNjUzNzc1MzU0OTQwMTk0TDM4NC42MDI3ODk2NTczMjQ0LDY3LjI3MjE2MDM1OTI0MzhMMzgwLjE0MTAzMDEyODc1NzYsNzEuMjcyMzkyMzY0Njg3NzlMMzc3Ljc4NDMyNDkyNjg3MzQ3LDc0LjY4Mjc0MjY5NjMxNDc5TDM3MC44MDkxMzUzNDc5OTk4LDgwLjg4MDE5NzU0NTA4NDhMMzcxLjU3NzkzMzMxMzEyMzcsODEuODY5MDA0MTExMDU3MDVMMzY5LjA2NDIwODg5Nzk3MTA3LDgyLjc1NjA2NDUxODQwOTRMMzY5LjM5OTMyNTMxMjU2OCw5MS4zMTA0OTA4NDE5MzIyOEwzNjQuNzI5NzA4OTc1MzMzMSw5NC40NzIxMDA4MzAzODM2MkwzNjMuNDAwOTcyNDU3NjQ0NDYsOTguOTI1ODkxNjcxMDQyTDM2Ni4wNzkzNzk0OTMxNzU5LDEwMS4zNTU5MzI3NzkyNDY4MUwzNjUuMDEwMDE1NjM3MzA4MywxMDIuNjU0MjkzMDUwNzA4NTlMMzY0LjkwMjk2MzIwNDY4NzYsMTEwLjQ2NzE2NDg2NjYyNTAxTDM2Ny4yNjI1MzI5OTg4NDQ2LDExMy41NDI4MDYzNDU1NDIzMkwzNzQuMTY1MTYzMzU4Njk5OTQsMTE2LjY2NzI0NTU2MDQ2MjIyTDM3NC42MzA2ODM3MTYyOTAwNCwxMTguNzAyNjE0MjQxMDIzNzVMMzc5LjY4NDY0NzMwODM5NzQsMTIxLjU1NTg3MjgyMjYxNzk3TDM4MS43NjY5MTMyMDczMDE5LDEyNS4yNTI0NzI5MzExODc2NEwzODIuMzI2MzcwODk1MDI3NTQsMTI4Ljc4NzkxMTg2NzczMzlMMzY4Ljk4MDU4OTM0MjY3NjUsMTI5LjM3Mzg0MjI4MjIwNDQ2TDM1MS40MzA3ODUzODcyODcxLDEyOS44NzU1NDM5NjQ1NjkxNVpcXFwiPjwvcGF0aD48dGV4dCBjbGFzcz1cXFwic3RhdGVfX2xhYmVsXFxcIiB4PVxcXCIzNDguNjU1Mzk3MzMyOTc4OFxcXCIgeT1cXFwiODguOTUyODAwODE2NjY1MzZcXFwiIGR4PVxcXCIwXFxcIiBkeT1cXFwiMFxcXCI+TU48L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUgc3RhdGUtTVNcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGNsYXNzPVxcXCJzdGF0ZV9fcGF0aFxcXCIgZD1cXFwiTTQyNy41ODA1MjI3NjkxOTQ2LDMyMC45MTQyODQ4NTQwODI2N0w0MjYuNzM1Mzg2OTI1NTg4NiwzMjEuNzcyOTkyNzI5MzU3OTVMNDIyLjA5ODgzOTQyNDg4ODMsMzIwLjg2NjE4ODI2MzEzMTQ1TDQxNS44NjY4ODc0OTQ2ODg1LDMyMy4wNjA0NzU4NTU4MTI0TDQxMy43MDE0NTY5MzE3NzkyNiwzMjQuNzkxNTc2ODAxMjIxNTRMNDEyLjI5ODczNDU1OTk4NzU3LDMyNC4zMzMzNzAyMzg4OTk3TDQxMS4xMzc1OTA4NDU3OTE4NiwzMjAuNjE2MTk2NTA0NTA0NEw0MDkuNzE0OTA3NTkzNDc0OCwzMTkuNzYwOTgwMzkwNTUwMUw0MDkuMDE2MTA1NzU3NzEsMzE2LjAwOTczMTM1ODMwMzA0TDQxMC4xNjg3NDAyNzk2Njc5LDMxMi44NDc5MjQ0MjI0OTAwNUwzODguOTc3OTY5NjU0NDY0OCwzMTQuMTM4MjI0MjY5Mjk2MUwzODYuMTk4MDgyNTAxMzE3LDMxMi42ODc2NzEzMDM3OTkwNUwzODcuNDM0NzA0NjAwMzAyODQsMzEwLjE3ODE2MTY2Mjk5Njk2TDM4Ny4yNTI0MTEwOTAwMzc4NywzMDYuMzA5NTE0MjAxNzk2ODRMMzg4LjU4MTg0NzQ1ODc0MzUsMzA1LjkyOTUxOTAyMTQzNDVMMzg5LjI2MTIyMzMwMDYwMSwzMDEuNDYyNzEzMDI5OTIwMUwzOTEuMDEwODYxMTc5NzkzLDMwMC42NjI4MTU2ODM3MTg5TDM5My4wODgwMzI1NTU2MTk0LDI5Ny42MjQ1ODU0NTc4MzE4N0wzOTEuMjg4MDEzNDAwNTQ3MiwyOTcuMzIxMzgzMjU5ODY2OUwzOTQuMjI4MTU0MDYzMDAwNDMsMjkzLjkxODI2NDc1OTQ3MzdMMzkxLjQ2MTIxNDA4Njk0NDcsMjkyLjAwMjAzMTg4MDM2MTM2TDM5My4xMjM5MjU3MTUyOTI2NywyODkuODUzODMwMTAwNjg5NDRMMzkwLjkxNzcyNjEzMDUzMTk1LDI5MC4wNDc1MzA5MDk1MTAxTDM5Mi4wMzQwMjE2MTExNDIsMjg1Ljk0NDk2MzMyMDM4MDdMMzkwLjYyNzc0ODUwMzA4NzQ1LDI4NC4zNTEyNjU4MjYzMTk2TDM5MS40MDk0OTM0Mzg1ODQ2LDI4Mi40MDY3ODE2MDA5OTgwNEwzOTAuNzQ2OTgyMTgyNTgyMywyNzguMDc1Mzg5NzU0ODYwNUwzODkuMzI2OTkzMzQwOTE5NiwyNzYuMDAzODMxMDc3ODA2NDdMMzkwLjUzMTcyNzQxNTc4ODQsMjczLjg3ODE4NzAxOTExNDRMMzkyLjM2MTkxMDk2MTgyNTksMjY3LjE4OTE5MzMyODg4NzE0TDM5Ni45MDY4MzMxOTAzNjIxNCwyNjMuMDQzNDIxODc3MjU3MkwzOTYuMzIxNDMyNjE5ODU5NywyNjAuMzczNjAxNTU0OTAxMzdMMzk4LjI2NTgyNjE5NDEyMzEsMjU2LjY4MjI1MjA1MzA5MTM2TDQwMC4zNTUzOTQ0ODA4MjMxLDI1NS42MDI3MDc2MzUyNjI2OEwzOTkuNDExNTkxNjE5NzA2MywyNTQuMjI3NjkwNTc3NTQ3MDRMNDI0LjY3ODExNDM3MjQxNDYsMjUyLjQyOTAwMzMxMTk1MTNMNDI1LjY1ODkwMDcwMTg2OTI0LDI1My44NjE3ODQyNDQ2NjgxMkw0MjUuODU5MTc3MjE0NjM0MSwyNjEuNDkyNjY0NjUwMDA4TDQyNS4xNzQ2NjMxNzU0MDM3LDI3NC40NDM2NzkxNzE5MDU0TDQyNS4zNjQwNjIxMjk1NjEsMjg3LjcwNTUxMzQxNDU4NUw0MjQuODUyOTExMjAwOTY5MSwyOTIuNDMyODk1MDEyNDY0OUw0MjUuMjEwOTkyMzkzMDA4NywzMDIuNTYzMTIyMzAwMjgwNkw0MjYuOTg4MDUxNDY4ODc1NywzMTMuNTE5MDE2NzQ1NDcxNVpcXFwiPjwvcGF0aD48dGV4dCBjbGFzcz1cXFwic3RhdGVfX2xhYmVsXFxcIiB4PVxcXCI0MDkuMjc3MDg4NDQ4OTE5NjRcXFwiIHk9XFxcIjI4Ny4xNjg1NjEwMzQ2MDU4XFxcIiBkeD1cXFwiMFxcXCIgZHk9XFxcIjBcXFwiPk1TPC90ZXh0PlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLU1PXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk00MDYuOTAwNzQ1Mzk0OTI1NiwyMzEuNDU1NDMzNDU5MjY4MDhMNDA3LjQ3Nzg3ODc5Mjk3NzgsMjMzLjcyNjU4MzY5MTU5MjA1TDQwNS40OTQ4MTg4OTA2MTgyNiwyMzUuNjkyNDY3Nzg3NDg2N0w0MDYuODYxMjk3ODY0MzU5NzYsMjM3LjExNDM1OTAyMDU4NDM1TDQwNS4yODgwNTIyODgxMzQxLDIzOC45NzE3OTc5MzE4MzI0NEwzOTcuNjgwNTg5MzgxOTIyMDYsMjM5LjUyODA1MTE3OTY1MjQ0TDQwMC40MjU0NDIzMDg0NjE2LDIzNS44NTg0ODAwNDc4ODkwM0w0MDEuMTI0NTUwNjEyNjYwNDcsMjMzLjUwNTQ2MzM1NjkxTDM5OS43NTk3OTAyOTgwOTk0LDIzMS45MTc3MjY3MjY3Njc0NkwzNzEuNTkxMzY5ODUwMDEzNywyMzMuMjkzMDI3NjUzMDAzMzhMMzQ3LjYwNjE4ODk2NjMyNjA0LDIzMy45MDE2NDM5MzQxNjgyTDM0Ny40OTgyMTE1NTg5ODQ3NCwyMjYuNTA5MTUxMTQ3MjcwMjVMMzQ3LjAzMzcyMDY3MzM5NzMsMTk0LjcwODU1ODcyODYwNzk1TDM0NC41ODQzOTc3NzMwNjE5NCwxOTMuNzA4MDE1OTMwMDE5MkwzNDMuNzQ0NDI3MTE1MTE3OTYsMTkxLjI1MzYyNTU0MTg4ODM3TDM0MS4yOTI3MzQwNjc3ODkyLDE4OC44MTUwMzcxODAxNzE4OEwzNDMuMjUwNTc4NzkwMjg0OSwxODMuMzEwODY3MjM0Nzc5MzhMMzQwLjg0MjY4NzE0MDQzMjc2LDE4My42NTMwMDc4NTkzNzk0TDMzOS4yMjE0NDQ5OTkyMzgsMTgxLjgzODUyOTg5MDU1NzU0TDMzOC4wMTUyNTQ0NDgyOTI2NCwxODEuNDQ5NDk0NjMzOTM4NTdMMzM3LjE5NTA0MDA3NTI1MjgsMTc4LjE5NjY3NTQwODE3Mjg0TDMzNS4xOTI4NjU5NTA1NzgsMTc3LjQxMTQwODQzMDQ1MTk2TDMzMy45ODM1ODgyMzMwMzc2LDE3My4yMDUwMjU3NDk5MjgxNUwzNDIuMzQyMzkxNjczMjgxMywxNzMuMzA5NjcyNTA5NTI1NzRMMzYxLjgzOTQyOTg0ODU3ODA1LDE3Mi44NDYwMTM3MzkxMzk1TDM3OC41MTg5MTQwOTU4OTYsMTcxLjY3NDExMzAwNjI2MTlMMzgyLjI2MzU5NzYzNDU4MTIsMTc0Ljk5ODU4MTQyNDExM0wzODEuNTE1MjkzMDQxODY5OCwxNzYuMDY4MzM2MDExNjkyNUwzODEuNzMwMTY1OTUyMzQ4NywxODAuNTkyMDQ2NTk2MzQ5M0wzODMuMTMzMTQ0MjM2MTgzNzQsMTg0LjY2MTcyNDk0NzY4MDM0TDM5MS4yMTM5ODc3OTM4NDUyLDE5Mi4xMTkzODg4ODQ5M0wzOTEuMzgyMzg1MzIzNjA4OSwxOTUuMTM1NjE4NDg5NzcyNThMMzkyLjcwOTYxNzY5MjgzMjgsMTk2Ljk3MTg1NzA1MzkyOTRMMzkzLjg1MjAxMDc2NjA0NDQsMTk1LjU1MjM0MjgwODc1MDg0TDM5OC4wMTg3Njk3OTE0NDkyLDE5Ni45NzQ5MDk2OTYyNjI1NkwzOTcuODExOTY4MDEzMTkxODYsMjAwLjI1MzY1MDg3NjQ1Mjk4TDM5NS42MjEzMTQwNDU0MjYzLDIwNC43NjY5ODc1NzE2Mzg3N0wzOTcuNDgyNjA4OTA0NTAyMywyMDguMzE5NTIzNTU3OTUyMjdMNDAwLjg4ODU2MjczMDE1MDgsMjA5LjkzOTgwMTIzMTMxMTlMNDAwLjk3NDYxNjMwNjcxNzA1LDIxMS4yODg4MTA3MTc1NTU3NUw0MDYuMDk1NTg0MjA0Mzc5NSwyMTMuNTAwNDk0MzkzOTYxNzNMNDA2LjI5NjE3ODc0OTQ4MjcsMjE2LjQzNTY0NTI3NjY2MTZMNDA3LjY2NTc3MzI0NTkxMTQ1LDIxOC4xNzQzNzQ4Mzg2OTA2TDQwNy4wMjExODg5NjUyMDUsMjIwLjkyODY5NTc5NDQ0MDVMNDExLjQyMjA3NTg0NDYwNTQ0LDIyMy45NjU0NzgyNTk1OTU0NEw0MTAuOTg2MDc5Nzk4MDM1NywyMjkuNTc2MzIwODMxODQ2MzdMNDA4Ljg2NzQ5MDUxODA0NDA2LDIyOS40MDc1NjM5NTM2MjdMNDA4LjU4MDUyODI3NDkxNDMsMjMxLjMzOTk5NjA3MDMzODY2TDQwNy43NDA2NTg2MzQxODgsMjMxLjM5ODAzMTk3NjA0MzE3WlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjM3MS43OTU3NzUxMTYxMjExNVxcXCIgeT1cXFwiMjA1LjUyODg2OTQwNzIwMDFcXFwiIGR4PVxcXCIwXFxcIiBkeT1cXFwiMFxcXCI+TU88L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUgc3RhdGUtTkNcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGNsYXNzPVxcXCJzdGF0ZV9fcGF0aFxcXCIgZD1cXFwiTTQ5OC4yOTU3OTIxMDE5MjgyLDIxOS45OTU2OTgzODEwNjQwMkw1MTQuNjA0NzUwMjE0NjIwOCwyMTguMTIyNzM1MTQyNDgzNzVMNTQwLjY5MTExNjc5ODM2MzUsMjEzLjQ1MTMxMTk2MDAyNjI2TDU2NS4zOTE4ODQ3NTA1NTcyLDIwOC4yNzEwODA1OTM3MDg0Nkw1NjcuNjgzMzk3Nzc1MzgzNCwyMTIuODk5NzYxMTYwMjczTDU2NS43MTQ0NTA3MTMzMzQ4LDIxMS43NzkwMzYyNzY3MDIzTDU2NC42MTA0NTY4NTYxMTM4LDIxNC42OTcxODU3MjM0NTE5OEw1NTcuNzUyNjU5ODI1ODI3MywyMTkuMTM3ODM4NTU5OTA2NzVMNTY1LjA3NDA0Mzg0MDU5MjksMjE2Ljg3MzYyMDg0NTA5OTAzTDU2Ni4xMzM1MTgxMTM0ODYyLDIyMS44NDc2MTA4MzAxNjcxM0w1NjYuMjAxOTUzNjE2NDEzOSwyMTguMDk1NTU5NjA4MjQzNzhMNTY3LjE3OTMzMjAyMjAzNTMsMjE2LjU4NTY0ODI2ODI4MDEyTDU2OS4yNDAxMzI1NjE0OTEyLDIxOC4wOTIwODY2NDk0MjI0TDU2OS45OTY5MTc0NDY1NzE4LDIyMS41ODY2NzkxNzEzNzEyTDU2OC4wMzE5NzY4Mjg5ODU0LDIyMi41NzkxOTEyMzI3NzY1N0w1NjUuODcyMTA3MTM2MTc2LDIyNi43NzYxNTk1Mzk4OTQ4Mkw1NTYuNzE4MTk0MjQ0MjQ2OSwyMjYuODExMTYzMDY2MTIzNTNMNTYyLjEzOTM1MDY2OTEyNzYsMjI3LjcyMjUzNzU1NDE4MDU4TDU2MS42NDA1NDAzMzM3NDgzLDIzMS42Mzg4NTAzMTMyNjc4OEw1NTkuOTg2NzQ1NzcxNDE2NSwyMzQuMjUwMDI4MjM0OTIwN0w1NjQuNjk0MTYwOTA0MDMyNCwyMzEuNTcwMTQ2ODkxODY1NDJMNTY2LjAzNjAzMjU2MDY5OCwyMzEuNjkzNTQwODcxNTcwOTJMNTY0LjQyMjgyMzAxNzk3NzIsMjM0LjQ2NjY0NDE1MzAzMTMzTDU2My44MzgwMzU4MDk5MTI2LDIzNy45OTQ4NTM1OTgwODEzNkw1NjEuOTM5NDk3NDE2Mzg1OCwyMzcuMzM0MDUxMzYxNzIwMDFMNTU2LjIxMzIyMjM4NjI5MTgsMjM5LjQ3MTgyMDE5NDQzMTNMNTUxLjc3NjQ5NzY3NzkzODcsMjQzLjc1MTE0OTk5OTU5MjAzTDU1MC4wNzY1MjI5MTc1MDk3LDI0Ni4zNDY5MTU1NjY0OTIzM0w1NDkuMDcxMTEzMDczODM0LDI1Mi42MDE2NDA3Nzk2ODA5TDU0Ni4zMjUzMTQ4OTE0NzIzLDI1Mi4xNTY5NDA1ODM0MDkyN0w1NDIuMjE5OTE1NzEyNzQ2OCwyNTMuODk2NzM5NTA5NTQzOTJMNTI2LjA2NzE1OTI3MTk1NzMsMjQyLjM2NTQ2MzE0MzExMDIyTDUxMi44Njk0MzI1NjQ2NDU5LDI0NC4zMzMzMDg5NzQ0MzQ4M0w1MTIuNTI3ODI4NjQxNjIzNCwyNDIuMjE2NzAzOTQyNTg3ODZMNTA5LjEzNTc5Nzk0NjcyNjgsMjQwLjAyNDk3NTg5MTA0MjU3TDQ5Mi45MzQ0MDE3MTQ4ODcxLDI0MS43NTM4MjI1MzE5NzY4OEw0ODQuODM4ODYwMjU2OTkwNCwyNDUuNzc1NDY1Njc1OTAwM0w0NzAuODA5Mzg0NTYyMjY5MywyNDcuNzU4ODM4OTg3MjY3MzJMNDcwLjQxOTYxODM4Mzg0MTU3LDI0NC42MDYwMDA0NTY1NzA0M0w0NzMuNjY4NzAwMDQxMDkwMzUsMjQyLjk5ODYwMjc2MjAyMTk2TDQ3My40MTkwOTM3NjY5OTA1LDI0MS4wMjg0MzE0Njk2ODU2NEw0NzYuMTA4NDQ3NTQzNDUwMywyMzguNTIxNTc4MTI4NzQ1ODNMNDc5LjQ4ODg3MTA1NzM2OTksMjM4LjA3OTAyNjI2MjMxODg1TDQ4My43MTUwOTg0MTY2MDk2LDIzNC4zODM2Njc5ODI2Mjc0TDQ4My43MTUwOTg0MTY2MDk2LDIzNC4zODM2Njc5ODI2Mjc0TDQ4NS40NzEwNzM2NDk4MjQyMywyMzEuNTc1MTQ1MDkyNzQ1MTdMNDg4LjU3NDA0NjE3MTY2MjMsMjI5LjI5NDU4MTk3NTU0NzU0TDQ4OC43ODU4NzI2NzAxMzM1MywyMzAuNzg5NjA1NDk5NzcwNDZMNDkxLjQwNTMzNzUyMDQ5NTQ0LDIyOC4xNjcwNTMxNDE1OTU4M0w0OTUuNTc5Nzg2Mjg4MjE5NDUsMjI3LjQ3NTk1MTQzNTQyMjg3TDQ5Ny4xNjQyNjI0MTY5NzY3LDIyMy43ODQwMzY5MTcyMDM0OEw0OTguNDM5MTUyNDQxNDYzMSwyMjMuNzUyNjA5MjYzODYxNlpNNTcxLjk4Mzk1NTQxOTgwNTYsMjE4LjcxNDQ4NzUzNzM4Njg0TDU3My40MjgwNDczOTIxMzkyLDIyMS4zMjYxMjI3MjM3ODUwM0w1NzMuNzUwOTc3NTExMzQ3MSwyMjYuNzg1NTc0MTg1MTE1Nkw1NjkuMzY1MjkxOTk5NDY4NSwyMjguNzkyNzE3OTUzOTAxNEw1NzMuMTk3MDkxNjU4MDA2LDIyNi4yNTYyNjU3OTMwNTI3Nkw1NzMuNDAzMzU0MTYzMzgwNCwyMjMuMjAyMzIwOTc4NzYzNzRaXFxcIj48L3BhdGg+PHRleHQgY2xhc3M9XFxcInN0YXRlX19sYWJlbFxcXCIgeD1cXFwiNTI4LjExOTQwMjMxOTUwNjlcXFwiIHk9XFxcIjIzMC43MTM0NTM5MzQyMzU4N1xcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5OQzwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1PSFxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNNDg0LjA2MTQ3MjUyMzQyNzUsMTk0LjUyMjU4NTc2NTc0NjA0TDQ4MC45MjI0NjI5MDcxNzYwNSwxOTIuNzk2Mzc2NDY4ODMxNjhMNDgwLjE0NDkyODc5NTY4ODY2LDE5MC4xNzUyNTU0MjEwNTc1TDQ3Ny41NjA3MzcyMzIzNjc3LDE5Mi4zNzY4NzU0ODgxNTk2TDQ3MS43NzIyNzUxOTY2MTY1MywxOTIuMjY3ODg4NjU1Mjc3MjZMNDY0LjY0NjA0NTgwNTIzNjgsMTkxLjI1MzkzNDM5Njc5MDJMNDYyLjEyODk4OTYyNDEyNzM3LDE4Ny40NzkyNDkwODMyNTc2M0w0NTcuNjYyOTIxNTczOTEwNywxODcuNzc2NTk1NTQzODIwMjRMNDUzLjEzODYzMjA1NTgxMTk3LDE0OS41MTkxMzI2ODQzNTkyTDQ2Ny44MzUyNzY0NjM4OTA2NCwxNDcuMTE0NDIyNjI5MTUwMzRMNDcyLjkwMTc2ODM5NTU4ODc2LDE0OS40NzIwNDQzOTQyMzkxTDQ3Ni4wNjgzNjI2ODk3MTYxLDE0OS40MzI0ODMxOTkxNjcyMkw0NzkuMDQ5NTYyMjE5NTg3ODcsMTUwLjg1MzAyNDYxNTQwMjY2TDQ4My44MjA2NjUyNjk2NTA2LDE0OC4xNTI4MTM4Mjc0Njk0Nkw0ODYuOTg3Mzc2NTk1MTM1NCwxNDguMDc5NjY5MzU5ODMzMTNMNDkwLjMyMzQ3MDk1NDg0MTQ3LDE0My45NTYyNjUyNDA3NTk3Nkw0OTguOTk3ODE0NDk2NTgzNSwxMzguNzk0NTA0Mjk4OTIxM0w1MDIuMjMxMzA4NTk0MzkwNCwxNTguNDUxNzE0MDYzNjg1OEw1MDAuNzEyNjI1MTM4MTY4NCwxNTkuMDIyMjc0MTQ1ODkzTDUwMS45NTAzMjk5MjYxODU1MywxNjQuMTMyNDMzMzk1NjI5MjhMNTAxLjAyMDk1OTUxNTgyNTEsMTY1Ljg5MzU5Mzk4Nzc2ODlMNTAwLjcwMDE2NzQzMDk4OTUsMTczLjk5NDg4NTEyMTkxNDg4TDQ5Ny4yNTc4ODY0OTg2MjEzNiwxNzguMDgyMTY0ODgwMTUxMTRMNDk0LjQxMDIzODQyMjYzOTE3LDE3OC4yMDI4OTYxNjgyNDY3NUw0OTEuNzA4OTcxOTQyMjc4NSwxODEuOTkyMDY1NzQzNTAxOTRMNDkyLjI5MDM5MTQ3NzMwODg0LDE4NS44NDM4OTg2MTAzMjA4Mkw0OTAuNzg0OTcyOTU1MDg0NjQsMTg2Ljc5MzUyNjY2ODE5OTJMNDg4LjgzNTE2NjA5MjY0OTYsMTg0Ljc1MjQzOTIzMTcxMzJMNDg3LjkwNTAyNDM5NzIxNjE1LDE4Ni44MTgwNTI5ODQ4NTk2TDQ4OC4xODEwMTY5MTk2Mzg2LDE5MS41MTg1ODg1OTA0NTIyOEw0ODcuMjI4OTY1NTU2NzQ0NywxOTMuNTA1Mzk2MzIwODY4MjdaXFxcIj48L3BhdGg+PHRleHQgY2xhc3M9XFxcInN0YXRlX19sYWJlbFxcXCIgeD1cXFwiNDc3Ljg4ODQzODA2MjIxODM3XFxcIiB5PVxcXCIxNjcuNDUyNDU5OTczMzE2NzNcXFwiIGR4PVxcXCIwXFxcIiBkeT1cXFwiMFxcXCI+T0g8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUgc3RhdGUtT0tcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGNsYXNzPVxcXCJzdGF0ZV9fcGF0aFxcXCIgZD1cXFwiTTM0Ny42MDYxODg5NjYzMjYwNCwyMzMuOTAxNjQzOTM0MTY4MkwzNDkuMDQ3NzEwMTkzMTQ5NywyNDUuMjQ2MDAzOTg1NjY3NjRMMzQ5Ljk1NDQwMzcyMzgxNTcsMjQ4LjY0ODI1MTczODc3NjdMMzUwLjExMTU5OTg3NDQ1MDYsMjU4LjE3ODA1MDI4MDUyMDJMMzQ5LjczMjcxODk2MjgwNjUsMjYxLjM2MDUzNTI4MTQ2NzNMMzQ5Ljk3MzExOTA3NjY3NDksMjc2LjI3NjA2MTMyMDgxM0wzNDUuMTQ5MDk5MjA3MTk0NywyNzQuODM2NzgzNzQ0MDAxMzdMMzQwLjc1ODg3NDgzMjYwNDIsMjcxLjYyODU5MzUzMzIwODIzTDMzOS44OTgwMjE4NTMyMTQ3NCwyNzIuOTA0NjIzNDk0NTc1NEwzMzQuMjM1ODU0MzUyMzY3NCwyNzMuMzI5NDE1MjU3MDg2OEwzMzIuMDU2NTg3NzQyMDY0OSwyNzIuNzc3NTc0MTQ0MTYwMTZMMzI5LjQ0MDQyMDQ0MzAwNjI1LDI3NC40NDIwMDkyNzQzMjZMMzI1LjA3ODQxNzY2MjUyMDU2LDI3NC40MjY2NDAyMjczODgyTDMyMi45MTA3NjQxODgwNzkxLDI3Mi41ODg0MjMzMDcyMjc2M0wzMjAuNzI2NzA3NjA0NjMyOTYsMjczLjI4NDM2ODMzOTE5OTk0TDMyMC4zMDY4NzkwNzE2Nzc2NiwyNzEuNjE0NDY1OTM1NjA1MUwzMTYuNzg3OTE0MzA0NTQ5MTMsMjc0LjU4OTk4MDIxNjA3NDRMMzE2LjM3NDI4MTM3MTE4ODgzLDI3Mi44Mzk1MDkyNTU2MTczTDMxMy43NDk4NjM5MzkzNzk2LDI3My41MTY0ODcyNTg2NjY3TDMxMC43NDE0OTUzOTI4NTA2NSwyNzEuMDg2NTA3MTk5OTc2OEwzMDguNTI2MDk1NDQ3Njk0OTYsMjczLjEwNzczODMxNTIzN0wzMDcuNzAwMjc4OTk1ODU5OTUsMjcwLjg2OTQxNjA2NjMzMTk1TDMwMi41Mzk5MzQ5MDk4ODQ5LDI2OC40NTAyNjg4NTIyMzI5N0wyOTYuNDY1MjA5OTQwNDI0NzYsMjY4LjI4MTk4NjQ2MzgxN0wyOTIuNTg5OTc3MDc3MDUyNiwyNjcuMjg0NDYzNzgwNDYyM0wyOTIuMjQ4NTE3NDI1NDc2NzMsMjY0LjU3Mjk5NzIwNjA1NjJMMjg2LjYyMDYzODYwNjM0NjMsMjY0LjUyNTkzNTczNDIzODk0TDI4My4yNzEyOTI5NTk4ODc2LDI2MS43Njg1MzQyODk1MTQ2NkwyODQuNDgwMTQxNDA1ODQ3NCwyMzMuMDM1NDUxNTU1MDA2MTVMMjcxLjg2NjQ5MzAzNTU2Mjk0LDIzMi40MzMxNzEwNTkyMjY1NEwyNDkuMTgyMjUwMjE3NjY0LDIzMC45ODkwODEyNDE1ODgyMkwyNDkuNzMzMDMzMjgwNzI3MzQsMjIzLjUzNjYyMTExMDMxMTlMMjYwLjk4NTM0ODA4NzA0ODg2LDIyNC40Njk5NTQ2OTgyMzU2TDI5MC42NDMzMDAxMTcwMTk2MywyMjUuNzk5ODYwNTIwNjkxNkwzMTQuNDY2MDY4ODgwODkzMjYsMjI2LjQ5ODgwOTIwMTc3NjQ1TDM0Ny40OTgyMTE1NTg5ODQ3NCwyMjYuNTA5MTUxMTQ3MjcwMjVaXFxcIj48L3BhdGg+PHRleHQgY2xhc3M9XFxcInN0YXRlX19sYWJlbFxcXCIgeD1cXFwiMzEzLjYxMjkyMTIzNzQyNDZcXFwiIHk9XFxcIjI0Ny4zODE5ODE0NTIzNDY1NFxcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5PSzwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1TQ1xcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNNTQyLjIxOTkxNTcxMjc0NjgsMjUzLjg5NjczOTUwOTU0MzkyTDUzOS4wNjIzODM5OTE1MTg5LDI1Ni4wMTEyNDcxOTQ5NDY3TDUzNi4wOTM1NDA5OTcwNzI1LDI2MS43MDYxODczNDU2NDAxNkw1MzYuMjc2Mjg3MDQ5MjI3NiwyNjUuMjE2NzU5NjU4NDE3OEw1MzQuNTI2NTQxODYxMTU4LDI2Ny45NDI4MTM5ODA2MjcxNEw1MzEuODgyNjQ3NjE5NzMwNiwyNjguMTY2MTUxMTM1NDUzNTZMNTMyLjE4MjQ2MTEyMDU5NTgsMjY5Ljg4MzMzNDI4NjkzNzNMNTI3LjY5NjUwMjg1NDg0NzMsMjc1LjA3Njg4NTIzNDA5NjRMNTIyLjc5MjkwNzAzMjY5ODYsMjc3Ljk4NjI4Mzc4ODAyNThMNTIzLjA4OTgyNDg4MjA5MDYsMjc5Ljc4Mjg0NjYxNDkxOTlMNTIwLjcwMTg5MDU3NTc3NywyODEuNjk4ODI4MjE2MDEwNTVMNTE4LjEyOTQ1MDMxNDM4NSwyODUuMzIxMDY4MjI2MzA3OTRMNTE1LjMxNDMxNDk2ODgzNjcsMjg0LjY0NzEzMjQ3OTMyMDc2TDUxNC44NDUyMTI3MTQyNTYxLDI4MS42NzYzNzQ5MDA1MjU4NEw1MTMuMDYyNDA4MzM4OTQ3OCwyNzguOTExMzQxOTk2ODA2OUw1MTAuNjkwOTA4Nzc1NjgxMSwyNzguMDc4NjIyMDA4NDcyNkw1MDguNDAzNTc5OTE5ODc1OCwyNzEuOTM4OTE0MTcwNjM2NUw1MDUuMTA3NzczMDA4OTQ2MjUsMjcwLjc1NzQ3Mzg3ODM3ODMzTDUwMi42ODg5Nzc2NzUyNjU2LDI2Ni40NzE1MjM4NTUzNDgzTDQ5OC44ODk3NTgwOTgzODYsMjY0LjcwODc3MjgzNzQ3MzY1TDQ5Ni42NzA4Mjg4MTYxMzU2NywyNjEuNTg1Mzk5OTA5MjMwNkw0OTMuMzgzMDI2MzE0MDQ4NywyNjAuMTMzNTkxOTI2MjEyMjZMNDkxLjI4NDIzNDUwMjY5MjM2LDI1Ny43MDU3NDIxMDYxNTY5TDQ4OC44ODcxMjUwMDY0OTk5LDI1My4wNzI0MjAyNDgyMzMwN0w0ODcuMTg1MjI3NjI2MTYxLDI1My4zODc3OTEwMDQ4OTA4TDQ4Mi45MTg5MTg0OTcyNDksMjUwLjg0MjQ1NDc2NzI4MzEzTDQ4Mi43MTg1ODE0MjY2ODcsMjQ5LjM0NzI5NjY4MjgyMTI1TDQ4NC44Mzg4NjAyNTY5OTA0LDI0NS43NzU0NjU2NzU5MDAzTDQ5Mi45MzQ0MDE3MTQ4ODcxLDI0MS43NTM4MjI1MzE5NzY4OEw1MDkuMTM1Nzk3OTQ2NzI2OCwyNDAuMDI0OTc1ODkxMDQyNTdMNTEyLjUyNzgyODY0MTYyMzQsMjQyLjIxNjcwMzk0MjU4Nzg2TDUxMi44Njk0MzI1NjQ2NDU5LDI0NC4zMzMzMDg5NzQ0MzQ4M0w1MjYuMDY3MTU5MjcxOTU3MywyNDIuMzY1NDYzMTQzMTEwMjJaXFxcIj48L3BhdGg+PHRleHQgY2xhc3M9XFxcInN0YXRlX19sYWJlbFxcXCIgeD1cXFwiNTEzLjg2NTQzNTgyMjkzODdcXFwiIHk9XFxcIjI1Ny45NDcyMzI0NTY4NTU5NFxcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5TQzwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1UTlxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNNDk4LjI5NTc5MjEwMTkyODIsMjE5Ljk5NTY5ODM4MTA2NDAyTDQ5OC40MzkxNTI0NDE0NjMxLDIyMy43NTI2MDkyNjM4NjE2TDQ5Ny4xNjQyNjI0MTY5NzY3LDIyMy43ODQwMzY5MTcyMDM0OEw0OTUuNTc5Nzg2Mjg4MjE5NDUsMjI3LjQ3NTk1MTQzNTQyMjg3TDQ5MS40MDUzMzc1MjA0OTU0NCwyMjguMTY3MDUzMTQxNTk1ODNMNDg4Ljc4NTg3MjY3MDEzMzUzLDIzMC43ODk2MDU0OTk3NzA0Nkw0ODguNTc0MDQ2MTcxNjYyMywyMjkuMjk0NTgxOTc1NTQ3NTRMNDg1LjQ3MTA3MzY0OTgyNDIzLDIzMS41NzUxNDUwOTI3NDUxN0w0ODMuNzE1MDk4NDE2NjA5NiwyMzQuMzgzNjY3OTgyNjI3NEw0ODMuNzE1MDk4NDE2NjA5NiwyMzQuMzgzNjY3OTgyNjI3NEw0NzkuNDg4ODcxMDU3MzY5OSwyMzguMDc5MDI2MjYyMzE4ODVMNDc2LjEwODQ0NzU0MzQ1MDMsMjM4LjUyMTU3ODEyODc0NTgzTDQ3My40MTkwOTM3NjY5OTA1LDI0MS4wMjg0MzE0Njk2ODU2NEw0NzMuNjY4NzAwMDQxMDkwMzUsMjQyLjk5ODYwMjc2MjAyMTk2TDQ3MC40MTk2MTgzODM4NDE1NywyNDQuNjA2MDAwNDU2NTcwNDNMNDcwLjgwOTM4NDU2MjI2OTMsMjQ3Ljc1ODgzODk4NzI2NzMyTDQ1NS40NjUxMzgxODAyNDU0LDI0OS42Mjk4ODQ0ODI1MjgyTDQyNC42NzgxMTQzNzI0MTQ2LDI1Mi40MjkwMDMzMTE5NTEzTDM5OS40MTE1OTE2MTk3MDYzLDI1NC4yMjc2OTA1Nzc1NDcwNEw0MDAuNjczMDIxNDc2OTY3ODUsMjUzLjc1MzQ4NTI4NDE1MzU2TDQwMS43NDU4Nzc2ODkzNjIyLDI1MC4yNjU1NzY3MTkyMTcyOEw0MDEuMTEyNjkyNTU4NzExNCwyNDYuOTYyMDg2MDcwNjcwNjRMNDAzLjE4MDk5NTgzNjkzODA1LDI0NS44NzY4NzgyMzY1Mzk4Mkw0MDIuOTkzODQ4MjU1NTcyMjMsMjQyLjk0MzA3OTYzNDk2OTU0TDQwNi4yNTAyMTIzNjYyNzExLDI0MC42NjAwMTM3NTA1MzE0NUw0MDUuMjg4MDUyMjg4MTM0MSwyMzguOTcxNzk3OTMxODMyNDRMNDA2Ljg2MTI5Nzg2NDM1OTc2LDIzNy4xMTQzNTkwMjA1ODQzNUw0MDUuNDk0ODE4ODkwNjE4MjYsMjM1LjY5MjQ2Nzc4NzQ4NjdMNDA3LjQ3Nzg3ODc5Mjk3NzgsMjMzLjcyNjU4MzY5MTU5MjA1TDQwNi45MDA3NDUzOTQ5MjU2LDIzMS40NTU0MzM0NTkyNjgwOEw0MDcuNzQwNjU4NjM0MTg4LDIzMS4zOTgwMzE5NzYwNDMxN0w0MDguNTgwNTI4Mjc0OTE0MywyMzEuMzM5OTk2MDcwMzM4NjZMNDI0LjUyOTEzMDUzODM4NzcsMjMwLjExNjgxOTc5ODAwNjg3TDQyMy44NzgwNDc0NTY3MzM2NywyMjcuMzc5MzM1NzAzMjUxNEw0MjYuNDU2MzQ3ODczOTgyNSwyMjcuOTU4ODA4MjQxNzU2ODZMNDQyLjMxNDkxODQ4NTM5MiwyMjYuMDgzOTQ2OTE3MjM2NjNMNDQ5LjQ3NjYyNjQzNzk5MzczLDIyNS45MDE4NjQ1MTQzNDMwNkw0NTYuMTUxNDI5NjM1ODgxNjQsMjI1LjA4ODcxOTQ5MTQ0MzE2TDQ2OC4zMTE3MjA1NjUxMDQzNCwyMjQuMTI4NjE3MTk3MzY5NzVMNDc1LjM4MDY3NDEwNDA0MjI3LDIyMy4wNjg2OTQ2OTgzMTgxNVpcXFwiPjwvcGF0aD48dGV4dCBjbGFzcz1cXFwic3RhdGVfX2xhYmVsXFxcIiB4PVxcXCI0NDUuMjczMzI2MjYyMDg5OVxcXCIgeT1cXFwiMjM3LjY2NjM4OTc0OTE2MDNcXFwiIGR4PVxcXCIwXFxcIiBkeT1cXFwiMFxcXCI+VE48L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUgc3RhdGUtVVRcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGNsYXNzPVxcXCJzdGF0ZV9fcGF0aFxcXCIgZD1cXFwiTTEyMS43MzQ1NDY0Nzc2MzcxNywyMDYuNTI1ODcxMDY5MDA0MzJMMTI2LjE2MDMzMTAxMjI1NzMsMTgzLjU3MjExMTM3NTM1NTQ2TDEyNy4zOTg5ODI2NzMxNTk4MiwxODEuNDYyNDA3ODI4MTc3NDVMMTM2LjU2NjE3MjYxMTU3MTIsMTMzLjcyNDAxNzU2NTMyODI3TDE0Mi4zMDA1OTUxNDk3NDIxNSwxMzQuODg5MDcyMzgwNTcyNzdMMTY4LjQ2MjgxNjI2OTA3MDMsMTM5LjI1MTc0ODk1MDYyODc4TDE2Ni4xMTAwNTUyNDQxMTUzMywxNTMuOTgzMTg4MTIzOTUxNDRMMTg4LjAzNTg2NDA5MjgzMjA0LDE1Ny4xNjczMDczNzQyNzgzOEwxNzkuODkyMTQ2MDA0NTUwNzcsMjE2LjE0MTEzODcyMTIzNDE0TDE2My4zMzA2NTIxNzQwOTE4NSwyMTMuODA2ODc4MDY4MTU0MzNMMTM0Ljg4NzE5ODE5MTkyNDgyLDIwOC45Nzk1MzM5ODk0ODcxWlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjE1NS4yMzE3Mzc1MDc1OTA1NFxcXCIgeT1cXFwiMTc3LjgwMjc1MzM4MDI4NDdcXFwiIGR4PVxcXCIwXFxcIiBkeT1cXFwiMFxcXCI+VVQ8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUgc3RhdGUtVkFcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGNsYXNzPVxcXCJzdGF0ZV9fcGF0aFxcXCIgZD1cXFwiTTU1OC45OTU3MjE4MzY0MSwxODguMzM3Mjg1ODQ1NDE4MjVMNTU5LjgwMzAyMTg1ODg4NDIsMTg4LjE2NTAwOTg0MTI2ODc4TDU1OC45OTU3MjE4MzY0MSwxODguMzM3Mjg1ODQ1NDE4MjVaTTU2OC4wMzAzNTA5MjA3MjE3LDE4NS4yMzI1OTEwNzY3NDc1NUw1NjUuMDM3MzMxOTYxODUwNCwxOTAuODU3OTE2MDA2NzU2NTdMNTY1LjA4OTI3Njk1ODkyMzQsMTk0Ljk5Njc5MzM4NDEzNzI4TDU2NC4xODUzMjI4MTk4ODQ4LDE5OC42OTA3Mzk0NjExMjA4N0w1NjIuNDk2MDE1OTA3MzM2OCwyMDAuNzYxMjk4NjM1MDI0MUw1NjEuMzI0MzMyMTAyOTAyNCwxOTcuMjcxNjc1NDg0NDQ4NDVMNTYxLjQyMjMxMTE2NDMxMTQsMTkzLjc1NDQ1MjQzOTY1ODVMNTYzLjQzNDI1MjA5MjYzMTYsMTg3LjM4MjIyMzUzMjg4NTRaTTQ5Mi45MDEwODIxNDIyNDQ0LDIwNi41NzU3MDIxNDEyMTU3NEw0OTMuNzEwMDkwNTI2MzAwOCwyMDkuMTg4NDgxODYxNDUzNEw0OTYuOTM2Mjk1MDc4MjI1OCwyMTEuMDM1MDY1NDc2OTI2NDNMNTAwLjMyODU4OTQ4MjU5Mjg2LDIwOC40MjMwNDc4MDA2NDM2NEw1MDIuMjE5NzE5MzU5MjM5NjYsMjA5LjczNzUwNTYzNTIyNDI0TDUxMi4yMzY4NjE0MDU5NDEsMjAzLjkyODY1OTEyNzk5Njc1TDUxMS44NzA1MTU0MDgzMzc0LDIwMS43MzI2MzQxNjMyNTYzTDUxNC4zNDAzNjU3NjEwMTQsMTk2LjQ3ODc0OTkwNTI2MDg4TDUxNC42MzIwMDQzMDY5Mzg4LDE5My4yODMzNTc1MTMzNTAxTDUxNi4wNjUwMTk1MTk3ODkzLDE5MS45MDgxNzY3MjkwNDA2M0w1MTYuNTE5MTMxNDkxNTY4NywxODcuMzEwOTk2NjgyMjE0NEw1MjEuMzQzMzAxNjIwNzIxLDE4OC43MjQzNzY0OTk5MjMxTDUyMy40MjcwNjQwOTM5MDY4LDE4MS44MDc5NTYyNzkyNjU4TDUyNS40MDQyMTI4NzczMTgsMTgxLjI4Njg4NTE2MjI5MDFMNTI5LjA2ODE2MzM4ODQyMTYsMTc2LjQ4NjAzMzExMzEzOTExTDUyOC45NDE4OTk1MjE4NDQzLDE3MS40MTQ0ODYyNzM5NTc2Nkw1MzUuODM1NDMyMDc4MzEyOCwxNzUuMTE2NjA3MjUzNjIzNDRMNTM2LjUxNDMwNDY4ODYyNjEsMTcyLjIzMTMzMjkyMjU4MjRMNTM5LjUyNzk4NjcwMjYzODUsMTcyLjg1NDk0OTA1NTg1NTRMNTM5LjA3MDA3NTM0MzUwODMsMTc0LjcyNzg4MzMyMzYxOTA0TDU0NC4wMDEwNDI4ODE3MzEsMTc2LjU4MzU2NDE5MTU0NzU3TDU0NS42MDg2MzcwMTQ0NzI2LDE3OC4zNjc5NTg5MDk3NTQzTDU0NC44OTQ4NzcxMjM5Mjg4LDE4MS4wMjYzODA0NDkzOTg0TDU0My40MzEwMjY0NDc4NDk4LDE4Mi4wNDk1NDgyNDQ0Njk0TDU0NC4xNjI1NjMxMzE2MDc2LDE4NS43MTQyODYwODIxNzg2Nkw1NDYuODA3MTc4ODcyNzgsMTg0LjI5MDYxNTU2NTM3NTMzTDU0OC4xNjU0NzI1MTU2OTI4LDE4Ni44NTQ4MDAyMzcyNjM5M0w1NTEuOTM3MTcwMTk2MDYzMywxODYuODEyMzkyMTEzODM2MDRMNTU3LjE3MzkyNDk1NDM3MjMsMTg5LjY5ODkyMjg5OTU1NzVMNTU2LjU2MTc4MjA1OTE0MDksMTkwLjgwMjk3NTY2MDE3MzRMNTU4LjUyMzI5NzczMTcxMzIsMTk4LjEwOTM3MjczMjY2OTM5TDU1Ni4yODkyMjc2MDU3NzY5LDE5OS42MzMzNTgyMjExNDE4Nkw1NTkuMjI3OTY2OTY4OTcwNiwyMDEuNDU0ODIyMzc4MDg4NDdMNTU3LjE0ODQwNzQ0NzA3NTksMjAzLjc1ODY4MjgzMDU5NjVMNTYzLjAxMTI5Mjk4MTUzMzUsMjAzLjE3MTQ3MDYyODk0OEw1NjUuMzkxODg0NzUwNTU3MiwyMDguMjcxMDgwNTkzNzA4NDZMNTQwLjY5MTExNjc5ODM2MzUsMjEzLjQ1MTMxMTk2MDAyNjI2TDUxNC42MDQ3NTAyMTQ2MjA4LDIxOC4xMjI3MzUxNDI0ODM3NUw0OTguMjk1NzkyMTAxOTI4MiwyMTkuOTk1Njk4MzgxMDY0MDJMNDc1LjM4MDY3NDEwNDA0MjI3LDIyMy4wNjg2OTQ2OTgzMTgxNUw0ODEuMzUxMTk1NjQzMDg1MzYsMjIwLjE4Njk0ODg1NjM2NTM1TDQ4MS41NDA4MDg2MjU3MjQsMjE4LjQ3NjEwMzA0MzU5MzE4TDQ4My45NzYwODkxMjkzNTIzLDIxNy43MzkxNjY5NTcxMjg3Nkw0ODUuMTM3MTc0MTE1MDExNywyMTMuOTY0NDI1ODYzOTUxNjVMNDg5LjM2Mzg0MDUzNTkxODUsMjExLjExMjcyNTE2NjI5MDZaXFxcIj48L3BhdGg+PHRleHQgY2xhc3M9XFxcInN0YXRlX19sYWJlbFxcXCIgeD1cXFwiNTI5LjI1OTAyNzQ0NzY0ODVcXFwiIHk9XFxcIjIwMC43NTMyOTI5MDMyNDM0NVxcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5WQTwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1XVlxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNNDkyLjkwMTA4MjE0MjI0NDQsMjA2LjU3NTcwMjE0MTIxNTc0TDQ4OC45MDgwNDA4MDMwODMxLDIwNS4wNzI3MTc3MzM1MTk4OEw0ODYuMzYxNzAwNTA4MjEwMzMsMjAxLjkwNTA2MTEzNjk0Njk4TDQ4NC41NTM1ODM3NjUxNDcsMTk3Ljk4NjM3NjcyMTM0NjEyTDQ4NC4wNjE0NzI1MjM0Mjc1LDE5NC41MjI1ODU3NjU3NDYwNEw0ODcuMjI4OTY1NTU2NzQ0NywxOTMuNTA1Mzk2MzIwODY4MjdMNDg4LjE4MTAxNjkxOTYzODYsMTkxLjUxODU4ODU5MDQ1MjI4TDQ4Ny45MDUwMjQzOTcyMTYxNSwxODYuODE4MDUyOTg0ODU5Nkw0ODguODM1MTY2MDkyNjQ5NiwxODQuNzUyNDM5MjMxNzEzMkw0OTAuNzg0OTcyOTU1MDg0NjQsMTg2Ljc5MzUyNjY2ODE5OTJMNDkyLjI5MDM5MTQ3NzMwODg0LDE4NS44NDM4OTg2MTAzMjA4Mkw0OTEuNzA4OTcxOTQyMjc4NSwxODEuOTkyMDY1NzQzNTAxOTRMNDk0LjQxMDIzODQyMjYzOTE3LDE3OC4yMDI4OTYxNjgyNDY3NUw0OTcuMjU3ODg2NDk4NjIxMzYsMTc4LjA4MjE2NDg4MDE1MTE0TDUwMC43MDAxNjc0MzA5ODk1LDE3My45OTQ4ODUxMjE5MTQ4OEw1MDEuMDIwOTU5NTE1ODI1MSwxNjUuODkzNTkzOTg3NzY4OUw1MDEuOTUwMzI5OTI2MTg1NTMsMTY0LjEzMjQzMzM5NTYyOTI4TDUwMC43MTI2MjUxMzgxNjg0LDE1OS4wMjIyNzQxNDU4OTNMNTAyLjIzMTMwODU5NDM5MDQsMTU4LjQ1MTcxNDA2MzY4NThMNTA0LjQzNjUwMzM1NzI1OTYsMTcxLjg1NzYzODAzMTU5NDFMNTE1Ljk1MjE4NTQyMjkyMjQsMTY5Ljg5ODU0NzEzNjE0NjQ4TDUxNi45MDEwMTQ3NjE0NjksMTc3LjY0MDY5NzY5MTEzMTU1TDUyMy41MzE4MDA4ODY4NDcyLDE3MS4wNDI4NDk1Mzg0NjEzOEw1MjcuNjE4NjE5MTUxNTI3NCwxNzAuOTM0NTAxNDQ4NjQ0MzdMNTI5LjkyNDM0MTU1OTgxMjMsMTY3LjkxMjk0OTI0NjQzNjAzTDUzNC41NTAzNjU2NDg2NTg3LDE2OC40ODMzNDM3NTI0MTIzNEw1MzYuNTE0MzA0Njg4NjI2MSwxNzIuMjMxMzMyOTIyNTgyNEw1MzUuODM1NDMyMDc4MzEyOCwxNzUuMTE2NjA3MjUzNjIzNDRMNTI4Ljk0MTg5OTUyMTg0NDMsMTcxLjQxNDQ4NjI3Mzk1NzY2TDUyOS4wNjgxNjMzODg0MjE2LDE3Ni40ODYwMzMxMTMxMzkxMUw1MjUuNDA0MjEyODc3MzE4LDE4MS4yODY4ODUxNjIyOTAxTDUyMy40MjcwNjQwOTM5MDY4LDE4MS44MDc5NTYyNzkyNjU4TDUyMS4zNDMzMDE2MjA3MjEsMTg4LjcyNDM3NjQ5OTkyMzFMNTE2LjUxOTEzMTQ5MTU2ODcsMTg3LjMxMDk5NjY4MjIxNDRMNTE2LjA2NTAxOTUxOTc4OTMsMTkxLjkwODE3NjcyOTA0MDYzTDUxNC42MzIwMDQzMDY5Mzg4LDE5My4yODMzNTc1MTMzNTAxTDUxNC4zNDAzNjU3NjEwMTQsMTk2LjQ3ODc0OTkwNTI2MDg4TDUxMS44NzA1MTU0MDgzMzc0LDIwMS43MzI2MzQxNjMyNTYzTDUxMi4yMzY4NjE0MDU5NDEsMjAzLjkyODY1OTEyNzk5Njc1TDUwMi4yMTk3MTkzNTkyMzk2NiwyMDkuNzM3NTA1NjM1MjI0MjRMNTAwLjMyODU4OTQ4MjU5Mjg2LDIwOC40MjMwNDc4MDA2NDM2NEw0OTYuOTM2Mjk1MDc4MjI1OCwyMTEuMDM1MDY1NDc2OTI2NDNMNDkzLjcxMDA5MDUyNjMwMDgsMjA5LjE4ODQ4MTg2MTQ1MzRaXFxcIj48L3BhdGg+PHRleHQgY2xhc3M9XFxcInN0YXRlX19sYWJlbFxcXCIgeD1cXFwiNTA1LjcyODEwOTcwMzA0MzlcXFwiIHk9XFxcIjE4Ny45Mzg1NDY4MDY3MTE2NlxcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5XVjwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1XSVxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNMzg5LjI1MjA2NjI0MzEzNzksMTQzLjA4NjE1ODcwMzkzODg1TDM4OC4zNzI4NTg2NzI3MTEzNSwxNDEuMjMwODg4NDUxNjUyMjhMMzg0LjQzMTIwMDQ4MTQwMjksMTM5Ljg1Njc0MjQzNTczMDFMMzgzLjEyMjAzNTE4OTM3NzEzLDEzNi45MTA0NjgyMzc1MDA5NEwzODQuMDQ4NDc5NjgzNjgxNCwxMzIuNTAyNzYxNjU5MzA3MjNMMzgyLjMyNjM3MDg5NTAyNzU0LDEyOC43ODc5MTE4Njc3MzM5TDM4MS43NjY5MTMyMDczMDE5LDEyNS4yNTI0NzI5MzExODc2NEwzNzkuNjg0NjQ3MzA4Mzk3NCwxMjEuNTU1ODcyODIyNjE3OTdMMzc0LjYzMDY4MzcxNjI5MDA0LDExOC43MDI2MTQyNDEwMjM3NUwzNzQuMTY1MTYzMzU4Njk5OTQsMTE2LjY2NzI0NTU2MDQ2MjIyTDM2Ny4yNjI1MzI5OTg4NDQ2LDExMy41NDI4MDYzNDU1NDIzMkwzNjQuOTAyOTYzMjA0Njg3NiwxMTAuNDY3MTY0ODY2NjI1MDFMMzY1LjAxMDAxNTYzNzMwODMsMTAyLjY1NDI5MzA1MDcwODU5TDM2Ni4wNzkzNzk0OTMxNzU5LDEwMS4zNTU5MzI3NzkyNDY4MUwzNjMuNDAwOTcyNDU3NjQ0NDYsOTguOTI1ODkxNjcxMDQyTDM2NC43Mjk3MDg5NzUzMzMxLDk0LjQ3MjEwMDgzMDM4MzYyTDM2OS4zOTkzMjUzMTI1NjgsOTEuMzEwNDkwODQxOTMyMjhMMzY5LjA2NDIwODg5Nzk3MTA3LDgyLjc1NjA2NDUxODQwOTRMMzcxLjU3NzkzMzMxMzEyMzcsODEuODY5MDA0MTExMDU3MDVMMzc0LjEzMjU0Njc3OTI1MjgsODEuOTk0MzY5MjA2NzE0NzRMMzgwLjkxMjc4NjE3MTM5OTMsNzkuMjM0MTE1NjQ1OTA0OTJMMzgzLjM2OTE1MzA5NzAyNDI1LDc3LjYxMjIyNTEzNzczNzk0TDM4NC4xNzQ3ODAxOTU5OTY4LDc5LjA2MDAyODgwODY5NjY0TDM4Mi45MzkwNTU4NTkxMTkyNiw4My4xMzQwNDk3NDU3MjMzNkwzODUuMDU2OTk4ODQ5MjY5Myw4MS44MzkzMTMxNzczMjAyNkwzODguMDUyMDQ4MDY3MzIxNDQsODMuMTYxMTAxODYwMzk2MTJMMzkwLjI5NzkzMDcxNDk3MTIsODQuMDQ4NjkwNzQ2MzAyNTVMMzkxLjE2NzE4NzQyMzUwODg0LDg2LjI3Njg0NzA2MzkyMjY3TDQwMS45NjM2OTgyNTY1ODc4LDg4LjQ2MjkzMjEzMzc0OTg2TDQwNC42Mzc3MDU2OTcyNzM2NSw4OS43NjIxMDA5MTQ0NjYxNUw0MDcuOTUzOTE4MDcxMzk2LDg5Ljc0MjQ0MTI2Mjg0NzgyTDQxMi4xMDc5NTUzNTc1MTg4LDkwLjkwNDY1NzcxMDE1NDA4TDQxMi4yNjQ0MDQ3MTI5ODkzLDkyLjc4NjA0MjEyNzgzMTE0TDQxNS42ODc2NjYyNTQ4MTUzLDkzLjgzNzk5MzAyOTYzN0w0MTUuMzY5MDQ2MDM0NDQyNjUsOTguNzY1MDA4NjU2MTk3NjdMNDE3LjU4Nzk0NDkwMTczMDMsOTguNTcyMDUxNzcyNDUyMDNMNDE3LjEyOTQ0MzE0NDk5ODYsMTAxLjg1NTE0MjAyNjA5MjYxTDQxOC42OTAxNjg3MDQ0NjI4LDEwMi41ODgwMjI0NjMyNjlMNDE2LjI2NjgzMzcyMDkwMzIsMTA0Ljg1NzgyOTg5NDgwMTE3TDQxNS4wMzc2NzIwNjM2OTQ3NCwxMDguMDUwMTcyNzU4NDI5NTRMNDE1LjY3ODU1NTQ3ODI4Mzg0LDExMS4xNjM3NDAxODYxMDQwNkw0MTguNjUyNDYyMjQxOTk3NTcsMTA2LjM5MTEyMjIxODQ2MDUxTDQyMC44NjAxMTQxMTQ1Mzg2NSwxMDUuODc2NDk1MjY2MDEyMTdMNDIxLjkyOTkxODgwMjI4MDI3LDEwMS4xODY1OTU3NTk2NzI4NUw0MjQuMDg3NTA3MzE2NzY4OSwxMDAuMjcyNjU5NTExMjQzNDNMNDI0LjI3MzAzMDgxNDAxNDY1LDEwMi4yMzQyODIyNzUwOTEzNUw0MjAuMjQ5NjE1MDM5OTY0MiwxMTEuNjM2MTQ5MDc0MTU1NThMNDIwLjYzNzM0NTc0OTIzNTc1LDExNS45NjIyOTIzMTM0OTIzTDQxOC42NjA5MTc1MDA4ODI4LDExOS4zODk1Mjg5MDEwNzI3MUw0MTkuMDczNjY2ODYzOTYwNzQsMTI0LjExNTI0MTA3OTUzNzc4TDQxNy41MzMzMDE0OTQwNDY4LDEyOC40NTY3MDc2Njk5ODk3OEw0MTcuOTg0Nzc3NTc3OTk5MywxMzMuNzQwOTE4NDA2NTQyMDVMNDE5Ljc3NzY0NDMzMjY3MzUsMTM2LjYwNjk0MTgyNDk3NjI3TDQxOS43NzYxOTUxNTUwOTU5MywxNDEuMDYwNDgxNzcwMTM5ODZMNDA3LjQyMzU3MzM1NDU4NzcsMTQyLjA1NDgwNjQ5NjE1MDVaXFxcIj48L3BhdGg+PHRleHQgY2xhc3M9XFxcInN0YXRlX19sYWJlbFxcXCIgeD1cXFwiMzk0LjE1MjUyODEyMjIyMzU0XFxcIiB5PVxcXCIxMTEuNDc5NzEyMzk1MTg4MjNcXFwiIGR4PVxcXCIwXFxcIiBkeT1cXFwiMFxcXCI+V0k8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUgc3RhdGUtTkRcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGNsYXNzPVxcXCJzdGF0ZV9fcGF0aFxcXCIgZD1cXFwiTTMyNS42ODY3NjIwNDAyNDc5LDk0LjAwNTI2MzM1MTIyNjI5TDMwNC4zNDI2Mjc1NTAwMTU5LDkzLjY0Nzg4MTc1NDIwODM2TDI4MC40NDI0NjAyNzc2Njg4Myw5Mi42MTMzOTI3NDY4NzEyM0wyNjcuNTgzNzUxNDM0NDYyNDQsOTEuODU1NzM1NDczMjY0NzZMMjQ4Ljg2NzMyODM1MzI5NjUsOTAuNDQ3NTk3MTAxMzA4MTNMMjUyLjY1NDEyNTI0NDc5MTgzLDQ1Ljg1OTM1NTY2MjM4MTA2TDI3MC41MTEwNTE3NjAyNzU0LDQ3LjIwMjgyOTQyOTkxNzUzTDI4My40ODA1Nzk0ODkzMDI1LDQ3Ljk2MjEwMTA5OTMwMzgyTDMwMy4xMjcwODIzOTc2OTg1Myw0OC43NjYzNjMzNjc4NDE3OUwzMTkuMjc1MTA5ODE1OTk1NDUsNDkuMTE2MDU2MzM4Mzk5NEwzMjAuMjg0MjMwNzAwNjc0Myw1Mi44NjM2NTQyMjEwOTk3NUwzMjAuMTczNTQ0MjA1NDQ3OSw2Mi4yMTc3NzE4MTg0NDYxOEwzMjIuOTQ5MDA0NzM2MjI3NjYsNzAuNTMwMTQ4NDQ5MTcwMTZMMzIzLjE5NTIwMTM4Mjc5OTcsODMuOTMxNDU2NzQ3Mjg2MzVMMzI1LjM1NDA5MTY5MzMwMzI1LDg4LjI2NTU4MTk1Mzg5OTUzWlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjI4Ni41NjM3MDgwNTE2NTI1NVxcXCIgeT1cXFwiNzAuODAzMjQ2Nzc1NDg1NTJcXFwiIGR4PVxcXCIwXFxcIiBkeT1cXFwiMFxcXCI+TkQ8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUgc3RhdGUtU0RcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGNsYXNzPVxcXCJzdGF0ZV9fcGF0aFxcXCIgZD1cXFwiTTMyNi41NTM3MzQwMDkwOTExLDE0NC45NTAzNTg1NjcyOTM5NkwzMjQuNjE4ODE5MTI5ODEwMDUsMTQ0LjcwMTc4MDM5NTY2MDg4TDMyMy44NjExOTEwOTkzNzE4LDE0Mi4zOTg2NTU4MjUzMDRMMzE2Ljk0OTg3MDY1MDM5NDMsMTM5LjMxNDQ3Mzk4MjY3NzlMMzA5LjIxNDQyMTU2NjMzNjQ1LDE0MC42ODEzMjk0NzkzMDcxMkwzMDUuMDM1NDU3ODQ4NTc4MywxMzguMTI2MjA2ODYzNjc2NDNMMzA0LjY3NzY5MjQ1NDY4NSwxMzcuMDg3MTM4Mzk5MzkxMDVMMjg4LjE1NTkwMjIwNTE2ODMsMTM2LjUyMDE0NTkxNTY1NjE0TDI3MC4xMTAzODAyNDM0NDU2LDEzNS41OTM1OTY3NTY0NDI0OEwyNDUuMTg2Nzg3Mzc3ODA3NiwxMzMuNzg0NzExMzgxMDY1MzRMMjQ3LjY4NzgzNTkzNDAyNDI0LDEwNC4zMzU3MTc5MjU1MzU1TDI0OC44NjczMjgzNTMyOTY1LDkwLjQ0NzU5NzEwMTMwODEzTDI2Ny41ODM3NTE0MzQ0NjI0NCw5MS44NTU3MzU0NzMyNjQ3NkwyODAuNDQyNDYwMjc3NjY4ODMsOTIuNjEzMzkyNzQ2ODcxMjNMMzA0LjM0MjYyNzU1MDAxNTksOTMuNjQ3ODgxNzU0MjA4MzZMMzI1LjY4Njc2MjA0MDI0NzksOTQuMDA1MjYzMzUxMjI2MjlMMzI0LjU2MTkwNzE2NDUzOTk1LDk2Ljk4NzQ5ODEwMDY4OTY2TDMyMi43MDU2MTIyNTcwNDIxLDk4LjE1MzQwNzM2NDM2NzU4TDMyNC4xNTgyNDQxMzkxOTg2NCwxMDEuNzA4MjQwMDQ5NjcyMUwzMjYuNzQ3NjgwODk5NzA4LDEwMy4yOTkxNjkwMzk0NzU3MUwzMjYuNjIzMDQ5MTYxMjg3MjcsMTMwLjA2NDUzODM3MTQxMzk2TDMyNS4wOTYzNTkxMDI1NzY0LDEzMC4wNTYyNzYxNzQyMTI4M0wzMjYuNTkzNTY4MTIyMTk0MjYsMTM2LjM5NTc1NzkyNzYyNDdMMzI1LjgyNDE1Mzc4MzYyMjkzLDEzNi42Mjk0MDYwNTQzNTA3NEwzMjQuNjM3NDg3MzgyMjcyLDE0MS44NDk0NTM3MzE3NDcyWlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjI4Ny4wNjYzMDU4NjAxODk2XFxcIiB5PVxcXCIxMTUuMDk5MzYxODA1MzEzOFxcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5TRDwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1XWVxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNMTg4LjAzNTg2NDA5MjgzMjA0LDE1Ny4xNjczMDczNzQyNzgzOEwxNjYuMTEwMDU1MjQ0MTE1MzMsMTUzLjk4MzE4ODEyMzk1MTQ0TDE2OC40NjI4MTYyNjkwNzAzLDEzOS4yNTE3NDg5NTA2Mjg3OEwxNzQuMjE2NzAzNTcxMTU2NSwxMDMuMjI0Njk4MjIwOTYxMjdMMTc1LjQ2MDk5NDg2NTkyNjMsOTUuNDMzNzY2MDY1NzcyODNMMTk1Ljc2NTg2NzQxMDkyNDAyLDk4LjQ2MDc0MTIwMDcwMDIzTDIxNi40OTA4MDE1NDAzNzk2LDEwMS4xODcwNjEzNzQzNzIzMkwyNDcuNjg3ODM1OTM0MDI0MjQsMTA0LjMzNTcxNzkyNTUzNTVMMjQ1LjE4Njc4NzM3NzgwNzYsMTMzLjc4NDcxMTM4MTA2NTM0TDI0Mi42ODM3NzY4OTA3Njg2OCwxNjMuMjU2ODA1OTAyNjY3MzRMMjE4LjY1NDA3Mjg1NTg3OTY2LDE2MS4wMTY2ODA3MjcyNDUxWlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjIwNy44OTYzNDE1ODY2ODkyM1xcXCIgeT1cXFwiMTI5Ljk0MDI5NzY2OTIyNTM3XFxcIiBkeD1cXFwiMFxcXCIgZHk9XFxcIjBcXFwiPldZPC90ZXh0PlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLVRYXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk0zMjAuNDEwNTE3MTI3NTU3ODUsMzU4LjYyOTg0OTQwMTEyODhMMzE2LjYxMTgyMjYwODUxNzM0LDM2My4yMTg5MjQ2NTYwNzA3TDMxMy43MDk1MDM5OTU1MDMwNCwzNjkuMTM3NzE4NzAwMjUwMUwzMTMuMTM3ODI3MDY1MDkxOCwzNzYuMDE4NDM0NTg5MjUyNjVMMzE0Ljk1NzA1MjYxMjUxODM0LDM4Mi4xNDE4NDA0Njc1ODI5NEwzMTMuMTAzODY0NTA1Njk5NDUsMzc4LjM2NDM3Nzg1MzYyOTgzTDMxMy4yNDA5MzkyOTY2ODA4LDM2OC44OTYwMTk1MDkyNjc0M0wzMTQuNzAyNTc4NTE5NzQyOTMsMzY1LjQ2ODQ4Mjk3NDc4NzFMMzE3LjA4Nzg0Mjk0MDg5MTczLDM2Mi42NzU1MzcyMzk3OTI4NUwzMjAuODkzNzM5ODk1NzkwNSwzNTYuODI4Nzg2Nzk0OTU3ODZMMzI2LjA0NDczMzg2ODc5NDQsMzU0LjQyNzU1NzkxMzkwNDNaTTIwMC4zODE1MDU0NzIzODU4NCwyOTYuNjQ4OTM3ODkwNzcwMkwxOTkuODUzMzc3MTgzNzk3NDgsMjkzLjMyNjQ5NzY3MDI1NjNMMjE0LjQ5MzI2NDE1Nzk5NzEyLDI5NC44NzM5MjYyMTczNDg3TDI0My44MjUyMDc1NTkxMTUyLDI5Ny40MjA4MzMwODYxOTk4TDI0OC43NjI0NjQ3Nzk1MzkyLDIzMC45NTc5NzY3ODUzNDQ2TDI0OS4xODIyNTAyMTc2NjQsMjMwLjk4OTA4MTI0MTU4ODIyTDI3MS44NjY0OTMwMzU1NjI5NCwyMzIuNDMzMTcxMDU5MjI2NTRMMjg0LjQ4MDE0MTQwNTg0NzQsMjMzLjAzNTQ1MTU1NTAwNjE1TDI4My4yNzEyOTI5NTk4ODc2LDI2MS43Njg1MzQyODk1MTQ2NkwyODYuNjIwNjM4NjA2MzQ2MywyNjQuNTI1OTM1NzM0MjM4OTRMMjkyLjI0ODUxNzQyNTQ3NjczLDI2NC41NzI5OTcyMDYwNTYyTDI5Mi41ODk5NzcwNzcwNTI2LDI2Ny4yODQ0NjM3ODA0NjIzTDI5Ni40NjUyMDk5NDA0MjQ3NiwyNjguMjgxOTg2NDYzODE3TDMwMi41Mzk5MzQ5MDk4ODQ5LDI2OC40NTAyNjg4NTIyMzI5N0wzMDcuNzAwMjc4OTk1ODU5OTUsMjcwLjg2OTQxNjA2NjMzMTk1TDMwOC41MjYwOTU0NDc2OTQ5NiwyNzMuMTA3NzM4MzE1MjM3TDMxMC43NDE0OTUzOTI4NTA2NSwyNzEuMDg2NTA3MTk5OTc2OEwzMTMuNzQ5ODYzOTM5Mzc5NiwyNzMuNTE2NDg3MjU4NjY2N0wzMTYuMzc0MjgxMzcxMTg4ODMsMjcyLjgzOTUwOTI1NTYxNzNMMzE2Ljc4NzkxNDMwNDU0OTEzLDI3NC41ODk5ODAyMTYwNzQ0TDMyMC4zMDY4NzkwNzE2Nzc2NiwyNzEuNjE0NDY1OTM1NjA1MUwzMjAuNzI2NzA3NjA0NjMyOTYsMjczLjI4NDM2ODMzOTE5OTk0TDMyMi45MTA3NjQxODgwNzkxLDI3Mi41ODg0MjMzMDcyMjc2M0wzMjUuMDc4NDE3NjYyNTIwNTYsMjc0LjQyNjY0MDIyNzM4ODJMMzI5LjQ0MDQyMDQ0MzAwNjI1LDI3NC40NDIwMDkyNzQzMjZMMzMyLjA1NjU4Nzc0MjA2NDksMjcyLjc3NzU3NDE0NDE2MDE2TDMzNC4yMzU4NTQzNTIzNjc0LDI3My4zMjk0MTUyNTcwODY4TDMzOS44OTgwMjE4NTMyMTQ3NCwyNzIuOTA0NjIzNDk0NTc1NEwzNDAuNzU4ODc0ODMyNjA0MiwyNzEuNjI4NTkzNTMzMjA4MjNMMzQ1LjE0OTA5OTIwNzE5NDcsMjc0LjgzNjc4Mzc0NDAwMTM3TDM0OS45NzMxMTkwNzY2NzQ5LDI3Ni4yNzYwNjEzMjA4MTNMMzUwLjg2NDI5NjM0MDU0MDIsMjc3LjI5MjQwNDc5MzYxNDdMMzU1LjI0MzQ4NzQ1MDI0NDIsMjc3LjUyNzQ4MTA3Njc5MTczTDM1NS40MDU1MTM2NDU2NDYzLDI4NS4zNzMzNDY5NTA2OTk4TDM1NS43MTc3Njg4NjQ4NjU5LDMwMC40OTM4MTkwNTkyMDEyNkwzNTguNDYxMDE4NzI5MzE3MjMsMzAzLjM2MTY5OTE3NjA5OTVMMzU4LjU0NDM2MzU0Nzg4MDgzLDMwNi45OTgzMDE3NjEwNDA4NkwzNTkuOTA1MDQ5MDUyMzI3MywzMDcuNTk4OTgyMzc0NTYwNzZMMzYwLjQzMDk4NjkxOTkyMzE2LDMxMC43NDg3NjExODAwMTgwNUwzNjIuMjczNjQ1MDM3MzcyLDMxMi4zNjIyMzUwMzY4MDMwNEwzNjEuOTY4NDQxNjY1Mzc0OSwzMTguMDU4NTk5OTkzMjExM0wzNjAuMjMxNzI3MTYwNDEyNzMsMzIxLjE4MTE0OTA2NTIzODA2TDM2MC40MjMyODU0OTQ2NDk4LDMyOS4xNDU0OTQyNzkwNzYxTDM1Ny43Njc4NTg2OTc4NTg4NiwzMzMuMTQ3OTgxNzY0MTg1M0wzNTkuMTczNjUyMDgwNjk5NDcsMzM0LjQ1NjE4NTEwMTE1ODg0TDM1NS4wNTU5NzYxMzU3MDc4LDMzNS4xNzM4NTc3MzA3MjgwNkwzNDkuMTI1OTk5NzYyMDY3MiwzMzcuOTUyOTUwNzkxODIyODRMMzUwLjAyMjE4MzI1Mzg1NDEsMzM2LjM2NDQ1NDgzMDQyNDhMMzQ3LjI3Mzg4MDQ2NTgyNTksMzM3LjExMjM3NzUwMDQxNjlMMzQ3LjY4Mzg3Nzc4OTg4NDMsMzMzLjQwNDU0ODgyNjcxMjlMMzQ0LjQ5MDczMDQzODQzODE2LDMzNC45NDAyNzc1NTE1MDAxTDM0NS40NzM1ODczNTYwMDg5LDM0MC41MjAwMzg4MTIyODkwNEwzNDIuNzIzNDYzNDQ5NDM3MTMsMzQyLjM1ODg0MTU4NDk4MTdMMzQyLjczNTkyNTU0MDc2MTQ2LDM0My42OTYyNTUxNzA4ODc0N0wzMzkuNTIwMzc0MTEzMDIwMSwzNDYuODY3OTQ1MDY5OTQ3MUwzMzEuMTc1NzIyODYyNzk2NjUsMzUwLjk4MjUzOTc1Mjk5NDE3TDMyOC4zODQ0OTg2OTYxOTQ2NywzNTEuMjE0NzUxMTI3NzMzOEwzMjguODUzMzM0ODk3MzA0OCwzNDkuNDA4MzUzNDgyNzk0NEwzMjUuMTI3NzI5MjUwMzQzNiwzNTEuMjgxMjMzMjQzMzEzN0wzMjYuMDUwMTEwNTYzMTEzMjYsMzUzLjE3MDk1ODY5OTE4ODM2TDMyMy43MTI2ODYxNjg3OTQxNiwzNTQuNDE1Mzc3NjUwNDc0NTdMMzIwLjQ1Njg2MjQ5NjAyMjg0LDM1My4zNjk5OTA0NDAzNTQyTDMyMC44OTgzNzM5NzAyODM0LDM1Ni4yNzkyOTgzMjI3NDgxNkwzMTUuMjYzNjU2NDY0NTgzLDM1OC40OTUzMjkyMTUxMDczNUwzMTcuNjAzNDIzODMwMzkyOTYsMzU4LjUyMzQ1NzM5MzYyNDc3TDMxNS42ODUxOTQ2MDcwMzk3LDM2Mi4xODgxMTg3NTU1MDQ4M0wzMTMuMzQxOTE2MDYxMzgxNzcsMzYxLjkyMTExMDUxMzk3NzhMMzE0LjcyMjQ1MDc2OTc1OTc1LDM2My45NzkyNDIzNjU3MjIyTDMxMC43NTM1MTA0NjQ0MjkwNCwzNzYuNjg1NzE1OTM3MDA0NDNMMzEzLjk2Njg2MTY2MjEzNjMsMzg0Ljc4NDYyNzM1NDYwNTk2TDMxMy45MzM2NTU2NzAzNzk3LDM4Ny4yMDQ2MDEzMjk2MDg2NEwzMTUuODIzMTEzMzYzNjQzMSwzODkuMzM2MjI3ODYwODQ5MzZMMzExLjAwODU2ODg0NTcwNzgsMzkwLjQzODU5NTk5NzU1MDVMMzA5LjYwMTkzMzc0Mzg1NjYsMzg4LjQ2NDY1OTYyODEyNjdMMzAyLjQyMjIwNzAyMDg4NTE0LDM4Ny45MzExNDA5NDY3MDYzNkwyOTQuODc0NzQ5MzQwNjk4LDM4My42NzUzOTQyNzQ0MTI3TDI5MC4xMzYwODgyMjg1ODAyLDM4Mi40MzU3NDY2MjUzNjI4TDI4Ny41MTQwODYzMTkyMzAxNiwzNzUuNDY0MzIxMzA3Mjc3MDNMMjg1LjY5OTIzOTM4OTE3MjUsMzczLjEyOTI0Nzc4NTc2OTU2TDI4NS4wNjM0MzgwMzEzMDkxNSwzNjQuNzIwMjMwNzQ3OTc1MDVMMjgwLjQ3OTQzNTI1NjA5MTE2LDM2MS42MzgzMTgzNDYyMTI4TDI4MC4xMjM2MjkxODMwNTc0NiwzNTguODc2MDY0NTk4Njg4MDZMMjc4LjM1MjA1MzYwMzU1NzQsMzU2LjQ0NTI4ODg5NTc1NjA1TDI3NS42MTk4ODE0MTQxNjEzNCwzNTQuNzUzNjg3MjY5NzgxNEwyNzUuMjc0NjQ1NDM5OTY1MDcsMzUyLjA2NTQwNjM3NTExNTFMMjcxLjQyNjgxMTU1Mjg2NjQsMzQ0Ljg4MTYxNTk5NjQ3MTg1TDI3MS4xMTQ5Mzg1NDk4NDg4LDM0MS43OTUxMzgzNjEyNTQ2TDI2Ni4zMTQ1NjAxNDcyODQ1LDMzNi4zNDczNjc5OTUxODI5TDI2NC4wNjQ2MDUzNTc2MDM1NywzMzUuMzU3NjAzNzMwODA5TDI2Mi40MDIxNTYyMzQ3NDkyNywzMzIuMTg3NzcyNzA0MjM0NUwyNTIuODQ3MzA0NTAyMzI5MjIsMzMwLjY1OTQ5NTI1MjEzODhMMjQ1LjkyMDU5Nzc0NDk0NzM0LDMzMS4xMzg1NDg3NTY4MDEyNEwyNDIuNzE3OTMyOTI1MzE2MzUsMzM3LjIyNDgzNjMwMTAxOTNMMjM5LjYwNTQwMjM3MTA4MDYzLDM0MS43MjgzNTk4MzgyMzM2NEwyMzcuMjkxNDU2MjYxOTE1NDQsMzQxLjYzMTM4NjQ3NDkzODY3TDIzNC4yNjY3MzI2MTM2MzUxLDMzOC43OTA3NzMyMzI3NjA2N0wyMjYuNzIzNjMyMjcxNzAyMiwzMzQuODQ5MjE3MTAxOTM2MkwyMjYuMzc5ODk1Mjk0ODg2MywzMzMuNDc2MjE3MzMyOTU2NTRMMjIyLjA1NzU5NzU5NTE1NTE2LDMzMC4xNjkxMTEwNzQ2NzUyNEwyMjAuNjEwNDAwNzQwNzg4MzIsMzI1Ljg0NDAyNDE3MTA1NTZMMjIwLjk4NTA5Nzg4NjEyNTYzLDMyMS43NjE0NDQ2MTA1NjU3TDIxOC45ODcxNTM3OTAzNjA5NCwzMTguNjQ1MTA1OTYxMDE2ODRMMjE3Ljk3ODY3NzkzNzgyODM3LDMxNC44MjQ2MTA1ODY4NjQzTDIxNC41MzY3NDQ4OTE0Njg5NywzMTIuNzQ4MTc5ODczNzM0NkwyMTEuMjA5NDU4OTU3NzY4ODUsMzA5LjY0MDAwMzc3OTE0ODIzTDIxMC41MDIyOTI2NTU5MDQ4LDMwNy42NjI5MDc3NDc0NzE5TDIwNi44NTI1MzE3Mjg3OTkzLDMwMy41NTE4OTYwMjU4MjIwM0wyMDQuMjg3ODU3MDg4MjI5MzcsMzAyLjE2NjU1MTM3ODg3NThMMjAxLjYzNzQ2NTIyOTM3MzM2LDI5Ny41MDQwNzI0NTI3NDE0N1pcXFwiPjwvcGF0aD48dGV4dCBjbGFzcz1cXFwic3RhdGVfX2xhYmVsXFxcIiB4PVxcXCIyODkuNzY3MTc5NzAzOTIzNTVcXFwiIHk9XFxcIjMwNy43NDc2ODIwMjczODQ1NFxcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5UWDwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1OTVxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNMTY4LjM5MDMzNjM3MzU1ODIsMjk5LjQzMzA0MjI0ODU3MDRMMTc5Ljg5MjE0NjAwNDU1MDc3LDIxNi4xNDExMzg3MjEyMzQxNEwyMDQuNzc5OTExMDYzOTgyMiwyMTkuMjkwOTY5NTM4MzQ0OTRMMjA1LjE3NzE3NjQ1MTgwNTA4LDIxOS40OTY2NTkxMTE4MTk1NUwyMjkuNzI1MzYxODYxNTQ0MTIsMjIxLjk1NTIzMDE1ODUzNzM1TDI0OS43MzMwMzMyODA3MjczNCwyMjMuNTM2NjIxMTEwMzExOUwyNDkuMTgyMjUwMjE3NjY0LDIzMC45ODkwODEyNDE1ODgyMkwyNDguNzYyNDY0Nzc5NTM5MiwyMzAuOTU3OTc2Nzg1MzQ0NkwyNDMuODI1MjA3NTU5MTE1MiwyOTcuNDIwODMzMDg2MTk5OEwyMTQuNDkzMjY0MTU3OTk3MTIsMjk0Ljg3MzkyNjIxNzM0ODdMMTk5Ljg1MzM3NzE4Mzc5NzQ4LDI5My4zMjY0OTc2NzAyNTYzTDIwMC4zODE1MDU0NzIzODU4NCwyOTYuNjQ4OTM3ODkwNzcwMkwxNzkuNTA3NTEyMjQ0NTI4ODcsMjk0LjEzOTE1ODE5NDEwNjdMMTc4LjY0NjEwNDk4MDg3OTc2LDMwMC44MDM4OTgzOTYxNjY0WlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjIwOS42OTk0NjcxODQ3OTU0XFxcIiB5PVxcXCIyNTguNTQzMzEyMTI2ODU1N1xcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5OTTwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1DT1xcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNMjYwLjk4NTM0ODA4NzA0ODg2LDIyNC40Njk5NTQ2OTgyMzU2TDI0OS43MzMwMzMyODA3MjczNCwyMjMuNTM2NjIxMTEwMzExOUwyMjkuNzI1MzYxODYxNTQ0MTIsMjIxLjk1NTIzMDE1ODUzNzM1TDIwNS4xNzcxNzY0NTE4MDUwOCwyMTkuNDk2NjU5MTExODE5NTVMMjA0Ljc3OTkxMTA2Mzk4MjIsMjE5LjI5MDk2OTUzODM0NDk0TDE3OS44OTIxNDYwMDQ1NTA3NywyMTYuMTQxMTM4NzIxMjM0MTRMMTg4LjAzNTg2NDA5MjgzMjA0LDE1Ny4xNjczMDczNzQyNzgzOEwyMTguNjU0MDcyODU1ODc5NjYsMTYxLjAxNjY4MDcyNzI0NTFMMjQyLjY4Mzc3Njg5MDc2ODY4LDE2My4yNTY4MDU5MDI2NjczNEwyNjQuNzc3NzIyNTY3NTQzMiwxNjQuODk4MDc1OTEyNTg4NjRMMjYzLjgzNDA0Njc1NjQ2MjEsMTc5LjcyMTY0OTE5NjI0MzY3WlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjIyMy4zNTk5NjYwMTAzNzgyM1xcXCIgeT1cXFwiMTkxLjM4NDMwOTU3NzgxMzEzXFxcIiBkeD1cXFwiMFxcXCIgZHk9XFxcIjBcXFwiPkNPPC90ZXh0PlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLU5FXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk0zMzMuOTgzNTg4MjMzMDM3NiwxNzMuMjA1MDI1NzQ5OTI4MTVMMzM1LjE5Mjg2NTk1MDU3OCwxNzcuNDExNDA4NDMwNDUxOTZMMzM3LjE5NTA0MDA3NTI1MjgsMTc4LjE5NjY3NTQwODE3Mjg0TDMzOC4wMTUyNTQ0NDgyOTI2NCwxODEuNDQ5NDk0NjMzOTM4NTdMMzM5LjIyMTQ0NDk5OTIzOCwxODEuODM4NTI5ODkwNTU3NTRMMzA5LjEzMDE5Nzc3NTY0MSwxODEuNjM1OTAyMzU3MDAxTDI4OS44Nzk2MjYzMDk1MTQ4LDE4MS4wNTg5NjIxMjU1ODQ0NkwyNjMuODM0MDQ2NzU2NDYyMSwxNzkuNzIxNjQ5MTk2MjQzNjdMMjY0Ljc3NzcyMjU2NzU0MzIsMTY0Ljg5ODA3NTkxMjU4ODY0TDI0Mi42ODM3NzY4OTA3Njg2OCwxNjMuMjU2ODA1OTAyNjY3MzRMMjQ1LjE4Njc4NzM3NzgwNzYsMTMzLjc4NDcxMTM4MTA2NTM0TDI3MC4xMTAzODAyNDM0NDU2LDEzNS41OTM1OTY3NTY0NDI0OEwyODguMTU1OTAyMjA1MTY4MywxMzYuNTIwMTQ1OTE1NjU2MTRMMzA0LjY3NzY5MjQ1NDY4NSwxMzcuMDg3MTM4Mzk5MzkxMDVMMzA1LjAzNTQ1Nzg0ODU3ODMsMTM4LjEyNjIwNjg2MzY3NjQzTDMwOS4yMTQ0MjE1NjYzMzY0NSwxNDAuNjgxMzI5NDc5MzA3MTJMMzE2Ljk0OTg3MDY1MDM5NDMsMTM5LjMxNDQ3Mzk4MjY3NzlMMzIzLjg2MTE5MTA5OTM3MTgsMTQyLjM5ODY1NTgyNTMwNEwzMjQuNjE4ODE5MTI5ODEwMDUsMTQ0LjcwMTc4MDM5NTY2MDg4TDMyNi41NTM3MzQwMDkwOTExLDE0NC45NTAzNTg1NjcyOTM5NkwzMjguNDcyMDA5MzA3NTUyOCwxNTEuNTM3MTcyNjQ0MjM0OTRMMzMwLjAyOTg1MTA1ODI4NywxNTIuNTcxMjMyMTU0MzU5NDVMMzMwLjQxNDA5NDM0ODkxNTgsMTU5LjMxNDU4NjAzNTc2MTg2TDMzMi43NzQ2MDMwNDYwNTQ5LDE2Mi4zMjk2Nzc1MDAyNDIyN0wzMzMuMTgyNzQ5MDExOTU1OTMsMTcwLjQyNzAzNTEyODAzMTMyWlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjI4OS44MDYyODY1MjcyMjU2XFxcIiB5PVxcXCIxNTguMjQ5ODE0MzA0MjgyM1xcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5ORTwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1JQVxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNMzMzLjk4MzU4ODIzMzAzNzYsMTczLjIwNTAyNTc0OTkyODE1TDMzMy4xODI3NDkwMTE5NTU5MywxNzAuNDI3MDM1MTI4MDMxMzJMMzMyLjc3NDYwMzA0NjA1NDksMTYyLjMyOTY3NzUwMDI0MjI3TDMzMC40MTQwOTQzNDg5MTU4LDE1OS4zMTQ1ODYwMzU3NjE4NkwzMzAuMDI5ODUxMDU4Mjg3LDE1Mi41NzEyMzIxNTQzNTk0NUwzMjguNDcyMDA5MzA3NTUyOCwxNTEuNTM3MTcyNjQ0MjM0OTRMMzI2LjU1MzczNDAwOTA5MTEsMTQ0Ljk1MDM1ODU2NzI5Mzk2TDMyNC42Mzc0ODczODIyNzIsMTQxLjg0OTQ1MzczMTc0NzJMMzI1LjgyNDE1Mzc4MzYyMjkzLDEzNi42Mjk0MDYwNTQzNTA3NEwzMjYuNTkzNTY4MTIyMTk0MjYsMTM2LjM5NTc1NzkyNzYyNDdMMzI1LjA5NjM1OTEwMjU3NjQsMTMwLjA1NjI3NjE3NDIxMjgzTDMyNi42MjMwNDkxNjEyODcyNywxMzAuMDY0NTM4MzcxNDEzOTZMMzUxLjQzMDc4NTM4NzI4NzEsMTI5Ljg3NTU0Mzk2NDU2OTE1TDM2OC45ODA1ODkzNDI2NzY1LDEyOS4zNzM4NDIyODIyMDQ0NkwzODIuMzI2MzcwODk1MDI3NTQsMTI4Ljc4NzkxMTg2NzczMzlMMzg0LjA0ODQ3OTY4MzY4MTQsMTMyLjUwMjc2MTY1OTMwNzIzTDM4My4xMjIwMzUxODkzNzcxMywxMzYuOTEwNDY4MjM3NTAwOTRMMzg0LjQzMTIwMDQ4MTQwMjksMTM5Ljg1Njc0MjQzNTczMDFMMzg4LjM3Mjg1ODY3MjcxMTM1LDE0MS4yMzA4ODg0NTE2NTIyOEwzODkuMjUyMDY2MjQzMTM3OSwxNDMuMDg2MTU4NzAzOTM4ODVMMzkxLjgwODk5NTExNjY3OTQsMTQ2Ljk4NzYwODA4Nzk5NzI3TDM5NC42MjI1OTc2NjE4OTc1LDE0OC40MDY3OTMyMzQxMzcyNEwzOTQuODcwOTI2NTQ1MjY3OCwxNTIuNDQzNjYyODQ5OTA2OEwzOTMuMTUxNTI5NzkyMDg2NzYsMTU2LjQ0MjE2OTI1NTgwMTY3TDM4OS43MzMzMjkzNTk4ODUsMTU4LjU0NzczMTY3NTM0MjhMMzg1LjQ1MzIxMDU3MzgwNDI2LDE1OS40OTQ2NjgwOTIxNzU2M0wzODUuMjExOTM1Nzk4OTgwMSwxNjIuNDQ3ODAwNTYwNzk4NDRMMzg2Ljg2MzM3MDk2ODA5ODgsMTYzLjc5MjA3Mjg3MDA0NTlMMzg3LjAyMzU4NDcwMTk2NjQ2LDE2Ni44MDQ4MDY5MzM3NzQ3OEwzODUuNTAyNzc1NDQwOTIzMzYsMTY4LjA3NzI0ODM0MDQ2MjU3TDM4NS4yNDA5Njc2NjEyOTcxMywxNzAuNzE0ODkwNTg0NDkzOEwzODIuODkzNjYzMjEwMzIxMTcsMTcxLjU0ODMxMTMxNDQ2OTUyTDM4Mi4yNjM1OTc2MzQ1ODEyLDE3NC45OTg1ODE0MjQxMTNMMzc4LjUxODkxNDA5NTg5NiwxNzEuNjc0MTEzMDA2MjYxOUwzNjEuODM5NDI5ODQ4NTc4MDUsMTcyLjg0NjAxMzczOTEzOTVMMzQyLjM0MjM5MTY3MzI4MTMsMTczLjMwOTY3MjUwOTUyNTc0WlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjM1OC41NDg4OTczNzM3ODgxXFxcIiB5PVxcXCIxNTAuNzI3MzI0OTc3NDE4MTZcXFwiIGR4PVxcXCIwXFxcIiBkeT1cXFwiMFxcXCI+SUE8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUgc3RhdGUtSU5cXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGNsYXNzPVxcXCJzdGF0ZV9fcGF0aFxcXCIgZD1cXFwiTTQyMi45MDY4OTEwMzM4MzU5LDIxMC43ODUzNzU2OTAzMTE0TDQyMi42MDc2NzM1MjIwMDAyNSwyMDcuMjE5NzQ1MjIwOTExMTRMNDIzLjczMjIzMjM1MTMyOTQ2LDIwNS44NDc5NjkwNDMyMzQ1N0w0MjUuMzU2NDU4MjI4NTkwNTUsMjAwLjc2MDI1NzI5MjAwMDhMNDI3LjkwMjQ1MjQ2NjE3OTQsMTk3LjAyMzQyOTczNDQwMzNMNDI3LjU2MTc4Njg5NjUxMzQsMTkzLjIyMjQyMDM4NDc1ODk1TDQyNS43MzcyMzA5NTIwOTczLDE5MS4wNjk5Njk0MzAwNDY3NEw0MjYuNjQ3NDYxMjk2ODIwNiwxODcuNTU3NTg1MDY1Nzg1MDJMNDIzLjUxMjc2NjczMTk5MzYsMTUyLjQzMjcyMzgyOTA2Mjk4TDQyNS45Njg5NjI5Njg5MjQsMTUzLjQ4NTI4NTAxNzgzOTAzTDQzMS4yMzYwMTk1NTA4OTY0NiwxNTAuOTE3MzMxNDY2NDQyODdMNDUzLjAyNjgzMjExOTQwNTUsMTQ4LjU3Mzc1MDY3NTE3Mjg1TDQ1My4xMzg2MzIwNTU4MTE5NywxNDkuNTE5MTMyNjg0MzU5Mkw0NTcuNjYyOTIxNTczOTEwNywxODcuNzc2NTk1NTQzODIwMjRMNDU4LjIyMzEyODgyNDA3MzU3LDE5Mi41MTM3MTY4MDQ3MzIyTDQ1My45MjYzNTQxNzU1OTE3LDE5NC40NTM1NDQ1NTE3NDE2M0w0NTEuMDM5OTc5MTg3MzAxMzYsMTk0LjM3ODgxMTgzMTExNjJMNDUxLjc1NTAwMDMxMjMzMTMsMTk3LjA5OTEyMjAwNTExOTVMNDQ3LjY1OTY3MzYwOTE3MDYsMjAxLjE0NzY1NjgwOTU0MzVMNDQ2Ljg2MzEwMjc4ODkxMjA0LDIwNS4zMTEyMjk5OTgxNTIwNEw0NDMuOTkyMDQ5NTE1ODM5MzcsMjA1LjYxMjg4MTExMDg5MjU0TDQ0MC41MzQ2NTIxMjA1ODgxMywyMDQuMjA3ODA3ODc3NDMxMzhMNDQwLjQyNjUwMzcxODk0NDUsMjA3LjI1NTQ0ODYzMDA1N0w0MzcuNTk2Njg4NzE4OTIxNSwyMDguMDE0OTA3NDM3MzY3N0w0MzcuMDU0NzMzMzQ2MzM5ODQsMjA2LjcwOTU2MDI0NDk0MDhMNDM0LjI5MjMxOTg2MzQ3NjM0LDIwOC4xNzI2OTg1MzM4MDQ3TDQzNC4wNDUxOTA3MTk1NDA0NywyMDkuOTUzMTIyMTIwNzk1NDZMNDI3LjYyNzU5NjI1MjY0NiwyMDcuODI0NTUxODg2Mjg0MzNMNDI4LjE5MzQ3MzExOTIyMTI3LDIwOS41MzA1NjI3NjI2NjY3TDQyNC4wMDE3OTQxODUwOTAyNiwyMDkuMDE3MTEyMTI2NzM0NTZaXFxcIj48L3BhdGg+PHRleHQgY2xhc3M9XFxcInN0YXRlX19sYWJlbFxcXCIgeD1cXFwiNDM5Ljk0MDA4NTc3NDkzODhcXFwiIHk9XFxcIjE3Ny44NzE5ODM0MDY0MTM5XFxcIiBkeD1cXFwiMFxcXCIgZHk9XFxcIjBcXFwiPklOPC90ZXh0PlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLVBBXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk01NjAuMzQzMzkzNjI5ODA4NywxNTkuOTAwODkyMDYxNTQ3NzhMNTU4LjY1MjU5NDkyNjg2MSwxNTkuNzAyMjE1ODU2NzExNEw1NTYuMjcwNDkxMzE2NTYwMywxNjIuMDA4NjMxNzU3OTI3NDVMNTM3LjM1MDQ1ODQ1Njg0MDksMTY1Ljk5Mjk4MTU5NDkyMzJMNTE1Ljk1MjE4NTQyMjkyMjQsMTY5Ljg5ODU0NzEzNjE0NjQ4TDUwNC40MzY1MDMzNTcyNTk2LDE3MS44NTc2MzgwMzE1OTQxTDUwMi4yMzEzMDg1OTQzOTA0LDE1OC40NTE3MTQwNjM2ODU4TDQ5OC45OTc4MTQ0OTY1ODM1LDEzOC43OTQ1MDQyOTg5MjEzTDUwNi4zNjE4OTEyMzk2OTI0NSwxMzMuMjkxNTUzODc5ODkxOEw1MDcuMDIyODgxMjI5OTUzNjcsMTM3LjEyMDAzMzUxNzE2OTY1TDUxNy43ODg2NTg3ODk3ODQ0LDEzNS4yODMxODc5Mjc5Njk4M0w1NDMuNDMwNDM1NjM0OTY5MywxMzAuMjQwMTg5MTY0MzY5NDRMNTUzLjcwOTE0MTE3OTUwNTQsMTI3Ljk0NzM0ODE1MTMxMTE5TDU1Ny44OTg4MTM1Nzc3MzIsMTMwLjU5MTAzMDYxMzgzMzk0TDU1OC41NTgwMzM1NDA5OTk2LDEzMy41MzI4ODUwMzU2MzExMkw1NjMuMDU2NzMyMTY3OTA2NywxMzUuNjA3NTEwNzQ1OTgxNTlMNTYxLjc0OTI5MTg4OTU0OCwxMzYuOTYyNzM5NTUyNzY2Nkw1NTkuNTc3NDQ0NjY4Mjk0MSwxNDUuMzQzMDQ5MDA0NzQwMzVMNTYwLjI2NzQwOTU0Mzg4NzEsMTQ4LjQ0NDA1NTMyMjUyMzM1TDU2MS40MTU3NzA2MTg1NDgyLDE0OC4xMDY0ODQ3ODMwNjU4N0w1NjYuNzA5NzMxMjY2NjM5MywxNTMuNDI2OTI0NzU3ODQwODhMNTYyLjk0OTAzMzE3MDQ3MywxNTYuNzk5OTA4ODg4MDM1Nkw1NjMuMTkxNDc1MzQwOTkxNiwxNTcuODg1NjgxNjI0NjY5NlpcXFwiPjwvcGF0aD48dGV4dCBjbGFzcz1cXFwic3RhdGVfX2xhYmVsXFxcIiB4PVxcXCI1MzEuMTg5ODU1MDIzMTMxNVxcXCIgeT1cXFwiMTQ5LjY1MzIzMTE5MDgxMDM3XFxcIiBkeD1cXFwiMFxcXCIgZHk9XFxcIjBcXFwiPlBBPC90ZXh0PlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLU5ZXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk01NzUuNDY2NjM1MTQzOTc0OSwxMzguNDEyMzIwOTU3MjFMNTc0LjYwNzMwODU1Nzc5OSwxNDEuNjM4MTE5MjIyNzc5Mkw1NzcuMTU0NjAxNDg2MDA3NiwxMzguNjU5ODE1MDY4ODUzMTZMNTg2Ljk1Njc3MzcxNDMyODUsMTM1LjQyNjc5NDYyMzI5ODE4TDU4OC43NTAwOTUxMjYwNTE3LDEzMi44NDQyOTU4ODU3NzA4Nkw1OTEuOTYxNTE0MDAxNDU1NywxMzQuMjM2MzU3ODU3NDQ1MzRMNTk0LjEwMDkzNzM3NzQ1OTMsMTMzLjAyODMwNDEzOTAyMjhMNTgzLjE0MzUyNjI3NDY0OTgsMTQxLjQ1MDAwODMxNjA1NzVMNTc4Ljc1MTc0NTgwOTAxOTksMTQzLjU4NDQwNDkwNTgzMjEyTDU3Mi41MjI0MTEwODQwMjMxLDE0NC45MDYyMTkyODQ5ODc0TDU3Mi41NjM2MDQ4NjE0MTk3LDE0My4zNDYyNjE3MDgwMDg1N0w1NzIuNzE3MTA5NjY1MzA0NiwxMzguODIyNDI0NDM1MDcyNTVMNTYzLjA1NjczMjE2NzkwNjcsMTM1LjYwNzUxMDc0NTk4MTU5TDU1OC41NTgwMzM1NDA5OTk2LDEzMy41MzI4ODUwMzU2MzExMkw1NTcuODk4ODEzNTc3NzMyLDEzMC41OTEwMzA2MTM4MzM5NEw1NTMuNzA5MTQxMTc5NTA1NCwxMjcuOTQ3MzQ4MTUxMzExMTlMNTQzLjQzMDQzNTYzNDk2OTMsMTMwLjI0MDE4OTE2NDM2OTQ0TDUxNy43ODg2NTg3ODk3ODQ0LDEzNS4yODMxODc5Mjc5Njk4M0w1MDcuMDIyODgxMjI5OTUzNjcsMTM3LjEyMDAzMzUxNzE2OTY1TDUwNi4zNjE4OTEyMzk2OTI0NSwxMzMuMjkxNTUzODc5ODkxOEw1MTEuMDUyODQ4MDYzMjc3NywxMjguNjA2NDI5Njk0MzE3MTdMNTE0LjU4OTcxMjkwMzgwMzYsMTI0LjI2NTczODU2NTQ0NTA4TDUxMi4wODcyNTI0OTE3MjE1LDEyMS4yNTg2Nzg1MDg3NjI4NEw1MTEuMDIxNTMyMzQzMDA4MDYsMTE3LjUwOTI3MzM2NzAwNzA0TDUxNS4yNjk3MTMyOTE4OTEyLDExNS4yMDYwNDEwMzg4MjA2N0w1MjQuMzMyNzY1Mzc3OTA4OCwxMTMuNzMwODk1NzA4MjkxNjVMNTI3LjI2NjM1NTg4MzU0MjUsMTE0Ljc3MDE1MDY5NDE2NzM0TDUzMy4xOTgzMTk3NTM5NjQxLDExMy4xODAxNDgxMzY5NTkxM0w1MzcuMzk3MTE4MzM2MjU0OCwxMDguOTIzNDk4MDE3NDQ0MUw1NDAuMTU2NjA3NzAxNDYwOSwxMDcuMjEyODQzODg3ODIyODNMNTM4LjE5MTMyNzA0MDIxODcsMTAzLjQyNDc4MjI4MTAzMjc4TDUzOS44ODQ5MTg5Nzc2MDk1LDEwMi4yNTkxMDI0NTY3NDQ1OUw1MzYuNzUxMzI4NjI2ODA3MSwxMDAuMjU0MzkyODQzOTg1MzNMNTM3LjEwMTk4Mzc5MDc5OTMsOTguMjQzMzczMDU1OTQ5NTJMNTQwLjY2OTI4OTk5MDkzOTUsOTUuMDYzMzY0ODIyMTM4NEw1NDUuMzc2ODA2MzU5MzUxMSw4Ni42ODY5ODYxMzIxMDk1TDU0OS45NDcwMTY0MzM4NzczLDgzLjE1NzYzMDE5OTcwNDk1TDU1NC43NDcxMDE4NDU5NjA1LDgyLjM3OTg1MjYyMjg5OTg4TDU2NC44NDI0OTQwMzUwMjgsNzkuNjU2OTQzNjc5OTA0MDlMNTY1LjU0ODA2MzQyODE5MzUsODUuNzM2MDk0MDU4MzIxOUw1NjcuMjQwNTY5MDE1MDM2Miw4Ny45MjQzNDM2ODIzNTU1OEw1NjYuOTQzMTQ2ODY1NTU1LDkxLjQ5MTM0MTIwNDUxMjY1TDU2OC43MzI3ODI1MTY2MTM4LDEwMC40OTI0MDI2ODkwNzkwOUw1NzAuNjAzNjMzNjQ0NjUyMiwxMDAuMTE5MTgwOTkyNjQ4MzVMNTczLjUxMjA3NjEwNjczMjYsMTEyLjAzODkyNTM2MzM3MzQ0TDU3My4zMDMxMDMxNDM5Mjk3LDEyMi42OTE5MjUyMTI2MTU1TDU3NS41NjE2MjMyMjEyMjEsMTMzLjczNTg3MTMyMjg4MTg1TDU3Ni41ODg2NDY3MzYxMzM1LDEzNC42MzEyNjkzMTI3NDc1OEw1NzQuMjkxMjEzMjI4NTQyOCwxMzYuODk3NTgwMjg0Njg4OTZaXFxcIj48L3BhdGg+PHRleHQgY2xhc3M9XFxcInN0YXRlX19sYWJlbFxcXCIgeD1cXFwiNTQ5LjMxMDQ1MTkzMjIzNjJcXFwiIHk9XFxcIjExNC43MzY5MzEwMjA3OTIwMVxcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5OWTwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1WVFxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNNTgxLjgwODkyNDY5NTk0OTMsMTEwLjIyMjc4NTkwNDc4MTE4TDU3My41MTIwNzYxMDY3MzI2LDExMi4wMzg5MjUzNjMzNzM0NEw1NzAuNjAzNjMzNjQ0NjUyMiwxMDAuMTE5MTgwOTkyNjQ4MzVMNTY4LjczMjc4MjUxNjYxMzgsMTAwLjQ5MjQwMjY4OTA3OTA5TDU2Ni45NDMxNDY4NjU1NTUsOTEuNDkxMzQxMjA0NTEyNjVMNTY3LjI0MDU2OTAxNTAzNjIsODcuOTI0MzQzNjgyMzU1NThMNTY1LjU0ODA2MzQyODE5MzUsODUuNzM2MDk0MDU4MzIxOUw1NjQuODQyNDk0MDM1MDI4LDc5LjY1Njk0MzY3OTkwNDA5TDU4My4yOTI0NjkyNzcyNTAzLDc0Ljk4MTIyNzg2Nzk1ODk4TDU4My42ODQ4MjM0NzU3MjExLDgzLjg1MTU3OTM5MDk0OTM4TDU4MC4xNjgwNzM1MTg5NDU4LDg2LjgwMzU4NjY2MjY2TDU4MS4zNDE1MDg0MTA3NDA2LDg5Ljg0NjAxMzM1MjkzODI2TDU4MC44OTQ3NDgyMDExNDc5LDk0LjIwNDI0MTQ2NTUzOTlMNTc5LjQ4MjQyMzE2NTI1OTMsOTcuOTEwMDU0MzQ4MDQ5OTNMNTgwLjkzODkwMTk0Mzc3MjYsMTA1LjIxNDc2OTYxNzgzNDU4TDU4MC4yMDg4NjYzOTExODIzLDEwNy4wMzI1MDg4Mzk4NDMyMlpcXFwiPjwvcGF0aD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1OSFxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNNTgxLjgwODkyNDY5NTk0OTMsMTEwLjIyMjc4NTkwNDc4MTE4TDU4MC4yMDg4NjYzOTExODIzLDEwNy4wMzI1MDg4Mzk4NDMyMkw1ODAuOTM4OTAxOTQzNzcyNiwxMDUuMjE0NzY5NjE3ODM0NThMNTc5LjQ4MjQyMzE2NTI1OTMsOTcuOTEwMDU0MzQ4MDQ5OTNMNTgwLjg5NDc0ODIwMTE0NzksOTQuMjA0MjQxNDY1NTM5OUw1ODEuMzQxNTA4NDEwNzQwNiw4OS44NDYwMTMzNTI5MzgyNkw1ODAuMTY4MDczNTE4OTQ1OCw4Ni44MDM1ODY2NjI2Nkw1ODMuNjg0ODIzNDc1NzIxMSw4My44NTE1NzkzOTA5NDkzOEw1ODMuMjkyNDY5Mjc3MjUwMyw3NC45ODEyMjc4Njc5NTg5OEw1ODMuMTY3NjA4NTc1OTU1LDcxLjU5MDI1OTM4MzYxMjc2TDU4Ni4xMzcxNjcyMzE1MTc5LDY5LjczOTQxMjY3MjQ0ODM0TDU4OC42MzYxNTM1NjA2ODM2LDc2LjE2OTUxNjExNjc3MDNMNTkxLjIzNTE3NjY4OTEwODIsODQuMzc5Njc3Njg5MzYxMTlMNTk0LjY4OTcyNTY4MTY0NSw5Ny4yMDQ0ODIwMTQ5MTQ0NUw1OTguODA4NDExMTk5NzY2NiwxMDAuNjgwNzA0MzU4OTg1NEw1OTguNDIyNDA5NTI3MzcwNCwxMDMuNjU3ODczMTE2NzEwMzNMNTk0Ljk0ODk3MjkxNiwxMDUuNTc3Nzk0MjkzMDMxNjJMNTk0LjI1OTMzNDI0NjE2MDgsMTA3LjQ4MzM4OTI3MTY2ODIyWlxcXCI+PC9wYXRoPlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLU1BXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk02MDYuMTM3ODA3NDc4NDgzMiwxMjMuMDg0MzA1NTUyNjIxTDYwOC4xMzgzNzIwMzYzMDMyLDEyNC40Mjc3NjUxOTIxODY2TDYwNS4xNDI0NDMyMTY1Mjk3LDEyNS40MTI3MDQ2MDEyMDM1OVpNNTczLjUxMjA3NjEwNjczMjYsMTEyLjAzODkyNTM2MzM3MzQ0TDU4MS44MDg5MjQ2OTU5NDkzLDExMC4yMjI3ODU5MDQ3ODExOEw1OTQuMjU5MzM0MjQ2MTYwOCwxMDcuNDgzMzg5MjcxNjY4MjJMNTk0Ljk0ODk3MjkxNiwxMDUuNTc3Nzk0MjkzMDMxNjJMNTk4LjQyMjQwOTUyNzM3MDQsMTAzLjY1Nzg3MzExNjcxMDMzTDU5OS41MjEyMjg0NTkwMDY4LDEwNi4yMzIyMjU1NzczNDY1M0w2MDEuNTkzMzUxNTc2NTAwNywxMDYuNDg4MTM2OTgwNTMxNzVMNTk4Ljk0MTA4NjI2ODg4LDEwOC41MjM5NjUxNjEyNDYzNEw1OTguOTEyODUyMTQyODY2MSwxMTIuODgyNTgzNzM2NTEwMTNMNjAyLjEyMTYwOTEzNjY1MzcsMTEyLjgzNDQxMjc5MjUwMzcxTDYwNS42NTYxMDQ2OTUyNzE4LDExOC4zNjI0OTQxNDE3MjA5Nkw2MDguODg1Mjc3NzU3Mjk0NiwxMTguMjkzMzgzMTY1MzY5OTZMNjExLjIyNDcyNTc0MjYyMTgsMTE2LjQ4Njg2MzYzODI5NjY1TDYxMi41NTgyMzI5MjMwMzk0LDExOC4zMzY5MDM4MTUyNTk2OUw2MDUuMzgyMDQ3MjMxNzExOCwxMjEuODEwMjc3NzE5NTk5OThMNjAzLjYwMDIyNjc5MjUxMjgsMTE5Ljc0NzAwNDYzNTQ4NzQzTDYwMi40NzY1MjM0ODg0MzQ2LDEyMy4wOTMzNDgzMTQyMTUxOEw2MDAuMzQ1MjQzNTcyNzY3NywxMjQuMjQxNzc0NzA1Mzc0MzhMNTk4LjkxMDkyNTI2MTE5OTQsMTIxLjkxNDg5OTgxMjkyNDJMNTk4Ljc2NzcwMDIwNjc1NDIsMTIxLjM3ODM0NzAyMjUxMTMyTDU5Ni45NjkwMTM0Nzg2MzAyLDEyMC43MDc3Njg3ODg3NTU3NEw1OTUuNzM3ODEwNTIwMTkwMSwxMTcuNTg3OTQyMjM2NDk1MjJMNTkxLjYwODk0OTQ5NjA1NTYsMTE4Ljc1NDU1MjU1NTUyMDgzTDU5MS4xOTE2MDg3MDUwOTI5LDExOC42OTkyODczOTY3MjQ1N0w1NzMuMzAzMTAzMTQzOTI5NywxMjIuNjkxOTI1MjEyNjE1NVpcXFwiPjwvcGF0aD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1SSVxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNNjAwLjM0NTI0MzU3Mjc2NzcsMTI0LjI0MTc3NDcwNTM3NDM4TDU5OC4yMjMyMzMyMTQxNDIsMTIzLjkwNDQxNjgwNDkyMTJMNTk4LjkxMDkyNTI2MTE5OTQsMTIxLjkxNDg5OTgxMjkyNDJaTTU5OC43Njc3MDAyMDY3NTQyLDEyMS4zNzgzNDcwMjI1MTEzMkw1OTYuMjE5MzA0MjczNjQ5NCwxMjIuNDY1NDEwMTYxODY4OTNMNTk3LjM1Mzk2ODUxNjkyNTYsMTI2Ljc2MTY2NDQ1MzAzMDc5TDU5My40MDYzNTg1ODE4OTM5LDEyOC43Nzk5OTE0ODIxMjc5TDU5My44Mjg1NzgzMjgzMTE0LDEyNy4yNzYxMDA2NTQ3MDA5NEw1OTEuNjA4OTQ5NDk2MDU1NiwxMTguNzU0NTUyNTU1NTIwODNMNTk1LjczNzgxMDUyMDE5MDEsMTE3LjU4Nzk0MjIzNjQ5NTIyTDU5Ni45NjkwMTM0Nzg2MzAyLDEyMC43MDc3Njg3ODg3NTU3NFpcXFwiPjwvcGF0aD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1DVFxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNNTc1LjQ2NjYzNTE0Mzk3NDksMTM4LjQxMjMyMDk1NzIxTDU3NC4yOTEyMTMyMjg1NDI4LDEzNi44OTc1ODAyODQ2ODg5Nkw1NzYuNTg4NjQ2NzM2MTMzNSwxMzQuNjMxMjY5MzEyNzQ3NThMNTc1LjU2MTYyMzIyMTIyMSwxMzMuNzM1ODcxMzIyODgxODVMNTczLjMwMzEwMzE0MzkyOTcsMTIyLjY5MTkyNTIxMjYxNTVMNTkxLjE5MTYwODcwNTA5MjksMTE4LjY5OTI4NzM5NjcyNDU3TDU5MS42MDg5NDk0OTYwNTU2LDExOC43NTQ1NTI1NTU1MjA4M0w1OTMuODI4NTc4MzI4MzExNCwxMjcuMjc2MTAwNjU0NzAwOTRMNTkzLjQwNjM1ODU4MTg5MzksMTI4Ljc3OTk5MTQ4MjEyNzlMNTg5LjM2ODA2Mzc2ODQ0MiwxMzAuNDc1MzIwODYxODU4MzRMNTgyLjQ4OTIyOTI2MjU5ODIsMTMyLjIwNjE2NDQ1MDkzOTI0TDU4MC42NDgwNzg2MTc2NDAxLDEzNC42MjI4MDk4NDMzNDU4NlpcXFwiPjwvcGF0aD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1OSlxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNNTU5LjU1NTM0NzQ5OTE4MzMsMTYxLjk0NTMyMDk3MjgxNzk3TDU2MC4zNDMzOTM2Mjk4MDg3LDE1OS45MDA4OTIwNjE1NDc3OEw1NjMuMTkxNDc1MzQwOTkxNiwxNTcuODg1NjgxNjI0NjY5Nkw1NjIuOTQ5MDMzMTcwNDczLDE1Ni43OTk5MDg4ODgwMzU2TDU2Ni43MDk3MzEyNjY2MzkzLDE1My40MjY5MjQ3NTc4NDA4OEw1NjEuNDE1NzcwNjE4NTQ4MiwxNDguMTA2NDg0NzgzMDY1ODdMNTYwLjI2NzQwOTU0Mzg4NzEsMTQ4LjQ0NDA1NTMyMjUyMzM1TDU1OS41Nzc0NDQ2NjgyOTQxLDE0NS4zNDMwNDkwMDQ3NDAzNUw1NjEuNzQ5MjkxODg5NTQ4LDEzNi45NjI3Mzk1NTI3NjY2TDU2My4wNTY3MzIxNjc5MDY3LDEzNS42MDc1MTA3NDU5ODE1OUw1NzIuNzE3MTA5NjY1MzA0NiwxMzguODIyNDI0NDM1MDcyNTVMNTcyLjU2MzYwNDg2MTQxOTcsMTQzLjM0NjI2MTcwODAwODU3TDU3MC4zOTYyMzc1ODMzNTk0LDE0Ni4zMDEwODk5ODQ4MDg5OEw1NzEuMTgwOTM5NDU0MDkxLDE0Ny45MTI1NzcxNjk0MTM1N0w1NzMuODgwNzU1MzkwMzEwNSwxNDcuMTk3NTU3NjQwNDI0NEw1NzQuMjU5OTU0OTAzOTQzNiwxNTQuMDQ2MTQzMDQxMDA2NzZMNTc1LjAwNDc3NjE4MzY4MDMsMTU3LjIxODA1ODk0ODc0NDc4TDU3Mi43NjUyNjY2MjgwMDQ2LDE2My42MTU5MDA3MzA1MTI1Mkw1NzAuNTE3NDE2ODk1Njg0NCwxNjYuNDk3OTE2NTUzNjc5MjZMNTY5LjQzNTMyNTIwNDY4ODIsMTcwLjkwMjAyMjI3NzcxODA2TDU2Ny44OTg5OTE3NTQxMTQ4LDE3MS40OTMyMzE4NjY1NDk0Mkw1NjguMzg5NjA1NTAwMjcwMSwxNjguMTIyNzk0NDQ5NTE0MTJMNTYxLjc2MTU1NjUwODU2NjIsMTY2LjM0MzU3MjQwNzQwMzk0TDU1OS4zOTkxNzU1Mjc2MjQ1LDE2My4xMTg0ODgyNDUwMzgzTDU1OS4zMTQzMzE5MDIyMDcyLDE2Mi43MzAyNTI5NTY2NTUwMlpcXFwiPjwvcGF0aD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1ERVxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNNTU5LjMxNDMzMTkwMjIwNzIsMTYyLjczMDI1Mjk1NjY1NTAyTDU1OS4zOTkxNzU1Mjc2MjQ1LDE2My4xMTg0ODgyNDUwMzgzTDU1OS4zMTQzMzE5MDIyMDcyLDE2Mi43MzAyNTI5NTY2NTUwMlpNNTU5LjU1NTM0NzQ5OTE4MzMsMTYxLjk0NTMyMDk3MjgxNzk3TDU1OS41NDcwODk2MDA3MDcxLDE2NS42ODk1ODgzMjQ4ODk1NEw1NjIuMDY5MTUwMjEwMzM2LDE2Ny43NDA5NjMzMDQxNjU5Mkw1NjIuNzE4NTU0MDgwODM1MiwxNzAuNjkxMTg5Njk2MTEyMDJMNTY1LjkxMTYwNjIxMDE4MDMsMTczLjgxMTU2MzM1MTAxNzk4TDU2Ny4xNzU0NjY0NDM2ODgsMTczLjg1NTQ0Njk0NjU4MDc0TDU2OC42ODYzMzMwNTkzMDc1LDE3OC43MzE3MzI3Mzk3MDk0TDU2MS40NDYyMDI5MDkxNTIsMTgwLjE2NTQ1NDgwMzI2MDY3TDU1Ni4yNzA0OTEzMTY1NjAzLDE2Mi4wMDg2MzE3NTc5Mjc0NUw1NTguNjUyNTk0OTI2ODYxLDE1OS43MDIyMTU4NTY3MTE0TDU2MC4zNDMzOTM2Mjk4MDg3LDE1OS45MDA4OTIwNjE1NDc3OFpcXFwiPjwvcGF0aD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1NRFxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNNTU5LjgwMzAyMTg1ODg4NDIsMTg4LjE2NTAwOTg0MTI2ODc4TDU1OC45OTU3MjE4MzY0MSwxODguMzM3Mjg1ODQ1NDE4MjVMNTU5LjgwMzAyMTg1ODg4NDIsMTg4LjE2NTAwOTg0MTI2ODc4Wk01NjMuNDM0MjUyMDkyNjMxNiwxODcuMzgyMjIzNTMyODg1NEw1NjEuMTQ3NDI0MDk5OTk5MiwxODguNTI3MzYyMzQwMTcwMDRMNTYwLjgzMTI4MDc3OTgxMywxODUuMDk4MDAxMDUzNjc5NDdMNTU5LjI5MDY5MjQ2MzYzOSwxODMuODAyMzQzMjg5MDQ3MDNMNTU1LjQ1ODYwMTc0Mzc3NjIsMTgzLjU1OTU4NzQzNzU2NDQ2TDU1NC4wOTk1NzM5MTc5NTgzLDE4MS4wODI4MDEwNTUwMDU0Nkw1NTUuNTYwMTc5MDg2NTQ3NywxNzguMDkzMzYzNzM5MTUyOUw1NTMuMjUwNDY4NTUyODYyNSwxNzcuMDM2NDgyMjgxNDc3NDVMNTU0LjczMjc1MTI4MjQ5OSwxNzYuMTU1NTA5NzQxMzc0NzdMNTUyLjk1NDc3NDUwMjE3MTksMTY5LjcwNTc1NDMxMjg3MzA3TDU1NS4yMTUzMzI3NDMyNTExLDE2Ni43MDY0MTkxNTg2NDQ4NUw1NTQuODE2NTA3Nzg4MDU5NSwxNjQuODQwOTQzNjk3NzQwODRMNTUxLjE2NjM1Nzg3Mzg5ODMsMTcxLjA1NjE0MzI3NDQyNDU4TDU1Mi4xMzM5MDUwMTEyMDM2LDE3My42OTYzNjkxMDQ5MDk1NEw1NTAuODg1NzE4NDEzNDI5NywxNzcuNjkyMzU3MDAzODI4M0w1NTIuMDc4MjgyMjY0Mjc5MSwxODEuNDIzNzQzMDg1NzY5MjdMNTU0LjEzODcyMDk5MzM5MDUsMTgzLjI2ODA4NDc5NzUxODU1TDU1NS40MDU5NjMwOTA3Nzc1LDE4Ny4zMDgyNTU4MTMzOTc2NEw1NTEuMjkzMDY2MzY2OTE0MSwxODUuNzI3NTI0MTU1NjI1Nkw1NDkuNjgyMDI4NTAxNDM2MiwxODYuMDU4NjEyODk1NjA0MDNMNTQ3LjA5ODcxNTg1MTcxNTcsMTgzLjY2MzY3MjY4NDY4OTM1TDU0NC44NTg1MTk3NzgwODExLDE4NS4wMDc0NzY4NjE5MjM0Nkw1NDMuNjE3Nzk4ODYxNjM2OSwxODIuOTg1MjExNDEzNTc5N0w1NDQuODk0ODc3MTIzOTI4OCwxODEuMDI2MzgwNDQ5Mzk4NEw1NDUuNjA4NjM3MDE0NDcyNiwxNzguMzY3OTU4OTA5NzU0M0w1NDYuNTM4NjcwOTc1NDk3LDE3Ni44MDAwNjc1MDgxMTc0Mkw1NDQuMDAxMDQyODgxNzMxLDE3Ni41ODM1NjQxOTE1NDc1N0w1MzkuMDcwMDc1MzQzNTA4MywxNzQuNzI3ODgzMzIzNjE5MDRMNTM5LjUyNzk4NjcwMjYzODUsMTcyLjg1NDk0OTA1NTg1NTRMNTM2LjUxNDMwNDY4ODYyNjEsMTcyLjIzMTMzMjkyMjU4MjRMNTM0LjU1MDM2NTY0ODY1ODcsMTY4LjQ4MzM0Mzc1MjQxMjM0TDUyOS45MjQzNDE1NTk4MTIzLDE2Ny45MTI5NDkyNDY0MzYwM0w1MjcuNjE4NjE5MTUxNTI3NCwxNzAuOTM0NTAxNDQ4NjQ0MzdMNTIzLjUzMTgwMDg4Njg0NzIsMTcxLjA0Mjg0OTUzODQ2MTM4TDUxNi45MDEwMTQ3NjE0NjksMTc3LjY0MDY5NzY5MTEzMTU1TDUxNS45NTIxODU0MjI5MjI0LDE2OS44OTg1NDcxMzYxNDY0OEw1MzcuMzUwNDU4NDU2ODQwOSwxNjUuOTkyOTgxNTk0OTIzMkw1NTYuMjcwNDkxMzE2NTYwMywxNjIuMDA4NjMxNzU3OTI3NDVMNTYxLjQ0NjIwMjkwOTE1MiwxODAuMTY1NDU0ODAzMjYwNjdMNTY4LjY4NjMzMzA1OTMwNzUsMTc4LjczMTczMjczOTcwOTRMNTY4LjAzMDM1MDkyMDcyMTcsMTg1LjIzMjU5MTA3Njc0NzU1WlxcXCI+PC9wYXRoPlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLU1UXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk0yNDcuNjg3ODM1OTM0MDI0MjQsMTA0LjMzNTcxNzkyNTUzNTVMMjE2LjQ5MDgwMTU0MDM3OTYsMTAxLjE4NzA2MTM3NDM3MjMyTDE5NS43NjU4Njc0MTA5MjQwMiw5OC40NjA3NDEyMDA3MDAyM0wxNzUuNDYwOTk0ODY1OTI2Myw5NS40MzM3NjYwNjU3NzI4M0wxNzQuMjE2NzAzNTcxMTU2NSwxMDMuMjI0Njk4MjIwOTYxMjdMMTcxLjE5MDQ2OTAxNDk4MTk0LDk4LjQxODUxMTE4MzA4MTQ4TDE2OS42NzA5MzIwMDAyNzYyMiwxMDAuNzI3OTQ4NTMyMTUwMjFMMTY2LjE1MzE4NTA1NDYwMzY1LDEwMS4yNjI1MjE1MTIxODQ2NkwxNjAuNjc1MTQ4MDg1MzEyNiw5OS44NDQ0MTU1MDQyMzIzTDE2MC40NDUwMDA1Nzc1NzY0OCwxMDEuMTY2NTQxMjgzMjEzOTdMMTU2Ljg3Njk1MzY4MjA4MjYxLDk5LjczNjkwNzYxNDc1Njc3TDE1NS4wMDU2Mzg0NDcyODg0NSwxMDEuNjQ4MTU5OTYwNDkxMTdMMTU0LjEwMzUzMzM0MTA2NCwxMDAuMjgyMjIxNDkxMDA1NzdMMTUzLjUyNzY4NTgzMjIyMDY0LDk1LjA0NDI2NDgwMDMzOTE5TDE1MC40NTc2MTM0NTMxMTkwNSw5My4xMTU4NTY0MDcwMDU3MUwxNTAuOTc2MDg3Nzk2MTIxNzYsOTAuMzI0OTI2NDUwODQ3NDRMMTQ4LjQwOTk5MjAxMjU5MzkzLDg1LjgzNDc0NDIxMjgwNzc4TDE0OC44MjI4MjQ0Nzg5Mjg0LDgxLjY2NTA4MzI5OTYzNDZMMTQ3LjEzOTUwOTY5NTY1NTE2LDgwLjYyMjk3OTU5Njk2MDAyTDE0My4zMDA1MTQwODQxMTkwMiw4Mi45Mjc2Mjk2NDQxMDAyTDE0MS4wNzUwOTQ3MTUyMDMxNCw4MC44MDUxMTQ4NTgxNTc2TDE0MS42NzEwMDY3MDQ5NDI2LDc3Ljc5NDA5NDQyMjE2ODMxTDE0My43ODM1NDkwODg2NzIyMyw3Ni42MDY1NDQ2OTIwNDc0NkwxNDMuMDIzNDQ3MjM2NjIyODcsNzIuODUwOTQ3NDQzNjUyMzNMMTQzLjk1NjAxOTI5NTc4OTY3LDcxLjkxMzM0MzIxMjI1NTY1TDE0Ni42ODg2NDQ2MTg5NjA3NSw2NS41NjcyMzkxODI3MTI1N0wxNDMuNDczODg2MjMyMzU0MzIsNjQuOTM0MTU5MDM5NjE5MzJMMTQxLjExNDc5MDI0MjgzMjI3LDYxLjkwMTYzMzM5Mzc4ODg3TDEzOC4yMjk4Nzc4MzgxNjI0Miw1Ni4xMTM3Mzk4MTE5ODAxN0wxMzYuNzgwNjYxMzM0MjQ1NDUsNTQuMjEzOTk2NzEzMTI4MDRMMTM1LjA2OTIxNzA2NjE1NTIzLDUwLjA5NzE1NDUzNTUwMDI5NUwxMzUuNTk3OTM2NDI4OTI4NzMsNDkuMzI5MjQ3OTYwNTc2NDhMMTMzLjI1MTAzOTU4NjMwMjI4LDQzLjE1NzczMTc0ODI0MTk4NkwxMzYuMzg4NTgxMzE3NDc1ODMsMjguNTI2OTE5MzM1MjQ0ODg0TDE1Ny43MjYyMzc3ODE0NTA0LDMyLjg0MjA1NzIxNzg4MzUxTDE3Ny4wNjgxOTY5NTA0MDAzLDM2LjM4NTkxMzQ5NzQ2OThMMTk5LjYzMjUwMDg2OTM3MDE4LDM5LjgxOTI2MDA0MzU0MjE2TDIxNy4wMzQ0NTE5NjQ5NzY4Miw0Mi4xNDE5Nzg5NzQyMzEyOEwyNDAuNzY1MzE0ODg5NTcyNjQsNDQuNzcyNzM0MzM4MzQxMzY1TDI1Mi42NTQxMjUyNDQ3OTE4Myw0NS44NTkzNTU2NjIzODEwNkwyNDguODY3MzI4MzUzMjk2NSw5MC40NDc1OTcxMDEzMDgxM1pcXFwiPjwvcGF0aD48dGV4dCBjbGFzcz1cXFwic3RhdGVfX2xhYmVsXFxcIiB4PVxcXCIxOTQuMTM5Nzk5OTU2NDkxNjZcXFwiIHk9XFxcIjY3Ljg4NTA2MzcyOTYzMzk3XFxcIiBkeD1cXFwiMFxcXCIgZHk9XFxcIjBcXFwiPk1UPC90ZXh0PlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLUNBXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk00Ni40NDM1MDczMjM4NzU1MSwyMzQuNDk5NTY5ODM4NDQzTDQ4Ljc3NjI3OTY2NjYxMzg0NiwyMzUuOTExNDE5NTY0ODI2MjVMNDQuNTAyNTM0MzU0MDA0MTgsMjM1LjA2NjgyMjUwMjAxMTM1Wk00MC4zNzE0NTg4OTEwODA4MDYsMjMzLjY2ODUzMjQ2ODQ2OTM4TDQzLjkyMjk1MTg4ODExNjEzLDIzNS41NzMwMjg1Mzk5OTkzN0w0MS42NTY0Mjg1MDI3NTA4MywyMzUuNjQyNTg0ODY3MDM5MlpNNTkuMTIyMDE0NDQwODc5NDEsMjQ2LjgwMjg4NzY2NTg4MzJMNjEuMTQyNzI3NjcxNzUxODYsMjQ5LjY1Mjg3NDYyOTc1OTZMNTguNjk0MDIxMjgwODgyOTEsMjQ4LjU3NTM2Nzk3MzI2MVpNMjkuMTA2MDE2MTkyODU2NDg3LDEwNy4wNDQ3NDkxMjQxNDc2NEw1Ny4xOTcwMDM3NTI1ODQ1MiwxMTUuMjA4MjI5MzQxNzE5OTdMNzMuNDAzMTU0MTU3NjYyNjQsMTE5LjUyODcwNzQzMzQ4NzYzTDYyLjI3NTYxMTIxODgzNzgxLDE2Mi42NzI3MTY3MzkzNjI5NUw2Mi44MjYxMDQyNzEwNjY4MSwxNjMuNzk5NjIxNDQ2MTgyODdMODEuNjkyNjcwMDUwNzE1NzgsMTkyLjMyMTE1Nzg4MTkyMDZMOTMuMDA2ODUzMDMwOTYwMTIsMjA4LjczMDE3NjM4MjY3MDE1TDk2LjE3MDc0NjYzODA5MzkzLDIxNC4wNTE5ODU1NDIzMjMzNEwxMDUuNDg5NjA3MzQ1ODE4NjgsMjI3LjYxMTM2OTE2Nzk1NThMMTA5LjgwMzAyNzYzMTY2NzUzLDIzNC4zOTM4NTcxNjYxMjY3NEwxMDkuNDE2MTMwMzY1MDgzMTIsMjM2LjM0MTA0NTIzMTAwMkwxMTEuMDgxMTA5OTg5NzQwOSwyMzkuMDE3NDA4NjU1Mjg4NTNMMTExLjE2MzU3MTExMjkxNTg2LDI0My4wNzg2MDEzNDkxOTczTDExMy43NzM0OTMyMjM5Mjc4LDI0NS41MjcwMDgzOTg4MTg5TDExMi41NDUxNjk4MzY1OTQ4LDI0Ny4zMTAwMDMzNjUxMjQ3N0wxMDkuMzQ5ODEwODU0ODg5NTEsMjQ3LjgxNzY0OTYzMDUwN0wxMDguMDUxNzM1MDgxMjQ4MzgsMjQ5LjkwNjg5MTU1NjQ3MDU1TDEwNi44NTI5NTkzNDcwMjY2OCwyNTUuOTc2MDkzMTAwMjU0NUwxMDQuMzUwNDcwOTM5NTAwODQsMjU3LjMzODU0ODEyMTI3MjY1TDEwMy42ODE0MDU2NjQzMTI5NiwyNjIuOTQzNDgyNjk0NTg3OEwxMDUuODI1Nzg0MDU0NjA3OTQsMjYzLjQ0OTA3OTg4ODQzNTJMMTA1LjcyMjU1MTkyNTA3MTI2LDI2Ni4yNTUxMDYyMzEzNTc1NkwxMDIuMzM1MTUzMzE1NjYyNTgsMjY3LjQ0MTM2OTI3NTE0MjRMNzIuNzY5NzI5NzI4NDgwNDYsMjYzLjkwNjM2MDE5NjE3NTU3TDcxLjQ4MDM2MDE5NjA4Njc0LDI2MS41ODM5MzQyODg4NzQzM0w3Mi40Mzk4NTIzMzkyNTcwMiwyNTUuMzgzNDA1NjQzODI4MUw2OS42ODg2ODIwNTc2ODU0MSwyNDkuNzA4OTg5NzE3MTE3NjJMNjUuNTUzNjc3NjM5ODI0LDI0NC4zNDQzMDA2NzY1ODgyTDYxLjM2MjgxNTg5NzE3NTA5NiwyNDMuMTAxMTQ3NjE5MTA4MjVMNjIuMTc1NzE5NDA2ODc3NTMsMjQxLjU4MzMwNzA3NzM3MzZMNjAuNzI4NjI5MDQwNjg1NDYsMjM4LjI5NzE0ODkwOTkxMjQ0TDU2LjkwODMyMzA2MDI4MDYyLDIzNy40NDc5MzQzMzM5Njk5TDUzLjc4MDY0NzkwNTU2MTA3LDIzNS42MTI3MTg0MzA4OTE2OEw1My4xMzE3OTI3NzU2MjQwMzUsMjMyLjgzMzk4NjU3OTM2MzhMNTAuMjc1NDQ4NDk0ODgwMjEsMjI5Ljk4NzkxNzE1Mzg1NzFMNDUuNDIzODAwMDc0NTg3NTIsMjI4LjAxMTAxMjk2NzUxMjMzTDM5Ljk2NDQwMjQ5MjA3MjU2NiwyMjYuNjcwNjY2NTMzMjA2MzdMMzguMjQwMzU0NjQ5NDA0NzEsMjI0LjczNzQwMzMxNTUzMDc0TDM5LjQ2MTM3MjMyMTk5MjQzLDIyMC4xMzI5MTA1NzM5MTU0TDQwLjQ5OTUwOTc1NDkxMDE1LDIxNi4yMTgwNjQ0NzMwMDg1NUwzNy41MTY1ODk4ODAzMjAyMjUsMjE0LjEwNjk1NTU5OTQwNDg0TDM5LjAwMDYxMTI4NjEyMjE5NCwyMTEuODczMDgwNDIzMDA4MjJMMzQuNjg2NDQ3OTA2MjAwODQsMjA2LjU5MjM5MjY4NjI0NzA4TDMyLjU3NjQ0NTYxMjk0NzA1NSwxOTguMjY1Mzc4NDQxOTgzMUwzMC44ODE1MzE3MDU2OTM1MzMsMTk2LjQ3NDM4NjQ0NDA2MDJMMzEuMTYyNjg0Njg5NjE2ODEsMTkwLjc3NTQ0NTIxNzY5MDRMMzIuODQ1NDM2NzAzMzY1NzUsMTkwLjk5Nzk1MzcxOTAwNTY0TDMzLjU5NDMzMzk4ODk3NTY4LDE4Ni43NTAwODc2MTY3NjA2NUwzMC44NjAwNTkyNzE5Mjk4LDE4NS42NTMxMjg4NDUxMTExNUwyOC41NzczODIzMDE1NzgwNCwxODEuNDUyNjU5NzQ0MTQ5OTdMMjkuMzQwMzM0NzQ4MDkxOTQ4LDE3OC43NzY0NTM4NTk3NDkzOEwyOC42MjE4MDI4NTE0MTUzOTYsMTc2Ljc1MTkyMDYzMzAzNzlMMjkuODY5MzI2ODc4MDkzNzczLDE3Mi4zOTQ3MTUyMTg2Nzc1NkwzMS4xMjc5MDQxMDYxNTE5MDIsMTcyLjUwNjIwMjQ3NDI2MjE4TDMwLjI3NzcwODYyNzQ3MTU1NCwxNzUuNDg4NDMwNDY2NzU1ODZMMzMuMTAzMDUyMjI4ODI0NzY1LDE3Ny42OTQyNjE0NzI3ODY5M0wzMy4yNDMzNDU4MzUwMDY1NSwxNzUuNjY4NDU0MTQzNzc3MzVMMzEuMjU0MTE2NDYwNTYxNzYsMTcwLjU1NzcxMzQ4NDg1MDE4TDMzLjY3MzE3ODA1ODI5NTQ5LDE2OS41OTI0ODUxNzk5MjU3TDMxLjE2MDY0MDI5NDg1NjQyLDE2Ny44ODQ1NjczNjUxNDQ4TDMwLjM5ODE1NjMxNzg1NjM3NiwxNzIuMDQ5Nzg3NDk0NTE2NjRMMjQuOTU4Mjg4MTE0NDYyNjIsMTY3LjA4MzA0ODcwNjE2NTc1TDI2LjYxMjMzOTQ3NzUwNTYsMTY1LjgyNjMwNDk1Nzg1NzZMMjUuNTYzOTU1NzY5OTM4ODQzLDE2MC42MzE5Mzk4OTkzMjUwNkwyNC41NDE5MzQ2NTM3MTU2LDE1OS43NTA5ODEyNTIwMDc5M0wyMC43ODU3MTY5OTA1MzA0OSwxNTIuMzI3NjU5NDIxMDc5MzdMMjEuNzcwMjQ4MzA4Nzk0NTc4LDE1MC40NjUxNTY3MTM5MDAyM0wyMS43OTU1NTg4MTYxMjIwOCwxNDYuMTU1OTcxNTg5MjcwNUwyMy44MTAyOTMzNzY4MTA5OSwxNDAuODY5MDk1OTk5MjIyNjJMMjEuODkyNTg4OTExNDYzNjksMTM0LjcyNDkzMDQ2NDQ5NTNMMTkuNjIxOTMyNTk2ODQxNTMyLDEzMS4yMDM3MTIyNzUxMjE0NkwxOS45MTkwMjY4MDIwMzcyNSwxMjguODg0NDU3OTkyNDIwODNMMjUuODc1NzEzODc3MDI2NjEyLDEyMS42NTY2NTQ4MjAzNTYzOEwyNi4xNjkzMTUwMzcxMzg1NzQsMTE5LjMzOTE3NDc2MDc2MzUxTDI4LjE5NTgxOTg0ODcxOTA1NCwxMTUuMzkzMTQxMjI5NTc4NDJMMjguNzQwNjkxNzQxMzU4NDksMTEwLjkxNDEyOTQ1NjA3OTk5TDI3Ljc1NzAxOTY1MzA1ODQ3OCwxMTAuMTE1NTY3NDM0NTE2MzhaXFxcIj48L3BhdGg+PHRleHQgY2xhc3M9XFxcInN0YXRlX19sYWJlbFxcXCIgeD1cXFwiNjEuMjY5MDE4NTU3MjMyMzRcXFwiIHk9XFxcIjE5MC4wNTg5Mjc0OTAyODg5NFxcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5DQTwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1BS1xcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNMzUuNDExMDgxMTQ0MDQ1MzA1LDM5MC4wNjYxODU5Njc5OTU0N0wzNS42ODc5NDg3MTM3MzcwMywzOTAuMzY3MzAxNzYwNDQyNzNMMzQuNDM4MDcxMDcxNjQ4MTI1LDM5MC41NjA3Nzk2MDQwNjU4M0wzNC43MDg5MTc0MjAxOTIwMSwzODkuNjg2OTk1NDE0NDE5MjRaTTMyLjM3MDI4NzEyNjkzMzIwNiwzOTAuMzY1NDk3NDA0MzA1NEwzMi43ODU2NzkzNTQyNzIwMywzOTEuMDkwMzQ2OTkzNjgxTDMzLjc0MDU1MDA5NTM5OTg4LDM5MC43MzkyMDAxNzA3OTIyTDMyLjczNzk1NTM0ODE5MTEsMzkxLjkyMTU0OTkwMzc4MDdMMzQuMTYxMzIxNDg3OTE5Njg2LDM5MS40NjExNDcwMzUzNTYzTDMzLjkzODY5NzY3MTY4NTAwNiwzOTIuMDYzNDgzNzUzOTg3NEwzMi42NTUyOTc3ODkxOTA5NzUsMzkyLjM1MzgxNjkwMTk0NTI3TDMxLjgyMzg2MzUxNjc2NDE0MiwzOTMuMTczNjgyNTY1NjQ0MDdMMzAuODU0MDI3OTAwMjI3NTE0LDM5Mi45NTQ0OTUwNTI3MjY0M0wyOS4wMTgxNzY4MzYxNzM4MzYsMzkzLjY0NjQwOTY3MjUxMzY0TDI4LjQyMzI3OTU4OTcxNjI4NywzOTMuMjQwNzUwNjY5NTc0MzdMMjguOTUyODY0MDI0NDYyMjY1LDM5Mi44NzQ1NTg4NzcxMjM5TDMwLjgxMDUxNzQyMTQ0NTAyLDM5Mi42MDkyOTQ3NjE2NTkzTDMxLjIzMDgwNDg5MDk3Mjc4NCwzOTEuNjI3NDM5Mjg2MjI3MkwzMi4wOTE3NjE0NTc1NDQ0MywzOTEuNzk2ODk5MDQ0NDg2MTdMMzEuMDIxODUwNTUxNjExMDAzLDM5MC45OTY1MTQ1MDc2MDE0M1pNMjcuMjkyNzg5MjA4ODczNTA4LDM5My4yMjMzOTY0ODU4MzA0NUwyNi4xOTk3MTIxMzQxOTQ4MDQsMzk0LjA1Mjc3NjkzMTA0NTk3TDI0LjMyMTQzMTY5ODg0OTc2NCwzOTQuNzU1MDY3ODY3ODE5NEwyNS45OTg0ODYxMzc3MjMzNzYsMzkyLjkwOTgzMTQ4MzEwMDRMMjYuNzU2NjcyNTkzMTEzMTQ0LDM5My4wNzgwOTk4NDg1NzkxTDI2LjcxMjA4NjY5OTk2NzUsMzkyLjI1MTg2NDg0NzQwMzdMMjguMDYxNjE5NzMzNzQxNjEsMzkxLjc1Nzk5NzM5NjUwMjQ1TDI4Ljc0NzMzMzcwMTI2MDY1OCwzOTIuMjQxMzY1OTUwMjM1OUwyOC41MDg1OTUyODQ1NTUwMiwzOTIuODM3MzAyNTYzOTIwMVpNLTI4LjY5MzgzNTIyMDY0OTQyLDM3NC43MjA2MjA2NDU2MDdMLTI4LjY1MDgxODU5NTEzMzEwMywzNzMuNzEwNDQzMDI2NTkyMDNMLTI3LjM3NTgxMDk3MTEzMTI4NywzNzQuNDA1MTI1NjEyODIxMTdMLTI2Ljg1MjYxOTU4NjEwNzQzNywzNzUuNTU5MzI1MjI5MDA0NUwtMjguNTU2MDA3NjQwNjAyNzQzLDM3NS4xNzEyNTQ2NzA1NzQxWk05LjMyNjAyMTc4MzA2NDY3NSwzOTQuMzgzMjEwODE5MjMyNTRMMTEuMTgzNjA2MTA0NDEyOTEsMzk1LjM0MDY2Njg4NTM1NTFMOS40NjIzMDIzNjEwNTU0NTcsMzk1LjExMjc0MzU3ODc3MDA1TDguMTk4ODc3MjQ4MDIxMTcsMzk0LjU1MzEzMjAyNzAwNzFaTTExNy45MjQ1MDAxMDYxODY5MSwzNjYuMDAwODE1MTU0Mjc2NUwxMTguOTg0MjEzMjU3MjYxNTMsMzY1LjgyNDQyMjY4MTEyMTIzTDExOS40MjU5MTE3NDQ0NTc0MiwzNjUuMjQxNjA0NDEyOTg4NDdMMTIwLjQ4NjA0MTgxOTUxNTY2LDM2NS43NzM5Njk3ODE5MzAyTDEyMS45NTkxNzExNTI0MDI2MywzNjUuOTUwMjQ2NjcwMDQzMDRMMTIyLjI2NDAyMTg3NTU1MTYyLDM2Ni45ODQyMzQxOTkxNjdMMTIxLjU2MzQyMjMzNzYzNDksMzY3LjM5MDcyMDg4NDUyM0wxMjAuMTAxMDYxMjEzMDg2MjcsMzY2LjkxODE4MzU3MTE4OTJMMTIxLjMxODIyNTcwNzYyNDQ2LDM2Ny42MDU0OTk5MjEyMzY5TDEyMi4zMzQzNjU4MzE4Mzk5MiwzNjcuMjIyODI1NjQwOTA2MkwxMjMuMTA1Mzk1NTQ5OTA4NTQsMzY4LjQzNTYxNzM4NzIyNTVMMTIyLjU5NzE3NjE1Njg3MDU3LDM2OC44MTYyNTM1ODA4OTgzTDEyMC41MzQwODMwNTE3MjIxNSwzNjguMDg4MjU0MjEyODgzOTVMMTIxLjIzOTUzNzIwMTMyNTc5LDM2OS4xMjMwNTkxMTI4MjM3TDEyMC40OTIwODE2NDk2MjE0MSwzNjkuNzY1MTc4NjcxMTk5M0wxMTcuODc4NzYzOTgxMDE3OTMsMzY3LjcwMjU0MzQ0NjcwNzI0TDExNy42NzA4MzY0OTUyOTc4OSwzNjYuOTI4MzU5MjY5OTA4OVpNMTIyLjU3OTMxNTY3NjQwMzI3LDM2NC45NTgyMTYzMzUxOTM4TDEyMy43MjA0Nzk4MDg0Njc4NCwzNjQuNjk4MzYwNjg3NzM0OUwxMjUuMjI5NjMxNjM3NzAyMjUsMzY2LjkyMjA4NjMyNDY5NDI1TDEyMy44MzgxNTA1NjM5NDc3MiwzNjUuNDE0MDc1MzYzNzIzN0wxMjMuNTkwMTA3Mzk1Njk4NjgsMzY1LjYwNTUzMTY5ODY3MTVMMTI1LjYyMDYwNzYxODcyOTA1LDM2Ny44NDIxODgxMzg4ODczN0wxMjUuNTgyMzY4ODU5OTQyNTYsMzY4LjcyMjMyMzYyMDAzNjE1TDEyNC4zODM0MjQ5ODY0NTg1LDM3MC42MTk4NzQ4MjAzNzk0TDEyMy45Njk1Njg5NDE1NjY5NiwzNjkuNTkwNDYwNTAzNTk1MDdMMTI0LjIxNTI5NjYxNTg5MjMzLDM2OC42Nzk0ODI0NzE0ODYzTDEyMi45NjM2MDQxMDc2NTYyLDM2Ny4yNjY4MTY4NjY2NjY2TDEyMi4zMjQ5MDExOTk0NjYwNCwzNjUuNDY3MDc1MDU1ODE2N0wxMjEuMzg4NDQ0NzUwNDE5NzUsMzY0LjAxNDQ2NjUwODIxMDY2Wk02Ni4xMzUwMDUxMzkwMTUwNCwzODQuMDk1OTQyNDE0Mzc1M0w2Ni40MjM5NDUyMTkyNjEwOSwzODUuMDQxMDc3ODE0ODk4NzZMNjUuNTg5NjE4OTY1Mjc5LDM4NS4xMDI4NTc5Mjg0MDAzWk0xMzQuNjE4NDUxMjY4ODAzODUsMzc2LjIwOTIzNjQzMDAzODhMMTM1LjI0MjA0MjQ5MzgwNTUsMzc2LjQwMDUyNjE0MzQ5MzRMMTM1LjEzNDM4NjQ0MTg5MjIsMzc3LjM3MjQ3Nzk0OTI4ODZaTTUxLjc4OTQ4NjA4MjMzOTE5NSwzODYuMjI0MzI2OTUzMzkzMjRMNTEuNjgxNDQ3Mjc5NjA0NTcsMzg3LjMyMTczMzE4MTE3NTU1TDUwLjc3NDEzODczODgxMTIyLDM4Ni44NDIzMDczMzUxODA0Nkw1MC45NzIxODE1MjU0NzQ1NiwzODUuOTQ4MDk5NzY0Nzc1N1pNMTM1LjM3Nzg5NDcyMjIyOTM3LDM3Ni40Njk3NTMyODI3NTA3M0wxMzUuOTEzMDQ0NjkzMTY2NTcsMzc2LjcxOTcwOTMxODAyODI2TDEzNi4zMzQ0Njg5OTk4NTAzNCwzNzcuNTkzOTM2OTk0ODI1M0wxMzUuNjQzMTgxMTgyMTcwMDUsMzc3Ljg2NjM4NTI4MjkwOTQ1Wk0xMzAuOTU3MTI1MTMxOTgzNDcsMzc3LjE3OTIyODIyNTAzOThMMTI5LjUzMTcxODgyNTM1MjU4LDM3Ni41MDg2ODEyNTIwODcyTDEzMC4wNTQ0MjY0MDE0MzI2LDM3NS40MTM0NjgyMDcxNDlMMTI5LjUyNjM1OTgxMzk1NDEyLDM3NC40NTMzMjM0NzMyMTgyM0wxMjkuMTEyNDQxNzE1ODg4ODgsMzc1LjE5NDY2MDk4NTY2NDNMMTI4LjAxNzQ5NDg4ODU2MTMsMzc1LjE2NDYwMTE1Nzk0NjJMMTI4LjM5OTAxNzY3Mzg1ODY4LDM3My45NzM3OTM4NTEyODYzNkwxMjguMDA5MzEyMjM5NDI2NTUsMzczLjA4MzkxODI1MjMyNjE2TDEyOS4yMjEyMzI5ODE3NzM2NSwzNzIuODQwNjk2NzIzODlMMTI5Ljk0NDYyMDk1MjAwOTYsMzczLjczNzM5NDUxOTE2Nzc2TDEzMS40NDk4OTAxMjY2MTU5NywzNzQuMzQ1MDI2OTEyOTEzTDEzMi4yNTU0NTcyNjY2ODEyMiwzNzUuNDQyNjk0MzgyMzc5OUwxMzMuMjEzMTczNjk5NDI0ODMsMzc1Ljk5MjQwNDkxMTI2MDRMMTMyLjIxNTMxNDc0NTA2ODksMzc1Ljk3OTc2MjUwODY5NDdMMTMzLjkxMTgzMjg5NjU5MzQ0LDM3Ny4wNjUxMjAyMTUyMDgzTDEzNC4zMjg0NDQyOTgwNTUxLDM3Ni45ODA0ODUxODc0NzI2NUwxMzUuMTYwMzAxMjUxOTIzMiwzNzkuNzI1MjQ4MzE4NjMwNDZMMTM0LjMzMjg5NzQ5Nzk0MDgyLDM3OS45NDkzOTA3NTU1Mjg4TDEzMy43OTU0MDUxMjM0ODQxLDM3OS4wMjU5MzE4NzUwNDdMMTMzLjAxMTE2OTQzMTY1MjA0LDM3OS4wMjc0Njg4OTAyNTMwM0wxMzIuNzM2NDMwODE4MjQyMzUsMzc3Ljg2OTcyNjQ4MDE3MTZMMTMwLjY4NjY3OTk2MTQyMDksMzc4LjA0OTQ2OTU3NDk4MTZaTTM2LjM4Mzg5OTIxNTU0NTUyLDM4OS41Mzk2NDY1Njg4MTIyTDM1Ljg4NzM4Njc2MTIwMzYzLDM5MC40ODY1MTI2OTc1MTg4M0wzNS42Nzc3MzIxMDM0ODYxMTUsMzg5LjgwNjI3NjQ4NjEwNzI3Wk0xMjAuOTcyNjUwNTk5ODQ1MTcsMzcwLjAwMzA4OTY0OTQ0NjM0TDEyMS4zNTg0NTM0NTA0NTM2LDM3MC4yNjcwNTQ3OTk2ODU3TDEyMS40ODk5NDcxMDM5ODEwMSwzNzEuNDY0NDY2NzE5NzU1NzZMMTIwLjU2NjYyODMwOTg3NzAzLDM3MC4wMzEyMjYzODc0MTJaTTc1LjExOTc3MTE1Mjc5Nzg1LDM3NC4zNTUyMTgzMTQzODMzNkw3NS4wNDY4OTAxOTAyNDg0MiwzNzUuNDYyNjc1ODE5NzY0NDZMNzUuOTMzMjkyMDM5NjkyNDcsMzc1LjMyOTYwNjQ3MTk3NDE2TDc1LjM2NjQ2NzYxNTExNzI2LDM3Ni4zOTQ4NTY5NTIxODUxTDczLjY3MDI5NDQ2MDMxNjgyLDM3NS45NTg5MDM1OTYyNjk2NEw3NC43NzQ1MjYwNTU4Mzk5MywzNzYuNjAxOTAwNzg2MDkzNUw3My44MDE5MzI3MTIzODM2MywzNzguMDAxNTgwNTA1ODAyM0w3Mi40MDEyNDQ2NzYxMzMyMiwzNzguMjk0ODE5OTc1NDk0OEw3MC45OTczNDI1MDMxODAzOSwzNzkuOTMwNzE1ODE2MTk1NUw3MC4zODk3NjYwMTYyNDU2MiwzNzkuOTU3ODE4NDkxNzIwM0w3MC45OTY2NTM1ODk3MzgzNCwzNzkuMDQ2OTg2NDExNDY1OEw3MS4xOTYyOTk1OTY2MTc0OCwzNzguMDI0NzM3NzM5MzU5N0w2OS45ODcyNTc2ODgwMjM4OSwzNzkuNDA0MDc2OTA0MzM3ODRMNjkuMjg2NTM2MjU5MzUzNywzNzguNjgxNDA4ODg3NTI0NjRMNjkuMjk1ODI3NTAyNDkzMjUsMzc3LjU3NjUyNDQ0MzQ5ODE2TDY4LjUwNTg2MjEyMDY0NjY3LDM3Ni43OTQ1NjU0NjEyMTk2TDY5LjMxMjA5MTE3NTM2NjkyLDM3NS42NDI1MDEzMTEwNzg5TDcwLjIwNDA3NTk4OTY1MDgyLDM3NS4yMDU2NjgzNTc1NTM4Nkw3MS4yOTA2MTY2MTI3MjY3NCwzNzUuNTY1NTQzMjQ1MjEzTDcwLjk5MzAzNTEzNTA5MTQ2LDM3NC40MDUyNzg3OTQ3OTIzN0w3MS43NzczMTcwMDc2NjgzNywzNzQuMDQzNjU3NzIyOTMyNDRMNzIuMDc3Mjg2MDc1NzI2OSwzNzQuODk4NjkzMzY4NjU3OEw3Mi41NjU1MDk2NjI3NjkxNCwzNzQuNDI0ODkyMzE0NjMwN0w3Mi4xNjU5Nzc1MjIzODY0MywzNzMuNTQzNzA1ODgwMTI0MDRMNzQuMTI4MzQyNDEwNjQ0ODksMzczLjg3ODIwMDUxODMzMTM3TDc0LjIzNDU1NDI5MjIxMDksMzc0LjMxODU2MzY0MjY0MjlMNzUuMTAwOTUxNDE1OTYwNzEsMzczLjU1Mzg3MDc1NTEzNzVaTTEzMC41MjUxOTQxODA4OTc1LDM3MC45MjkxMTM1NDU5ODg1N0wxMjkuOTM1MTYwNzMwMTg2OCwzNzEuNzM2MDkxMjk5Mjc0MTZMMTI5LjIwNTY5MjkwMDEyOTYsMzcxLjgwMDg0Nzg1MTU2MzMzTDEyNy43ODY5NDk2Mjc3Njk4LDM3Mi43MTk5Njg3ODc1NzUzTDEyNy4wODMxMDYyNDkxNjAzLDM3MC44Mjg0OTI2MzQzOTIzTDEyNS44MTY3NjQ3MTA0OTU2NSwzNzAuMTUzNjI2NTY5NjM3NEwxMjYuMDkzNTY4MDY0OTkxNDMsMzY5LjY5MTU3NjA4MjU4OTNMMTI4LjQzNjEzNjE0MzQwMTAzLDM2OS40Mzc2NTY4MTIwMzA5TDEyOS4xMTEwMTMxNDg4MjQzMywzNzAuMjA1MDAwMzk0MTM4N1pNMTI5LjY0MjIzMTM4NzA3NDYyLDM3Mi4xNTIwMDk3MDA4MTY4NUwxMzAuNjI5MzAyMTk3MzIwMDcsMzcxLjg4Mzk5NjgxMTYxMTA0TDEzMC43NzY0NzE2OTM1MDcwMywzNzIuNjQ5NjI0NTk2MTM3MUwxMjkuNjM2NDU2NTIyMzA1NjUsMzcyLjc5MjgwMzExOTU5MTQ0Wk0xMjEuMTg2NDQzOTE2OTkyNzIsMzY4LjkzNzA2MzE4ODU4MDE3TDEyMS42MDE1NTE5NjcxMTYxNywzNjguNTg3OTc4NjUzMjQ2NkwxMjMuMDQwNzcxNDgzNzI0NDMsMzY4LjkxNTkyMzA5MDQxNDRMMTIzLjI4Mzg3MDI0OTc0Mzg4LDM2OS43MzcxODczNjkzNDMxM0wxMjQuODU4Nzc2NTcwODg4MDcsMzcyLjU1MzI0OTM0MTE2MzlMMTI1LjUxNzQxMTM2MDM5MTYzLDM3NC43NDc3ODI2OTY1MTI2TDEyNC45NjIwNjQxNzk0NzE5MSwzNzQuNjgzMjA2MTQxMjg4NEwxMjIuOTEzNDk4ODY1NjE1ODQsMzcyLjQwNzA3NDQzMDI5MjY1TDEyMS45ODMzMDQxMDE1MjgwMywzNzAuNjM0NDAyMjg3ODMyMjRMMTIwLjkyNzU3ODU2NjEzMTE5LDM2OS44NDM1NjE1NTg3MjM3NlpNMTI3LjA4OTMxOTk4ODgzMTY5LDM3NC45NjE4MjI5NTY0ODE3NEwxMjYuNzkzNTQ4OTUyMjQ1OTQsMzc1LjA1Mjc3NDA4NDgyMjI2TDEyNi4xODY3MTIxMDA0NzAyMywzNzMuMDczNjQ0MDkzMzE3NEwxMjYuODM3MTE2OTU2MjkzMzYsMzczLjEwNDE3NjUzMTU5NjdMMTI1LjQ3NDkzNzE4Nzk2NTM3LDM3Mi4xMzYyOTEwMjY4Mzc0TDEyNS4xMTMxMDI5MjY5Nzg4LDM3MS4yOTM4MTI1NDMyMTA4TDEyNS43NDY4OTQzNzYwMjMyNSwzNzAuNjA4ODUwMTY2NjMyMjRMMTI2LjY2OTI5NDY4NjA1ODYyLDM3MS41MzcxNjIwODg3MjE4TDEyNy40NDk1NjE4NTk0MDc0MSwzNzMuNjk0MDcyNTk0NDg2MUwxMjcuMTU1ODQ2MDI3NTM3MDgsMzczLjc4NTYwOTUyNzY3NDZaTTM1LjkyMDgzODMzNzc2MjU5NiwzNDEuNzc2NTYzMjA2NTU0MTZMMzcuMDg4ODQ3NDg5MjU0NTgsMzQyLjI0MzQ4ODU2MjA0MTZMMzYuNTgxMjM4MDY3MzA0NTMsMzQyLjk3ODI0MDI0NjM1NjczTDM1LjM2OTU1ODcxODU2NjUxLDM0Mi42Njg1NjU0Nzc0OThMMzQuNjI1MjY5ODI1MjY0MiwzNDMuNjI3NTAxMzQ3NDg2OUwzNC4zMTIwNjQzMzk5MjYxMiwzNDIuNzg0Mjg0MjU1ODkxNUwzMy41NDAyNDk4NzQ3MDkyNSwzNDIuMDgxODUyNzU3MzM5N0wzMy4xMDUyNDQ3NDY3NjU3NTYsMzQxLjA4OTEwNjEzMzI2MDlMMzIuMjQ3NjQxMzU2MjU3MjUsMzQwLjQ0MDI2MjUwMTEyMjU2TDMwLjk3MjA3OTcxODI0NzY3LDM0MC43MzA3MzI4NzI2ODk0TDMwLjI2MjE4Nzk5MDc2OTM5LDMzOS41NjM2OTM4NzY0MDEwM0wzMS4wOTQwNTk0NDI0NTg5MjgsMzM4LjcwMzYxMTI4MjU3NUwzMi41MjI1MzQ4NTcyMjIyMiwzMzkuNzEyNzUwOTg2OTQxNUwzMy42NDA0MzIzNjMzNjYxOCwzMzkuMzE1ODQxODQyOTgwOUwzNC4zMjc2NTUzNTI0NTc0NiwzMzkuOTQzNjcyMzI0MzEzNDdMMzQuNDAxNTgxMzk5NTQ2NzY0LDM0MC42NzMxMjk5OTQyNDVaTTg2Ljk4MTgyOTY1NTM4OTQzLDM1OS4zMjg0NDY2MjAxMjgyNkw4Ni42NDE4ODMwNTY0MTczNywzNjEuNTI4MzUwMjQwNjYyMkw4Ni4yNDY0NDQ0NzIzOTc2MSwzNjEuMjMxNDk2Mzg3MTg3MDZMODYuMzk5NTQyNzI4ODU4NTYsMzU5LjkxMTY1NDI4MjEwN1pNNDEuMDY5OTgxODAxMzA2ODcsMzU5LjU3NDMwMTI0ODY1NjlMNDEuMjA1NTA3NzA0NzM3ODQsMzYwLjkxODgwMTg2OTQ5NTRMMzkuOTczNjY5ODIzMzk4NDYsMzYwLjk3ODQzODY3MzY3NDRMMzkuNDkzNTkyNTU4MTQ1ODYsMzYxLjUzNjg1NTQ3MzM1MjJMMzYuODIzMDQzNTQ5ODk3MTksMzU5LjI5NzMxMTA3NTE2MzA3TDM3LjA4NDIyMjI5ODQ1MzIwNiwzNTguNDc1MzE5NzI2OTY4OEwzNy45NDkwMjYzNDA4NjY1NCwzNTguODE4MjM2NDc1MzY3TDM4LjU5MzkxNzMzMzQzNzI3NSwzNTguMzgwOTYwNzM2NTc4OUw0MC4zMDM2NTU1NTYwMTE1OSwzNTguMTcwMDQyNTA4MzAwOUw0MS4xODY1NjUzNDM3MDAzMTYsMzU4LjkyMDY2ODU0MTY3MDVaTTg0LjcxOTc0MDk2MzY1MDkzLDM2Mi43Nzk1MDc4NTg1OTk2TDgzLjIzOTUwODY3Njg2Nzk2LDM2Mi43ODI3MTQ2Nzk0NUw4My4wMDI4MTg0MDczODI4MywzNjMuMzU0NDU3MzQ2ODgxMTNMODIuNzI5MjY3Njg2OTgxODEsMzYyLjA5ODA2NTAzNjk1ODI1TDgxLjg3ODgzMjM3OTQ4NjQzLDM2NC42MjI2OTUyMTM2Mkw4MS4zMTA4MzAwNDQ0MzgwOSwzNjQuNDkxODg1MTAzOTc5MzdMODAuMTgwMDcwNjExNjg0NTcsMzY1Ljk5NzQ2MjEwNDUyOTIzTDgwLjA2NzIyNDQ3MTg5NTI5LDM2NS42NDMzOTY2NTM3MTc5TDc4LjYyMzQxNTQ2MTUxNTE3LDM2Ni45MDQ4MzMzMDA4NTY3NUw3Ny41ODI2OTMxNjQ2MTgxNCwzNjYuODM3NDA3MDQ0MDYyMkw3Ny4yMjMxMTY0MDEzODk2MywzNjcuMzIxNDQzNjgwNTUwNTRMNzYuMDc2NDk3NzY1NjUsMzY2LjkxNjc1MTUwODcxMTRMNzYuMzMwMzE0MjAyMTE0ODUsMzY1Ljk5NTcyMDgyNTQ4OThMNzguMjYxMjE5NjkyMTk4MjEsMzY1LjA2NTY0Nzg2Mzc5MTdMNzguNDAxMzkwOTI4ODg1ODYsMzY0LjAwNzM3NTQ0NTEyNjQ2TDc3LjMyMTY4MTc3MDYyNTU1LDM2NC45MDk2ODA4MjUzODE3N0w3Ni4zNzE2MDU4Mzc0MzIwNywzNjQuMzYxNTIxODg3MjYzNEw3Ni42MDI0OTk3NTIzNDgxNCwzNjIuOTQyMzA4Nzc2Nzc3MTdMNzcuNjI5MzAzMjY2OTM3NDMsMzYwLjk2NjQ4MTMyMTc0NzU1TDc3LjI4NzkzOTIxMTE0MDg0LDM1OS4yMDgwNDY0MDAwNDk0NUw3OC4yNjQ4MjIyNTE5ODk2MywzNTguODYyODMwNTIzOTc4OTdMNzkuODEyOTUwMDAwNjQ0NjYsMzU3LjUxMjE5NDkyNzAyMzJMODAuNzQyMTE0MjMyNDg4NSwzNTguMDk2NDY2NDM0MTc1NzRMODEuNzA0MTA4NTE1MDE4MTYsMzU3LjcwMzQ5MTA0Nzc5MjNMODAuNTc1Nzk4NDU5MzkyNywzNTYuODAzOTEzMTY0Mzc3NTVMODAuODExNzk3MjQ2NzAwNzYsMzU2LjI5MDkzODUyMzAxNDQ2TDc4Ljk1MzI0MTAyNjM1NTQ3LDM1Ni4zOTM0NDk0NDc2MzE1NUw3OC4xNzQ4NjY1MzM5MTEyMSwzNTYuODQ1NDM1NTYxMjAyNEw3Ny44NTAyMzk1MDU2OTIzNCwzNTcuNTc5NDU5NjcyMjI1OUw3Ni45Njc2NDQ4NTkwMDUyNiwzNTcuODYzNjc0OTM1Mjk3MjRMNzYuMjA3MjAyNTU1NTQ5NjMsMzU5LjI0NjI5MDA4NDQ0MjY1TDc0Ljk3NTI3NjUzNTMxMzYzLDM2MC40NzEyNTYwMDczNzUyTDc1LjM1MjI0NTc0OTE2ODk3LDM2MC45ODczODcwNzEzNzA0NUw3My45MTUzOTcwNzM3MDU0NiwzNjIuMDk4NzU2MDg5MzI5MTNMNzQuNDc0NDk0NzAyNTIxOTgsMzYyLjUzMDQ1NzI0OTE3NTFMNzQuMTI1NjQ3NjUzMjMwMzUsMzYzLjUwNTk1NjQ5Njk2OEw3My4zMDAxNzg1NDIyNDg1OSwzNjMuOTM0NzczMjczMTgzNzRMNzMuMjE4MjIzODYwMDQ3ODYsMzY0LjcxMDU2Mjc2NzExMjU1TDcxLjM1OTczOTg1MzgyODk2LDM2NS40NDUzMDY2Mzk3ODE5Nkw3MS40NTUyODA4MDAyODc2OCwzNjYuMDUzNTUyMDM3NTM0TDcwLjYxMTE3NTg3MTU3NzA5LDM2Ni4zMDMzODM4OTk3MTEzTDcwLjQxODcwMjk3ODc3MjQ0LDM2OC4yMTE0Nzc1ODg1MTQ3NUw3MS41NTY0ODYwMjIyNjQ5MywzNjcuOTA2MzYxNTAzNjMzOUw3Mi44MDEzNzcwODQ4NzY1NSwzNjkuMDg2MjMwNjA1MDU4MUw3MS43NTgxMjgwMDcwOTI1NywzNzAuMjgzNzk0MjM5MTUyM0w3MS4wODU4OTg5MjQ4OTEzLDM3MC4zMTM2MDU0NTA1NDE5TDcwLjg5NDA3NjMzMTY5NzI2LDM3MS41MDI3MTk1MzcwMDY5NUw3MC4wMTY3ODEyOTQ2NTA0OSwzNzMuMDIxMzM3NTczNjIzNTVMNjguMDYwMTI5OTcwMjg4ODMsMzczLjQxNjM3MTA3Mjg4NzVMNjcuOTUyNjg1MTc2NTIyNTQsMzc0LjAyMjg2NTgwODk4Mzk3TDY2LjQ2OTI3Njg2ODQ3MjIsMzc0LjUxODM5NDY5NTIxNDdMNjYuMDQ0Nzk3Nzg3NDU4NzMsMzc1LjY5NjQyOTExNjY5ODU0TDY1LjI1NjUyMTI2ODEzMzk4LDM3NS41NjM0NTA2MTg2NTg5TDYzLjYxNzA3Nzk1NjI5MTQzLDM3Ni45NzE1MzY4MzUxOTg5NUw2NC4zMjM1MDExODI5OTQwNSwzNzYuNzQ5MDg5NTg3NTY3MzdMNjQuMzk1MDgzMTY2NTgwNjYsMzc3LjU1MzI4ODIyNTg0MzdMNjMuNTYyOTIyOTAzNDczNDgsMzc4LjM1MTcwNTU2NDc3ODZMNjIuNTQ1NTAxMTI3NzE2MSwzNzguNjEzMTIzMzY4MTgwNEw2MS42OTEyNzA2NjIzNzExLDM3OS41OTYwOTEzNjM2NTAwM0w2MC4xNDg3NjA2Nzc0MzQwMjYsMzc5Ljk4NDM0OTUzOTMyMDM2TDU5LjY4MzIwNjEwOTAxNDYxLDM4MC45ODA1NDQ0MjYwNzA1NEw1OC40NjM0MzUzNzQ1NzUzMSwzODAuODc2NTk3ODM3MTYwNUw1OC4wMDc3NDIxOTI1MTEzNywzODEuNTY1NDU5NTE5NjA0NzZMNTguNjcxNTIwNDA0MDkwNjg1LDM4Mi40MTE0ODc3OTkwNDM5TDU4LjE5NzI0NTE5OTQ2NjE5LDM4My4zNDg0NTAyMDA5NjI0TDU0Ljk0MTM1MDExNDQwOTc4NiwzODMuODUyMDQ1MDk3OTg0NUw1NC44NTkwMjA0NjE5NDcwNiwzODQuODQxNzAzNjMxNzM5MzRMNTQuMDg4NzY2MTM4NTc3MzEsMzg1LjI3NDQwNTg3MzYxNTY1TDU0LjUwNDQzODIzMTUzODYsMzg0LjA5MjA3Nzc3NzE5OTdMNTQuMTE0NTMzNzQzNTUzOTksMzgzLjc4MTQ2MTk4NDQwMzA1TDUyLjEyOTczNjgxNjMxNDU3NiwzODQuODk5OTU0MTMxMjE2TDUxLjc1Mjc0NTUyOTQxNzg0LDM4NS41MjgwMDI5NjkxMzAxTDUwLjczNjA0NjIyMzkxMTU4NiwzODUuMTc1MTA3MjA0NDc2OTRMNDkuNzA2NTcwMjE1ODgyNzIsMzg1LjkyNDczMjM0NDgxNjE2TDQ4Ljg3Mzk1Njc2NTIzODM1LDM4NS44MDQwOTg5OTAyNTUxN0w0OS41MzYxMzQyNDcyOTU1MzYsMzg0LjYwMjAxNjE2MzQ1ODEzTDQ4LjcwMjk2Mzc4NjkzMzI1LDM4NC41MzU0NTIzODg2MTI1NUw0Ny40NjMyMjk3MTg0Mjg2LDM4Ni45NzEyNjYxODIxMTIzNEw0NS45NDc2MjAwNjgxNDE3MiwzODcuMTQ0MTI5MDYwNDI1N0w0NS42MDA2NjI2OTA1OTY0MiwzODUuNzA5NDc0MzM1OTI0MzdMNDUuNjE4MDI2NTMwNzQ4ODEsMzg3LjIxMjgxNzcxMjcyOEw0NC42MDkxNDEzNjY0NTY2NywzODcuNTUyMDY5OTY3ODdMNDQuMjEzNjUxNjgyODA3NzYsMzg2LjUyNDgxMDQwNTcwODNMNDQuMTk4OTI1NjQ2NjM5NzgsMzg3LjQxMjk3MDUwOTU0MDVMNDMuMDM3NjUzNDY5MTQyOTI0LDM4OC4wMjk4OTQzNzM2MjcxTDQyLjI2OTA0NDU4NDQxNTUzLDM4OC44NjU1MjYzMjE3NTc4NEw0MC40NTQyNDQwMjAyMzI3MzYsMzg4LjY3NjI3MTUwNzcwMDhMMzkuNTY1NjYxNTk4MDMzODg0LDM4OS40ODQ2MzM4NTc4MTIxTDM4LjI4OTM0MzczOTc4MTg1NiwzODkuMjc3NTczMDk0NTg2NkwzOC4yMzk3NTg2NTQ0Njk5NSwzODguMjY0MjgzODUyNzY3ODVMMzkuMDI0NTM5MDE4Njg4NCwzODguMTE0Mzk0MDEwNjIwM0w0MC4wOTAwMDAyOTU4OTI3MSwzODYuODYyMzQyMjAzMjIzNzZMNDAuMjcwMDUxMjA5NzU0MjYsMzg3LjA4NjAzMzQxNzkwMjdMNDIuMDc0NDMzMTE2MzI5ODg1LDM4Ni41MjU0MzEyMDc4MDMzTDQyLjY5OTUyMTgwNDE2NTQ0LDM4Ni42NDUwMTEzMzcxODc0TDQzLjMwNjcyMDMxNjIxMTYsMzg3LjY1MDYxMDgyODUwNzZMNDMuNDgzOTg5MTM2MDkzMDg2LDM4Ni4zOTUzNDUyNjI3NjkzNUw0NC43OTY2NjQyNzk3NTgwOSwzODYuMTU4OTk0MjU2ODYxNkw0NC44NDQ0NzQ4Njc5ODczLDM4NS44MDM4MTc1NTg2MTk1TDQ1Ljg0NDg3OTU2MzkyODQzLDM4NS40NjMyMzQ5MTQxODUxNEw0NS45MTU3OTEzNDEwNjAwODYsMzg0LjkxNjMzNDQ2NjE1MTlMNDYuOTk4MzY3NDU0OTMxNjQ2LDM4My44NTg1NTI3ODQzNTI3TDQ4LjI1NjE5ODg3MDgzMDUzLDM4Mi45ODM0MDA1NTk2NjA4TDQ5Ljg1MTk0OTExODkzNDcsMzgyLjY5NDExOTYyOTIxNzdMNTAuNTI3NDI2MjQ5ODQwOTgsMzgzLjE4Mzc0NzI3Nzk5NTc0TDUxLjE2MTE2OTAyMDM5MzcxNCwzODQuMTEwMDA1MzQ3NTYwOEw1MS4yMzczNTA5MDg5MjczLDM4My4zNjkwNTk0NzY2OTA1TDUyLjc3MTYzMTQzNTgwMzk2LDM4My42NTkxNDEyNTQ1NDI3TDUxLjk4OTE1NzExNDE0MTM4LDM4My4xMzk4ODY3NDAwNzY4TDUyLjU2ODY3Njg4NjEyMjY0NSwzODEuNDQ5NzM5ODU4MDM0M0w1NC4zMjM2MTg3NjQ5NTI0MiwzODAuMjI1ODQ4MDU4NzEwN0w1NS42OTM2Mzc4NDUzODM4MSwzNzkuNzA0Mzc2NTk0NDkzNTdMNTYuODY4MzA0MDE5ODE0MzYsMzc4Ljk2NTA3ODE5MzA4OTk0TDU3LjY1ODY5MTEwNDU5OTYsMzc5LjI0NDE3NzEzOTE5NTFMNTcuNzU4MDA3MTQ4NTI4NSwzNzcuODM5MTE3NTk3OTMxMTRMNTguNjMyMjM5NDExNjI1MzksMzc2Ljc5MTQzMDI4ODUxNTM2TDYwLjkxMDMxNTIwMDQwNzYyNCwzNzUuMzIzNDgxNjcwMTgwN0w2MC42MzEwNTA4NDM1NzIxMiwzNzUuMDAzNjE1MjcyNzM5NEw2MS4wNjk0NzgxNjU2NjA2MzQsMzcyLjM5Nzk5NDIxODE0OTNMNjEuNjU4MjU3NjY0MDIzMDU0LDM3Mi4zMTgzMzUzNDI4MTcxNEw2MS4xMjA1NDI4NDYwMDg2OTYsMzcxLjQ1OTQwMjI0NTA1NTZMNjEuNTUzNDExNDgzNzkxMjY1LDM3MC41OTY0NTA2MzY5NzU0TDYyLjY1OTEzNTAxNzkzMjU3LDM2OS42MjY1NTc1NzM5OTQwM0w2Mi42MDM1NDc2MTQ4NzMyNywzNjguNzY1NzU3MTQ0MTI1MjVMNTkuNzYyMjYwODE1NTIyNTcsMzY5LjkxMjAzNDU3MTgxNjhMNTguNzY4NzQ4NTY5NjY3NzksMzY4Ljk2MDEzNDk5OTUxNjFMNTkuMDM1Njc5MzIyNzgzNywzNjcuODQxNzc4Mjk3NTU4OEw1OC4yMjY1NzgyNTIyMDE1NiwzNjguNTA2MjY0NTYxNDU0M0w1Ny45NDYwMDY0OTEyNzIzMSwzNjkuNzMzNjQ4MzAzMjExMzRMNTguMTgwMTk5ODA5NTg4MTk2LDM3MC40OTkwMzkyMTkxODYyTDU3LjI4OTc4Nzc1OTUxODYzLDM3MC43NjYxMzUzMTg5NDAzTDU2LjM5MTQwNDk1MzUzNjk1NiwzNjguNzI1NjQ4Nzg0MTEzNEw1NS41OTQ3NDg1MjM4NjY4NCwzNjcuOTY0NDQyNzkwNDg1NDZMNTUuMTM5NDk3NjM5OTU0NSwzNjguNzg0OTY4MjI0NTkyOEw1NC4yNTI1OTQ1OTI4ODc1MywzNjguMDA5MTczMjEyMzE2OTdMNTMuOTUzMzUzNzg5ODYwMTMsMzY3LjE0NzAzNzk1NDI4ODlMNTEuMzIyMTc2MzE3MTczMzMsMzY4LjUxNDA2NzEwMzM4NzVMNTAuMDY1MzY5NTgwNTk2NzgsMzY5LjM3MjM4MTAxNDEyOTUzTDUwLjE3NzQwNTM5NjExNTgxNiwzNjYuNzk1ODY1ODU1MDg1MzdMNDkuNjQ2MzA5MjQ1NjAzOSwzNjUuNjczMTc5MTI3MjU2NDVMNTAuNzI2NzYwODI4OTY2NzQ2LDM2NC41NDg5ODQyODM1NTY5TDQ5Ljk5NTQwMzgyMDE3ODk4LDM2Mi4wNjUxMTI2Nzg2MDM3TDQ5LjQ5NzE5NDE2MDY1Mjk1LDM2MC44NTk3ODU2NDUxODgzTDUwLjA0MTcwMDM2MzI0NzU3LDM1OC43MjU2MzkyNDk4MjA2TDQ5LjA3ODEyNzQ1MDIyMTUzLDM2MC41MjcxMTMwMjk0NzQ1TDQ5LjAxNjU3MjA1Nzc1NywzNjEuNzE4NjI4NjA2MjA1MTNMNDcuMTczOTM4ODg2MjQ1OTcsMzYyLjI1MjYyOTA4NTUyMzg0TDQ1LjIxNjgwNTczNzA3ODksMzYyLjE5MTc3NDQwMTM2MzI2TDQ0LjU3MzA0ODg2MjAyNzIxLDM2MS41MDUzMTc1Mzc3NDA5NUw0My43OTI2MzkzODk5NzAwNTYsMzU5LjM5MjUxMDgzNzAwNEw0My4wMTgxMTI1NTI3MzY0OCwzNTkuMDQwNjI0MDgxMDI1MTZMNDIuNTA5MzMzOTUwMzY0NjUsMzU3LjY5MTc2MDg4NTA5NDU0TDQzLjMzNzUxOTIyMzY5MTEzLDM1Ny4xMzA2MzM4NTk5NTg1TDQzLjcwMTI1Nzg4NDA3NTIyNSwzNTYuMDQxMzk4OTEzMTM4NEw0My4wOTIzNTI2MjQ3NTQzMywzNTUuODgyOTYyMDU3NjkwNzVMNDMuNTQxNTU3NzUwNTMxNDgsMzU1LjM2OTY4MTc3MDE4Nkw0Mi45NTA2OTI3NDg5MDI2OTYsMzU0LjU5NTgxMDc3MDkxNDRMNDIuMTczNDg0MzU5ODA2NDEsMzU0LjkwOTQ5NjE2MjcxMDM1TDQyLjE3NzIxNjcwMDYxNjM0LDM1My44NzA3MjA5NDU1NjU1TDQxLjU3OTM1ODc4NDkzNjg3LDM1My4yMDA5ODExODYzMDkxTDQyLjEyNTg2NzE4ODgyMTU2LDM1Mi42NTMzMzk0NDcyNDgyNEw0MS4zNjE4NzM1NDUxODQxNCwzNTEuOTUxODA4Njg3Nzc4Nkw0Mi4yNjI2NzM4OTY2MTMyLDM1MS44OTEwOTIwMjM4MDI4Nkw0MS43MDkyNjU3NDI2MTM3MiwzNTEuMDMxNTgyODc0MTE2NEw0Mi43NzEyMzMzNzM0NTA1NywzNTEuMDI2NjUwNzExNDk5OTRMNDIuNzA0MzMxNDczMjg4Nzc1LDM0OS45MTkyODA1MDk5ODU4TDQ0LjYzMjE2NTU5MDkwMDY4NCwzNDcuODQxMTQxOTQ4MzE4ODZMNDUuNTI5NTQ0MzM5MDM1MjEsMzQ3LjYyNTkyODU4MTUzMTg3TDQ1LjQwMjExNjU0NDk5MTUxNSwzNDYuMzE2NDY0Nzk2NzI1N0w0Ni43ODUzMzc4MDg5Mzc0OSwzNDQuNTgxMDI2MDAyOTA2Nkw0Ny43MjY3Nzc2NTQ4NTE4MTYsMzQ0LjQ3NTYxNjIzNDUwNDIzTDQ5LjIwNzU4NjUzODExODU4LDM0NS44NjU3NDMxODMyMDA3TDUwLjgyMTk5Njc1ODE4NzM5NiwzNDUuMTM3NjQyNTQ5ODIyODNMNTIuMDE2ODcyNDc1NjE3MjgsMzQzLjYxOTcyMDkwMjk4MzlMNTIuNDUwMTI0MzkzOTc0NDUsMzQ0LjE0NjExMjY3MDgyMzNMNTQuNDQ3MTgzMzY0ODE4MzQsMzQ0LjA5NzQ2NDI5NzUyMjQ0TDU1LjM5OTAwMDMzMDg5ODc3LDM0Mi44OTI4MTIyNDAzMTI1TDU1LjMxNjI0MDg2ODk4NTU2LDM0MC41NTMwNzU5Mzk5OTU1TDU0LjIxMTk3NTI3ODQwMzQzLDMzOC44NzgxMzUzNjMxNDQyTDU1Ljg1MDU3OTI2OTA4NjY0LDMzOC41MDA3NTA2MDkwOTE3TDU1LjkwNjk4NjA4ODg1MjUsMzM3Ljk1MjEzNzI3MDY4NjNMNTUuMTU2NDE0NTkwMzk4MDMsMzM2LjgxOTI3NzMyODgyOTc0TDU0LjUxODI5Njk0Njc5MDE5LDMzNy41ODA2NzczNDEyMzE5TDU0LjA2NzI2OTU2NTU1NjM2NiwzMzcuMzYyNjI2NTA1NDIyNDRMNTEuOTI4Mzk5NzQ0MzMyNTY2LDMzOC41NDQ2NTQ1NzU4OTM0NUw1MS4xNzY1NjU2MjIzMTA0MzQsMzM5LjM2MzcyMDc5Mzk2NTQ2TDUxLjIwMzk2OTE5MDc0NTg4LDMzOC41NjAyMTk4NTk3NTk1N0w1MC41ODc1NTk3NjU4ODI3MTYsMzM4Ljk0OTM0NzUyNTM3ODEzTDQ5Ljg5NTEyNDY4MDgzNjcxNiwzMzguMTU1MTI2MzQ4NDgzNzVMNDguMTkxNDAyMjI0MTY5MTc0LDMzNy43MzIxNDg2NDI4NDU1TDQ2LjQzMTQ5MzQzMjM4Nzg3LDMzOC4xNDU2NTY1MzYyMTM4M0w0My45ODA4ODI4MDk5Mjg4NiwzMzYuOTI3NzA3NzE3MTA4MDRMNDMuNTY4OTE2Nzc1ODg3MTc1LDMzNi4xMjA2NTM4ODU5NTIzTDQzLjg2NzQxODU4NzQ0NzA0LDMzNS4zOTE1NTI1ODY4NTgyN0w0My4wODI0MDQ0OTUwOTg0MTYsMzM0LjA4OTYwOTI3NDQwODEzTDQ0LjMyNzI2NjkzNTI0NDQxLDMzMy4zNzUxODA3MTM0OTc4NUw0Mi4xNzU1ODc0Mjk1MjA3NzUsMzMyLjMwNjA3MzE2OTg0MTk3TDQwLjk0MDA3MTA2ODE4NzkzLDMzMS4wODkxODMzMzAxODAwNUw0MS4wNTYyOTM0MjU4ODcxMzQsMzMwLjU1MTA4Njc0ODU0OTU1TDQ2LjY3ODgwMDg2MDc2NDE3LDMyOC4xMjgxMTY3Mzk1NDg5NEw0OS41NzM2MDk2MTg0Mjg1LDMyNy40NDQ3Mzc4MTYwMDQyNUw1MC41Mjk3Nzg5ODcwMjMxNywzMjcuNTM2NjA1NDQ3Mzk5N0w1MC44OTE0MzYyNTA2NTk5MSwzMjguMTE4MDcyODIwMDY2Mkw1MC4xNDg4NTc4ODAyMjI2NiwzMjkuNTYzMTYxMzUyOTc1OUw1MC40MTgxNzUxNTkwMTU4NiwzMzAuMjk4NTI1MTg2NDkxNzZMNTIuNjAwNTc3OTkyMzIxMDY0LDMzMC40MzgzMjA0ODY2MzI3TDU0LjQyMjU2ODQ2MjI4NjczLDMzMS4wMjczNDA0MjI4NTk5NEw1NS4xNDYxNjM1MzE5MTMyNSwzMzAuMDA0NDMwMzY2NTM5M0w1Ni4zMzQ5OTIyMjA4ODM0MSwzMzAuMTM1MTEwMjAwMzAzMkw1NS4zMTM2MTUwOTg2MzY0MiwzMjkuMTkzNzM0NjgwMjA2NUw1NC40NjU4NDA2MTQwOTk5NSwzMjkuMzk5MDU0MDQwODc3OEw1NC41NzM2Njc2NTIxMzQ0NiwzMjguNDk4ODUwMjU1MzkwMUw1My40Mzc3MjU1MjY1ODgxNzQsMzI2LjMzNzIyNTg5MjE4NzA2TDU0LjEwMjEyNTEwMzk0NjAyLDMyNi4zMTE0NTQ3MDIzNDY5TDU0LjU5NjUzMzY3OTE1OTgxLDMyOC4zMDc5NTExNTkzNzAzTDU1LjcyNTI1MDA2Mzk0NDE4LDMyOC44NTI5NDg2MjIyMTM5TDU0LjY5MTIzOTkxNzUyNjM5LDMyNy41MTcyODc1NTczNTYwNEw1NC45NDM4NDA0MTUyMDU3NSwzMjYuNjM1MjUyNTc3MzYxMjZMNTUuNjU0OTQ4MjU4MTI3NTEsMzI2LjE5MzExMDQ5OTYyMjgzTDU1LjA0NDA2OTQzOTg5ODU5LDMyNS43OTA3NTE1ODU3ODc2TDUyLjk5MzgzMzc5ODg4MzM2LDMyNS44MDgxMzMzOTM3MjE5Nkw1MS4yOTE4MzY4MTY0NDc4MSwzMjQuOTAzNTQxMjYxNjE3MUw1MS4zOTIwNzMzODkzNjA0NzYsMzI0LjIyNTU0MjE3NzA4MTI1TDUxLjAwODU5ODUyODcwNzcxLDMyMi40NTAzNDg4NTg0MjkyN0w0OC45ODIzMjk2NTQxMDk1MDYsMzE5Ljk4NzQxMjA3ODU2OTU1TDQ3LjcyOTQ5NjQyNDU3MjksMzE5LjA3MTM2NDA5MTgwMDNMNDYuNTYxNDU0MzA3NzY2NTk2LDMxNy43OTUwMDUwMzc2ODQwNkw0Ny40MjIxMzkyNTc0OCwzMTcuMzIwMTE5NzE3NTQ2Mkw0OC4wMTg3MDQwMjExMDg1MDUsMzE1LjI0MDA5NDE1NTIzODlMNDkuNTkyODgzNDE5NjI1MDk2LDMxNS42MzMzNDczNTgxOTM2TDUxLjY0NTE3Njc1MTg3NTk0LDMxNS42MTE5NDgwMDY5NTE2TDUyLjk2MDk4ODM3NjEwMTM1NSwzMTQuOTg0Njk3MjA0MjYzTDU0LjA4NTI5NjYwNTM4NDI4NiwzMTMuNjg4NTA4MzExNTA1NzZMNTQuNTQ2NzA5ODAyNjMzNzE0LDMxMS43NzgyMTUxMTI0ODk3Nkw1NS42NTg2NzM3NDc4OTI0ODYsMzEwLjc3NjkyNDg1MjQ5NDM1TDU2Ljg2Nzk3NzM4NDQ5MjAyLDMwOS4zNDQ1OTc4MTc0MzkzTDU3LjUyODY3MjE2NjEwNjQyNSwzMDkuNzIxMzk5MTgyNzMzNEw1OC43ODc3NDAyMTAzMTQ2NDUsMzA5LjMxMzgyODc5NjI5MDlMNjEuMDA0NTk5NDkwNDc3MTc2LDMwNy4yMTc2NTEzNjMyMTVMNjEuNjA2OTI2OTA2MzY0NDY0LDMwNy40ODQzMDc5MzY5NjI3NUw2NC4yNDgwNzIzNzI2OTA2NywzMDcuMTI2MDQwNjExMzQ5Mkw2Ni40NTA3NjgyMjM4NjYwMiwzMDQuNzUzNTE2NjY2OTM3TDY2Ljc5OTAyNzg1OTMwODU4LDMwNS4xOTcwMTczOTk5MjQzTDY4LjEyNTgzOTc3NjE1MTE1LDMwNS43NDgxNjE0ODIyNDExTDY4LjE3NTU5MDEyMjM2NTY4LDMwNi4yMzM5NzQzOTYyNDA0Nkw2Ny4zNTA4ODAyMTg2Njk3NCwzMDcuMDc0MDM3NTEwODQ5OTZMNjguMjEyODM5ODc5ODQxNDQsMzA3LjI4NTkwMjg3ODQ1NjNMNjkuMTAyNzUzODYzNDQ2MzQsMzA1Ljg3NTEyNTI0NDc3NzRMNjkuODkyMTM2MzE4NzYwNiwzMDYuNjY1NDE3NjA1MjUzNEw2OS44MjM0OTAyOTc4OTAwOSwzMDcuNDQ2NDY3NDgyNTcxNkw3MC41Njc1MjI1NzQyMTQ3MywzMDcuODAxMzQ2NDQ0OTY5NDVMNzAuOTQwNjcyNjQwNDM1NzYsMzA3LjIzNTMzNjM3NzM1M0w3Mi4xNzcwMTU1NjcyNDYxMiwzMDYuOTg1MTAxNDgyNjgyOUw3My44NTY2NDc0NTAxNzQwNCwzMDcuMzU3NzkwMzE4NzY4NEw3My41MTEwOTQ3MjAwODIwOCwzMDguNTI2OTAwODkxOTY0Mkw3NC42NTExMzI3NjcwNTE5NSwzMDguODczNDUxMTU4NTk3Mkw3NC41NDI1MTA3MDkyMTIxLDMwOS40MTc2Nzg1MjM3NDU5TDc2LjU0NjQ1MDMxNDQ3MjU0LDMwOS4wMTI0Mzc1NzQ2MTEzTDc3Ljc1OTE3OTAyMzM2MDQ1LDMwOS4yNDQ1Nzc3MTE1NDA5TDc5LjA2MTcxMjA0MDM3MDQ0LDMwOC44NjIxMTEyMjA4NDcxTDgxLjAxMTI2MjM2OTcwNjYsMzA5LjQ2Nzc4MDkxOTg3MjRMODEuODI5NDY1Njg3NjczMTIsMzEwLjA0NTkxOTc4MjUzMzc2TDg1LjM2NTIwMTQ1MzEzOTc4LDMxMC4wNzA3MTU0MDQ5MzIzNEw4Ni42MDQwODc1MTk5MzM3LDMxMC42NDg4ODQwNDQ5Mzc3NEw4Ny41Nzk2MzQxNzQ1MzMyMSwzMTAuNjUxNDQ4MTgxNzg4Mkw4OS4yMjExOTg1MjQ3MjE4NiwzMDkuNDc0OTI5NjMyNjA2MjNMOTAuODk0NjEyMDYwNTQ5MTQsMzA5Ljc3NjY1MDk2MzMzMTRMOTMuNTY1NjMwODEwOTA1NjUsMzExLjA4MzQ3MTUzNzM5OTJMOTQuMzc1ODg2NDMyMjI0ODUsMzExLjE0NjY1Mzc5NTY2NzRMMTAzLjczNjEyOTIxMTY5MDc1LDM1OC4zMTQwNTAyNDkwOTgxNkwxMDQuODg4MDkxOTQ5MDUyNCwzNTguNDc2NjcxNDQ4NDE5MUwxMDQuODg4NTM0Njk3ODU3NTIsMzU4LjAyNDY5OTg3OTQyODFMMTA2LjM2MTg1Mjg2NDk3MjU2LDM1OC4zNjU0NzQyMjY4MzI5TDEwNi45MDY4MzYxNzA3OTU1NCwzNTcuNDI2NjM2OTM2ODQ4OUwxMDguMzEyNDM5ODk3NzM5ODksMzU3LjAyNzc0NTYxNjk4NTRMMTA4LjQ0MDQ4NDM3ODMxNjA3LDM1OC40MTcxNDA5MDUyMzQ0TDEwOS44MTkwMzcwOTUyMjA5MywzNTkuMDY0NzQzNTE5Mjk2MjZMMTEwLjEzODMyMDIyMDk1Mzc3LDM1OS42MTQ5NDY4ODk0ODE1M0wxMTMuNDQ3MDM0OTM1NDAwOTIsMzYxLjc0MTUwNDkzOTUxNzM3TDExNC4zMjcyNDQ3MzMzMzI3MiwzNjMuMjg3NDg3MTc1MzA2MkwxMTUuNTYxMzE1NTA1NDAwMjcsMzYxLjYyNDEzNjU2MDU4MTJMMTE2LjE5MzMxNjMwMTUxMTE5LDM2MS40MjcwNTMxMjQ3OTQ5TDExNi4wNjI4MDcwMzA4NzMyNywzNTkuODU4MDE4OTA3MDczMzZMMTE2LjMwMzIyODM4NTUxMzQ5LDM1OC45NjEzOTU2NDczMDkzTDExOC4xMTYyNDEzNjk2MTk3LDM1Ny41MDU5NzgzOTU3OTQ3TDExOS41Mjc3NTE1NzEyODExNiwzNTguMzYzNzg4NTA1NDEwNjRMMTIwLjEyMTQ5NjE3NzYxMDU0LDM1OS43MTcyNTE3NTczNTA4TDEyMS41MTg3MzI5ODgyMzI3OCwzNjAuMTA4MjA5MzMzODgxNUwxMjIuNTY1NjEzMDc3OTA2NywzNjEuMjYzODM3Nzg5MDQ3MkwxMjMuNjc0NDYzMTExMzQ5OSwzNjEuNjE1MzQ0MTEwODcyMkwxMjUuNDI0OTY2NjUwMzkzMzIsMzYyLjY4NTIzODc0Mzc0MTE0TDEyNS4yMTYzNDI3NTIxOTcyOCwzNjIuOTg0MjMyODg3NTc4MjNMMTI2Ljg0NDcxNzc4NDM3OTcsMzY0LjU1MDY1NDU1NjExNjg1TDEzMC4yODM2NzkyOTUzNTA0LDM2Ny42ODc5OTEyMTQ2Nzg4NUwxMzAuMTk0MTE1MDkxODE4ODQsMzY4LjM1OTkzNzU0MDY4NDJMMTMxLjAzNDA4MzA0NjY4NjgsMzY4LjMzNjg4ODE4MzA5NzQ3TDEzMS4xMjk1MzE3NTk2MjU3LDM2OS4yMzgzMTYxOTI2NzQ3TDEzMi4wMTkxOTYwOTkzOTI0NSwzNjkuMzQxMzkyMDA1ODU4MjdMMTMyLjQ1ODQzNTE5MzI5MjUzLDM3MC4yOTk3MTIzNjMyMjQ3TDEzMy4xMDI4ODQzMDI0ODkzLDM2OS45ODcxODkyODA2NjI2TDEzNC43MjA3MzcyNDQ4MDQ4NywzNzAuNTg0ODE2NTI3MzExNkwxMzYuNzM2NTUyMDc0NjIwODIsMzcwLjczMTY2NjQwODIyMDg2TDEzNi45MTg0NjE4NDQ4MTg4NiwzNzEuMjIzNDgwMDMxNzkzMTRMMTM3LjgyNTM4MDQ4MzEwMjk1LDM3MS4wMDMzMjYxMDQ3Njg1TDEzOC40ODQ2OTE5MzQwMjYwNywzNzEuODc1NTUxODA2MDc0NTVMMTM4LjQxNjkyNjgwNDczMzY2LDM3Mi41NzkwMzcxMDg2NzQyNEwxMzguOTIxMDE5MzI3Nzk2MTMsMzczLjkyMTc5NjA4ODg3Nzk1TDEzOS43NTE0ODA5NTgzNjg1MiwzNzQuOTM0ODk0NTgwODg5TDEzOS42MjM0OTU0MjU1MzI3OCwzNzYuMzk2NTY5NzI5OTU3MjZMMTM4Ljg1Njk4MDU1MTQyMTA2LDM3OC4wMDI5MTM2NDE1MDU4N0wxMzcuOTk4NDE1NDA5NTM2NTYsMzc4LjEzOTc5NjA4NjgwMjE2TDEzNi44MjY1MzYzNjAxNTQ3NiwzNzYuNDUyOTI4NzQ3OTczODNMMTM3LjMxNDY1MDE5NjQwNDQsMzc1LjYzMTkxMjYzNTgwMkwxMzYuNTE2MTUzNDY2MDk0NywzNzQuMDQ0MTEwNDAyMDY3MjVMMTM2Ljg5NTk4NDU3OTU4NDgsMzc1LjQwMjMzOTYyMjEyNzJMMTM2LjYxODQ3MTU1NjI5MDc2LDM3Ni40OTgxODQ5MjM2Nzc5N0wxMzUuNDU4OTc4OTUxODI2MjMsMzc2LjM4MjgzMDg4OTYyMzdMMTM0LjQxMDgxMzA5NDAwMjA3LDM3NS45MzEwNDUxMDEwODAzTDEzNC42NzA2Nzk4NjMzNTc0NiwzNzUuNDAyNjY5OTA5MDE3NDVMMTMzLjk0NzM1MTYzNTgwNTg2LDM3My45NjA1ODA3ODYwMjQ3TDEzMy4zMjIzMTM2NTM0NzgxOCwzNzUuNjYzODgyMjgwMjQ2OUwxMzIuNzA2MjI0MDMyMDA4NjYsMzc0LjgyNDY3NjA4NzUyMjVMMTMzLjE3ODEzNjkwNjM0OTE4LDM3My4zMjE4Njg2NzcyMDg0NEwxMzIuNzg0MDAzOTI4ODQyODUsMzcyLjQ5NDQ3MTI1NDQyMzdMMTMyLjY4OTc2MDE2MTY4MTg3LDM3My44MTAyOTQyNTI3MDIyTDEzMi4wMTEyMTE5NTUyMTkzMiwzNzQuMzg5NzkxMDIzMTU0MUwxMzAuNjY4NjgzODUzMTI3MDUsMzcyLjk3NjI3MzcxNTI4NTA2TDEzMS40OTI2MjgyOTU0NjI1NywzNzIuMjA1NzYzNDM5NTY0OUwxMzEuMDA3OTU3ODgyMDI4NDUsMzcxLjQwNzgwNjY5MTU3MDJMMTMxLjI0MjQ3MTIxNDk4LDM3MC41MTI1Mzk5OTgyMjk1NkwxMjkuMzQ3MDE3MTMxMzk1OTQsMzY5Ljk1MjkzNTU4NjU2MTc1TDEyOC45NzQ3NjA3MDIzNjU4LDM2OS4xNDUwMzM5MjQ1NTEwNkwxMjYuODIwNjkyNjcxNjY0MTIsMzY4Ljk5OTQ2MzI5NDIxOTRMMTI3LjA0NDQwNjUyMjI3NTI3LDM2OC4wNTgyNDAyODMyOTA0NEwxMjUuOTg1MDI2NzI1NDcwOTksMzY2LjM2NTczNTM1NzQwNzM1TDEyNC4yMzE0MDgyMTY1MjgxNCwzNjUuMDMyNTg2NDY2NTYxTDEyMy44NDEzMDkyMTkwMDA5OCwzNjQuNDI5NzY2MzgxMTk1ODZMMTIyLjQ2ODA1NzAyMTc3OTQsMzY0LjU4NzUwODg3NzA3ODRMMTIwLjMyODQwNzYxMzY0MTgyLDM2Mi4xMDY0OTkwNDY2MTU4TDExOS4xMTE3MTcyNjE4Njk1OSwzNTkuOTU0MDgxOTk4MTU3NDVMMTE4Ljg1NTUzNDExNjcwNzI4LDM2MC4wODUyOTUxNzU0MDgzTDExOS42ODY0ODkxNTI5OTY1NiwzNjEuOTQ3MTk0NjcyNTc4NDZMMTIwLjYzMDYwMTk2NDY0NCwzNjMuMTQxNzgzMjcyNjE5TDEyMS40MjkyMzA1NjA4MjgyNCwzNjUuMTgzOTgxMzY1MzE3OEwxMjAuNjEzNTcwNDg5MDA3ODYsMzY1LjE2MTk5NjIxMzA2NTFMMTE5LjYwMjg0NzcxODYwMjY1LDM2NC40NDQ2MTY0NjkwMjY1TDExOC44MzMwOTUwMjUyMzIzNCwzNjQuOTE5NDU4MzEyNjI3MDZMMTE4LjYxNDEwMTYxNzIxNjkzLDM2My43NzQ5MTM1OTQ0NzEwNkwxMTcuOTYzNjc0MjAyNzMzOTYsMzYyLjg2NTAwNzQ2MTgxN0wxMTcuNDg0MTQ4NDI1MzIyMzksMzYzLjI4MzY2NDUxNDg2ODVMMTE1LjMwNzM4NjQ5NjUyOTkzLDM2Mi41MjAzMDYxMjQyODg4TDExNS4zNDgyNjg2Mzc4NDY2MiwzNjMuMDUyNzQyMDA1NTYzMzVMMTE2LjYzMDkxNTQ2NTQyNjA2LDM2My4wNTYzODI0NDI3MDU0NkwxMTcuNjM3MjAxMTYwMTU3NTUsMzYzLjg0Mzg1MDY4MjA3MDdMMTE4LjU1MzYxODcwNDE2ODM3LDM2NC45OTcwMzUwMzcwNjg1TDExNy4zNDA5Nzg3MzY4MDUwOCwzNjUuNzAwMTg3NTUyNTY3MjNMMTE3LjA5NDY3MjUwMjU4NjUyLDM2Ni4yODExODMzMjk1MTE2M0wxMTMuMTkzMzkwNDQwMjE3NjYsMzY0LjI1NTk4OTk0NTYwMDRMMTEzLjA2MDkyNjE1NDU3MDcyLDM2My43MTg5ODY4MzUxODEzTDExMS45MjgxMTY5ODcxNTE3MiwzNjMuMDg0MjQzMzU3Nzc5OUwxMDguMjg5OTUwNzY0MDQ5MDUsMzYxLjk5NDI2MTg3ODgzMzdMMTA3LjIzOTg5OTg4MTQ4MDIsMzYxLjU3MjE5MzcwNzQ4ODk2TDEwNy45OTU5MTY1NzU5Mzc3NywzNjEuMDk2MDM0NTkxMzQ0NUwxMDcuMzU2MTM2NjE3Mjg0ODUsMzU5LjQ4MDU1NTc3MjI1MzRMMTA3LjE4NTI0ODQ0MDg4OTM1LDM1OS45OTkxMDk1MDQwNzQ4NUwxMDYuMTYxNDM5OTI4OTYwMjUsMzYwLjk4MTI4MDMwNjQwOTUzTDEwNC4zODcyMzk3NDI1NTkyMiwzNjEuMTE3OTcwMDUwMjY0MUwxMDIuOTcwODkzNDE2MzQ0MywzNjAuNjMzMjg2NjI4MDM1NUwxMDMuMDM3NjAyNDUyMTEwNTIsMzYwLjAwMDgxMDA3MTA1NTg3TDEwMi4xNzI5NTYzNDM4NjA3MiwzNjAuMzg5ODg2MjI0MjY0TDk5LjMzMjM5OTM2MzE2NzksMzYwLjE5Mzg2NTg0MTY5MTY2TDk2LjY5OTMwMDcyMjEwMjA4LDM2MS4yMDc4NzcxNDgwNjU1Nkw5Ni4wNjYyMDQ3MjU5NTQ0NCwzNjAuNzE2Mjk2MTI0MjgwMjNMOTMuODM4OTI0NjQ4MjE0NjYsMzYwLjAzMDA5NjMwNjA5NzdMOTMuOTk5OTYyNzcyMTIyNSwzNTkuMTk3OTYyNjEzNDQ2N0w5Mi43MjAyNDEzMDUzNzE3LDM1OS45Mjg3OTExMzE4NTQyTDkyLjE5NzczOTU3MjM2MjUsMzU5LjQzODQ2MzQzNzYwNjc0TDkxLjE5ODc0NDM5NzM5NDI1LDM1OS41MDc1MDc5MTIzODIwNEw5MS42OTg5MjExNDkyMjk1NiwzNTguMzg2MjkzMjA0Mzc3MDdMOTAuODMyMjg0NjQ2MzAzNTUsMzU4Ljc0Mzc1MTMwNjk1NjVMOTAuNTg3MjAyMTMxNzQ4MzEsMzU4LjIxNTg1NTg1ODAyODkzTDg5LjI2MjE1NTgyODY0OTM0LDM1OC41MzUzOTQxNzE4ODIyTDg5LjQ2MDAwMTA5MTM0NzkyLDM1Ny44NzMwNDUwMTU2MDk5TDg4LjgzOTc1OTA2MjkyODgzLDM1Ny4xNjI1MzI0ODE1NTEyTDg3LjM2ODI1MjY2MDA1MTI4LDM1Ny43MzM3NjIzMDM3OTYxNEw4Ni43MzE0MTM2NzQ3ODA3OCwzNTYuNzQwMTQ4MDQxMzk3TDg2Ljg0NTk2MzQ1MjQ2OTQyLDM1Ny45MjQxMzQwODc1OTQ0TDg1LjQ0NDc4NDIyOTYwMTA1LDM1OC4zODY5NjAyODI5NzIwNEw4NS44NDY1MzI4MjQyMTM5NywzNTYuODUxMTMwODU3OThMODUuMjI0OTg5MzA1MzkyMzQsMzU2LjkwNjY5MDEzNTMzODFMODUuMTQ0OTkwMDU1OTM1OTgsMzU4LjA1MjExMTM2MDQ1NjRMODQuMzAxODY0NTQyOTA0MTcsMzU4Ljc2MTE0NzAxMTY4ODdMODUuMjc1MTQ1OTExNDA2NzgsMzU4LjUxMjg3OTA5MDE5MTRMODUuMzk5NzQwMTk4MTcxNjYsMzU5Ljk0NjAxODM3ODg0MjdMODUuNjIyMjU0ODg4MTgwNjYsMzU5LjM3MTA3NTQ3MjY0MjkzTDg2LjE1NTg5NjY3NTY1NzA5LDM2MC4yMzk2OTYxOTk4NDc0TDg1LjI0ODI5MjM0OTc4MzYxLDM2MS4zNzUxNzY5MDY5MjA5Nkw4NS43OTU1NDgxODE5ODY2MiwzNjEuMzI3NTk5NTcwNDg4MTNMODUuNzg0NDAyMjA3NjU3MDUsMzYyLjI0NTA1ODU1MTAxMjg1Wk03LjQ0NzM0NTg3MzkzNTA0MiwzOTMuMTM5MDM3MzYyNTQ1OEw4LjA5NDY5MzI2OTM4NzYwNSwzOTIuNTk0ODM1ODI3NjU1TDguNDg4NzcwMjk1Nzk0MjY4LDM5My4yMzU0NTU3MzYwNDkzTDcuOTk0MDUzNzQyMzUxOTczLDM5NC4wNTg0NzgyODcxOTMyTDYuNzY0Nzk4NDkyMDE4MzE1LDM5NC4xNjAxOTc1MzM4NDc2TDQuNjcyNTY4MDU3OTM4NzQ3LDM5My41Njk1OTM5NDI1ODVMNi4wOTUxNzY3MzYxNjA1ODIsMzkzLjYyOTA4MDM4NjUzNjI2Wk0tMTYuOTYyMTEzMDkxMDkwMTksMzg1LjE5Mjc2NzQ4MzA3ODk3TC0xNy4yODI2Mjc5NDg1Mjk5NSwzODUuNjE5MjY3OTY5OTE0MDZMLTE4LjM5Mzc0MzI3MDM1MjQ3MywzODUuMjg5MzczMDg3MjY2OVpNLTIuNTYxOTg3NDY0MTQ0MzUxNiwzOTIuNzA2NzUxOTgzODU1N0wtMS44NzA3NTQ4NzIzNzM3ODAxLDM5MS44MjEwNzI5NTAzMTczM0wtMS4yOTg4NjA1NzA0OTc0MTA1LDM5Mi4yNjIxODI5OTc2MTU0N0wtMi4wNTg0MjIxNjE2MDE2MTIzLDM5My4wMDc0NjE2NDAzMjk3Wk0tMy44ODkyMjQxMzQ0NzgzMjYsMzkxLjk4MDYyMDY3NDU3NTVMLTQuNTQwOTU1Njk0MTY2MDE2LDM5Mi43MzEyNjEyNzE5NTgwM0wtNC45ODQ5Mjc4ODM2Njc1MSwzOTEuOTQ3NzU5MzA5MzE4MjZMLTQuMzIwMTA3MTI4MTY0ODM1LDM5MS44MTg1NjQwNTU0ODE5NEwtNS4wMjQxNzY2NjY0NzM0NTEsMzkxLjA4MTkxMTM3NDIzNTFMLTQuMDU4NzU0MjUyMTU2MjIsMzkxLjEyNTk0MTI2Mzc3ODAzWk0tMC42OTcxNTg1NDYxNDQzMzY4LDM5Mi42MjQyMDg3NjE2NzM0NkwwLjI4ODU5OTY2ODc3MDk3MDY1LDM5Mi4yNDcwOTU1MzIwNzc2TDAuMDA1MzE2MjMyODEzNTY5ODU0NCwzOTMuMDQ4NTkxNTQ2Mjc3MDdMMC45MzU4ODYxNzc2NTc0MjMsMzkzLjE3MTgyMjI3MTg2NzhMMC43MTkzMDAzODMxMjMzNjgyLDM5My43OTMxNDgwNDkzNTczNEwtMC4xMjI1ODg4OTAyNzk1NDQ2NywzOTMuNDEwNDc0NDk5MzI4NTNMLTEuNTEyOTQyOTI0MTcxMjg0MiwzOTMuODc1MDg2NDkxMTQzNUwtMS4xMTQxNjU2Mzc3MDczODcyLDM5Mi43NjU5NDAxMzQyMjM4Wk03NS42NTAwODQzMDkxNzA1MiwzNzIuMTI5Nzg5MDExNDYyNjZMNzUuNTY4OTcxNTAzMzg3MjMsMzcyLjc0MDM0OTA2MDY3OTkzTDczLjYzMjQ4MTk2NzkyNzUsMzczLjQ5OTQ2MTY2ODYyNTRMNzIuMzU3NjUyOTQxNjY3NzQsMzczLjA3MjI2ODQ4Mzg0Njc2TDczLjMxNjM0MzM3NDYyOTA0LDM3MS44NDUyMDAxMjk5MDcxTDczLjg5OTk2NTcyMDY4MzcsMzcxLjk3NDQ3OTk2NjAyNDY2TDc0LjM1MzY2ODEwNzI5NDUxLDM3MC4zODk4NzMxMjM4MjM0TDc1LjIxMTY4MzMwMjU5MDU3LDM3MC4wOTQyOTUwMjEwOTc2NUw3NC44NTIwODc3NjU3ODA1OCwzNzEuMTgxNDI0MjQzODE3ODRMNzYuMjE1NzAwNTI3NzcyNDMsMzcxLjU2MDU4MzcwNTQwMDA2TDc1Ljk1NDUwMjc5OTc4MzExLDM3Mi41OTE1NjAyNDE1NTg3NFpNOTAuNDgwMDg0NzAxMDQyNywzNTkuNjIxNDA2MDQyNTgwMkw5MC4yNjExMzI3NDgyOCwzNTkuMzEyNzgwMDQ4MDc2NjZMOTEuNDAxNTA4MzQ2NTA1MTcsMzU4LjkyNTE3OTYzMzI5ODk3Wk0yNC44MTk2NDg5MTEzMjc4MDMsMzU1LjE1MzQ0MzA1ODU1NDg0TDI0LjE0MDE2NjIzNzkwODMxLDM1NC44NzMxMjU5MTI3NzZMMjMuNTA1NDYzOTEwNTI0Nzc0LDM1My43OTU0MzgyODQxNTQ2N0wyNC44NTI2MzEwNzQ1NjcwOTMsMzU0LjcwMjcxNzk0NzY4ODhaTTg5LjYwOTM1MzU0NDU5OTgzLDM2MC44MzQ5MjU2MzMxMzY0TDg5LjE4MjQ1OTY5MzkxMDMyLDM2MC4yOTc1NzE5NDE5MDQ2Nkw4OS42NDU3MjA2OTMxNzg4MywzNTkuNTIyNDc4NjY2ODE5N0w5MC43OTM0MzgxMjUxMjAzMywzNTkuOTQ2NDcxMTQ0MDM2NzZaTTg2LjY0NzU4ODc2NDYzMTIyLDM2My41ODM3NjM4MDY0MzM4TDg2LjUyMjI4MDg2NDcyMjcyLDM2My4yMzQxNjIyNTA5NzEyTDg4LjE1MDk2MTI4OTQ3NTg3LDM2MC45NjMzMzQzMzk1MTQzNUw4OC43ODE5Njg1OTg5NDI0LDM2MC44NDE2NTgwNDM3MDM0M0w4Ny44ODkzNDc3NDAzMjc3MiwzNjIuMDE4Nzg2ODQzNTk5MUw4Ny42MTI0MTQyNDE4MjAwOSwzNjIuOTYzNzQ3NzM2Mzc1Wk01MS43ODYxMjkzMjQ1NTU1OSwzNjkuNTY2MjQwNDA3MDU4TDUxLjk2NDMwMTIxMzk5NzM3LDM2OC44MDY2NjU1OTk3NjU4NEw1Mi45NzU3MzI2NzU0NzU2MywzNjguMzI4NDIzOTYwMDEzOTRMNTIuNDcwMDk5MzA1NTk2MzIsMzY5LjQ5OTU5MDc2MjI2Njk2Wk0xMzMuMTg1ODAyNjA2NzQzNTIsMzgwLjU2NjM3MjQzNzUxNjJMMTMxLjQyMjEyNDQxMTIyODM0LDM3OS42MzY3MDY1OTg0ODUyNkwxMzAuNzYyODY5MDU2MjEwMDQsMzc4LjI4NTYwMDE5NTMyODhMMTMxLjAyOTg0NTU4NjUyMTA1LDM3OC4wODMzMTgzODY4NzY2WlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjc0LjUyNzY3OTEyMjM5NTg0XFxcIiB5PVxcXCIzNDIuNTg4NDE5NTM1Nzk4MlxcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5BSzwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1OVlxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNMTIxLjczNDU0NjQ3NzYzNzE3LDIwNi41MjU4NzEwNjkwMDQzMkwxMjAuMzA3MDQ1NzMxNjIyNjgsMjE4LjM5Mzg2MTgxODg5NTg2TDExOC41NjQ1NjM3MTU0NTY5LDIyMC43MjkxMjM3NTE5NjQ1TDExNi40MDUxNzQ4NDMxOTU4NSwyMTguNTI4MjI4MDg0MDIzNTdMMTExLjc0NzY0NDc4NDQ0MDcsMjE4LjA5MzQ1NDEyNTcxMjAxTDExMS44NzkyODU1NzIwMzY2OCwyMjEuNzY2MzE0OTU2ODY0OUwxMTAuNjUzNjk4MTQ2NTg5NDIsMjI3LjkyMjMyMzUzMDE3MTUyTDExMS4zODUzODM5OTk3MDM0MSwyMzAuODIxMTAyNTI0NDk3NTJMMTA5LjgwMzAyNzYzMTY2NzUzLDIzNC4zOTM4NTcxNjYxMjY3NEwxMDUuNDg5NjA3MzQ1ODE4NjgsMjI3LjYxMTM2OTE2Nzk1NThMOTYuMTcwNzQ2NjM4MDkzOTMsMjE0LjA1MTk4NTU0MjMyMzM0TDkzLjAwNjg1MzAzMDk2MDEyLDIwOC43MzAxNzYzODI2NzAxNUw4MS42OTI2NzAwNTA3MTU3OCwxOTIuMzIxMTU3ODgxOTIwNkw2Mi44MjYxMDQyNzEwNjY4MSwxNjMuNzk5NjIxNDQ2MTgyODdMNjIuMjc1NjExMjE4ODM3ODEsMTYyLjY3MjcxNjczOTM2Mjk1TDczLjQwMzE1NDE1NzY2MjY0LDExOS41Mjg3MDc0MzM0ODc2M0w5OC40MDg1NTc5NjA4NjEyOSwxMjUuNjQ2NjcwNTY0OTI1NzhMMTA0Ljg5MDc5NjExNzU5MjA5LDEyNy4wNDQwMzE0MjQxNjE1MkwxMjUuODUxNjkxNDUyNzExOTUsMTMxLjYwNzcxNjExNjg4MjlMMTM2LjU2NjE3MjYxMTU3MTIsMTMzLjcyNDAxNzU2NTMyODI3TDEyNy4zOTg5ODI2NzMxNTk4MiwxODEuNDYyNDA3ODI4MTc3NDVMMTI2LjE2MDMzMTAxMjI1NzMsMTgzLjU3MjExMTM3NTM1NTQ2WlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjEwMC4zMjM4MDg3NTMzMzczOVxcXCIgeT1cXFwiMTY2LjYxNzgwNjEyNjc4MjI2XFxcIiBkeD1cXFwiMFxcXCIgZHk9XFxcIjBcXFwiPk5WPC90ZXh0PlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlIHN0YXRlLU9SXFxcIj5cXG4gICAgICAgICAgICA8cGF0aCBjbGFzcz1cXFwic3RhdGVfX3BhdGhcXFwiIGQ9XFxcIk0xMDQuODkwNzk2MTE3NTkyMDksMTI3LjA0NDAzMTQyNDE2MTUyTDk4LjQwODU1Nzk2MDg2MTI5LDEyNS42NDY2NzA1NjQ5MjU3OEw3My40MDMxNTQxNTc2NjI2NCwxMTkuNTI4NzA3NDMzNDg3NjNMNTcuMTk3MDAzNzUyNTg0NTIsMTE1LjIwODIyOTM0MTcxOTk3TDI5LjEwNjAxNjE5Mjg1NjQ4NywxMDcuMDQ0NzQ5MTI0MTQ3NjRMMjcuOTIzNzM3OTg5ODMyNDMyLDEwMS42MjEzNzMwMDg2MDcyOUwyOS43ODk4NTA0NjE4OTM1MzYsOTYuODg5NTQwMDMxMTk0NzdMMjkuMzM4ODkwNTcxMzAyNzg0LDk0LjQyODU0MDY5MTgyMDQ0TDM0LjM3OTIxMjAwODUxMDM2NSw4Ny4yMDEwNDk0NTQxODkzOUwzNy42ODg1NzA1NzA3MDAyOCw4MS41OTY2NDk2ODE3OTk3TDQwLjMwOTYyMDUzNjAyMjA3LDc0LjMwMDMwMjA4OTE4NzMxTDQyLjE1MDY0MjE2ODI2NTIyLDY4LjI2MDA3NTI5MTEzNzEzTDQ0Ljk3OTg0NDE3MDY4MTcsNjQuMDkyMjczMjU0MTkyODNMNDcuODM1ODQ1ODgzMTcwNzUsNTQuNjcwOTc2MDQ4NjEzNTFMNDkuNzM4NTQwMzAyOTgyMzYsNDkuNjU5NjUzMzg1NDU3NjZMNTQuMTg5MjAzNjEzOTkzMTMsNDguODYzNTA4MDM0ODMxMjg0TDU2LjE3OTgyMzQxODE5NzgzLDUxLjE3NTU3MzYxNjYxMjM4TDU3Ljc2NDgxMzQxNTEyODY4NSw1MC45ODY5NDg2Nzc4OTQwMkw2MC4yMzUyMTQxNDMxNzg3OCw1NS42MzgwNzMwODc5NDg1NTVMNTkuNjU0NTQ3Njk1Mjk1MTUsNjAuMzAyNDkzMTQwOTM5MzA1TDYzLjk5Nzk1MTUyODY2MDE3LDYyLjYwOTY0MDU2NDg5MzU0TDY4Ljg4NzYwOTg5ODEzMzAxLDYxLjYxMjU2MzQxNjU3ODQ5Nkw3MS44Mzk4MTE3NzE4NzM0Myw2Mi4wMjE4NjA0MzU1NzM0NDRMNzcuNTcwMjY3NjAwMTExMzgsNjQuODg0NjQ2Mzg5MjkyODFMODEuMTQ3ODIwMzI2ODk2MTgsNjQuMzcyMzQ3MzExMzcyMzJMODQuNjc4NTIyMDEzMDQzMDgsNjUuNDYyNzc5ODQyNjQxMTFMOTguMTY1MDgzOTI3NTY3NjIsNjQuNzQ1NTY4MTA2OTUwMDNMMTE4LjkwODQ2MDI4MDc1MzU5LDY5LjcwMjY4MTg4ODI4NjYzTDExOS40MjE4NTgwMDg1NjM5OSw3Mi40NzYzMjAzNDc4OTE5NEwxMjEuNzM5NTY4MzM1ODc1MSw3My45NTUzNzk4NTM2NDAzNUwxMjEuODg4NjMwMDgxMTA4ODksNzYuNzI3NTUwODUzMTAyOTFMMTE4LjU1Nzk3MTI2MTUxNjM3LDc5Ljc4NDIwNzIyNDg0MThMMTE3LjYxNDc1ODA2OTA2MTE0LDgyLjMxOTI1MzgzMzE0MDhMMTE0LjYyNTE0NzUzMTE2NTQ4LDg3LjE0NjM2OTQzNjMxNzI5TDExMy4wNzY3NTI5OTE3ODMwNSw4Ny4yMDI2NzgwNjU5Njg0OEwxMTAuNzQxMDk5OTAwODc1MTYsOTAuNzE5ODE3Mjc1MjU0NzRMMTEwLjExMTUxMjM4NzY2MDQ3LDkzLjQ5MTgzMzM0NTQxNTIyTDExMy4wNjE2NDk3MjA0ODM4MSw5NS44NTY5NTQ1OTYzMTgxM0wxMTAuOTMzMTc2NjY4MjIzMTUsMTAwLjE1ODAzOTQ1MzU0NzNaXFxcIj48L3BhdGg+PHRleHQgY2xhc3M9XFxcInN0YXRlX19sYWJlbFxcXCIgeD1cXFwiNzQuNjY5MDg0MzkzODI4MTRcXFwiIHk9XFxcIjkwLjI3MTk1ODgyNTc0OVxcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5PUjwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1JRFxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNMTY4LjQ2MjgxNjI2OTA3MDMsMTM5LjI1MTc0ODk1MDYyODc4TDE0Mi4zMDA1OTUxNDk3NDIxNSwxMzQuODg5MDcyMzgwNTcyNzdMMTM2LjU2NjE3MjYxMTU3MTIsMTMzLjcyNDAxNzU2NTMyODI3TDEyNS44NTE2OTE0NTI3MTE5NSwxMzEuNjA3NzE2MTE2ODgyOUwxMDQuODkwNzk2MTE3NTkyMDksMTI3LjA0NDAzMTQyNDE2MTUyTDExMC45MzMxNzY2NjgyMjMxNSwxMDAuMTU4MDM5NDUzNTQ3M0wxMTMuMDYxNjQ5NzIwNDgzODEsOTUuODU2OTU0NTk2MzE4MTNMMTEwLjExMTUxMjM4NzY2MDQ3LDkzLjQ5MTgzMzM0NTQxNTIyTDExMC43NDEwOTk5MDA4NzUxNiw5MC43MTk4MTcyNzUyNTQ3NEwxMTMuMDc2NzUyOTkxNzgzMDUsODcuMjAyNjc4MDY1OTY4NDhMMTE0LjYyNTE0NzUzMTE2NTQ4LDg3LjE0NjM2OTQzNjMxNzI5TDExNy42MTQ3NTgwNjkwNjExNCw4Mi4zMTkyNTM4MzMxNDA4TDExOC41NTc5NzEyNjE1MTYzNyw3OS43ODQyMDcyMjQ4NDE4TDEyMS44ODg2MzAwODExMDg4OSw3Ni43Mjc1NTA4NTMxMDI5MUwxMjEuNzM5NTY4MzM1ODc1MSw3My45NTUzNzk4NTM2NDAzNUwxMTkuNDIxODU4MDA4NTYzOTksNzIuNDc2MzIwMzQ3ODkxOTRMMTE4LjkwODQ2MDI4MDc1MzU5LDY5LjcwMjY4MTg4ODI4NjYzTDExOC4yMjEwMzE2NDgyMTQ1LDY0LjM5MzQwMTUwNDM4ODYzTDEyNi43ODY1NTY0NzI0NTc4MiwyNi40MTQ2MjIwMzcwMzE3OUwxMzYuMzg4NTgxMzE3NDc1ODMsMjguNTI2OTE5MzM1MjQ0ODg0TDEzMy4yNTEwMzk1ODYzMDIyOCw0My4xNTc3MzE3NDgyNDE5ODZMMTM1LjU5NzkzNjQyODkyODczLDQ5LjMyOTI0Nzk2MDU3NjQ4TDEzNS4wNjkyMTcwNjYxNTUyMyw1MC4wOTcxNTQ1MzU1MDAyOTVMMTM2Ljc4MDY2MTMzNDI0NTQ1LDU0LjIxMzk5NjcxMzEyODA0TDEzOC4yMjk4Nzc4MzgxNjI0Miw1Ni4xMTM3Mzk4MTE5ODAxN0wxNDEuMTE0NzkwMjQyODMyMjcsNjEuOTAxNjMzMzkzNzg4ODdMMTQzLjQ3Mzg4NjIzMjM1NDMyLDY0LjkzNDE1OTAzOTYxOTMyTDE0Ni42ODg2NDQ2MTg5NjA3NSw2NS41NjcyMzkxODI3MTI1N0wxNDMuOTU2MDE5Mjk1Nzg5NjcsNzEuOTEzMzQzMjEyMjU1NjVMMTQzLjAyMzQ0NzIzNjYyMjg3LDcyLjg1MDk0NzQ0MzY1MjMzTDE0My43ODM1NDkwODg2NzIyMyw3Ni42MDY1NDQ2OTIwNDc0NkwxNDEuNjcxMDA2NzA0OTQyNiw3Ny43OTQwOTQ0MjIxNjgzMUwxNDEuMDc1MDk0NzE1MjAzMTQsODAuODA1MTE0ODU4MTU3NkwxNDMuMzAwNTE0MDg0MTE5MDIsODIuOTI3NjI5NjQ0MTAwMkwxNDcuMTM5NTA5Njk1NjU1MTYsODAuNjIyOTc5NTk2OTYwMDJMMTQ4LjgyMjgyNDQ3ODkyODQsODEuNjY1MDgzMjk5NjM0NkwxNDguNDA5OTkyMDEyNTkzOTMsODUuODM0NzQ0MjEyODA3NzhMMTUwLjk3NjA4Nzc5NjEyMTc2LDkwLjMyNDkyNjQ1MDg0NzQ0TDE1MC40NTc2MTM0NTMxMTkwNSw5My4xMTU4NTY0MDcwMDU3MUwxNTMuNTI3Njg1ODMyMjIwNjQsOTUuMDQ0MjY0ODAwMzM5MTlMMTU0LjEwMzUzMzM0MTA2NCwxMDAuMjgyMjIxNDkxMDA1NzdMMTU1LjAwNTYzODQ0NzI4ODQ1LDEwMS42NDgxNTk5NjA0OTExN0wxNTYuODc2OTUzNjgyMDgyNjEsOTkuNzM2OTA3NjE0NzU2NzdMMTYwLjQ0NTAwMDU3NzU3NjQ4LDEwMS4xNjY1NDEyODMyMTM5N0wxNjAuNjc1MTQ4MDg1MzEyNiw5OS44NDQ0MTU1MDQyMzIzTDE2Ni4xNTMxODUwNTQ2MDM2NSwxMDEuMjYyNTIxNTEyMTg0NjZMMTY5LjY3MDkzMjAwMDI3NjIyLDEwMC43Mjc5NDg1MzIxNTAyMUwxNzEuMTkwNDY5MDE0OTgxOTQsOTguNDE4NTExMTgzMDgxNDhMMTc0LjIxNjcwMzU3MTE1NjUsMTAzLjIyNDY5ODIyMDk2MTI3WlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjEzNi45OTU0NDA4MTc4MzA0XFxcIiB5PVxcXCI5OC4yNTUxMDEzNjI1NjA3MVxcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5JRDwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZSBzdGF0ZS1XQVxcXCI+XFxuICAgICAgICAgICAgPHBhdGggY2xhc3M9XFxcInN0YXRlX19wYXRoXFxcIiBkPVxcXCJNNzIuNTUyNzk5NTgzODM3NjEsMjMuMzE0ODk0Mzg5NjE1MzQ3TDcxLjI3MDIwMDg4NjUxMzI0LDIzLjkyMDc5NTk2NTUxNTQ4TDcyLjg5Mjg2MzEzODEyMzgsMjcuMzA3NjU5NDQyNDE2MDI1TDcyLjQwMTAzMjk2NjcxOTM2LDI5LjAzNTMyNTEzMTEwODA0TDcwLjQ5MzcxNjQ5MjEwMTA0LDI2LjYyMTI0MzAyODEzNzc3TDcwLjA1NTg2MjQ3MzM2MjgyLDIzLjAwMjI3MDQ0MDU4MjAzOEw3MS4zMDAyMjExMjU3NDE0MiwyMS4yNTEwNjYwNTg1Mjc5NTRaTTExOC45MDg0NjAyODA3NTM1OSw2OS43MDI2ODE4ODgyODY2M0w5OC4xNjUwODM5Mjc1Njc2Miw2NC43NDU1NjgxMDY5NTAwM0w4NC42Nzg1MjIwMTMwNDMwOCw2NS40NjI3Nzk4NDI2NDExMUw4MS4xNDc4MjAzMjY4OTYxOCw2NC4zNzIzNDczMTEzNzIzMkw3Ny41NzAyNjc2MDAxMTEzOCw2NC44ODQ2NDYzODkyOTI4MUw3MS44Mzk4MTE3NzE4NzM0Myw2Mi4wMjE4NjA0MzU1NzM0NDRMNjguODg3NjA5ODk4MTMzMDEsNjEuNjEyNTYzNDE2NTc4NDk2TDYzLjk5Nzk1MTUyODY2MDE3LDYyLjYwOTY0MDU2NDg5MzU0TDU5LjY1NDU0NzY5NTI5NTE1LDYwLjMwMjQ5MzE0MDkzOTMwNUw2MC4yMzUyMTQxNDMxNzg3OCw1NS42MzgwNzMwODc5NDg1NTVMNTcuNzY0ODEzNDE1MTI4Njg1LDUwLjk4Njk0ODY3Nzg5NDAyTDU2LjE3OTgyMzQxODE5NzgzLDUxLjE3NTU3MzYxNjYxMjM4TDU0LjE4OTIwMzYxMzk5MzEzLDQ4Ljg2MzUwODAzNDgzMTI4NEw0OS4xMzQ0NzczMzc3MTY1OSw0Ni42MDIxMzQ5Mjg1ODM2MUw1MC4xODYzMDE1MjIxNTA3Niw0My4xNDY1MTQ5MDQzNzg5M0w1My4zMzE0MjI3Nzk5NzM1OSw0MS41NTc0NDc2NDgzNDYyOEw1MC42MTUzNDAyMTU2Njc5MSw0MC40ODgxNjA0NTQzNTc5N0w1MS4wMDAxMDU5NjY2NjU5NTYsMzcuOTgxNzY4NzQ5Nzg0ODA2TDUzLjkxMjUwMzI3Nzk1MTE0NiwzOC4zNzQyNTc0NDI1NTc3OUw1MS4zMTc1OTI5MzYzMDA5NywzNS43MDIwMDIwNDY1NTYwMDRMNTEuMTk5MDA4OTYxOTYxLDMxLjE2MDI5MTc5NzA0MTYyM0w1MS43NTc0NzExMjQwNjM3ODQsMjUuNjg0NTE3NTIxNDgxNjY2TDUwLjY0MDMzNzc5MjkzODM5NiwyMC44Mzk0NDQ5NjA0NzY1TDUxLjU4NzQ3MDY5OTI2ODY5LDE1LjQxMzU0MDk0MzEzNTMzMUw1OC4zODYwMjgxNjc5NzA2MSwyMS4wOTQ3MTE4MDY5MzIxOTZMNjkuNzY5Mjk0NjgxOTU4MjMsMjUuMjc1MDQ2Njg5ODg4NzY4TDY5LjEzNzcxMTUyMzI1NjQzLDI4Ljc1MDQ3ODcyOTIzNjY0N0w2Ni4yMDQ4NTUwODk4OTgzOSwzMS4xNTYxNzY3NzMwODc3MzZMNzAuOTQxMjQ2NjYyNDUxNywyOC45NDM1MzcxNzY3OTA0MTRMNjcuNzI4NzQ4ODA2MjQwNDUsMzcuNTQyNjIxMjY3Njk5NTlMNjYuMTI2MDgwMzYxNzQ2NTcsMzYuNTkxODc3ODI2Nzk1NjdMNjUuMTA0Mzc4MDE3MDUxNiwzOC44MjM3ODI0NjkyODcxNUw2Ny4zODI5MTkxOTQ5MjIwNywzOC43NDcwNTU1MDUzNTA3N0w2OC4yOTEzMDM3NDc4ODk5NywzNi44ODk0NDUyODA3MzY1OTVMNzAuMTUyODAwMTcwNzkzNDUsMzYuOTMyNzU1NzYzNzYxODZMNzAuNjQxMjM0NTk1MTIwNjQsMzIuNTk3Mjg4MjgwMDA3MjA2TDc0LjI2NDYxNjE2NDM5MzI2LDI3LjY5NzA0ODg0MzA0MTY3TDcxLjg4NzAwMTg2MzUwNzYzLDI1LjY0MDMxNDQ3NzYwNzM3Nkw3Mi4wODI0NjIwNzQ4NDI4NSwyMy42NjcwMDY1NDE5OTQyODNMNzMuOTE4NTIxMDMwOTM5ODEsMjMuNzA0ODAyMDg4ODQxNjlMNzEuMzcwNTQ4MDM0MjEwNDYsMTkuNzI5ODk0MDQwNTQwNTU3TDczLjY0NDM1MTcwMDMwMzY3LDIwLjc4ODY5MDA2NjkyMTg0NUw3NC40NjE3NjEyNzg3NzgxMSwxNi42NDc0OTcxNjUwOTI1NDVMNzIuMzIxNDAwMzIxNjk5MzQsMTYuNDM3MDg1MjcwNjUzMzdMNzMuMDYzNDE4MTUxMzM5NzYsMTIuNjAxODIwODI0MDMxOTYxTDgyLjUwMTU2NjczNjI3NjIzLDE1LjM1NzkzNDkzMzA3NTk2N0wxMDYuOTcwNjMwNDYxNDQzMzMsMjEuNzE2Nzk0MzYxODg3MzFMMTI2Ljc4NjU1NjQ3MjQ1NzgyLDI2LjQxNDYyMjAzNzAzMTc5TDExOC4yMjEwMzE2NDgyMTQ1LDY0LjM5MzQwMTUwNDM4ODYzWlxcXCI+PC9wYXRoPjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZV9fbGFiZWxcXFwiIHg9XFxcIjg4LjQ3MjM3NjA2MTE2NzE0XFxcIiB5PVxcXCI0MS40NzQ4NzI1NTcyNDY0MzVcXFwiIGR4PVxcXCIwXFxcIiBkeT1cXFwiMFxcXCI+V0E8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUgc3RhdGUtQVpcXFwiPlxcbiAgICAgICAgICAgIDxwYXRoIGNsYXNzPVxcXCJzdGF0ZV9fcGF0aFxcXCIgZD1cXFwiTTE3OS44OTIxNDYwMDQ1NTA3NywyMTYuMTQxMTM4NzIxMjM0MTRMMTY4LjM5MDMzNjM3MzU1ODIsMjk5LjQzMzA0MjI0ODU3MDRMMTQzLjAyODQ5OTE4NDczMzEsMjk1LjY1MjE5MzU2OTE5NDY1TDEyMi4zMTk3Mjk3NzIxNzgzOSwyODMuNzE1MzExODY3NDQ3MjdMMTAwLjM4MDI0NjE1Njc0NDg3LDI3MC40NDIzMTgzODkzNzg0NEwxMDIuMzM1MTUzMzE1NjYyNTgsMjY3LjQ0MTM2OTI3NTE0MjRMMTA1LjcyMjU1MTkyNTA3MTI2LDI2Ni4yNTUxMDYyMzEzNTc1NkwxMDUuODI1Nzg0MDU0NjA3OTQsMjYzLjQ0OTA3OTg4ODQzNTJMMTAzLjY4MTQwNTY2NDMxMjk2LDI2Mi45NDM0ODI2OTQ1ODc4TDEwNC4zNTA0NzA5Mzk1MDA4NCwyNTcuMzM4NTQ4MTIxMjcyNjVMMTA2Ljg1Mjk1OTM0NzAyNjY4LDI1NS45NzYwOTMxMDAyNTQ1TDEwOC4wNTE3MzUwODEyNDgzOCwyNDkuOTA2ODkxNTU2NDcwNTVMMTA5LjM0OTgxMDg1NDg4OTUxLDI0Ny44MTc2NDk2MzA1MDdMMTEyLjU0NTE2OTgzNjU5NDgsMjQ3LjMxMDAwMzM2NTEyNDc3TDExMy43NzM0OTMyMjM5Mjc4LDI0NS41MjcwMDgzOTg4MTg5TDExMS4xNjM1NzExMTI5MTU4NiwyNDMuMDc4NjAxMzQ5MTk3M0wxMTEuMDgxMTA5OTg5NzQwOSwyMzkuMDE3NDA4NjU1Mjg4NTNMMTA5LjQxNjEzMDM2NTA4MzEyLDIzNi4zNDEwNDUyMzEwMDJMMTA5LjgwMzAyNzYzMTY2NzUzLDIzNC4zOTM4NTcxNjYxMjY3NEwxMTEuMzg1MzgzOTk5NzAzNDEsMjMwLjgyMTEwMjUyNDQ5NzUyTDExMC42NTM2OTgxNDY1ODk0MiwyMjcuOTIyMzIzNTMwMTcxNTJMMTExLjg3OTI4NTU3MjAzNjY4LDIyMS43NjYzMTQ5NTY4NjQ5TDExMS43NDc2NDQ3ODQ0NDA3LDIxOC4wOTM0NTQxMjU3MTIwMUwxMTYuNDA1MTc0ODQzMTk1ODUsMjE4LjUyODIyODA4NDAyMzU3TDExOC41NjQ1NjM3MTU0NTY5LDIyMC43MjkxMjM3NTE5NjQ1TDEyMC4zMDcwNDU3MzE2MjI2OCwyMTguMzkzODYxODE4ODk1ODZMMTIxLjczNDU0NjQ3NzYzNzE3LDIwNi41MjU4NzEwNjkwMDQzMkwxMzQuODg3MTk4MTkxOTI0ODIsMjA4Ljk3OTUzMzk4OTQ4NzFMMTYzLjMzMDY1MjE3NDA5MTg1LDIxMy44MDY4NzgwNjgxNTQzM1pcXFwiPjwvcGF0aD48dGV4dCBjbGFzcz1cXFwic3RhdGVfX2xhYmVsXFxcIiB4PVxcXCIxNDMuMDg3NjkwNDAyMzE1NzZcXFwiIHk9XFxcIjI1MS40NzE4NDA5MTQzMDkwN1xcXCIgZHg9XFxcIjBcXFwiIGR5PVxcXCIwXFxcIj5BWjwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgPC9nPlxcbiAgICA8ZyBjbGFzcz1cXFwic3RhdGUtYm94ZXNcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDY0NSwgODUpXFxcIj5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZS1ib3gtVlRcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDAsIDApXFxcIj5cXG4gICAgICAgICAgICA8cmVjdCBjbGFzcz1cXFwic3RhdGUtYm94X19iYWNrZ3JvdW5kXFxcIj48L3JlY3Q+PHRleHQgY2xhc3M9XFxcInN0YXRlLWJveF9fbGFiZWxcXFwiIHg9XFxcIjIwXFxcIiB5PVxcXCIxNVxcXCI+VlQ8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUtYm94LU5IXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgwLCAyNylcXFwiPlxcbiAgICAgICAgICAgIDxyZWN0IGNsYXNzPVxcXCJzdGF0ZS1ib3hfX2JhY2tncm91bmRcXFwiPjwvcmVjdD48dGV4dCBjbGFzcz1cXFwic3RhdGUtYm94X19sYWJlbFxcXCIgeD1cXFwiMjBcXFwiIHk9XFxcIjE1XFxcIj5OSDwvdGV4dD5cXG4gICAgICAgIDwvZz5cXG4gICAgICAgIDxnIGNsYXNzPVxcXCJzdGF0ZS1ib3gtTUFcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDAsIDU0KVxcXCI+XFxuICAgICAgICAgICAgPHJlY3QgY2xhc3M9XFxcInN0YXRlLWJveF9fYmFja2dyb3VuZFxcXCI+PC9yZWN0Pjx0ZXh0IGNsYXNzPVxcXCJzdGF0ZS1ib3hfX2xhYmVsXFxcIiB4PVxcXCIyMFxcXCIgeT1cXFwiMTVcXFwiPk1BPC90ZXh0PlxcbiAgICAgICAgPC9nPlxcbiAgICAgICAgPGcgY2xhc3M9XFxcInN0YXRlLWJveC1SSVxcXCIgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoMCwgODEpXFxcIj5cXG4gICAgICAgICAgICA8cmVjdCBjbGFzcz1cXFwic3RhdGUtYm94X19iYWNrZ3JvdW5kXFxcIj48L3JlY3Q+PHRleHQgY2xhc3M9XFxcInN0YXRlLWJveF9fbGFiZWxcXFwiIHg9XFxcIjIwXFxcIiB5PVxcXCIxNVxcXCI+Ukk8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUtYm94LUNUXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgwLCAxMDgpXFxcIj5cXG4gICAgICAgICAgICA8cmVjdCBjbGFzcz1cXFwic3RhdGUtYm94X19iYWNrZ3JvdW5kXFxcIj48L3JlY3Q+PHRleHQgY2xhc3M9XFxcInN0YXRlLWJveF9fbGFiZWxcXFwiIHg9XFxcIjIwXFxcIiB5PVxcXCIxNVxcXCI+Q1Q8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUtYm94LU5KXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgwLCAxMzUpXFxcIj5cXG4gICAgICAgICAgICA8cmVjdCBjbGFzcz1cXFwic3RhdGUtYm94X19iYWNrZ3JvdW5kXFxcIj48L3JlY3Q+PHRleHQgY2xhc3M9XFxcInN0YXRlLWJveF9fbGFiZWxcXFwiIHg9XFxcIjIwXFxcIiB5PVxcXCIxNVxcXCI+Tko8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUtYm94LURFXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgwLCAxNjIpXFxcIj5cXG4gICAgICAgICAgICA8cmVjdCBjbGFzcz1cXFwic3RhdGUtYm94X19iYWNrZ3JvdW5kXFxcIj48L3JlY3Q+PHRleHQgY2xhc3M9XFxcInN0YXRlLWJveF9fbGFiZWxcXFwiIHg9XFxcIjIwXFxcIiB5PVxcXCIxNVxcXCI+REU8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUtYm94LU1EXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgwLCAxODkpXFxcIj5cXG4gICAgICAgICAgICA8cmVjdCBjbGFzcz1cXFwic3RhdGUtYm94X19iYWNrZ3JvdW5kXFxcIj48L3JlY3Q+PHRleHQgY2xhc3M9XFxcInN0YXRlLWJveF9fbGFiZWxcXFwiIHg9XFxcIjIwXFxcIiB5PVxcXCIxNVxcXCI+TUQ8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUtYm94LURDXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgwLCAyMTYpXFxcIj5cXG4gICAgICAgICAgICA8cmVjdCBjbGFzcz1cXFwic3RhdGUtYm94X19iYWNrZ3JvdW5kXFxcIj48L3JlY3Q+PHRleHQgY2xhc3M9XFxcInN0YXRlLWJveF9fbGFiZWxcXFwiIHg9XFxcIjIwXFxcIiB5PVxcXCIxNVxcXCI+REM8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUtYm94LVBSXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgwLCAyNDMpXFxcIj5cXG4gICAgICAgICAgICA8cmVjdCBjbGFzcz1cXFwic3RhdGUtYm94X19iYWNrZ3JvdW5kXFxcIj48L3JlY3Q+PHRleHQgY2xhc3M9XFxcInN0YXRlLWJveF9fbGFiZWxcXFwiIHg9XFxcIjIwXFxcIiB5PVxcXCIxNVxcXCI+UFI8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgICAgICA8ZyBjbGFzcz1cXFwic3RhdGUtYm94LVBXXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgwLCAyNzApXFxcIj5cXG4gICAgICAgICAgICA8cmVjdCBjbGFzcz1cXFwic3RhdGUtYm94X19iYWNrZ3JvdW5kXFxcIj48L3JlY3Q+PHRleHQgY2xhc3M9XFxcInN0YXRlLWJveF9fbGFiZWxcXFwiIHg9XFxcIjIwXFxcIiB5PVxcXCIxNVxcXCI+UFc8L3RleHQ+XFxuICAgICAgICA8L2c+XFxuICAgIDwvZz5cXG48L3N2Zz5cIjsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiYWN0aXZlXCI6XCJzcmMtdmlld3MtbWFwLXZpZXctLWFjdGl2ZVwiLFwibWFwQ29udGFpbmVyXCI6XCJzcmMtdmlld3MtbWFwLXZpZXctLW1hcENvbnRhaW5lclwiLFwibGVnZW5kQ29udGFpbmVyXCI6XCJzcmMtdmlld3MtbWFwLXZpZXctLWxlZ2VuZENvbnRhaW5lclwiLFwibGVnZW5kV3JhcHBlclwiOlwic3JjLXZpZXdzLW1hcC12aWV3LS1sZWdlbmRXcmFwcGVyXCIsXCJ0aWNrXCI6XCJzcmMtdmlld3MtbWFwLXZpZXctLXRpY2tcIixcImdyYWRpZW50XCI6XCJzcmMtdmlld3MtbWFwLXZpZXctLWdyYWRpZW50XCIsXCJob3ZlclwiOlwic3JjLXZpZXdzLW1hcC12aWV3LS1ob3ZlclwifTsiLCIvKipcbiAqIGNocm9tYS5qcyAtIEphdmFTY3JpcHQgbGlicmFyeSBmb3IgY29sb3IgY29udmVyc2lvbnNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxOCwgR3JlZ29yIEFpc2NoXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKlxuICogMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG4gKiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAzLiBUaGUgbmFtZSBHcmVnb3IgQWlzY2ggbWF5IG5vdCBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuICogZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAqIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAqIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgR1JFR09SIEFJU0NIIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsXG4gKiBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORyxcbiAqIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXG4gKiBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZXG4gKiBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICogTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLFxuICogRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogY2hyb21hLmpzIGluY2x1ZGVzIGNvbG9ycyBmcm9tIGNvbG9yYnJld2VyMi5vcmcsIHdoaWNoIGFyZSByZWxlYXNlZCB1bmRlclxuICogdGhlIGZvbGxvd2luZyBsaWNlbnNlOlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAwMiBDeW50aGlhIEJyZXdlciwgTWFyayBIYXJyb3dlcixcbiAqIGFuZCBUaGUgUGVubnN5bHZhbmlhIFN0YXRlIFVuaXZlcnNpdHkuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsXG4gKiBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpY1xuICogbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBOYW1lZCBjb2xvcnMgYXJlIHRha2VuIGZyb20gWDExIENvbG9yIE5hbWVzLlxuICogaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8jc3ZnLWNvbG9yXG4gKlxuICogQHByZXNlcnZlXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLmNocm9tYSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBsaW1pdCA9IGZ1bmN0aW9uICh4LCBtaW4sIG1heCkge1xuICAgICAgICBpZiAoIG1pbiA9PT0gdm9pZCAwICkgbWluPTA7XG4gICAgICAgIGlmICggbWF4ID09PSB2b2lkIDAgKSBtYXg9MTtcblxuICAgICAgICByZXR1cm4geCA8IG1pbiA/IG1pbiA6IHggPiBtYXggPyBtYXggOiB4O1xuICAgIH07XG5cbiAgICB2YXIgY2xpcF9yZ2IgPSBmdW5jdGlvbiAocmdiKSB7XG4gICAgICAgIHJnYi5fY2xpcHBlZCA9IGZhbHNlO1xuICAgICAgICByZ2IuX3VuY2xpcHBlZCA9IHJnYi5zbGljZSgwKTtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPD0zOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpIDwgMykge1xuICAgICAgICAgICAgICAgIGlmIChyZ2JbaV0gPCAwIHx8IHJnYltpXSA+IDI1NSkgeyByZ2IuX2NsaXBwZWQgPSB0cnVlOyB9XG4gICAgICAgICAgICAgICAgcmdiW2ldID0gbGltaXQocmdiW2ldLCAwLCAyNTUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpID09PSAzKSB7XG4gICAgICAgICAgICAgICAgcmdiW2ldID0gbGltaXQocmdiW2ldLCAwLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmdiO1xuICAgIH07XG5cbiAgICAvLyBwb3J0ZWQgZnJvbSBqUXVlcnkncyAkLnR5cGVcbiAgICB2YXIgY2xhc3NUb1R5cGUgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IFsnQm9vbGVhbicsICdOdW1iZXInLCAnU3RyaW5nJywgJ0Z1bmN0aW9uJywgJ0FycmF5JywgJ0RhdGUnLCAnUmVnRXhwJywgJ1VuZGVmaW5lZCcsICdOdWxsJ107IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBuYW1lID0gbGlzdFtpXTtcblxuICAgICAgICBjbGFzc1RvVHlwZVsoXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiKV0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIHZhciB0eXBlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiBjbGFzc1RvVHlwZVtPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKV0gfHwgXCJvYmplY3RcIjtcbiAgICB9O1xuXG4gICAgdmFyIHVucGFjayA9IGZ1bmN0aW9uIChhcmdzLCBrZXlPcmRlcikge1xuICAgICAgICBpZiAoIGtleU9yZGVyID09PSB2b2lkIDAgKSBrZXlPcmRlcj1udWxsO1xuXG4gICAgXHQvLyBpZiBjYWxsZWQgd2l0aCBtb3JlIHRoYW4gMyBhcmd1bWVudHMsIHdlIHJldHVybiB0aGUgYXJndW1lbnRzXG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA+PSAzKSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKTsgfVxuICAgICAgICAvLyB3aXRoIGxlc3MgdGhhbiAzIGFyZ3Mgd2UgY2hlY2sgaWYgZmlyc3QgYXJnIGlzIG9iamVjdFxuICAgICAgICAvLyBhbmQgdXNlIHRoZSBrZXlPcmRlciBzdHJpbmcgdG8gZXh0cmFjdCBhbmQgc29ydCBwcm9wZXJ0aWVzXG4gICAgXHRpZiAodHlwZShhcmdzWzBdKSA9PSAnb2JqZWN0JyAmJiBrZXlPcmRlcikge1xuICAgIFx0XHRyZXR1cm4ga2V5T3JkZXIuc3BsaXQoJycpXG4gICAgXHRcdFx0LmZpbHRlcihmdW5jdGlvbiAoaykgeyByZXR1cm4gYXJnc1swXVtrXSAhPT0gdW5kZWZpbmVkOyB9KVxuICAgIFx0XHRcdC5tYXAoZnVuY3Rpb24gKGspIHsgcmV0dXJuIGFyZ3NbMF1ba107IH0pO1xuICAgIFx0fVxuICAgIFx0Ly8gb3RoZXJ3aXNlIHdlIGp1c3QgcmV0dXJuIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgIFx0Ly8gKHdoaWNoIHdlIHN1cHBvc2UgaXMgYW4gYXJyYXkgb2YgYXJncylcbiAgICAgICAgcmV0dXJuIGFyZ3NbMF07XG4gICAgfTtcblxuICAgIHZhciBsYXN0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgMikgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICB2YXIgbCA9IGFyZ3MubGVuZ3RoLTE7XG4gICAgICAgIGlmICh0eXBlKGFyZ3NbbF0pID09ICdzdHJpbmcnKSB7IHJldHVybiBhcmdzW2xdLnRvTG93ZXJDYXNlKCk7IH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHZhciBQSSA9IE1hdGguUEk7XG5cbiAgICB2YXIgdXRpbHMgPSB7XG4gICAgXHRjbGlwX3JnYjogY2xpcF9yZ2IsXG4gICAgXHRsaW1pdDogbGltaXQsXG4gICAgXHR0eXBlOiB0eXBlLFxuICAgIFx0dW5wYWNrOiB1bnBhY2ssXG4gICAgXHRsYXN0OiBsYXN0LFxuICAgIFx0UEk6IFBJLFxuICAgIFx0VFdPUEk6IFBJKjIsXG4gICAgXHRQSVRISVJEOiBQSS8zLFxuICAgIFx0REVHMlJBRDogUEkgLyAxODAsXG4gICAgXHRSQUQyREVHOiAxODAgLyBQSVxuICAgIH07XG5cbiAgICB2YXIgaW5wdXQgPSB7XG4gICAgXHRmb3JtYXQ6IHt9LFxuICAgIFx0YXV0b2RldGVjdDogW11cbiAgICB9O1xuXG4gICAgdmFyIGxhc3QkMSA9IHV0aWxzLmxhc3Q7XG4gICAgdmFyIGNsaXBfcmdiJDEgPSB1dGlscy5jbGlwX3JnYjtcbiAgICB2YXIgdHlwZSQxID0gdXRpbHMudHlwZTtcblxuXG4gICAgdmFyIENvbG9yID0gZnVuY3Rpb24gQ29sb3IoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgaWYgKHR5cGUkMShhcmdzWzBdKSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIGFyZ3NbMF0uY29uc3RydWN0b3IgJiZcbiAgICAgICAgICAgIGFyZ3NbMF0uY29uc3RydWN0b3IgPT09IHRoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIC8vIHRoZSBhcmd1bWVudCBpcyBhbHJlYWR5IGEgQ29sb3IgaW5zdGFuY2VcbiAgICAgICAgICAgIHJldHVybiBhcmdzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbGFzdCBhcmd1bWVudCBjb3VsZCBiZSB0aGUgbW9kZVxuICAgICAgICB2YXIgbW9kZSA9IGxhc3QkMShhcmdzKTtcbiAgICAgICAgdmFyIGF1dG9kZXRlY3QgPSBmYWxzZTtcblxuICAgICAgICBpZiAoIW1vZGUpIHtcbiAgICAgICAgICAgIGF1dG9kZXRlY3QgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKCFpbnB1dC5zb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5hdXRvZGV0ZWN0ID0gaW5wdXQuYXV0b2RldGVjdC5zb3J0KGZ1bmN0aW9uIChhLGIpIHsgcmV0dXJuIGIucCAtIGEucDsgfSk7XG4gICAgICAgICAgICAgICAgaW5wdXQuc29ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGF1dG8tZGV0ZWN0IGZvcm1hdFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBpbnB1dC5hdXRvZGV0ZWN0OyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBjaGsgPSBsaXN0W2ldO1xuXG4gICAgICAgICAgICAgICAgbW9kZSA9IGNoay50ZXN0LmFwcGx5KGNoaywgYXJncyk7XG4gICAgICAgICAgICAgICAgaWYgKG1vZGUpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnB1dC5mb3JtYXRbbW9kZV0pIHtcbiAgICAgICAgICAgIHZhciByZ2IgPSBpbnB1dC5mb3JtYXRbbW9kZV0uYXBwbHkobnVsbCwgYXV0b2RldGVjdCA/IGFyZ3MgOiBhcmdzLnNsaWNlKDAsLTEpKTtcbiAgICAgICAgICAgIG1lLl9yZ2IgPSBjbGlwX3JnYiQxKHJnYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gZm9ybWF0OiAnK2FyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIGFscGhhIGNoYW5uZWxcbiAgICAgICAgaWYgKG1lLl9yZ2IubGVuZ3RoID09PSAzKSB7IG1lLl9yZ2IucHVzaCgxKTsgfVxuICAgIH07XG5cbiAgICBDb2xvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgICAgIGlmICh0eXBlJDEodGhpcy5oZXgpID09ICdmdW5jdGlvbicpIHsgcmV0dXJuIHRoaXMuaGV4KCk7IH1cbiAgICAgICAgcmV0dXJuIChcIltcIiArICh0aGlzLl9yZ2Iuam9pbignLCcpKSArIFwiXVwiKTtcbiAgICB9O1xuXG4gICAgdmFyIENvbG9yXzEgPSBDb2xvcjtcblxuICAgIHZhciBjaHJvbWEgPSBmdW5jdGlvbiAoKSB7XG4gICAgXHR2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIFx0d2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIFx0cmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIGNocm9tYS5Db2xvciwgWyBudWxsIF0uY29uY2F0KCBhcmdzKSApKTtcbiAgICB9O1xuXG4gICAgY2hyb21hLkNvbG9yID0gQ29sb3JfMTtcbiAgICBjaHJvbWEudmVyc2lvbiA9ICcyLjAuMyc7XG5cbiAgICB2YXIgY2hyb21hXzEgPSBjaHJvbWE7XG5cbiAgICB2YXIgdW5wYWNrJDEgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4O1xuXG4gICAgdmFyIHJnYjJjbXlrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHZhciByZWYgPSB1bnBhY2skMShhcmdzLCAncmdiJyk7XG4gICAgICAgIHZhciByID0gcmVmWzBdO1xuICAgICAgICB2YXIgZyA9IHJlZlsxXTtcbiAgICAgICAgdmFyIGIgPSByZWZbMl07XG4gICAgICAgIHIgPSByIC8gMjU1O1xuICAgICAgICBnID0gZyAvIDI1NTtcbiAgICAgICAgYiA9IGIgLyAyNTU7XG4gICAgICAgIHZhciBrID0gMSAtIG1heChyLG1heChnLGIpKTtcbiAgICAgICAgdmFyIGYgPSBrIDwgMSA/IDEgLyAoMS1rKSA6IDA7XG4gICAgICAgIHZhciBjID0gKDEtci1rKSAqIGY7XG4gICAgICAgIHZhciBtID0gKDEtZy1rKSAqIGY7XG4gICAgICAgIHZhciB5ID0gKDEtYi1rKSAqIGY7XG4gICAgICAgIHJldHVybiBbYyxtLHksa107XG4gICAgfTtcblxuICAgIHZhciByZ2IyY215a18xID0gcmdiMmNteWs7XG5cbiAgICB2YXIgdW5wYWNrJDIgPSB1dGlscy51bnBhY2s7XG5cbiAgICB2YXIgY215azJyZ2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgYXJncyA9IHVucGFjayQyKGFyZ3MsICdjbXlrJyk7XG4gICAgICAgIHZhciBjID0gYXJnc1swXTtcbiAgICAgICAgdmFyIG0gPSBhcmdzWzFdO1xuICAgICAgICB2YXIgeSA9IGFyZ3NbMl07XG4gICAgICAgIHZhciBrID0gYXJnc1szXTtcbiAgICAgICAgdmFyIGFscGhhID0gYXJncy5sZW5ndGggPiA0ID8gYXJnc1s0XSA6IDE7XG4gICAgICAgIGlmIChrID09PSAxKSB7IHJldHVybiBbMCwwLDAsYWxwaGFdOyB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBjID49IDEgPyAwIDogMjU1ICogKDEtYykgKiAoMS1rKSwgLy8gclxuICAgICAgICAgICAgbSA+PSAxID8gMCA6IDI1NSAqICgxLW0pICogKDEtayksIC8vIGdcbiAgICAgICAgICAgIHkgPj0gMSA/IDAgOiAyNTUgKiAoMS15KSAqICgxLWspLCAvLyBiXG4gICAgICAgICAgICBhbHBoYVxuICAgICAgICBdO1xuICAgIH07XG5cbiAgICB2YXIgY215azJyZ2JfMSA9IGNteWsycmdiO1xuXG4gICAgdmFyIHVucGFjayQzID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciB0eXBlJDIgPSB1dGlscy50eXBlO1xuXG5cblxuICAgIENvbG9yXzEucHJvdG90eXBlLmNteWsgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJjbXlrXzEodGhpcy5fcmdiKTtcbiAgICB9O1xuXG4gICAgY2hyb21hXzEuY215ayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3JfMSwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ2NteWsnXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0LmZvcm1hdC5jbXlrID0gY215azJyZ2JfMTtcblxuICAgIGlucHV0LmF1dG9kZXRlY3QucHVzaCh7XG4gICAgICAgIHA6IDIsXG4gICAgICAgIHRlc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgICAgICBhcmdzID0gdW5wYWNrJDMoYXJncywgJ2NteWsnKTtcbiAgICAgICAgICAgIGlmICh0eXBlJDIoYXJncykgPT09ICdhcnJheScgJiYgYXJncy5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2NteWsnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdW5wYWNrJDQgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIGxhc3QkMiA9IHV0aWxzLmxhc3Q7XG4gICAgdmFyIHJuZCA9IGZ1bmN0aW9uIChhKSB7IHJldHVybiBNYXRoLnJvdW5kKGEqMTAwKS8xMDA7IH07XG5cbiAgICAvKlxuICAgICAqIHN1cHBvcnRlZCBhcmd1bWVudHM6XG4gICAgICogLSBoc2wyY3NzKGgscyxsKVxuICAgICAqIC0gaHNsMmNzcyhoLHMsbCxhKVxuICAgICAqIC0gaHNsMmNzcyhbaCxzLGxdLCBtb2RlKVxuICAgICAqIC0gaHNsMmNzcyhbaCxzLGwsYV0sIG1vZGUpXG4gICAgICogLSBoc2wyY3NzKHtoLHMsbCxhfSwgbW9kZSlcbiAgICAgKi9cbiAgICB2YXIgaHNsMmNzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICB2YXIgaHNsYSA9IHVucGFjayQ0KGFyZ3MsICdoc2xhJyk7XG4gICAgICAgIHZhciBtb2RlID0gbGFzdCQyKGFyZ3MpIHx8ICdsc2EnO1xuICAgICAgICBoc2xhWzBdID0gcm5kKGhzbGFbMF0gfHwgMCk7XG4gICAgICAgIGhzbGFbMV0gPSBybmQoaHNsYVsxXSoxMDApICsgJyUnO1xuICAgICAgICBoc2xhWzJdID0gcm5kKGhzbGFbMl0qMTAwKSArICclJztcbiAgICAgICAgaWYgKG1vZGUgPT09ICdoc2xhJyB8fCAoaHNsYS5sZW5ndGggPiAzICYmIGhzbGFbM108MSkpIHtcbiAgICAgICAgICAgIGhzbGFbM10gPSBoc2xhLmxlbmd0aCA+IDMgPyBoc2xhWzNdIDogMTtcbiAgICAgICAgICAgIG1vZGUgPSAnaHNsYSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoc2xhLmxlbmd0aCA9IDM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChtb2RlICsgXCIoXCIgKyAoaHNsYS5qb2luKCcsJykpICsgXCIpXCIpO1xuICAgIH07XG5cbiAgICB2YXIgaHNsMmNzc18xID0gaHNsMmNzcztcblxuICAgIHZhciB1bnBhY2skNSA9IHV0aWxzLnVucGFjaztcblxuICAgIC8qXG4gICAgICogc3VwcG9ydGVkIGFyZ3VtZW50czpcbiAgICAgKiAtIHJnYjJoc2wocixnLGIpXG4gICAgICogLSByZ2IyaHNsKHIsZyxiLGEpXG4gICAgICogLSByZ2IyaHNsKFtyLGcsYl0pXG4gICAgICogLSByZ2IyaHNsKFtyLGcsYixhXSlcbiAgICAgKiAtIHJnYjJoc2woe3IsZyxiLGF9KVxuICAgICAqL1xuICAgIHZhciByZ2IyaHNsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIGFyZ3MgPSB1bnBhY2skNShhcmdzLCAncmdiYScpO1xuICAgICAgICB2YXIgciA9IGFyZ3NbMF07XG4gICAgICAgIHZhciBnID0gYXJnc1sxXTtcbiAgICAgICAgdmFyIGIgPSBhcmdzWzJdO1xuXG4gICAgICAgIHIgLz0gMjU1O1xuICAgICAgICBnIC89IDI1NTtcbiAgICAgICAgYiAvPSAyNTU7XG5cbiAgICAgICAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgICAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG5cbiAgICAgICAgdmFyIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gICAgICAgIHZhciBzLCBoO1xuXG4gICAgICAgIGlmIChtYXggPT09IG1pbil7XG4gICAgICAgICAgICBzID0gMDtcbiAgICAgICAgICAgIGggPSBOdW1iZXIuTmFOO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcyA9IGwgPCAwLjUgPyAobWF4IC0gbWluKSAvIChtYXggKyBtaW4pIDogKG1heCAtIG1pbikgLyAoMiAtIG1heCAtIG1pbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAociA9PSBtYXgpIHsgaCA9IChnIC0gYikgLyAobWF4IC0gbWluKTsgfVxuICAgICAgICBlbHNlIGlmIChnID09IG1heCkgeyBoID0gMiArIChiIC0gcikgLyAobWF4IC0gbWluKTsgfVxuICAgICAgICBlbHNlIGlmIChiID09IG1heCkgeyBoID0gNCArIChyIC0gZykgLyAobWF4IC0gbWluKTsgfVxuXG4gICAgICAgIGggKj0gNjA7XG4gICAgICAgIGlmIChoIDwgMCkgeyBoICs9IDM2MDsgfVxuICAgICAgICBpZiAoYXJncy5sZW5ndGg+MyAmJiBhcmdzWzNdIT09dW5kZWZpbmVkKSB7IHJldHVybiBbaCxzLGwsYXJnc1szXV07IH1cbiAgICAgICAgcmV0dXJuIFtoLHMsbF07XG4gICAgfTtcblxuICAgIHZhciByZ2IyaHNsXzEgPSByZ2IyaHNsO1xuXG4gICAgdmFyIHVucGFjayQ2ID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciBsYXN0JDMgPSB1dGlscy5sYXN0O1xuXG5cbiAgICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xuXG4gICAgLypcbiAgICAgKiBzdXBwb3J0ZWQgYXJndW1lbnRzOlxuICAgICAqIC0gcmdiMmNzcyhyLGcsYilcbiAgICAgKiAtIHJnYjJjc3MocixnLGIsYSlcbiAgICAgKiAtIHJnYjJjc3MoW3IsZyxiXSwgbW9kZSlcbiAgICAgKiAtIHJnYjJjc3MoW3IsZyxiLGFdLCBtb2RlKVxuICAgICAqIC0gcmdiMmNzcyh7cixnLGIsYX0sIG1vZGUpXG4gICAgICovXG4gICAgdmFyIHJnYjJjc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIHJnYmEgPSB1bnBhY2skNihhcmdzLCAncmdiYScpO1xuICAgICAgICB2YXIgbW9kZSA9IGxhc3QkMyhhcmdzKSB8fCAncmdiJztcbiAgICAgICAgaWYgKG1vZGUuc3Vic3RyKDAsMykgPT0gJ2hzbCcpIHtcbiAgICAgICAgICAgIHJldHVybiBoc2wyY3NzXzEocmdiMmhzbF8xKHJnYmEpLCBtb2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZ2JhWzBdID0gcm91bmQocmdiYVswXSk7XG4gICAgICAgIHJnYmFbMV0gPSByb3VuZChyZ2JhWzFdKTtcbiAgICAgICAgcmdiYVsyXSA9IHJvdW5kKHJnYmFbMl0pO1xuICAgICAgICBpZiAobW9kZSA9PT0gJ3JnYmEnIHx8IChyZ2JhLmxlbmd0aCA+IDMgJiYgcmdiYVszXTwxKSkge1xuICAgICAgICAgICAgcmdiYVszXSA9IHJnYmEubGVuZ3RoID4gMyA/IHJnYmFbM10gOiAxO1xuICAgICAgICAgICAgbW9kZSA9ICdyZ2JhJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKG1vZGUgKyBcIihcIiArIChyZ2JhLnNsaWNlKDAsbW9kZT09PSdyZ2InPzM6NCkuam9pbignLCcpKSArIFwiKVwiKTtcbiAgICB9O1xuXG4gICAgdmFyIHJnYjJjc3NfMSA9IHJnYjJjc3M7XG5cbiAgICB2YXIgUkVfSEVYID0gL14jPyhbQS1GYS1mMC05XXs2fXxbQS1GYS1mMC05XXszfSkkLztcbiAgICB2YXIgUkVfSEVYQSA9IC9eIz8oW0EtRmEtZjAtOV17OH0pJC87XG5cbiAgICB2YXIgaGV4MnJnYiA9IGZ1bmN0aW9uIChoZXgpIHtcbiAgICAgICAgaWYgKGhleC5tYXRjaChSRV9IRVgpKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgb3B0aW9uYWwgbGVhZGluZyAjXG4gICAgICAgICAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gNCB8fCBoZXgubGVuZ3RoID09PSA3KSB7XG4gICAgICAgICAgICAgICAgaGV4ID0gaGV4LnN1YnN0cigxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGV4cGFuZCBzaG9ydC1ub3RhdGlvbiB0byBmdWxsIHNpeC1kaWdpdFxuICAgICAgICAgICAgaWYgKGhleC5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICBoZXggPSBoZXguc3BsaXQoJycpO1xuICAgICAgICAgICAgICAgIGhleCA9IGhleFswXStoZXhbMF0raGV4WzFdK2hleFsxXStoZXhbMl0raGV4WzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHUgPSBwYXJzZUludChoZXgsIDE2KTtcbiAgICAgICAgICAgIHZhciByID0gdSA+PiAxNjtcbiAgICAgICAgICAgIHZhciBnID0gdSA+PiA4ICYgMHhGRjtcbiAgICAgICAgICAgIHZhciBiID0gdSAmIDB4RkY7XG4gICAgICAgICAgICByZXR1cm4gW3IsZyxiLDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWF0Y2ggcmdiYSBoZXggZm9ybWF0LCBlZyAjRkYwMDAwNzdcbiAgICAgICAgaWYgKGhleC5tYXRjaChSRV9IRVhBKSkge1xuICAgICAgICAgICAgaWYgKGhleC5sZW5ndGggPT09IDkpIHtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgb3B0aW9uYWwgbGVhZGluZyAjXG4gICAgICAgICAgICAgICAgaGV4ID0gaGV4LnN1YnN0cigxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB1JDEgPSBwYXJzZUludChoZXgsIDE2KTtcbiAgICAgICAgICAgIHZhciByJDEgPSB1JDEgPj4gMjQgJiAweEZGO1xuICAgICAgICAgICAgdmFyIGckMSA9IHUkMSA+PiAxNiAmIDB4RkY7XG4gICAgICAgICAgICB2YXIgYiQxID0gdSQxID4+IDggJiAweEZGO1xuICAgICAgICAgICAgdmFyIGEgPSBNYXRoLnJvdW5kKCh1JDEgJiAweEZGKSAvIDB4RkYgKiAxMDApIC8gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIFtyJDEsZyQxLGIkMSxhXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdlIHVzZWQgdG8gY2hlY2sgZm9yIGNzcyBjb2xvcnMgaGVyZVxuICAgICAgICAvLyBpZiBfaW5wdXQuY3NzPyBhbmQgcmdiID0gX2lucHV0LmNzcyBoZXhcbiAgICAgICAgLy8gICAgIHJldHVybiByZ2JcblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKFwidW5rbm93biBoZXggY29sb3I6IFwiICsgaGV4KSk7XG4gICAgfTtcblxuICAgIHZhciBoZXgycmdiXzEgPSBoZXgycmdiO1xuXG4gICAgdmFyIHVucGFjayQ3ID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciByb3VuZCQxID0gTWF0aC5yb3VuZDtcblxuICAgIHZhciBoc2wycmdiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXNzaWduO1xuXG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG4gICAgICAgIGFyZ3MgPSB1bnBhY2skNyhhcmdzLCAnaHNsJyk7XG4gICAgICAgIHZhciBoID0gYXJnc1swXTtcbiAgICAgICAgdmFyIHMgPSBhcmdzWzFdO1xuICAgICAgICB2YXIgbCA9IGFyZ3NbMl07XG4gICAgICAgIHZhciByLGcsYjtcbiAgICAgICAgaWYgKHMgPT09IDApIHtcbiAgICAgICAgICAgIHIgPSBnID0gYiA9IGwqMjU1O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHQzID0gWzAsMCwwXTtcbiAgICAgICAgICAgIHZhciBjID0gWzAsMCwwXTtcbiAgICAgICAgICAgIHZhciB0MiA9IGwgPCAwLjUgPyBsICogKDErcykgOiBsK3MtbCpzO1xuICAgICAgICAgICAgdmFyIHQxID0gMiAqIGwgLSB0MjtcbiAgICAgICAgICAgIHZhciBoXyA9IGggLyAzNjA7XG4gICAgICAgICAgICB0M1swXSA9IGhfICsgMS8zO1xuICAgICAgICAgICAgdDNbMV0gPSBoXztcbiAgICAgICAgICAgIHQzWzJdID0gaF8gLSAxLzM7XG4gICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8MzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHQzW2ldIDwgMCkgeyB0M1tpXSArPSAxOyB9XG4gICAgICAgICAgICAgICAgaWYgKHQzW2ldID4gMSkgeyB0M1tpXSAtPSAxOyB9XG4gICAgICAgICAgICAgICAgaWYgKDYgKiB0M1tpXSA8IDEpXG4gICAgICAgICAgICAgICAgICAgIHsgY1tpXSA9IHQxICsgKHQyIC0gdDEpICogNiAqIHQzW2ldOyB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoMiAqIHQzW2ldIDwgMSlcbiAgICAgICAgICAgICAgICAgICAgeyBjW2ldID0gdDI7IH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgzICogdDNbaV0gPCAyKVxuICAgICAgICAgICAgICAgICAgICB7IGNbaV0gPSB0MSArICh0MiAtIHQxKSAqICgoMiAvIDMpIC0gdDNbaV0pICogNjsgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgeyBjW2ldID0gdDE7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChhc3NpZ24gPSBbcm91bmQkMShjWzBdKjI1NSkscm91bmQkMShjWzFdKjI1NSkscm91bmQkMShjWzJdKjI1NSldLCByID0gYXNzaWduWzBdLCBnID0gYXNzaWduWzFdLCBiID0gYXNzaWduWzJdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAzKSB7XG4gICAgICAgICAgICAvLyBrZWVwIGFscGhhIGNoYW5uZWxcbiAgICAgICAgICAgIHJldHVybiBbcixnLGIsYXJnc1szXV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtyLGcsYiwxXTtcbiAgICB9O1xuXG4gICAgdmFyIGhzbDJyZ2JfMSA9IGhzbDJyZ2I7XG5cbiAgICAvKipcbiAgICBcdFgxMSBjb2xvciBuYW1lc1xuXG4gICAgXHRodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWNvbG9yLyNzdmctY29sb3JcbiAgICAqL1xuXG4gICAgdmFyIHczY3gxMSA9IHtcbiAgICAgICAgYWxpY2VibHVlOiAnI2YwZjhmZicsXG4gICAgICAgIGFudGlxdWV3aGl0ZTogJyNmYWViZDcnLFxuICAgICAgICBhcXVhOiAnIzAwZmZmZicsXG4gICAgICAgIGFxdWFtYXJpbmU6ICcjN2ZmZmQ0JyxcbiAgICAgICAgYXp1cmU6ICcjZjBmZmZmJyxcbiAgICAgICAgYmVpZ2U6ICcjZjVmNWRjJyxcbiAgICAgICAgYmlzcXVlOiAnI2ZmZTRjNCcsXG4gICAgICAgIGJsYWNrOiAnIzAwMDAwMCcsXG4gICAgICAgIGJsYW5jaGVkYWxtb25kOiAnI2ZmZWJjZCcsXG4gICAgICAgIGJsdWU6ICcjMDAwMGZmJyxcbiAgICAgICAgYmx1ZXZpb2xldDogJyM4YTJiZTInLFxuICAgICAgICBicm93bjogJyNhNTJhMmEnLFxuICAgICAgICBidXJseXdvb2Q6ICcjZGViODg3JyxcbiAgICAgICAgY2FkZXRibHVlOiAnIzVmOWVhMCcsXG4gICAgICAgIGNoYXJ0cmV1c2U6ICcjN2ZmZjAwJyxcbiAgICAgICAgY2hvY29sYXRlOiAnI2QyNjkxZScsXG4gICAgICAgIGNvcmFsOiAnI2ZmN2Y1MCcsXG4gICAgICAgIGNvcm5mbG93ZXI6ICcjNjQ5NWVkJyxcbiAgICAgICAgY29ybmZsb3dlcmJsdWU6ICcjNjQ5NWVkJyxcbiAgICAgICAgY29ybnNpbGs6ICcjZmZmOGRjJyxcbiAgICAgICAgY3JpbXNvbjogJyNkYzE0M2MnLFxuICAgICAgICBjeWFuOiAnIzAwZmZmZicsXG4gICAgICAgIGRhcmtibHVlOiAnIzAwMDA4YicsXG4gICAgICAgIGRhcmtjeWFuOiAnIzAwOGI4YicsXG4gICAgICAgIGRhcmtnb2xkZW5yb2Q6ICcjYjg4NjBiJyxcbiAgICAgICAgZGFya2dyYXk6ICcjYTlhOWE5JyxcbiAgICAgICAgZGFya2dyZWVuOiAnIzAwNjQwMCcsXG4gICAgICAgIGRhcmtncmV5OiAnI2E5YTlhOScsXG4gICAgICAgIGRhcmtraGFraTogJyNiZGI3NmInLFxuICAgICAgICBkYXJrbWFnZW50YTogJyM4YjAwOGInLFxuICAgICAgICBkYXJrb2xpdmVncmVlbjogJyM1NTZiMmYnLFxuICAgICAgICBkYXJrb3JhbmdlOiAnI2ZmOGMwMCcsXG4gICAgICAgIGRhcmtvcmNoaWQ6ICcjOTkzMmNjJyxcbiAgICAgICAgZGFya3JlZDogJyM4YjAwMDAnLFxuICAgICAgICBkYXJrc2FsbW9uOiAnI2U5OTY3YScsXG4gICAgICAgIGRhcmtzZWFncmVlbjogJyM4ZmJjOGYnLFxuICAgICAgICBkYXJrc2xhdGVibHVlOiAnIzQ4M2Q4YicsXG4gICAgICAgIGRhcmtzbGF0ZWdyYXk6ICcjMmY0ZjRmJyxcbiAgICAgICAgZGFya3NsYXRlZ3JleTogJyMyZjRmNGYnLFxuICAgICAgICBkYXJrdHVycXVvaXNlOiAnIzAwY2VkMScsXG4gICAgICAgIGRhcmt2aW9sZXQ6ICcjOTQwMGQzJyxcbiAgICAgICAgZGVlcHBpbms6ICcjZmYxNDkzJyxcbiAgICAgICAgZGVlcHNreWJsdWU6ICcjMDBiZmZmJyxcbiAgICAgICAgZGltZ3JheTogJyM2OTY5NjknLFxuICAgICAgICBkaW1ncmV5OiAnIzY5Njk2OScsXG4gICAgICAgIGRvZGdlcmJsdWU6ICcjMWU5MGZmJyxcbiAgICAgICAgZmlyZWJyaWNrOiAnI2IyMjIyMicsXG4gICAgICAgIGZsb3JhbHdoaXRlOiAnI2ZmZmFmMCcsXG4gICAgICAgIGZvcmVzdGdyZWVuOiAnIzIyOGIyMicsXG4gICAgICAgIGZ1Y2hzaWE6ICcjZmYwMGZmJyxcbiAgICAgICAgZ2FpbnNib3JvOiAnI2RjZGNkYycsXG4gICAgICAgIGdob3N0d2hpdGU6ICcjZjhmOGZmJyxcbiAgICAgICAgZ29sZDogJyNmZmQ3MDAnLFxuICAgICAgICBnb2xkZW5yb2Q6ICcjZGFhNTIwJyxcbiAgICAgICAgZ3JheTogJyM4MDgwODAnLFxuICAgICAgICBncmVlbjogJyMwMDgwMDAnLFxuICAgICAgICBncmVlbnllbGxvdzogJyNhZGZmMmYnLFxuICAgICAgICBncmV5OiAnIzgwODA4MCcsXG4gICAgICAgIGhvbmV5ZGV3OiAnI2YwZmZmMCcsXG4gICAgICAgIGhvdHBpbms6ICcjZmY2OWI0JyxcbiAgICAgICAgaW5kaWFucmVkOiAnI2NkNWM1YycsXG4gICAgICAgIGluZGlnbzogJyM0YjAwODInLFxuICAgICAgICBpdm9yeTogJyNmZmZmZjAnLFxuICAgICAgICBraGFraTogJyNmMGU2OGMnLFxuICAgICAgICBsYXNlcmxlbW9uOiAnI2ZmZmY1NCcsXG4gICAgICAgIGxhdmVuZGVyOiAnI2U2ZTZmYScsXG4gICAgICAgIGxhdmVuZGVyYmx1c2g6ICcjZmZmMGY1JyxcbiAgICAgICAgbGF3bmdyZWVuOiAnIzdjZmMwMCcsXG4gICAgICAgIGxlbW9uY2hpZmZvbjogJyNmZmZhY2QnLFxuICAgICAgICBsaWdodGJsdWU6ICcjYWRkOGU2JyxcbiAgICAgICAgbGlnaHRjb3JhbDogJyNmMDgwODAnLFxuICAgICAgICBsaWdodGN5YW46ICcjZTBmZmZmJyxcbiAgICAgICAgbGlnaHRnb2xkZW5yb2Q6ICcjZmFmYWQyJyxcbiAgICAgICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6ICcjZmFmYWQyJyxcbiAgICAgICAgbGlnaHRncmF5OiAnI2QzZDNkMycsXG4gICAgICAgIGxpZ2h0Z3JlZW46ICcjOTBlZTkwJyxcbiAgICAgICAgbGlnaHRncmV5OiAnI2QzZDNkMycsXG4gICAgICAgIGxpZ2h0cGluazogJyNmZmI2YzEnLFxuICAgICAgICBsaWdodHNhbG1vbjogJyNmZmEwN2EnLFxuICAgICAgICBsaWdodHNlYWdyZWVuOiAnIzIwYjJhYScsXG4gICAgICAgIGxpZ2h0c2t5Ymx1ZTogJyM4N2NlZmEnLFxuICAgICAgICBsaWdodHNsYXRlZ3JheTogJyM3Nzg4OTknLFxuICAgICAgICBsaWdodHNsYXRlZ3JleTogJyM3Nzg4OTknLFxuICAgICAgICBsaWdodHN0ZWVsYmx1ZTogJyNiMGM0ZGUnLFxuICAgICAgICBsaWdodHllbGxvdzogJyNmZmZmZTAnLFxuICAgICAgICBsaW1lOiAnIzAwZmYwMCcsXG4gICAgICAgIGxpbWVncmVlbjogJyMzMmNkMzInLFxuICAgICAgICBsaW5lbjogJyNmYWYwZTYnLFxuICAgICAgICBtYWdlbnRhOiAnI2ZmMDBmZicsXG4gICAgICAgIG1hcm9vbjogJyM4MDAwMDAnLFxuICAgICAgICBtYXJvb24yOiAnIzdmMDAwMCcsXG4gICAgICAgIG1hcm9vbjM6ICcjYjAzMDYwJyxcbiAgICAgICAgbWVkaXVtYXF1YW1hcmluZTogJyM2NmNkYWEnLFxuICAgICAgICBtZWRpdW1ibHVlOiAnIzAwMDBjZCcsXG4gICAgICAgIG1lZGl1bW9yY2hpZDogJyNiYTU1ZDMnLFxuICAgICAgICBtZWRpdW1wdXJwbGU6ICcjOTM3MGRiJyxcbiAgICAgICAgbWVkaXVtc2VhZ3JlZW46ICcjM2NiMzcxJyxcbiAgICAgICAgbWVkaXVtc2xhdGVibHVlOiAnIzdiNjhlZScsXG4gICAgICAgIG1lZGl1bXNwcmluZ2dyZWVuOiAnIzAwZmE5YScsXG4gICAgICAgIG1lZGl1bXR1cnF1b2lzZTogJyM0OGQxY2MnLFxuICAgICAgICBtZWRpdW12aW9sZXRyZWQ6ICcjYzcxNTg1JyxcbiAgICAgICAgbWlkbmlnaHRibHVlOiAnIzE5MTk3MCcsXG4gICAgICAgIG1pbnRjcmVhbTogJyNmNWZmZmEnLFxuICAgICAgICBtaXN0eXJvc2U6ICcjZmZlNGUxJyxcbiAgICAgICAgbW9jY2FzaW46ICcjZmZlNGI1JyxcbiAgICAgICAgbmF2YWpvd2hpdGU6ICcjZmZkZWFkJyxcbiAgICAgICAgbmF2eTogJyMwMDAwODAnLFxuICAgICAgICBvbGRsYWNlOiAnI2ZkZjVlNicsXG4gICAgICAgIG9saXZlOiAnIzgwODAwMCcsXG4gICAgICAgIG9saXZlZHJhYjogJyM2YjhlMjMnLFxuICAgICAgICBvcmFuZ2U6ICcjZmZhNTAwJyxcbiAgICAgICAgb3JhbmdlcmVkOiAnI2ZmNDUwMCcsXG4gICAgICAgIG9yY2hpZDogJyNkYTcwZDYnLFxuICAgICAgICBwYWxlZ29sZGVucm9kOiAnI2VlZThhYScsXG4gICAgICAgIHBhbGVncmVlbjogJyM5OGZiOTgnLFxuICAgICAgICBwYWxldHVycXVvaXNlOiAnI2FmZWVlZScsXG4gICAgICAgIHBhbGV2aW9sZXRyZWQ6ICcjZGI3MDkzJyxcbiAgICAgICAgcGFwYXlhd2hpcDogJyNmZmVmZDUnLFxuICAgICAgICBwZWFjaHB1ZmY6ICcjZmZkYWI5JyxcbiAgICAgICAgcGVydTogJyNjZDg1M2YnLFxuICAgICAgICBwaW5rOiAnI2ZmYzBjYicsXG4gICAgICAgIHBsdW06ICcjZGRhMGRkJyxcbiAgICAgICAgcG93ZGVyYmx1ZTogJyNiMGUwZTYnLFxuICAgICAgICBwdXJwbGU6ICcjODAwMDgwJyxcbiAgICAgICAgcHVycGxlMjogJyM3ZjAwN2YnLFxuICAgICAgICBwdXJwbGUzOiAnI2EwMjBmMCcsXG4gICAgICAgIHJlYmVjY2FwdXJwbGU6ICcjNjYzMzk5JyxcbiAgICAgICAgcmVkOiAnI2ZmMDAwMCcsXG4gICAgICAgIHJvc3licm93bjogJyNiYzhmOGYnLFxuICAgICAgICByb3lhbGJsdWU6ICcjNDE2OWUxJyxcbiAgICAgICAgc2FkZGxlYnJvd246ICcjOGI0NTEzJyxcbiAgICAgICAgc2FsbW9uOiAnI2ZhODA3MicsXG4gICAgICAgIHNhbmR5YnJvd246ICcjZjRhNDYwJyxcbiAgICAgICAgc2VhZ3JlZW46ICcjMmU4YjU3JyxcbiAgICAgICAgc2Vhc2hlbGw6ICcjZmZmNWVlJyxcbiAgICAgICAgc2llbm5hOiAnI2EwNTIyZCcsXG4gICAgICAgIHNpbHZlcjogJyNjMGMwYzAnLFxuICAgICAgICBza3libHVlOiAnIzg3Y2VlYicsXG4gICAgICAgIHNsYXRlYmx1ZTogJyM2YTVhY2QnLFxuICAgICAgICBzbGF0ZWdyYXk6ICcjNzA4MDkwJyxcbiAgICAgICAgc2xhdGVncmV5OiAnIzcwODA5MCcsXG4gICAgICAgIHNub3c6ICcjZmZmYWZhJyxcbiAgICAgICAgc3ByaW5nZ3JlZW46ICcjMDBmZjdmJyxcbiAgICAgICAgc3RlZWxibHVlOiAnIzQ2ODJiNCcsXG4gICAgICAgIHRhbjogJyNkMmI0OGMnLFxuICAgICAgICB0ZWFsOiAnIzAwODA4MCcsXG4gICAgICAgIHRoaXN0bGU6ICcjZDhiZmQ4JyxcbiAgICAgICAgdG9tYXRvOiAnI2ZmNjM0NycsXG4gICAgICAgIHR1cnF1b2lzZTogJyM0MGUwZDAnLFxuICAgICAgICB2aW9sZXQ6ICcjZWU4MmVlJyxcbiAgICAgICAgd2hlYXQ6ICcjZjVkZWIzJyxcbiAgICAgICAgd2hpdGU6ICcjZmZmZmZmJyxcbiAgICAgICAgd2hpdGVzbW9rZTogJyNmNWY1ZjUnLFxuICAgICAgICB5ZWxsb3c6ICcjZmZmZjAwJyxcbiAgICAgICAgeWVsbG93Z3JlZW46ICcjOWFjZDMyJ1xuICAgIH07XG5cbiAgICB2YXIgdzNjeDExXzEgPSB3M2N4MTE7XG5cbiAgICB2YXIgUkVfUkdCID0gL15yZ2JcXChcXHMqKC0/XFxkKyksXFxzKigtP1xcZCspXFxzKixcXHMqKC0/XFxkKylcXHMqXFwpJC87XG4gICAgdmFyIFJFX1JHQkEgPSAvXnJnYmFcXChcXHMqKC0/XFxkKyksXFxzKigtP1xcZCspXFxzKixcXHMqKC0/XFxkKylcXHMqLFxccyooWzAxXXxbMDFdP1xcLlxcZCspXFwpJC87XG4gICAgdmFyIFJFX1JHQl9QQ1QgPSAvXnJnYlxcKFxccyooLT9cXGQrKD86XFwuXFxkKyk/KSUsXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pJVxccypcXCkkLztcbiAgICB2YXIgUkVfUkdCQV9QQ1QgPSAvXnJnYmFcXChcXHMqKC0/XFxkKyg/OlxcLlxcZCspPyklLFxccyooLT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooLT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWzAxXXxbMDFdP1xcLlxcZCspXFwpJC87XG4gICAgdmFyIFJFX0hTTCA9IC9eaHNsXFwoXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pLFxccyooLT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooLT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqXFwpJC87XG4gICAgdmFyIFJFX0hTTEEgPSAvXmhzbGFcXChcXHMqKC0/XFxkKyg/OlxcLlxcZCspPyksXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKigtP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKihbMDFdfFswMV0/XFwuXFxkKylcXCkkLztcblxuICAgIHZhciByb3VuZCQyID0gTWF0aC5yb3VuZDtcblxuICAgIHZhciBjc3MycmdiID0gZnVuY3Rpb24gKGNzcykge1xuICAgICAgICBjc3MgPSBjc3MudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgICAgIC8vIG5hbWVkIFgxMSBjb2xvcnNcbiAgICAgICAgaWYgKHczY3gxMV8xW2Nzc10pIHtcbiAgICAgICAgICAgIHJldHVybiBoZXgycmdiXzEodzNjeDExXzFbY3NzXSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG07XG5cbiAgICAgICAgLy8gcmdiKDI1MCwyMCwwKVxuICAgICAgICBpZiAoKG0gPSBjc3MubWF0Y2goUkVfUkdCKSkpIHtcbiAgICAgICAgICAgIHZhciByZ2IgPSBtLnNsaWNlKDEsNCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8MzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmdiW2ldID0gK3JnYltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJnYlszXSA9IDE7ICAvLyBkZWZhdWx0IGFscGhhXG4gICAgICAgICAgICByZXR1cm4gcmdiO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmdiYSgyNTAsMjAsMCwwLjQpXG4gICAgICAgIGlmICgobSA9IGNzcy5tYXRjaChSRV9SR0JBKSkpIHtcbiAgICAgICAgICAgIHZhciByZ2IkMSA9IG0uc2xpY2UoMSw1KTtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMT0wOyBpJDE8NDsgaSQxKyspIHtcbiAgICAgICAgICAgICAgICByZ2IkMVtpJDFdID0gK3JnYiQxW2kkMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmdiJDE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZ2IoMTAwJSwwJSwwJSlcbiAgICAgICAgaWYgKChtID0gY3NzLm1hdGNoKFJFX1JHQl9QQ1QpKSkge1xuICAgICAgICAgICAgdmFyIHJnYiQyID0gbS5zbGljZSgxLDQpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQyPTA7IGkkMjwzOyBpJDIrKykge1xuICAgICAgICAgICAgICAgIHJnYiQyW2kkMl0gPSByb3VuZCQyKHJnYiQyW2kkMl0gKiAyLjU1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJnYiQyWzNdID0gMTsgIC8vIGRlZmF1bHQgYWxwaGFcbiAgICAgICAgICAgIHJldHVybiByZ2IkMjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJnYmEoMTAwJSwwJSwwJSwwLjQpXG4gICAgICAgIGlmICgobSA9IGNzcy5tYXRjaChSRV9SR0JBX1BDVCkpKSB7XG4gICAgICAgICAgICB2YXIgcmdiJDMgPSBtLnNsaWNlKDEsNSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDM9MDsgaSQzPDM7IGkkMysrKSB7XG4gICAgICAgICAgICAgICAgcmdiJDNbaSQzXSA9IHJvdW5kJDIocmdiJDNbaSQzXSAqIDIuNTUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmdiJDNbM10gPSArcmdiJDNbM107XG4gICAgICAgICAgICByZXR1cm4gcmdiJDM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoc2woMCwxMDAlLDUwJSlcbiAgICAgICAgaWYgKChtID0gY3NzLm1hdGNoKFJFX0hTTCkpKSB7XG4gICAgICAgICAgICB2YXIgaHNsID0gbS5zbGljZSgxLDQpO1xuICAgICAgICAgICAgaHNsWzFdICo9IDAuMDE7XG4gICAgICAgICAgICBoc2xbMl0gKj0gMC4wMTtcbiAgICAgICAgICAgIHZhciByZ2IkNCA9IGhzbDJyZ2JfMShoc2wpO1xuICAgICAgICAgICAgcmdiJDRbM10gPSAxO1xuICAgICAgICAgICAgcmV0dXJuIHJnYiQ0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaHNsYSgwLDEwMCUsNTAlLDAuNSlcbiAgICAgICAgaWYgKChtID0gY3NzLm1hdGNoKFJFX0hTTEEpKSkge1xuICAgICAgICAgICAgdmFyIGhzbCQxID0gbS5zbGljZSgxLDQpO1xuICAgICAgICAgICAgaHNsJDFbMV0gKj0gMC4wMTtcbiAgICAgICAgICAgIGhzbCQxWzJdICo9IDAuMDE7XG4gICAgICAgICAgICB2YXIgcmdiJDUgPSBoc2wycmdiXzEoaHNsJDEpO1xuICAgICAgICAgICAgcmdiJDVbM10gPSArbVs0XTsgIC8vIGRlZmF1bHQgYWxwaGEgPSAxXG4gICAgICAgICAgICByZXR1cm4gcmdiJDU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY3NzMnJnYi50ZXN0ID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIFJFX1JHQi50ZXN0KHMpIHx8XG4gICAgICAgICAgICBSRV9SR0JBLnRlc3QocykgfHxcbiAgICAgICAgICAgIFJFX1JHQl9QQ1QudGVzdChzKSB8fFxuICAgICAgICAgICAgUkVfUkdCQV9QQ1QudGVzdChzKSB8fFxuICAgICAgICAgICAgUkVfSFNMLnRlc3QocykgfHxcbiAgICAgICAgICAgIFJFX0hTTEEudGVzdChzKTtcbiAgICB9O1xuXG4gICAgdmFyIGNzczJyZ2JfMSA9IGNzczJyZ2I7XG5cbiAgICB2YXIgdHlwZSQzID0gdXRpbHMudHlwZTtcblxuXG5cblxuICAgIENvbG9yXzEucHJvdG90eXBlLmNzcyA9IGZ1bmN0aW9uKG1vZGUpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJjc3NfMSh0aGlzLl9yZ2IsIG1vZGUpO1xuICAgIH07XG5cbiAgICBjaHJvbWFfMS5jc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgcmV0dXJuIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoIENvbG9yXzEsIFsgbnVsbCBdLmNvbmNhdCggYXJncywgWydjc3MnXSkgKSk7XG4gICAgfTtcblxuICAgIGlucHV0LmZvcm1hdC5jc3MgPSBjc3MycmdiXzE7XG5cbiAgICBpbnB1dC5hdXRvZGV0ZWN0LnB1c2goe1xuICAgICAgICBwOiA1LFxuICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoaCkge1xuICAgICAgICAgICAgdmFyIHJlc3QgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB3aGlsZSAoIGxlbi0tID4gMCApIHJlc3RbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgICAgICAgICAgIGlmICghcmVzdC5sZW5ndGggJiYgdHlwZSQzKGgpID09PSAnc3RyaW5nJyAmJiBjc3MycmdiXzEudGVzdChoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnY3NzJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHVucGFjayQ4ID0gdXRpbHMudW5wYWNrO1xuXG4gICAgaW5wdXQuZm9ybWF0LmdsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHZhciByZ2IgPSB1bnBhY2skOChhcmdzLCAncmdiYScpO1xuICAgICAgICByZ2JbMF0gKj0gMjU1O1xuICAgICAgICByZ2JbMV0gKj0gMjU1O1xuICAgICAgICByZ2JbMl0gKj0gMjU1O1xuICAgICAgICByZXR1cm4gcmdiO1xuICAgIH07XG5cbiAgICBjaHJvbWFfMS5nbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3JfMSwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ2dsJ10pICkpO1xuICAgIH07XG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5nbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmdiID0gdGhpcy5fcmdiO1xuICAgICAgICByZXR1cm4gW3JnYlswXS8yNTUsIHJnYlsxXS8yNTUsIHJnYlsyXS8yNTUsIHJnYlszXV07XG4gICAgfTtcblxuICAgIHZhciB1bnBhY2skOSA9IHV0aWxzLnVucGFjaztcblxuICAgIHZhciByZ2IyaGNnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHZhciByZWYgPSB1bnBhY2skOShhcmdzLCAncmdiJyk7XG4gICAgICAgIHZhciByID0gcmVmWzBdO1xuICAgICAgICB2YXIgZyA9IHJlZlsxXTtcbiAgICAgICAgdmFyIGIgPSByZWZbMl07XG4gICAgICAgIHZhciBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICAgICAgdmFyIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgICAgICB2YXIgZGVsdGEgPSBtYXggLSBtaW47XG4gICAgICAgIHZhciBjID0gZGVsdGEgKiAxMDAgLyAyNTU7XG4gICAgICAgIHZhciBfZyA9IG1pbiAvICgyNTUgLSBkZWx0YSkgKiAxMDA7XG4gICAgICAgIHZhciBoO1xuICAgICAgICBpZiAoZGVsdGEgPT09IDApIHtcbiAgICAgICAgICAgIGggPSBOdW1iZXIuTmFOO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHIgPT09IG1heCkgeyBoID0gKGcgLSBiKSAvIGRlbHRhOyB9XG4gICAgICAgICAgICBpZiAoZyA9PT0gbWF4KSB7IGggPSAyKyhiIC0gcikgLyBkZWx0YTsgfVxuICAgICAgICAgICAgaWYgKGIgPT09IG1heCkgeyBoID0gNCsociAtIGcpIC8gZGVsdGE7IH1cbiAgICAgICAgICAgIGggKj0gNjA7XG4gICAgICAgICAgICBpZiAoaCA8IDApIHsgaCArPSAzNjA7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2gsIGMsIF9nXTtcbiAgICB9O1xuXG4gICAgdmFyIHJnYjJoY2dfMSA9IHJnYjJoY2c7XG5cbiAgICB2YXIgdW5wYWNrJGEgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuICAgIC8qXG4gICAgICogdGhpcyBpcyBiYXNpY2FsbHkganVzdCBIU1Ygd2l0aCBzb21lIG1pbm9yIHR3ZWFrc1xuICAgICAqXG4gICAgICogaHVlLi4gWzAuLjM2MF1cbiAgICAgKiBjaHJvbWEgLi4gWzAuLjFdXG4gICAgICogZ3JheW5lc3MgLi4gWzAuLjFdXG4gICAgICovXG5cbiAgICB2YXIgaGNnMnJnYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFzc2lnbiwgYXNzaWduJDEsIGFzc2lnbiQyLCBhc3NpZ24kMywgYXNzaWduJDQsIGFzc2lnbiQ1O1xuXG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG4gICAgICAgIGFyZ3MgPSB1bnBhY2skYShhcmdzLCAnaGNnJyk7XG4gICAgICAgIHZhciBoID0gYXJnc1swXTtcbiAgICAgICAgdmFyIGMgPSBhcmdzWzFdO1xuICAgICAgICB2YXIgX2cgPSBhcmdzWzJdO1xuICAgICAgICB2YXIgcixnLGI7XG4gICAgICAgIF9nID0gX2cgKiAyNTU7XG4gICAgICAgIHZhciBfYyA9IGMgKiAyNTU7XG4gICAgICAgIGlmIChjID09PSAwKSB7XG4gICAgICAgICAgICByID0gZyA9IGIgPSBfZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChoID09PSAzNjApIHsgaCA9IDA7IH1cbiAgICAgICAgICAgIGlmIChoID4gMzYwKSB7IGggLT0gMzYwOyB9XG4gICAgICAgICAgICBpZiAoaCA8IDApIHsgaCArPSAzNjA7IH1cbiAgICAgICAgICAgIGggLz0gNjA7XG4gICAgICAgICAgICB2YXIgaSA9IGZsb29yKGgpO1xuICAgICAgICAgICAgdmFyIGYgPSBoIC0gaTtcbiAgICAgICAgICAgIHZhciBwID0gX2cgKiAoMSAtIGMpO1xuICAgICAgICAgICAgdmFyIHEgPSBwICsgX2MgKiAoMSAtIGYpO1xuICAgICAgICAgICAgdmFyIHQgPSBwICsgX2MgKiBmO1xuICAgICAgICAgICAgdmFyIHYgPSBwICsgX2M7XG4gICAgICAgICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IChhc3NpZ24gPSBbdiwgdCwgcF0sIHIgPSBhc3NpZ25bMF0sIGcgPSBhc3NpZ25bMV0sIGIgPSBhc3NpZ25bMl0pOyBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgMTogKGFzc2lnbiQxID0gW3EsIHYsIHBdLCByID0gYXNzaWduJDFbMF0sIGcgPSBhc3NpZ24kMVsxXSwgYiA9IGFzc2lnbiQxWzJdKTsgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlIDI6IChhc3NpZ24kMiA9IFtwLCB2LCB0XSwgciA9IGFzc2lnbiQyWzBdLCBnID0gYXNzaWduJDJbMV0sIGIgPSBhc3NpZ24kMlsyXSk7IGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAzOiAoYXNzaWduJDMgPSBbcCwgcSwgdl0sIHIgPSBhc3NpZ24kM1swXSwgZyA9IGFzc2lnbiQzWzFdLCBiID0gYXNzaWduJDNbMl0pOyBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgNDogKGFzc2lnbiQ0ID0gW3QsIHAsIHZdLCByID0gYXNzaWduJDRbMF0sIGcgPSBhc3NpZ24kNFsxXSwgYiA9IGFzc2lnbiQ0WzJdKTsgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IChhc3NpZ24kNSA9IFt2LCBwLCBxXSwgciA9IGFzc2lnbiQ1WzBdLCBnID0gYXNzaWduJDVbMV0sIGIgPSBhc3NpZ24kNVsyXSk7IGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtyLCBnLCBiLCBhcmdzLmxlbmd0aCA+IDMgPyBhcmdzWzNdIDogMV07XG4gICAgfTtcblxuICAgIHZhciBoY2cycmdiXzEgPSBoY2cycmdiO1xuXG4gICAgdmFyIHVucGFjayRiID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciB0eXBlJDQgPSB1dGlscy50eXBlO1xuXG5cblxuXG5cblxuICAgIENvbG9yXzEucHJvdG90eXBlLmhjZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmdiMmhjZ18xKHRoaXMuX3JnYik7XG4gICAgfTtcblxuICAgIGNocm9tYV8xLmhjZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3JfMSwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ2hjZyddKSApKTtcbiAgICB9O1xuXG4gICAgaW5wdXQuZm9ybWF0LmhjZyA9IGhjZzJyZ2JfMTtcblxuICAgIGlucHV0LmF1dG9kZXRlY3QucHVzaCh7XG4gICAgICAgIHA6IDEsXG4gICAgICAgIHRlc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgICAgICBhcmdzID0gdW5wYWNrJGIoYXJncywgJ2hjZycpO1xuICAgICAgICAgICAgaWYgKHR5cGUkNChhcmdzKSA9PT0gJ2FycmF5JyAmJiBhcmdzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIHJldHVybiAnaGNnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHVucGFjayRjID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciBsYXN0JDQgPSB1dGlscy5sYXN0O1xuICAgIHZhciByb3VuZCQzID0gTWF0aC5yb3VuZDtcblxuICAgIHZhciByZ2IyaGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHZhciByZWYgPSB1bnBhY2skYyhhcmdzLCAncmdiYScpO1xuICAgICAgICB2YXIgciA9IHJlZlswXTtcbiAgICAgICAgdmFyIGcgPSByZWZbMV07XG4gICAgICAgIHZhciBiID0gcmVmWzJdO1xuICAgICAgICB2YXIgYSA9IHJlZlszXTtcbiAgICAgICAgdmFyIG1vZGUgPSBsYXN0JDQoYXJncykgfHwgJ2F1dG8nO1xuICAgICAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7IGEgPSAxOyB9XG4gICAgICAgIGlmIChtb2RlID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgIG1vZGUgPSBhIDwgMSA/ICdyZ2JhJyA6ICdyZ2InO1xuICAgICAgICB9XG4gICAgICAgIHIgPSByb3VuZCQzKHIpO1xuICAgICAgICBnID0gcm91bmQkMyhnKTtcbiAgICAgICAgYiA9IHJvdW5kJDMoYik7XG4gICAgICAgIHZhciB1ID0gciA8PCAxNiB8IGcgPDwgOCB8IGI7XG4gICAgICAgIHZhciBzdHIgPSBcIjAwMDAwMFwiICsgdS50b1N0cmluZygxNik7IC8vIy50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBzdHIgPSBzdHIuc3Vic3RyKHN0ci5sZW5ndGggLSA2KTtcbiAgICAgICAgdmFyIGh4YSA9ICcwJyArIHJvdW5kJDMoYSAqIDI1NSkudG9TdHJpbmcoMTYpO1xuICAgICAgICBoeGEgPSBoeGEuc3Vic3RyKGh4YS5sZW5ndGggLSAyKTtcbiAgICAgICAgc3dpdGNoIChtb2RlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3JnYmEnOiByZXR1cm4gKFwiI1wiICsgc3RyICsgaHhhKTtcbiAgICAgICAgICAgIGNhc2UgJ2FyZ2InOiByZXR1cm4gKFwiI1wiICsgaHhhICsgc3RyKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiAoXCIjXCIgKyBzdHIpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZ2IyaGV4XzEgPSByZ2IyaGV4O1xuXG4gICAgdmFyIHR5cGUkNSA9IHV0aWxzLnR5cGU7XG5cblxuXG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5oZXggPSBmdW5jdGlvbihtb2RlKSB7XG4gICAgICAgIHJldHVybiByZ2IyaGV4XzEodGhpcy5fcmdiLCBtb2RlKTtcbiAgICB9O1xuXG4gICAgY2hyb21hXzEuaGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvcl8xLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsnaGV4J10pICkpO1xuICAgIH07XG5cbiAgICBpbnB1dC5mb3JtYXQuaGV4ID0gaGV4MnJnYl8xO1xuICAgIGlucHV0LmF1dG9kZXRlY3QucHVzaCh7XG4gICAgICAgIHA6IDQsXG4gICAgICAgIHRlc3Q6IGZ1bmN0aW9uIChoKSB7XG4gICAgICAgICAgICB2YXIgcmVzdCA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgcmVzdFsgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgICAgICAgICAgaWYgKCFyZXN0Lmxlbmd0aCAmJiB0eXBlJDUoaCkgPT09ICdzdHJpbmcnICYmIFszLDQsNiw3LDgsOV0uaW5jbHVkZXMoaC5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdoZXgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdW5wYWNrJGQgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIFRXT1BJID0gdXRpbHMuVFdPUEk7XG4gICAgdmFyIG1pbiA9IE1hdGgubWluO1xuICAgIHZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuICAgIHZhciBhY29zID0gTWF0aC5hY29zO1xuXG4gICAgdmFyIHJnYjJoc2kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgLypcbiAgICAgICAgYm9ycm93ZWQgZnJvbSBoZXJlOlxuICAgICAgICBodHRwOi8vaHVtbWVyLnN0YW5mb3JkLmVkdS9tdXNlaW5mby9kb2MvZXhhbXBsZXMvaHVtZHJ1bS9rZXlzY2FwZTIvcmdiMmhzaS5jcHBcbiAgICAgICAgKi9cbiAgICAgICAgdmFyIHJlZiA9IHVucGFjayRkKGFyZ3MsICdyZ2InKTtcbiAgICAgICAgdmFyIHIgPSByZWZbMF07XG4gICAgICAgIHZhciBnID0gcmVmWzFdO1xuICAgICAgICB2YXIgYiA9IHJlZlsyXTtcbiAgICAgICAgciAvPSAyNTU7XG4gICAgICAgIGcgLz0gMjU1O1xuICAgICAgICBiIC89IDI1NTtcbiAgICAgICAgdmFyIGg7XG4gICAgICAgIHZhciBtaW5fID0gbWluKHIsZyxiKTtcbiAgICAgICAgdmFyIGkgPSAocitnK2IpIC8gMztcbiAgICAgICAgdmFyIHMgPSBpID4gMCA/IDEgLSBtaW5fL2kgOiAwO1xuICAgICAgICBpZiAocyA9PT0gMCkge1xuICAgICAgICAgICAgaCA9IE5hTjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGggPSAoKHItZykrKHItYikpIC8gMjtcbiAgICAgICAgICAgIGggLz0gc3FydCgoci1nKSooci1nKSArIChyLWIpKihnLWIpKTtcbiAgICAgICAgICAgIGggPSBhY29zKGgpO1xuICAgICAgICAgICAgaWYgKGIgPiBnKSB7XG4gICAgICAgICAgICAgICAgaCA9IFRXT1BJIC0gaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGggLz0gVFdPUEk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtoKjM2MCxzLGldO1xuICAgIH07XG5cbiAgICB2YXIgcmdiMmhzaV8xID0gcmdiMmhzaTtcblxuICAgIHZhciB1bnBhY2skZSA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgbGltaXQkMSA9IHV0aWxzLmxpbWl0O1xuICAgIHZhciBUV09QSSQxID0gdXRpbHMuVFdPUEk7XG4gICAgdmFyIFBJVEhJUkQgPSB1dGlscy5QSVRISVJEO1xuICAgIHZhciBjb3MgPSBNYXRoLmNvcztcblxuICAgIC8qXG4gICAgICogaHVlIFswLi4zNjBdXG4gICAgICogc2F0dXJhdGlvbiBbMC4uMV1cbiAgICAgKiBpbnRlbnNpdHkgWzAuLjFdXG4gICAgICovXG4gICAgdmFyIGhzaTJyZ2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgLypcbiAgICAgICAgYm9ycm93ZWQgZnJvbSBoZXJlOlxuICAgICAgICBodHRwOi8vaHVtbWVyLnN0YW5mb3JkLmVkdS9tdXNlaW5mby9kb2MvZXhhbXBsZXMvaHVtZHJ1bS9rZXlzY2FwZTIvaHNpMnJnYi5jcHBcbiAgICAgICAgKi9cbiAgICAgICAgYXJncyA9IHVucGFjayRlKGFyZ3MsICdoc2knKTtcbiAgICAgICAgdmFyIGggPSBhcmdzWzBdO1xuICAgICAgICB2YXIgcyA9IGFyZ3NbMV07XG4gICAgICAgIHZhciBpID0gYXJnc1syXTtcbiAgICAgICAgdmFyIHIsZyxiO1xuXG4gICAgICAgIGlmIChpc05hTihoKSkgeyBoID0gMDsgfVxuICAgICAgICBpZiAoaXNOYU4ocykpIHsgcyA9IDA7IH1cbiAgICAgICAgLy8gbm9ybWFsaXplIGh1ZVxuICAgICAgICBpZiAoaCA+IDM2MCkgeyBoIC09IDM2MDsgfVxuICAgICAgICBpZiAoaCA8IDApIHsgaCArPSAzNjA7IH1cbiAgICAgICAgaCAvPSAzNjA7XG4gICAgICAgIGlmIChoIDwgMS8zKSB7XG4gICAgICAgICAgICBiID0gKDEtcykvMztcbiAgICAgICAgICAgIHIgPSAoMStzKmNvcyhUV09QSSQxKmgpL2NvcyhQSVRISVJELVRXT1BJJDEqaCkpLzM7XG4gICAgICAgICAgICBnID0gMSAtIChiK3IpO1xuICAgICAgICB9IGVsc2UgaWYgKGggPCAyLzMpIHtcbiAgICAgICAgICAgIGggLT0gMS8zO1xuICAgICAgICAgICAgciA9ICgxLXMpLzM7XG4gICAgICAgICAgICBnID0gKDErcypjb3MoVFdPUEkkMSpoKS9jb3MoUElUSElSRC1UV09QSSQxKmgpKS8zO1xuICAgICAgICAgICAgYiA9IDEgLSAocitnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGggLT0gMi8zO1xuICAgICAgICAgICAgZyA9ICgxLXMpLzM7XG4gICAgICAgICAgICBiID0gKDErcypjb3MoVFdPUEkkMSpoKS9jb3MoUElUSElSRC1UV09QSSQxKmgpKS8zO1xuICAgICAgICAgICAgciA9IDEgLSAoZytiKTtcbiAgICAgICAgfVxuICAgICAgICByID0gbGltaXQkMShpKnIqMyk7XG4gICAgICAgIGcgPSBsaW1pdCQxKGkqZyozKTtcbiAgICAgICAgYiA9IGxpbWl0JDEoaSpiKjMpO1xuICAgICAgICByZXR1cm4gW3IqMjU1LCBnKjI1NSwgYioyNTUsIGFyZ3MubGVuZ3RoID4gMyA/IGFyZ3NbM10gOiAxXTtcbiAgICB9O1xuXG4gICAgdmFyIGhzaTJyZ2JfMSA9IGhzaTJyZ2I7XG5cbiAgICB2YXIgdW5wYWNrJGYgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHR5cGUkNiA9IHV0aWxzLnR5cGU7XG5cblxuXG5cblxuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUuaHNpID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZ2IyaHNpXzEodGhpcy5fcmdiKTtcbiAgICB9O1xuXG4gICAgY2hyb21hXzEuaHNpID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvcl8xLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsnaHNpJ10pICkpO1xuICAgIH07XG5cbiAgICBpbnB1dC5mb3JtYXQuaHNpID0gaHNpMnJnYl8xO1xuXG4gICAgaW5wdXQuYXV0b2RldGVjdC5wdXNoKHtcbiAgICAgICAgcDogMixcbiAgICAgICAgdGVzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgICAgIGFyZ3MgPSB1bnBhY2skZihhcmdzLCAnaHNpJyk7XG4gICAgICAgICAgICBpZiAodHlwZSQ2KGFyZ3MpID09PSAnYXJyYXknICYmIGFyZ3MubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdoc2knO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdW5wYWNrJGcgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHR5cGUkNyA9IHV0aWxzLnR5cGU7XG5cblxuXG5cblxuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUuaHNsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZ2IyaHNsXzEodGhpcy5fcmdiKTtcbiAgICB9O1xuXG4gICAgY2hyb21hXzEuaHNsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvcl8xLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsnaHNsJ10pICkpO1xuICAgIH07XG5cbiAgICBpbnB1dC5mb3JtYXQuaHNsID0gaHNsMnJnYl8xO1xuXG4gICAgaW5wdXQuYXV0b2RldGVjdC5wdXNoKHtcbiAgICAgICAgcDogMixcbiAgICAgICAgdGVzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgICAgIGFyZ3MgPSB1bnBhY2skZyhhcmdzLCAnaHNsJyk7XG4gICAgICAgICAgICBpZiAodHlwZSQ3KGFyZ3MpID09PSAnYXJyYXknICYmIGFyZ3MubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdoc2wnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdW5wYWNrJGggPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIG1pbiQxID0gTWF0aC5taW47XG4gICAgdmFyIG1heCQxID0gTWF0aC5tYXg7XG5cbiAgICAvKlxuICAgICAqIHN1cHBvcnRlZCBhcmd1bWVudHM6XG4gICAgICogLSByZ2IyaHN2KHIsZyxiKVxuICAgICAqIC0gcmdiMmhzdihbcixnLGJdKVxuICAgICAqIC0gcmdiMmhzdih7cixnLGJ9KVxuICAgICAqL1xuICAgIHZhciByZ2IyaHNsJDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgYXJncyA9IHVucGFjayRoKGFyZ3MsICdyZ2InKTtcbiAgICAgICAgdmFyIHIgPSBhcmdzWzBdO1xuICAgICAgICB2YXIgZyA9IGFyZ3NbMV07XG4gICAgICAgIHZhciBiID0gYXJnc1syXTtcbiAgICAgICAgdmFyIG1pbl8gPSBtaW4kMShyLCBnLCBiKTtcbiAgICAgICAgdmFyIG1heF8gPSBtYXgkMShyLCBnLCBiKTtcbiAgICAgICAgdmFyIGRlbHRhID0gbWF4XyAtIG1pbl87XG4gICAgICAgIHZhciBoLHMsdjtcbiAgICAgICAgdiA9IG1heF8gLyAyNTUuMDtcbiAgICAgICAgaWYgKG1heF8gPT09IDApIHtcbiAgICAgICAgICAgIGggPSBOdW1iZXIuTmFOO1xuICAgICAgICAgICAgcyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzID0gZGVsdGEgLyBtYXhfO1xuICAgICAgICAgICAgaWYgKHIgPT09IG1heF8pIHsgaCA9IChnIC0gYikgLyBkZWx0YTsgfVxuICAgICAgICAgICAgaWYgKGcgPT09IG1heF8pIHsgaCA9IDIrKGIgLSByKSAvIGRlbHRhOyB9XG4gICAgICAgICAgICBpZiAoYiA9PT0gbWF4XykgeyBoID0gNCsociAtIGcpIC8gZGVsdGE7IH1cbiAgICAgICAgICAgIGggKj0gNjA7XG4gICAgICAgICAgICBpZiAoaCA8IDApIHsgaCArPSAzNjA7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2gsIHMsIHZdXG4gICAgfTtcblxuICAgIHZhciByZ2IyaHN2ID0gcmdiMmhzbCQxO1xuXG4gICAgdmFyIHVucGFjayRpID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciBmbG9vciQxID0gTWF0aC5mbG9vcjtcblxuICAgIHZhciBoc3YycmdiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXNzaWduLCBhc3NpZ24kMSwgYXNzaWduJDIsIGFzc2lnbiQzLCBhc3NpZ24kNCwgYXNzaWduJDU7XG5cbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcbiAgICAgICAgYXJncyA9IHVucGFjayRpKGFyZ3MsICdoc3YnKTtcbiAgICAgICAgdmFyIGggPSBhcmdzWzBdO1xuICAgICAgICB2YXIgcyA9IGFyZ3NbMV07XG4gICAgICAgIHZhciB2ID0gYXJnc1syXTtcbiAgICAgICAgdmFyIHIsZyxiO1xuICAgICAgICB2ICo9IDI1NTtcbiAgICAgICAgaWYgKHMgPT09IDApIHtcbiAgICAgICAgICAgIHIgPSBnID0gYiA9IHY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaCA9PT0gMzYwKSB7IGggPSAwOyB9XG4gICAgICAgICAgICBpZiAoaCA+IDM2MCkgeyBoIC09IDM2MDsgfVxuICAgICAgICAgICAgaWYgKGggPCAwKSB7IGggKz0gMzYwOyB9XG4gICAgICAgICAgICBoIC89IDYwO1xuXG4gICAgICAgICAgICB2YXIgaSA9IGZsb29yJDEoaCk7XG4gICAgICAgICAgICB2YXIgZiA9IGggLSBpO1xuICAgICAgICAgICAgdmFyIHAgPSB2ICogKDEgLSBzKTtcbiAgICAgICAgICAgIHZhciBxID0gdiAqICgxIC0gcyAqIGYpO1xuICAgICAgICAgICAgdmFyIHQgPSB2ICogKDEgLSBzICogKDEgLSBmKSk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogKGFzc2lnbiA9IFt2LCB0LCBwXSwgciA9IGFzc2lnblswXSwgZyA9IGFzc2lnblsxXSwgYiA9IGFzc2lnblsyXSk7IGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAxOiAoYXNzaWduJDEgPSBbcSwgdiwgcF0sIHIgPSBhc3NpZ24kMVswXSwgZyA9IGFzc2lnbiQxWzFdLCBiID0gYXNzaWduJDFbMl0pOyBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgMjogKGFzc2lnbiQyID0gW3AsIHYsIHRdLCByID0gYXNzaWduJDJbMF0sIGcgPSBhc3NpZ24kMlsxXSwgYiA9IGFzc2lnbiQyWzJdKTsgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlIDM6IChhc3NpZ24kMyA9IFtwLCBxLCB2XSwgciA9IGFzc2lnbiQzWzBdLCBnID0gYXNzaWduJDNbMV0sIGIgPSBhc3NpZ24kM1syXSk7IGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSA0OiAoYXNzaWduJDQgPSBbdCwgcCwgdl0sIHIgPSBhc3NpZ24kNFswXSwgZyA9IGFzc2lnbiQ0WzFdLCBiID0gYXNzaWduJDRbMl0pOyBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgNTogKGFzc2lnbiQ1ID0gW3YsIHAsIHFdLCByID0gYXNzaWduJDVbMF0sIGcgPSBhc3NpZ24kNVsxXSwgYiA9IGFzc2lnbiQ1WzJdKTsgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3IsZyxiLGFyZ3MubGVuZ3RoID4gMz9hcmdzWzNdOjFdO1xuICAgIH07XG5cbiAgICB2YXIgaHN2MnJnYl8xID0gaHN2MnJnYjtcblxuICAgIHZhciB1bnBhY2skaiA9IHV0aWxzLnVucGFjaztcbiAgICB2YXIgdHlwZSQ4ID0gdXRpbHMudHlwZTtcblxuXG5cblxuXG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5oc3YgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJnYjJoc3YodGhpcy5fcmdiKTtcbiAgICB9O1xuXG4gICAgY2hyb21hXzEuaHN2ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvcl8xLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsnaHN2J10pICkpO1xuICAgIH07XG5cbiAgICBpbnB1dC5mb3JtYXQuaHN2ID0gaHN2MnJnYl8xO1xuXG4gICAgaW5wdXQuYXV0b2RldGVjdC5wdXNoKHtcbiAgICAgICAgcDogMixcbiAgICAgICAgdGVzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgICAgIGFyZ3MgPSB1bnBhY2skaihhcmdzLCAnaHN2Jyk7XG4gICAgICAgICAgICBpZiAodHlwZSQ4KGFyZ3MpID09PSAnYXJyYXknICYmIGFyZ3MubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdoc3YnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgbGFiQ29uc3RhbnRzID0ge1xuICAgICAgICAvLyBDb3JyZXNwb25kcyByb3VnaGx5IHRvIFJHQiBicmlnaHRlci9kYXJrZXJcbiAgICAgICAgS246IDE4LFxuXG4gICAgICAgIC8vIEQ2NSBzdGFuZGFyZCByZWZlcmVudFxuICAgICAgICBYbjogMC45NTA0NzAsXG4gICAgICAgIFluOiAxLFxuICAgICAgICBabjogMS4wODg4MzAsXG5cbiAgICAgICAgdDA6IDAuMTM3OTMxMDM0LCAgLy8gNCAvIDI5XG4gICAgICAgIHQxOiAwLjIwNjg5NjU1MiwgIC8vIDYgLyAyOVxuICAgICAgICB0MjogMC4xMjg0MTg1NSwgICAvLyAzICogdDEgKiB0MVxuICAgICAgICB0MzogMC4wMDg4NTY0NTIsICAvLyB0MSAqIHQxICogdDFcbiAgICB9O1xuXG4gICAgdmFyIHVucGFjayRrID0gdXRpbHMudW5wYWNrO1xuICAgIHZhciBwb3cgPSBNYXRoLnBvdztcblxuICAgIHZhciByZ2IybGFiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHZhciByZWYgPSB1bnBhY2skayhhcmdzLCAncmdiJyk7XG4gICAgICAgIHZhciByID0gcmVmWzBdO1xuICAgICAgICB2YXIgZyA9IHJlZlsxXTtcbiAgICAgICAgdmFyIGIgPSByZWZbMl07XG4gICAgICAgIHZhciByZWYkMSA9IHJnYjJ4eXoocixnLGIpO1xuICAgICAgICB2YXIgeCA9IHJlZiQxWzBdO1xuICAgICAgICB2YXIgeSA9IHJlZiQxWzFdO1xuICAgICAgICB2YXIgeiA9IHJlZiQxWzJdO1xuICAgICAgICB2YXIgbCA9IDExNiAqIHkgLSAxNjtcbiAgICAgICAgcmV0dXJuIFtsIDwgMCA/IDAgOiBsLCA1MDAgKiAoeCAtIHkpLCAyMDAgKiAoeSAtIHopXTtcbiAgICB9O1xuXG4gICAgdmFyIHJnYl94eXogPSBmdW5jdGlvbiAocikge1xuICAgICAgICBpZiAoKHIgLz0gMjU1KSA8PSAwLjA0MDQ1KSB7IHJldHVybiByIC8gMTIuOTI7IH1cbiAgICAgICAgcmV0dXJuIHBvdygociArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgIH07XG5cbiAgICB2YXIgeHl6X2xhYiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIGlmICh0ID4gbGFiQ29uc3RhbnRzLnQzKSB7IHJldHVybiBwb3codCwgMSAvIDMpOyB9XG4gICAgICAgIHJldHVybiB0IC8gbGFiQ29uc3RhbnRzLnQyICsgbGFiQ29uc3RhbnRzLnQwO1xuICAgIH07XG5cbiAgICB2YXIgcmdiMnh5eiA9IGZ1bmN0aW9uIChyLGcsYikge1xuICAgICAgICByID0gcmdiX3h5eihyKTtcbiAgICAgICAgZyA9IHJnYl94eXooZyk7XG4gICAgICAgIGIgPSByZ2JfeHl6KGIpO1xuICAgICAgICB2YXIgeCA9IHh5el9sYWIoKDAuNDEyNDU2NCAqIHIgKyAwLjM1NzU3NjEgKiBnICsgMC4xODA0Mzc1ICogYikgLyBsYWJDb25zdGFudHMuWG4pO1xuICAgICAgICB2YXIgeSA9IHh5el9sYWIoKDAuMjEyNjcyOSAqIHIgKyAwLjcxNTE1MjIgKiBnICsgMC4wNzIxNzUwICogYikgLyBsYWJDb25zdGFudHMuWW4pO1xuICAgICAgICB2YXIgeiA9IHh5el9sYWIoKDAuMDE5MzMzOSAqIHIgKyAwLjExOTE5MjAgKiBnICsgMC45NTAzMDQxICogYikgLyBsYWJDb25zdGFudHMuWm4pO1xuICAgICAgICByZXR1cm4gW3gseSx6XTtcbiAgICB9O1xuXG4gICAgdmFyIHJnYjJsYWJfMSA9IHJnYjJsYWI7XG5cbiAgICB2YXIgdW5wYWNrJGwgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHBvdyQxID0gTWF0aC5wb3c7XG5cbiAgICAvKlxuICAgICAqIEwqIFswLi4xMDBdXG4gICAgICogYSBbLTEwMC4uMTAwXVxuICAgICAqIGIgWy0xMDAuLjEwMF1cbiAgICAgKi9cbiAgICB2YXIgbGFiMnJnYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICBhcmdzID0gdW5wYWNrJGwoYXJncywgJ2xhYicpO1xuICAgICAgICB2YXIgbCA9IGFyZ3NbMF07XG4gICAgICAgIHZhciBhID0gYXJnc1sxXTtcbiAgICAgICAgdmFyIGIgPSBhcmdzWzJdO1xuICAgICAgICB2YXIgeCx5LHosIHIsZyxiXztcblxuICAgICAgICB5ID0gKGwgKyAxNikgLyAxMTY7XG4gICAgICAgIHggPSBpc05hTihhKSA/IHkgOiB5ICsgYSAvIDUwMDtcbiAgICAgICAgeiA9IGlzTmFOKGIpID8geSA6IHkgLSBiIC8gMjAwO1xuXG4gICAgICAgIHkgPSBsYWJDb25zdGFudHMuWW4gKiBsYWJfeHl6KHkpO1xuICAgICAgICB4ID0gbGFiQ29uc3RhbnRzLlhuICogbGFiX3h5eih4KTtcbiAgICAgICAgeiA9IGxhYkNvbnN0YW50cy5abiAqIGxhYl94eXooeik7XG5cbiAgICAgICAgciA9IHh5el9yZ2IoMy4yNDA0NTQyICogeCAtIDEuNTM3MTM4NSAqIHkgLSAwLjQ5ODUzMTQgKiB6KTsgIC8vIEQ2NSAtPiBzUkdCXG4gICAgICAgIGcgPSB4eXpfcmdiKC0wLjk2OTI2NjAgKiB4ICsgMS44NzYwMTA4ICogeSArIDAuMDQxNTU2MCAqIHopO1xuICAgICAgICBiXyA9IHh5el9yZ2IoMC4wNTU2NDM0ICogeCAtIDAuMjA0MDI1OSAqIHkgKyAxLjA1NzIyNTIgKiB6KTtcblxuICAgICAgICByZXR1cm4gW3IsZyxiXyxhcmdzLmxlbmd0aCA+IDMgPyBhcmdzWzNdIDogMV07XG4gICAgfTtcblxuICAgIHZhciB4eXpfcmdiID0gZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgcmV0dXJuIDI1NSAqIChyIDw9IDAuMDAzMDQgPyAxMi45MiAqIHIgOiAxLjA1NSAqIHBvdyQxKHIsIDEgLyAyLjQpIC0gMC4wNTUpXG4gICAgfTtcblxuICAgIHZhciBsYWJfeHl6ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQgPiBsYWJDb25zdGFudHMudDEgPyB0ICogdCAqIHQgOiBsYWJDb25zdGFudHMudDIgKiAodCAtIGxhYkNvbnN0YW50cy50MClcbiAgICB9O1xuXG4gICAgdmFyIGxhYjJyZ2JfMSA9IGxhYjJyZ2I7XG5cbiAgICB2YXIgdW5wYWNrJG0gPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHR5cGUkOSA9IHV0aWxzLnR5cGU7XG5cblxuXG5cblxuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUubGFiID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZ2IybGFiXzEodGhpcy5fcmdiKTtcbiAgICB9O1xuXG4gICAgY2hyb21hXzEubGFiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvcl8xLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsnbGFiJ10pICkpO1xuICAgIH07XG5cbiAgICBpbnB1dC5mb3JtYXQubGFiID0gbGFiMnJnYl8xO1xuXG4gICAgaW5wdXQuYXV0b2RldGVjdC5wdXNoKHtcbiAgICAgICAgcDogMixcbiAgICAgICAgdGVzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgICAgIGFyZ3MgPSB1bnBhY2skbShhcmdzLCAnbGFiJyk7XG4gICAgICAgICAgICBpZiAodHlwZSQ5KGFyZ3MpID09PSAnYXJyYXknICYmIGFyZ3MubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdsYWInO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdW5wYWNrJG4gPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIFJBRDJERUcgPSB1dGlscy5SQUQyREVHO1xuICAgIHZhciBzcXJ0JDEgPSBNYXRoLnNxcnQ7XG4gICAgdmFyIGF0YW4yID0gTWF0aC5hdGFuMjtcbiAgICB2YXIgcm91bmQkNCA9IE1hdGgucm91bmQ7XG5cbiAgICB2YXIgbGFiMmxjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICB2YXIgcmVmID0gdW5wYWNrJG4oYXJncywgJ2xhYicpO1xuICAgICAgICB2YXIgbCA9IHJlZlswXTtcbiAgICAgICAgdmFyIGEgPSByZWZbMV07XG4gICAgICAgIHZhciBiID0gcmVmWzJdO1xuICAgICAgICB2YXIgYyA9IHNxcnQkMShhICogYSArIGIgKiBiKTtcbiAgICAgICAgdmFyIGggPSAoYXRhbjIoYiwgYSkgKiBSQUQyREVHICsgMzYwKSAlIDM2MDtcbiAgICAgICAgaWYgKHJvdW5kJDQoYyoxMDAwMCkgPT09IDApIHsgaCA9IE51bWJlci5OYU47IH1cbiAgICAgICAgcmV0dXJuIFtsLCBjLCBoXTtcbiAgICB9O1xuXG4gICAgdmFyIGxhYjJsY2hfMSA9IGxhYjJsY2g7XG5cbiAgICB2YXIgdW5wYWNrJG8gPSB1dGlscy51bnBhY2s7XG5cblxuXG4gICAgdmFyIHJnYjJsY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIHJlZiA9IHVucGFjayRvKGFyZ3MsICdyZ2InKTtcbiAgICAgICAgdmFyIHIgPSByZWZbMF07XG4gICAgICAgIHZhciBnID0gcmVmWzFdO1xuICAgICAgICB2YXIgYiA9IHJlZlsyXTtcbiAgICAgICAgdmFyIHJlZiQxID0gcmdiMmxhYl8xKHIsZyxiKTtcbiAgICAgICAgdmFyIGwgPSByZWYkMVswXTtcbiAgICAgICAgdmFyIGEgPSByZWYkMVsxXTtcbiAgICAgICAgdmFyIGJfID0gcmVmJDFbMl07XG4gICAgICAgIHJldHVybiBsYWIybGNoXzEobCxhLGJfKTtcbiAgICB9O1xuXG4gICAgdmFyIHJnYjJsY2hfMSA9IHJnYjJsY2g7XG5cbiAgICB2YXIgdW5wYWNrJHAgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIERFRzJSQUQgPSB1dGlscy5ERUcyUkFEO1xuICAgIHZhciBzaW4gPSBNYXRoLnNpbjtcbiAgICB2YXIgY29zJDEgPSBNYXRoLmNvcztcblxuICAgIHZhciBsY2gybGFiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIC8qXG4gICAgICAgIENvbnZlcnQgZnJvbSBhIHF1YWxpdGF0aXZlIHBhcmFtZXRlciBoIGFuZCBhIHF1YW50aXRhdGl2ZSBwYXJhbWV0ZXIgbCB0byBhIDI0LWJpdCBwaXhlbC5cbiAgICAgICAgVGhlc2UgZm9ybXVsYXMgd2VyZSBpbnZlbnRlZCBieSBEYXZpZCBEYWxyeW1wbGUgdG8gb2J0YWluIG1heGltdW0gY29udHJhc3Qgd2l0aG91dCBnb2luZ1xuICAgICAgICBvdXQgb2YgZ2FtdXQgaWYgdGhlIHBhcmFtZXRlcnMgYXJlIGluIHRoZSByYW5nZSAwLTEuXG5cbiAgICAgICAgQSBzYXR1cmF0aW9uIG11bHRpcGxpZXIgd2FzIGFkZGVkIGJ5IEdyZWdvciBBaXNjaFxuICAgICAgICAqL1xuICAgICAgICB2YXIgcmVmID0gdW5wYWNrJHAoYXJncywgJ2xjaCcpO1xuICAgICAgICB2YXIgbCA9IHJlZlswXTtcbiAgICAgICAgdmFyIGMgPSByZWZbMV07XG4gICAgICAgIHZhciBoID0gcmVmWzJdO1xuICAgICAgICBpZiAoaXNOYU4oaCkpIHsgaCA9IDA7IH1cbiAgICAgICAgaCA9IGggKiBERUcyUkFEO1xuICAgICAgICByZXR1cm4gW2wsIGNvcyQxKGgpICogYywgc2luKGgpICogY11cbiAgICB9O1xuXG4gICAgdmFyIGxjaDJsYWJfMSA9IGxjaDJsYWI7XG5cbiAgICB2YXIgdW5wYWNrJHEgPSB1dGlscy51bnBhY2s7XG5cblxuXG4gICAgdmFyIGxjaDJyZ2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgYXJncyA9IHVucGFjayRxKGFyZ3MsICdsY2gnKTtcbiAgICAgICAgdmFyIGwgPSBhcmdzWzBdO1xuICAgICAgICB2YXIgYyA9IGFyZ3NbMV07XG4gICAgICAgIHZhciBoID0gYXJnc1syXTtcbiAgICAgICAgdmFyIHJlZiA9IGxjaDJsYWJfMSAobCxjLGgpO1xuICAgICAgICB2YXIgTCA9IHJlZlswXTtcbiAgICAgICAgdmFyIGEgPSByZWZbMV07XG4gICAgICAgIHZhciBiXyA9IHJlZlsyXTtcbiAgICAgICAgdmFyIHJlZiQxID0gbGFiMnJnYl8xIChMLGEsYl8pO1xuICAgICAgICB2YXIgciA9IHJlZiQxWzBdO1xuICAgICAgICB2YXIgZyA9IHJlZiQxWzFdO1xuICAgICAgICB2YXIgYiA9IHJlZiQxWzJdO1xuICAgICAgICByZXR1cm4gW3IsIGcsIGIsIGFyZ3MubGVuZ3RoID4gMyA/IGFyZ3NbM10gOiAxXTtcbiAgICB9O1xuXG4gICAgdmFyIGxjaDJyZ2JfMSA9IGxjaDJyZ2I7XG5cbiAgICB2YXIgdW5wYWNrJHIgPSB1dGlscy51bnBhY2s7XG5cblxuICAgIHZhciBoY2wycmdiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHZhciBoY2wgPSB1bnBhY2skcihhcmdzLCAnaGNsJykucmV2ZXJzZSgpO1xuICAgICAgICByZXR1cm4gbGNoMnJnYl8xLmFwcGx5KHZvaWQgMCwgaGNsKTtcbiAgICB9O1xuXG4gICAgdmFyIGhjbDJyZ2JfMSA9IGhjbDJyZ2I7XG5cbiAgICB2YXIgdW5wYWNrJHMgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHR5cGUkYSA9IHV0aWxzLnR5cGU7XG5cblxuXG5cblxuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUubGNoID0gZnVuY3Rpb24oKSB7IHJldHVybiByZ2IybGNoXzEodGhpcy5fcmdiKTsgfTtcbiAgICBDb2xvcl8xLnByb3RvdHlwZS5oY2wgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHJnYjJsY2hfMSh0aGlzLl9yZ2IpLnJldmVyc2UoKTsgfTtcblxuICAgIGNocm9tYV8xLmxjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3JfMSwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ2xjaCddKSApKTtcbiAgICB9O1xuICAgIGNocm9tYV8xLmhjbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseSggQ29sb3JfMSwgWyBudWxsIF0uY29uY2F0KCBhcmdzLCBbJ2hjbCddKSApKTtcbiAgICB9O1xuXG4gICAgaW5wdXQuZm9ybWF0LmxjaCA9IGxjaDJyZ2JfMTtcbiAgICBpbnB1dC5mb3JtYXQuaGNsID0gaGNsMnJnYl8xO1xuXG4gICAgWydsY2gnLCdoY2wnXS5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7IHJldHVybiBpbnB1dC5hdXRvZGV0ZWN0LnB1c2goe1xuICAgICAgICBwOiAyLFxuICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICAgICAgYXJncyA9IHVucGFjayRzKGFyZ3MsIG0pO1xuICAgICAgICAgICAgaWYgKHR5cGUkYShhcmdzKSA9PT0gJ2FycmF5JyAmJiBhcmdzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7IH0pO1xuXG4gICAgdmFyIHR5cGUkYiA9IHV0aWxzLnR5cGU7XG5cblxuXG5cblxuICAgIENvbG9yXzEucHJvdG90eXBlLm5hbWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhleCA9IHJnYjJoZXhfMSh0aGlzLl9yZ2IsICdyZ2InKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBPYmplY3Qua2V5cyh3M2N4MTFfMSk7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgbiA9IGxpc3RbaV07XG5cbiAgICAgICAgICAgIGlmICh3M2N4MTFfMVtuXSA9PT0gaGV4KSB7IHJldHVybiBuLnRvTG93ZXJDYXNlKCk7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGV4O1xuICAgIH07XG5cbiAgICBpbnB1dC5mb3JtYXQubmFtZWQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAodzNjeDExXzFbbmFtZV0pIHsgcmV0dXJuIGhleDJyZ2JfMSh3M2N4MTFfMVtuYW1lXSk7IH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGNvbG9yIG5hbWU6ICcrbmFtZSk7XG4gICAgfTtcblxuICAgIGlucHV0LmF1dG9kZXRlY3QucHVzaCh7XG4gICAgICAgIHA6IDUsXG4gICAgICAgIHRlc3Q6IGZ1bmN0aW9uIChoKSB7XG4gICAgICAgICAgICB2YXIgcmVzdCA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHdoaWxlICggbGVuLS0gPiAwICkgcmVzdFsgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgICAgICAgICAgaWYgKCFyZXN0Lmxlbmd0aCAmJiB0eXBlJGIoaCkgPT09ICdzdHJpbmcnICYmIHczY3gxMV8xW2gudG9Mb3dlckNhc2UoKV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ25hbWVkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHVucGFjayR0ID0gdXRpbHMudW5wYWNrO1xuXG4gICAgdmFyIHJnYjJudW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgdmFyIHJlZiA9IHVucGFjayR0KGFyZ3MsICdyZ2InKTtcbiAgICAgICAgdmFyIHIgPSByZWZbMF07XG4gICAgICAgIHZhciBnID0gcmVmWzFdO1xuICAgICAgICB2YXIgYiA9IHJlZlsyXTtcbiAgICAgICAgcmV0dXJuIChyIDw8IDE2KSArIChnIDw8IDgpICsgYjtcbiAgICB9O1xuXG4gICAgdmFyIHJnYjJudW1fMSA9IHJnYjJudW07XG5cbiAgICB2YXIgdHlwZSRjID0gdXRpbHMudHlwZTtcblxuICAgIHZhciBudW0ycmdiID0gZnVuY3Rpb24gKG51bSkge1xuICAgICAgICBpZiAodHlwZSRjKG51bSkgPT0gXCJudW1iZXJcIiAmJiBudW0gPj0gMCAmJiBudW0gPD0gMHhGRkZGRkYpIHtcbiAgICAgICAgICAgIHZhciByID0gbnVtID4+IDE2O1xuICAgICAgICAgICAgdmFyIGcgPSAobnVtID4+IDgpICYgMHhGRjtcbiAgICAgICAgICAgIHZhciBiID0gbnVtICYgMHhGRjtcbiAgICAgICAgICAgIHJldHVybiBbcixnLGIsMV07XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBudW0gY29sb3I6IFwiK251bSk7XG4gICAgfTtcblxuICAgIHZhciBudW0ycmdiXzEgPSBudW0ycmdiO1xuXG4gICAgdmFyIHR5cGUkZCA9IHV0aWxzLnR5cGU7XG5cblxuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUubnVtID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZ2IybnVtXzEodGhpcy5fcmdiKTtcbiAgICB9O1xuXG4gICAgY2hyb21hXzEubnVtID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvcl8xLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsnbnVtJ10pICkpO1xuICAgIH07XG5cbiAgICBpbnB1dC5mb3JtYXQubnVtID0gbnVtMnJnYl8xO1xuXG4gICAgaW5wdXQuYXV0b2RldGVjdC5wdXNoKHtcbiAgICAgICAgcDogNSxcbiAgICAgICAgdGVzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiB0eXBlJGQoYXJnc1swXSkgPT09ICdudW1iZXInICYmIGFyZ3NbMF0gPj0gMCAmJiBhcmdzWzBdIDw9IDB4RkZGRkZGKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdudW0nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdW5wYWNrJHUgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHR5cGUkZSA9IHV0aWxzLnR5cGU7XG4gICAgdmFyIHJvdW5kJDUgPSBNYXRoLnJvdW5kO1xuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUucmdiID0gZnVuY3Rpb24ocm5kKSB7XG4gICAgICAgIGlmICggcm5kID09PSB2b2lkIDAgKSBybmQ9dHJ1ZTtcblxuICAgICAgICBpZiAocm5kID09PSBmYWxzZSkgeyByZXR1cm4gdGhpcy5fcmdiLnNsaWNlKDAsMyk7IH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3JnYi5zbGljZSgwLDMpLm1hcChyb3VuZCQ1KTtcbiAgICB9O1xuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUucmdiYSA9IGZ1bmN0aW9uKHJuZCkge1xuICAgICAgICBpZiAoIHJuZCA9PT0gdm9pZCAwICkgcm5kPXRydWU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3JnYi5zbGljZSgwLDQpLm1hcChmdW5jdGlvbiAodixpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTwzID8gKHJuZCA9PT0gZmFsc2UgPyB2IDogcm91bmQkNSh2KSkgOiB2O1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY2hyb21hXzEucmdiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvcl8xLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsncmdiJ10pICkpO1xuICAgIH07XG5cbiAgICBpbnB1dC5mb3JtYXQucmdiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHZhciByZ2JhID0gdW5wYWNrJHUoYXJncywgJ3JnYmEnKTtcbiAgICAgICAgaWYgKHJnYmFbM10gPT09IHVuZGVmaW5lZCkgeyByZ2JhWzNdID0gMTsgfVxuICAgICAgICByZXR1cm4gcmdiYTtcbiAgICB9O1xuXG4gICAgaW5wdXQuYXV0b2RldGVjdC5wdXNoKHtcbiAgICAgICAgcDogMyxcbiAgICAgICAgdGVzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgICAgICAgIGFyZ3MgPSB1bnBhY2skdShhcmdzLCAncmdiYScpO1xuICAgICAgICAgICAgaWYgKHR5cGUkZShhcmdzKSA9PT0gJ2FycmF5JyAmJiAoYXJncy5sZW5ndGggPT09IDMgfHxcbiAgICAgICAgICAgICAgICBhcmdzLmxlbmd0aCA9PT0gNCAmJiB0eXBlJGUoYXJnc1szXSkgPT0gJ251bWJlcicgJiYgYXJnc1szXSA+PSAwICYmIGFyZ3NbM10gPD0gMSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JnYic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qXG4gICAgICogQmFzZWQgb24gaW1wbGVtZW50YXRpb24gYnkgTmVpbCBCYXJ0bGV0dFxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZWlsYmFydGxldHQvY29sb3ItdGVtcGVyYXR1cmVcbiAgICAgKi9cblxuICAgIHZhciBsb2cgPSBNYXRoLmxvZztcblxuICAgIHZhciB0ZW1wZXJhdHVyZTJyZ2IgPSBmdW5jdGlvbiAoa2VsdmluKSB7XG4gICAgICAgIHZhciB0ZW1wID0ga2VsdmluIC8gMTAwO1xuICAgICAgICB2YXIgcixnLGI7XG4gICAgICAgIGlmICh0ZW1wIDwgNjYpIHtcbiAgICAgICAgICAgIHIgPSAyNTU7XG4gICAgICAgICAgICBnID0gLTE1NS4yNTQ4NTU2MjcwOTE3OSAtIDAuNDQ1OTY5NTA0Njk1NzkxMzMgKiAoZyA9IHRlbXAtMikgKyAxMDQuNDkyMTYxOTkzOTM4ODggKiBsb2coZyk7XG4gICAgICAgICAgICBiID0gdGVtcCA8IDIwID8gMCA6IC0yNTQuNzY5MzUxODQxMjA5MDIgKyAwLjgyNzQwOTYwNjQwMDczOTUgKiAoYiA9IHRlbXAtMTApICsgMTE1LjY3OTk0NDAxMDY2MTQ3ICogbG9nKGIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgciA9IDM1MS45NzY5MDU2NjgwNTY5MyArIDAuMTE0MjA2NDUzNzg0MTY1ICogKHIgPSB0ZW1wLTU1KSAtIDQwLjI1MzY2MzA5MzMyMTI3ICogbG9nKHIpO1xuICAgICAgICAgICAgZyA9IDMyNS40NDk0MTI1NzExOTc0ICsgMC4wNzk0MzQ1NjUzNjY2MjM0MiAqIChnID0gdGVtcC01MCkgLSAyOC4wODUyOTYzNTA3OTU3ICogbG9nKGcpO1xuICAgICAgICAgICAgYiA9IDI1NTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3IsZyxiLDFdO1xuICAgIH07XG5cbiAgICB2YXIgdGVtcGVyYXR1cmUycmdiXzEgPSB0ZW1wZXJhdHVyZTJyZ2I7XG5cbiAgICAvKlxuICAgICAqIEJhc2VkIG9uIGltcGxlbWVudGF0aW9uIGJ5IE5laWwgQmFydGxldHRcbiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vbmVpbGJhcnRsZXR0L2NvbG9yLXRlbXBlcmF0dXJlXG4gICAgICoqL1xuXG5cbiAgICB2YXIgdW5wYWNrJHYgPSB1dGlscy51bnBhY2s7XG4gICAgdmFyIHJvdW5kJDYgPSBNYXRoLnJvdW5kO1xuXG4gICAgdmFyIHJnYjJ0ZW1wZXJhdHVyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgICB2YXIgcmdiID0gdW5wYWNrJHYoYXJncywgJ3JnYicpO1xuICAgICAgICB2YXIgciA9IHJnYlswXSwgYiA9IHJnYlsyXTtcbiAgICAgICAgdmFyIG1pblRlbXAgPSAxMDAwO1xuICAgICAgICB2YXIgbWF4VGVtcCA9IDQwMDAwO1xuICAgICAgICB2YXIgZXBzID0gMC40O1xuICAgICAgICB2YXIgdGVtcDtcbiAgICAgICAgd2hpbGUgKG1heFRlbXAgLSBtaW5UZW1wID4gZXBzKSB7XG4gICAgICAgICAgICB0ZW1wID0gKG1heFRlbXAgKyBtaW5UZW1wKSAqIDAuNTtcbiAgICAgICAgICAgIHZhciByZ2IkMSA9IHRlbXBlcmF0dXJlMnJnYl8xKHRlbXApO1xuICAgICAgICAgICAgaWYgKChyZ2IkMVsyXSAvIHJnYiQxWzBdKSA+PSAoYiAvIHIpKSB7XG4gICAgICAgICAgICAgICAgbWF4VGVtcCA9IHRlbXA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1pblRlbXAgPSB0ZW1wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb3VuZCQ2KHRlbXApO1xuICAgIH07XG5cbiAgICB2YXIgcmdiMnRlbXBlcmF0dXJlXzEgPSByZ2IydGVtcGVyYXR1cmU7XG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS50ZW1wID1cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5rZWx2aW4gPVxuICAgIENvbG9yXzEucHJvdG90eXBlLnRlbXBlcmF0dXJlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZ2IydGVtcGVyYXR1cmVfMSh0aGlzLl9yZ2IpO1xuICAgIH07XG5cbiAgICBjaHJvbWFfMS50ZW1wID1cbiAgICBjaHJvbWFfMS5rZWx2aW4gPVxuICAgIGNocm9tYV8xLnRlbXBlcmF0dXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvcl8xLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MsIFsndGVtcCddKSApKTtcbiAgICB9O1xuXG4gICAgaW5wdXQuZm9ybWF0LnRlbXAgPVxuICAgIGlucHV0LmZvcm1hdC5rZWx2aW4gPVxuICAgIGlucHV0LmZvcm1hdC50ZW1wZXJhdHVyZSA9IHRlbXBlcmF0dXJlMnJnYl8xO1xuXG4gICAgdmFyIHR5cGUkZiA9IHV0aWxzLnR5cGU7XG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5hbHBoYSA9IGZ1bmN0aW9uKGEsIG11dGF0ZSkge1xuICAgICAgICBpZiAoIG11dGF0ZSA9PT0gdm9pZCAwICkgbXV0YXRlPWZhbHNlO1xuXG4gICAgICAgIGlmIChhICE9PSB1bmRlZmluZWQgJiYgdHlwZSRmKGEpID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKG11dGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JnYlszXSA9IGE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yXzEoW3RoaXMuX3JnYlswXSwgdGhpcy5fcmdiWzFdLCB0aGlzLl9yZ2JbMl0sIGFdLCAncmdiJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3JnYlszXTtcbiAgICB9O1xuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUuY2xpcHBlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmdiLl9jbGlwcGVkIHx8IGZhbHNlO1xuICAgIH07XG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5kYXJrZW4gPSBmdW5jdGlvbihhbW91bnQpIHtcbiAgICBcdGlmICggYW1vdW50ID09PSB2b2lkIDAgKSBhbW91bnQ9MTtcblxuICAgIFx0dmFyIG1lID0gdGhpcztcbiAgICBcdHZhciBsYWIgPSBtZS5sYWIoKTtcbiAgICBcdGxhYlswXSAtPSBsYWJDb25zdGFudHMuS24gKiBhbW91bnQ7XG4gICAgXHRyZXR1cm4gbmV3IENvbG9yXzEobGFiLCAnbGFiJykuYWxwaGEobWUuYWxwaGEoKSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIENvbG9yXzEucHJvdG90eXBlLmJyaWdodGVuID0gZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgXHRpZiAoIGFtb3VudCA9PT0gdm9pZCAwICkgYW1vdW50PTE7XG5cbiAgICBcdHJldHVybiB0aGlzLmRhcmtlbigtYW1vdW50KTtcbiAgICB9O1xuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUuZGFya2VyID0gQ29sb3JfMS5wcm90b3R5cGUuZGFya2VuO1xuICAgIENvbG9yXzEucHJvdG90eXBlLmJyaWdodGVyID0gQ29sb3JfMS5wcm90b3R5cGUuYnJpZ2h0ZW47XG5cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihtYykge1xuICAgICAgICB2YXIgcmVmID0gbWMuc3BsaXQoJy4nKTtcbiAgICAgICAgdmFyIG1vZGUgPSByZWZbMF07XG4gICAgICAgIHZhciBjaGFubmVsID0gcmVmWzFdO1xuICAgICAgICB2YXIgc3JjID0gdGhpc1ttb2RlXSgpO1xuICAgICAgICBpZiAoY2hhbm5lbCkge1xuICAgICAgICAgICAgdmFyIGkgPSBtb2RlLmluZGV4T2YoY2hhbm5lbCk7XG4gICAgICAgICAgICBpZiAoaSA+IC0xKSB7IHJldHVybiBzcmNbaV07IH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigoXCJ1bmtub3duIGNoYW5uZWwgXCIgKyBjaGFubmVsICsgXCIgaW4gbW9kZSBcIiArIG1vZGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzcmM7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHR5cGUkZyA9IHV0aWxzLnR5cGU7XG4gICAgdmFyIHBvdyQyID0gTWF0aC5wb3c7XG5cbiAgICB2YXIgRVBTID0gMWUtNztcbiAgICB2YXIgTUFYX0lURVIgPSAyMDtcblxuICAgIENvbG9yXzEucHJvdG90eXBlLmx1bWluYW5jZSA9IGZ1bmN0aW9uKGx1bSkge1xuICAgICAgICBpZiAobHVtICE9PSB1bmRlZmluZWQgJiYgdHlwZSRnKGx1bSkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAobHVtID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIHB1cmUgYmxhY2tcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yXzEoWzAsMCwwLHRoaXMuX3JnYlszXV0sICdyZ2InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsdW0gPT09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gcHVyZSB3aGl0ZVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3JfMShbMjU1LDI1NSwyNTUsdGhpcy5fcmdiWzNdXSwgJ3JnYicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29tcHV0ZSBuZXcgY29sb3IgdXNpbmcuLi5cbiAgICAgICAgICAgIHZhciBjdXJfbHVtID0gdGhpcy5sdW1pbmFuY2UoKTtcbiAgICAgICAgICAgIHZhciBtb2RlID0gJ3JnYic7XG4gICAgICAgICAgICB2YXIgbWF4X2l0ZXIgPSBNQVhfSVRFUjtcblxuICAgICAgICAgICAgdmFyIHRlc3QgPSBmdW5jdGlvbiAobG93LCBoaWdoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1pZCA9IGxvdy5pbnRlcnBvbGF0ZShoaWdoLCAwLjUsIG1vZGUpO1xuICAgICAgICAgICAgICAgIHZhciBsbSA9IG1pZC5sdW1pbmFuY2UoKTtcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMobHVtIC0gbG0pIDwgRVBTIHx8ICFtYXhfaXRlci0tKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNsb3NlIGVub3VnaFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWlkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbG0gPiBsdW0gPyB0ZXN0KGxvdywgbWlkKSA6IHRlc3QobWlkLCBoaWdoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciByZ2IgPSAoY3VyX2x1bSA+IGx1bSA/IHRlc3QobmV3IENvbG9yXzEoWzAsMCwwXSksIHRoaXMpIDogdGVzdCh0aGlzLCBuZXcgQ29sb3JfMShbMjU1LDI1NSwyNTVdKSkpLnJnYigpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcl8xKHJnYi5jb25jYXQoIFt0aGlzLl9yZ2JbM11dKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJnYjJsdW1pbmFuY2UuYXBwbHkodm9pZCAwLCAodGhpcy5fcmdiKS5zbGljZSgwLDMpKTtcbiAgICB9O1xuXG5cbiAgICB2YXIgcmdiMmx1bWluYW5jZSA9IGZ1bmN0aW9uIChyLGcsYikge1xuICAgICAgICAvLyByZWxhdGl2ZSBsdW1pbmFuY2VcbiAgICAgICAgLy8gc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jcmVsYXRpdmVsdW1pbmFuY2VkZWZcbiAgICAgICAgciA9IGx1bWluYW5jZV94KHIpO1xuICAgICAgICBnID0gbHVtaW5hbmNlX3goZyk7XG4gICAgICAgIGIgPSBsdW1pbmFuY2VfeChiKTtcbiAgICAgICAgcmV0dXJuIDAuMjEyNiAqIHIgKyAwLjcxNTIgKiBnICsgMC4wNzIyICogYjtcbiAgICB9O1xuXG4gICAgdmFyIGx1bWluYW5jZV94ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgeCAvPSAyNTU7XG4gICAgICAgIHJldHVybiB4IDw9IDAuMDM5MjggPyB4LzEyLjkyIDogcG93JDIoKHgrMC4wNTUpLzEuMDU1LCAyLjQpO1xuICAgIH07XG5cbiAgICB2YXIgaW50ZXJwb2xhdG9yID0ge307XG5cbiAgICB2YXIgdHlwZSRoID0gdXRpbHMudHlwZTtcblxuXG4gICAgdmFyIG1peCA9IGZ1bmN0aW9uIChjb2wxLCBjb2wyLCBmKSB7XG4gICAgICAgIGlmICggZiA9PT0gdm9pZCAwICkgZj0wLjU7XG4gICAgICAgIHZhciByZXN0ID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAzO1xuICAgICAgICB3aGlsZSAoIGxlbi0tID4gMCApIHJlc3RbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAzIF07XG5cbiAgICAgICAgdmFyIG1vZGUgPSByZXN0WzBdIHx8ICdscmdiJztcbiAgICAgICAgaWYgKCFpbnRlcnBvbGF0b3JbbW9kZV0gJiYgIXJlc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBmYWxsIGJhY2sgdG8gdGhlIGZpcnN0IHN1cHBvcnRlZCBtb2RlXG4gICAgICAgICAgICBtb2RlID0gT2JqZWN0LmtleXMoaW50ZXJwb2xhdG9yKVswXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWludGVycG9sYXRvclttb2RlXSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKChcImludGVycG9sYXRpb24gbW9kZSBcIiArIG1vZGUgKyBcIiBpcyBub3QgZGVmaW5lZFwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUkaChjb2wxKSAhPT0gJ29iamVjdCcpIHsgY29sMSA9IG5ldyBDb2xvcl8xKGNvbDEpOyB9XG4gICAgICAgIGlmICh0eXBlJGgoY29sMikgIT09ICdvYmplY3QnKSB7IGNvbDIgPSBuZXcgQ29sb3JfMShjb2wyKTsgfVxuICAgICAgICByZXR1cm4gaW50ZXJwb2xhdG9yW21vZGVdKGNvbDEsIGNvbDIsIGYpXG4gICAgICAgICAgICAuYWxwaGEoY29sMS5hbHBoYSgpICsgZiAqIChjb2wyLmFscGhhKCkgLSBjb2wxLmFscGhhKCkpKTtcbiAgICB9O1xuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUubWl4ID1cbiAgICBDb2xvcl8xLnByb3RvdHlwZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKGNvbDIsIGYpIHtcbiAgICBcdGlmICggZiA9PT0gdm9pZCAwICkgZj0wLjU7XG4gICAgXHR2YXIgcmVzdCA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgICBcdHdoaWxlICggbGVuLS0gPiAwICkgcmVzdFsgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDIgXTtcblxuICAgIFx0cmV0dXJuIG1peC5hcHBseSh2b2lkIDAsIFsgdGhpcywgY29sMiwgZiBdLmNvbmNhdCggcmVzdCApKTtcbiAgICB9O1xuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUucHJlbXVsdGlwbHkgPSBmdW5jdGlvbihtdXRhdGUpIHtcbiAgICBcdGlmICggbXV0YXRlID09PSB2b2lkIDAgKSBtdXRhdGU9ZmFsc2U7XG5cbiAgICBcdHZhciByZ2IgPSB0aGlzLl9yZ2I7XG4gICAgXHR2YXIgYSA9IHJnYlszXTtcbiAgICBcdGlmIChtdXRhdGUpIHtcbiAgICBcdFx0dGhpcy5fcmdiID0gW3JnYlswXSphLCByZ2JbMV0qYSwgcmdiWzJdKmEsIGFdO1xuICAgIFx0XHRyZXR1cm4gdGhpcztcbiAgICBcdH0gZWxzZSB7XG4gICAgXHRcdHJldHVybiBuZXcgQ29sb3JfMShbcmdiWzBdKmEsIHJnYlsxXSphLCByZ2JbMl0qYSwgYV0sICdyZ2InKTtcbiAgICBcdH1cbiAgICB9O1xuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUuc2F0dXJhdGUgPSBmdW5jdGlvbihhbW91bnQpIHtcbiAgICBcdGlmICggYW1vdW50ID09PSB2b2lkIDAgKSBhbW91bnQ9MTtcblxuICAgIFx0dmFyIG1lID0gdGhpcztcbiAgICBcdHZhciBsY2ggPSBtZS5sY2goKTtcbiAgICBcdGxjaFsxXSArPSBsYWJDb25zdGFudHMuS24gKiBhbW91bnQ7XG4gICAgXHRpZiAobGNoWzFdIDwgMCkgeyBsY2hbMV0gPSAwOyB9XG4gICAgXHRyZXR1cm4gbmV3IENvbG9yXzEobGNoLCAnbGNoJykuYWxwaGEobWUuYWxwaGEoKSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIENvbG9yXzEucHJvdG90eXBlLmRlc2F0dXJhdGUgPSBmdW5jdGlvbihhbW91bnQpIHtcbiAgICBcdGlmICggYW1vdW50ID09PSB2b2lkIDAgKSBhbW91bnQ9MTtcblxuICAgIFx0cmV0dXJuIHRoaXMuc2F0dXJhdGUoLWFtb3VudCk7XG4gICAgfTtcblxuICAgIHZhciB0eXBlJGkgPSB1dGlscy50eXBlO1xuXG4gICAgQ29sb3JfMS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obWMsIHZhbHVlLCBtdXRhdGUpIHtcbiAgICAgICAgaWYgKCBtdXRhdGUgPT09IHZvaWQgMCApIG11dGF0ZT1mYWxzZTtcblxuICAgICAgICB2YXIgcmVmID0gbWMuc3BsaXQoJy4nKTtcbiAgICAgICAgdmFyIG1vZGUgPSByZWZbMF07XG4gICAgICAgIHZhciBjaGFubmVsID0gcmVmWzFdO1xuICAgICAgICB2YXIgc3JjID0gdGhpc1ttb2RlXSgpO1xuICAgICAgICBpZiAoY2hhbm5lbCkge1xuICAgICAgICAgICAgdmFyIGkgPSBtb2RlLmluZGV4T2YoY2hhbm5lbCk7XG4gICAgICAgICAgICBpZiAoaSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUkaSh2YWx1ZSkgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKHZhbHVlLmNoYXJBdCgwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnKyc6IHNyY1tpXSArPSArdmFsdWU7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnLSc6IHNyY1tpXSArPSArdmFsdWU7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnKic6IHNyY1tpXSAqPSArKHZhbHVlLnN1YnN0cigxKSk7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnLyc6IHNyY1tpXSAvPSArKHZhbHVlLnN1YnN0cigxKSk7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogc3JjW2ldID0gK3ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlJGkodmFsdWUpID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICBzcmNbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCB2YWx1ZSBmb3IgQ29sb3Iuc2V0XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgb3V0ID0gbmV3IENvbG9yXzEoc3JjLCBtb2RlKTtcbiAgICAgICAgICAgICAgICBpZiAobXV0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JnYiA9IG91dC5fcmdiO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigoXCJ1bmtub3duIGNoYW5uZWwgXCIgKyBjaGFubmVsICsgXCIgaW4gbW9kZSBcIiArIG1vZGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzcmM7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJnYiQxID0gZnVuY3Rpb24gKGNvbDEsIGNvbDIsIGYpIHtcbiAgICAgICAgdmFyIHh5ejAgPSBjb2wxLl9yZ2I7XG4gICAgICAgIHZhciB4eXoxID0gY29sMi5fcmdiO1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yXzEoXG4gICAgICAgICAgICB4eXowWzBdICsgZiAqICh4eXoxWzBdLXh5ejBbMF0pLFxuICAgICAgICAgICAgeHl6MFsxXSArIGYgKiAoeHl6MVsxXS14eXowWzFdKSxcbiAgICAgICAgICAgIHh5ejBbMl0gKyBmICogKHh5ejFbMl0teHl6MFsyXSksXG4gICAgICAgICAgICAncmdiJ1xuICAgICAgICApXG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGludGVycG9sYXRvclxuICAgIGludGVycG9sYXRvci5yZ2IgPSByZ2IkMTtcblxuICAgIHZhciBzcXJ0JDIgPSBNYXRoLnNxcnQ7XG4gICAgdmFyIHBvdyQzID0gTWF0aC5wb3c7XG5cbiAgICB2YXIgbHJnYiA9IGZ1bmN0aW9uIChjb2wxLCBjb2wyLCBmKSB7XG4gICAgICAgIHZhciByZWYgPSBjb2wxLl9yZ2I7XG4gICAgICAgIHZhciB4MSA9IHJlZlswXTtcbiAgICAgICAgdmFyIHkxID0gcmVmWzFdO1xuICAgICAgICB2YXIgejEgPSByZWZbMl07XG4gICAgICAgIHZhciByZWYkMSA9IGNvbDIuX3JnYjtcbiAgICAgICAgdmFyIHgyID0gcmVmJDFbMF07XG4gICAgICAgIHZhciB5MiA9IHJlZiQxWzFdO1xuICAgICAgICB2YXIgejIgPSByZWYkMVsyXTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcl8xKFxuICAgICAgICAgICAgc3FydCQyKHBvdyQzKHgxLDIpICogKDEtZikgKyBwb3ckMyh4MiwyKSAqIGYpLFxuICAgICAgICAgICAgc3FydCQyKHBvdyQzKHkxLDIpICogKDEtZikgKyBwb3ckMyh5MiwyKSAqIGYpLFxuICAgICAgICAgICAgc3FydCQyKHBvdyQzKHoxLDIpICogKDEtZikgKyBwb3ckMyh6MiwyKSAqIGYpLFxuICAgICAgICAgICAgJ3JnYidcbiAgICAgICAgKVxuICAgIH07XG5cbiAgICAvLyByZWdpc3RlciBpbnRlcnBvbGF0b3JcbiAgICBpbnRlcnBvbGF0b3IubHJnYiA9IGxyZ2I7XG5cbiAgICB2YXIgbGFiJDEgPSBmdW5jdGlvbiAoY29sMSwgY29sMiwgZikge1xuICAgICAgICB2YXIgeHl6MCA9IGNvbDEubGFiKCk7XG4gICAgICAgIHZhciB4eXoxID0gY29sMi5sYWIoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcl8xKFxuICAgICAgICAgICAgeHl6MFswXSArIGYgKiAoeHl6MVswXS14eXowWzBdKSxcbiAgICAgICAgICAgIHh5ejBbMV0gKyBmICogKHh5ejFbMV0teHl6MFsxXSksXG4gICAgICAgICAgICB4eXowWzJdICsgZiAqICh4eXoxWzJdLXh5ejBbMl0pLFxuICAgICAgICAgICAgJ2xhYidcbiAgICAgICAgKVxuICAgIH07XG5cbiAgICAvLyByZWdpc3RlciBpbnRlcnBvbGF0b3JcbiAgICBpbnRlcnBvbGF0b3IubGFiID0gbGFiJDE7XG5cbiAgICB2YXIgX2hzeCA9IGZ1bmN0aW9uIChjb2wxLCBjb2wyLCBmLCBtKSB7XG4gICAgICAgIHZhciBhc3NpZ24sIGFzc2lnbiQxO1xuXG4gICAgICAgIHZhciB4eXowLCB4eXoxO1xuICAgICAgICBpZiAobSA9PT0gJ2hzbCcpIHtcbiAgICAgICAgICAgIHh5ejAgPSBjb2wxLmhzbCgpO1xuICAgICAgICAgICAgeHl6MSA9IGNvbDIuaHNsKCk7XG4gICAgICAgIH0gZWxzZSBpZiAobSA9PT0gJ2hzdicpIHtcbiAgICAgICAgICAgIHh5ejAgPSBjb2wxLmhzdigpO1xuICAgICAgICAgICAgeHl6MSA9IGNvbDIuaHN2KCk7XG4gICAgICAgIH0gZWxzZSBpZiAobSA9PT0gJ2hjZycpIHtcbiAgICAgICAgICAgIHh5ejAgPSBjb2wxLmhjZygpO1xuICAgICAgICAgICAgeHl6MSA9IGNvbDIuaGNnKCk7XG4gICAgICAgIH0gZWxzZSBpZiAobSA9PT0gJ2hzaScpIHtcbiAgICAgICAgICAgIHh5ejAgPSBjb2wxLmhzaSgpO1xuICAgICAgICAgICAgeHl6MSA9IGNvbDIuaHNpKCk7XG4gICAgICAgIH0gZWxzZSBpZiAobSA9PT0gJ2xjaCcgfHwgbSA9PT0gJ2hjbCcpIHtcbiAgICAgICAgICAgIG0gPSAnaGNsJztcbiAgICAgICAgICAgIHh5ejAgPSBjb2wxLmhjbCgpO1xuICAgICAgICAgICAgeHl6MSA9IGNvbDIuaGNsKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaHVlMCwgaHVlMSwgc2F0MCwgc2F0MSwgbGJ2MCwgbGJ2MTtcbiAgICAgICAgaWYgKG0uc3Vic3RyKDAsIDEpID09PSAnaCcpIHtcbiAgICAgICAgICAgIChhc3NpZ24gPSB4eXowLCBodWUwID0gYXNzaWduWzBdLCBzYXQwID0gYXNzaWduWzFdLCBsYnYwID0gYXNzaWduWzJdKTtcbiAgICAgICAgICAgIChhc3NpZ24kMSA9IHh5ejEsIGh1ZTEgPSBhc3NpZ24kMVswXSwgc2F0MSA9IGFzc2lnbiQxWzFdLCBsYnYxID0gYXNzaWduJDFbMl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNhdCwgaHVlLCBsYnYsIGRoO1xuXG4gICAgICAgIGlmICghaXNOYU4oaHVlMCkgJiYgIWlzTmFOKGh1ZTEpKSB7XG4gICAgICAgICAgICAvLyBib3RoIGNvbG9ycyBoYXZlIGh1ZVxuICAgICAgICAgICAgaWYgKGh1ZTEgPiBodWUwICYmIGh1ZTEgLSBodWUwID4gMTgwKSB7XG4gICAgICAgICAgICAgICAgZGggPSBodWUxLShodWUwKzM2MCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGh1ZTEgPCBodWUwICYmIGh1ZTAgLSBodWUxID4gMTgwKSB7XG4gICAgICAgICAgICAgICAgZGggPSBodWUxKzM2MC1odWUwO1xuICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgIGRoID0gaHVlMSAtIGh1ZTA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBodWUgPSBodWUwICsgZiAqIGRoO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc05hTihodWUwKSkge1xuICAgICAgICAgICAgaHVlID0gaHVlMDtcbiAgICAgICAgICAgIGlmICgobGJ2MSA9PSAxIHx8IGxidjEgPT0gMCkgJiYgbSAhPSAnaHN2JykgeyBzYXQgPSBzYXQwOyB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKGh1ZTEpKSB7XG4gICAgICAgICAgICBodWUgPSBodWUxO1xuICAgICAgICAgICAgaWYgKChsYnYwID09IDEgfHwgbGJ2MCA9PSAwKSAmJiBtICE9ICdoc3YnKSB7IHNhdCA9IHNhdDE7IH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGh1ZSA9IE51bWJlci5OYU47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2F0ID09PSB1bmRlZmluZWQpIHsgc2F0ID0gc2F0MCArIGYgKiAoc2F0MSAtIHNhdDApOyB9XG4gICAgICAgIGxidiA9IGxidjAgKyBmICogKGxidjEtbGJ2MCk7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3JfMShbaHVlLCBzYXQsIGxidl0sIG0pO1xuICAgIH07XG5cbiAgICB2YXIgbGNoJDEgPSBmdW5jdGlvbiAoY29sMSwgY29sMiwgZikge1xuICAgIFx0cmV0dXJuIF9oc3goY29sMSwgY29sMiwgZiwgJ2xjaCcpO1xuICAgIH07XG5cbiAgICAvLyByZWdpc3RlciBpbnRlcnBvbGF0b3JcbiAgICBpbnRlcnBvbGF0b3IubGNoID0gbGNoJDE7XG4gICAgaW50ZXJwb2xhdG9yLmhjbCA9IGxjaCQxO1xuXG4gICAgdmFyIG51bSQxID0gZnVuY3Rpb24gKGNvbDEsIGNvbDIsIGYpIHtcbiAgICAgICAgdmFyIGMxID0gY29sMS5udW0oKTtcbiAgICAgICAgdmFyIGMyID0gY29sMi5udW0oKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcl8xKGMxICsgZiAqIChjMi1jMSksICdudW0nKVxuICAgIH07XG5cbiAgICAvLyByZWdpc3RlciBpbnRlcnBvbGF0b3JcbiAgICBpbnRlcnBvbGF0b3IubnVtID0gbnVtJDE7XG5cbiAgICB2YXIgaGNnJDEgPSBmdW5jdGlvbiAoY29sMSwgY29sMiwgZikge1xuICAgIFx0cmV0dXJuIF9oc3goY29sMSwgY29sMiwgZiwgJ2hjZycpO1xuICAgIH07XG5cbiAgICAvLyByZWdpc3RlciBpbnRlcnBvbGF0b3JcbiAgICBpbnRlcnBvbGF0b3IuaGNnID0gaGNnJDE7XG5cbiAgICB2YXIgaHNpJDEgPSBmdW5jdGlvbiAoY29sMSwgY29sMiwgZikge1xuICAgIFx0cmV0dXJuIF9oc3goY29sMSwgY29sMiwgZiwgJ2hzaScpO1xuICAgIH07XG5cbiAgICAvLyByZWdpc3RlciBpbnRlcnBvbGF0b3JcbiAgICBpbnRlcnBvbGF0b3IuaHNpID0gaHNpJDE7XG5cbiAgICB2YXIgaHNsJDEgPSBmdW5jdGlvbiAoY29sMSwgY29sMiwgZikge1xuICAgIFx0cmV0dXJuIF9oc3goY29sMSwgY29sMiwgZiwgJ2hzbCcpO1xuICAgIH07XG5cbiAgICAvLyByZWdpc3RlciBpbnRlcnBvbGF0b3JcbiAgICBpbnRlcnBvbGF0b3IuaHNsID0gaHNsJDE7XG5cbiAgICB2YXIgaHN2JDEgPSBmdW5jdGlvbiAoY29sMSwgY29sMiwgZikge1xuICAgIFx0cmV0dXJuIF9oc3goY29sMSwgY29sMiwgZiwgJ2hzdicpO1xuICAgIH07XG5cbiAgICAvLyByZWdpc3RlciBpbnRlcnBvbGF0b3JcbiAgICBpbnRlcnBvbGF0b3IuaHN2ID0gaHN2JDE7XG5cbiAgICB2YXIgY2xpcF9yZ2IkMiA9IHV0aWxzLmNsaXBfcmdiO1xuICAgIHZhciBwb3ckNCA9IE1hdGgucG93O1xuICAgIHZhciBzcXJ0JDMgPSBNYXRoLnNxcnQ7XG4gICAgdmFyIFBJJDEgPSBNYXRoLlBJO1xuICAgIHZhciBjb3MkMiA9IE1hdGguY29zO1xuICAgIHZhciBzaW4kMSA9IE1hdGguc2luO1xuICAgIHZhciBhdGFuMiQxID0gTWF0aC5hdGFuMjtcblxuICAgIHZhciBhdmVyYWdlID0gZnVuY3Rpb24gKGNvbG9ycywgbW9kZSkge1xuICAgICAgICBpZiAoIG1vZGUgPT09IHZvaWQgMCApIG1vZGU9J2xyZ2InO1xuXG4gICAgICAgIHZhciBsID0gY29sb3JzLmxlbmd0aDtcbiAgICAgICAgLy8gY29udmVydCBjb2xvcnMgdG8gQ29sb3Igb2JqZWN0c1xuICAgICAgICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBuZXcgQ29sb3JfMShjKTsgfSk7XG4gICAgICAgIGlmIChtb2RlID09PSAnbHJnYicpIHtcbiAgICAgICAgICAgIHJldHVybiBfYXZlcmFnZV9scmdiKGNvbG9ycylcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmlyc3QgPSBjb2xvcnMuc2hpZnQoKTtcbiAgICAgICAgdmFyIHh5eiA9IGZpcnN0LmdldChtb2RlKTtcbiAgICAgICAgdmFyIGNudCA9IFtdO1xuICAgICAgICB2YXIgZHggPSAwO1xuICAgICAgICB2YXIgZHkgPSAwO1xuICAgICAgICAvLyBpbml0aWFsIGNvbG9yXG4gICAgICAgIGZvciAodmFyIGk9MDsgaTx4eXoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHh5eltpXSA9IHh5eltpXSB8fCAwO1xuICAgICAgICAgICAgY250LnB1c2goaXNOYU4oeHl6W2ldKSA/IDAgOiAxKTtcbiAgICAgICAgICAgIGlmIChtb2RlLmNoYXJBdChpKSA9PT0gJ2gnICYmICFpc05hTih4eXpbaV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIEEgPSB4eXpbaV0gLyAxODAgKiBQSSQxO1xuICAgICAgICAgICAgICAgIGR4ICs9IGNvcyQyKEEpO1xuICAgICAgICAgICAgICAgIGR5ICs9IHNpbiQxKEEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFscGhhID0gZmlyc3QuYWxwaGEoKTtcbiAgICAgICAgY29sb3JzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHZhciB4eXoyID0gYy5nZXQobW9kZSk7XG4gICAgICAgICAgICBhbHBoYSArPSBjLmFscGhhKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8eHl6Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTih4eXoyW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICBjbnRbaV0rKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGUuY2hhckF0KGkpID09PSAnaCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBBID0geHl6MltpXSAvIDE4MCAqIFBJJDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBkeCArPSBjb3MkMihBKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGR5ICs9IHNpbiQxKEEpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgeHl6W2ldICs9IHh5ejJbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAodmFyIGkkMT0wOyBpJDE8eHl6Lmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgICAgIGlmIChtb2RlLmNoYXJBdChpJDEpID09PSAnaCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgQSQxID0gYXRhbjIkMShkeSAvIGNudFtpJDFdLCBkeCAvIGNudFtpJDFdKSAvIFBJJDEgKiAxODA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKEEkMSA8IDApIHsgQSQxICs9IDM2MDsgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChBJDEgPj0gMzYwKSB7IEEkMSAtPSAzNjA7IH1cbiAgICAgICAgICAgICAgICB4eXpbaSQxXSA9IEEkMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeHl6W2kkMV0gPSB4eXpbaSQxXS9jbnRbaSQxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhbHBoYSAvPSBsO1xuICAgICAgICByZXR1cm4gKG5ldyBDb2xvcl8xKHh5eiwgbW9kZSkpLmFscGhhKGFscGhhID4gMC45OTk5OSA/IDEgOiBhbHBoYSwgdHJ1ZSk7XG4gICAgfTtcblxuXG4gICAgdmFyIF9hdmVyYWdlX2xyZ2IgPSBmdW5jdGlvbiAoY29sb3JzKSB7XG4gICAgICAgIHZhciBsID0gY29sb3JzLmxlbmd0aDtcbiAgICAgICAgdmFyIGYgPSAxL2w7XG4gICAgICAgIHZhciB4eXogPSBbMCwwLDAsMF07XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gY29sb3JzOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGNvbCA9IGxpc3RbaV07XG5cbiAgICAgICAgICAgIHZhciByZ2IgPSBjb2wuX3JnYjtcbiAgICAgICAgICAgIHh5elswXSArPSBwb3ckNChyZ2JbMF0sMikgKiBmO1xuICAgICAgICAgICAgeHl6WzFdICs9IHBvdyQ0KHJnYlsxXSwyKSAqIGY7XG4gICAgICAgICAgICB4eXpbMl0gKz0gcG93JDQocmdiWzJdLDIpICogZjtcbiAgICAgICAgICAgIHh5elszXSArPSByZ2JbM10gKiBmO1xuICAgICAgICB9XG4gICAgICAgIHh5elswXSA9IHNxcnQkMyh4eXpbMF0pO1xuICAgICAgICB4eXpbMV0gPSBzcXJ0JDMoeHl6WzFdKTtcbiAgICAgICAgeHl6WzJdID0gc3FydCQzKHh5elsyXSk7XG4gICAgICAgIGlmICh4eXpbM10gPiAwLjk5OTk5OTkpIHsgeHl6WzNdID0gMTsgfVxuICAgICAgICByZXR1cm4gbmV3IENvbG9yXzEoY2xpcF9yZ2IkMih4eXopKTtcbiAgICB9O1xuXG4gICAgLy8gbWluaW1hbCBtdWx0aS1wdXJwb3NlIGludGVyZmFjZVxuXG4gICAgLy8gQHJlcXVpcmVzIHV0aWxzIGNvbG9yIGFuYWx5emVcblxuXG4gICAgdmFyIHR5cGUkaiA9IHV0aWxzLnR5cGU7XG5cbiAgICB2YXIgcG93JDUgPSBNYXRoLnBvdztcblxuICAgIHZhciBzY2FsZSA9IGZ1bmN0aW9uKGNvbG9ycykge1xuXG4gICAgICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgIHZhciBfbW9kZSA9ICdyZ2InO1xuICAgICAgICB2YXIgX25hY29sID0gY2hyb21hXzEoJyNjY2MnKTtcbiAgICAgICAgdmFyIF9zcHJlYWQgPSAwO1xuICAgICAgICAvLyBjb25zdCBfZml4ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIF9kb21haW4gPSBbMCwgMV07XG4gICAgICAgIHZhciBfcG9zID0gW107XG4gICAgICAgIHZhciBfcGFkZGluZyA9IFswLDBdO1xuICAgICAgICB2YXIgX2NsYXNzZXMgPSBmYWxzZTtcbiAgICAgICAgdmFyIF9jb2xvcnMgPSBbXTtcbiAgICAgICAgdmFyIF9vdXQgPSBmYWxzZTtcbiAgICAgICAgdmFyIF9taW4gPSAwO1xuICAgICAgICB2YXIgX21heCA9IDE7XG4gICAgICAgIHZhciBfY29ycmVjdExpZ2h0bmVzcyA9IGZhbHNlO1xuICAgICAgICB2YXIgX2NvbG9yQ2FjaGUgPSB7fTtcbiAgICAgICAgdmFyIF91c2VDYWNoZSA9IHRydWU7XG4gICAgICAgIHZhciBfZ2FtbWEgPSAxO1xuXG4gICAgICAgIC8vIHByaXZhdGUgbWV0aG9kc1xuXG4gICAgICAgIHZhciBzZXRDb2xvcnMgPSBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICAgICAgICAgIGNvbG9ycyA9IGNvbG9ycyB8fCBbJyNmZmYnLCAnIzAwMCddO1xuICAgICAgICAgICAgaWYgKGNvbG9ycyAmJiB0eXBlJGooY29sb3JzKSA9PT0gJ3N0cmluZycgJiYgY2hyb21hXzEuYnJld2VyICYmXG4gICAgICAgICAgICAgICAgY2hyb21hXzEuYnJld2VyW2NvbG9ycy50b0xvd2VyQ2FzZSgpXSkge1xuICAgICAgICAgICAgICAgIGNvbG9ycyA9IGNocm9tYV8xLmJyZXdlcltjb2xvcnMudG9Mb3dlckNhc2UoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZSRqKGNvbG9ycykgPT09ICdhcnJheScpIHtcbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgc2luZ2xlIGNvbG9yXG4gICAgICAgICAgICAgICAgaWYgKGNvbG9ycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3JzID0gW2NvbG9yc1swXSwgY29sb3JzWzBdXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBhIGNvcHkgb2YgdGhlIGNvbG9yc1xuICAgICAgICAgICAgICAgIGNvbG9ycyA9IGNvbG9ycy5zbGljZSgwKTtcbiAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IHRvIGNocm9tYSBjbGFzc2VzXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYz0wOyBjPGNvbG9ycy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcnNbY10gPSBjaHJvbWFfMShjb2xvcnNbY10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBhdXRvLWZpbGwgY29sb3IgcG9zaXRpb25cbiAgICAgICAgICAgICAgICBfcG9zLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYyQxPTA7IGMkMTxjb2xvcnMubGVuZ3RoOyBjJDErKykge1xuICAgICAgICAgICAgICAgICAgICBfcG9zLnB1c2goYyQxLyhjb2xvcnMubGVuZ3RoLTEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNldENhY2hlKCk7XG4gICAgICAgICAgICByZXR1cm4gX2NvbG9ycyA9IGNvbG9ycztcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0Q2xhc3MgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKF9jbGFzc2VzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IF9jbGFzc2VzLmxlbmd0aC0xO1xuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA8IG4gJiYgdmFsdWUgPj0gX2NsYXNzZXNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaS0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHRtYXAgPSBmdW5jdGlvbiAodCkgeyByZXR1cm4gdDsgfTtcblxuICAgICAgICAvLyBjb25zdCBjbGFzc2lmeVZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gICAgIGxldCB2YWwgPSB2YWx1ZTtcbiAgICAgICAgLy8gICAgIGlmIChfY2xhc3Nlcy5sZW5ndGggPiAyKSB7XG4gICAgICAgIC8vICAgICAgICAgY29uc3QgbiA9IF9jbGFzc2VzLmxlbmd0aC0xO1xuICAgICAgICAvLyAgICAgICAgIGNvbnN0IGkgPSBnZXRDbGFzcyh2YWx1ZSk7XG4gICAgICAgIC8vICAgICAgICAgY29uc3QgbWluYyA9IF9jbGFzc2VzWzBdICsgKChfY2xhc3Nlc1sxXS1fY2xhc3Nlc1swXSkgKiAoMCArIChfc3ByZWFkICogMC41KSkpOyAgLy8gY2VudGVyIG9mIDFzdCBjbGFzc1xuICAgICAgICAvLyAgICAgICAgIGNvbnN0IG1heGMgPSBfY2xhc3Nlc1tuLTFdICsgKChfY2xhc3Nlc1tuXS1fY2xhc3Nlc1tuLTFdKSAqICgxIC0gKF9zcHJlYWQgKiAwLjUpKSk7ICAvLyBjZW50ZXIgb2YgbGFzdCBjbGFzc1xuICAgICAgICAvLyAgICAgICAgIHZhbCA9IF9taW4gKyAoKCgoX2NsYXNzZXNbaV0gKyAoKF9jbGFzc2VzW2krMV0gLSBfY2xhc3Nlc1tpXSkgKiAwLjUpKSAtIG1pbmMpIC8gKG1heGMtbWluYykpICogKF9tYXggLSBfbWluKSk7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vICAgICByZXR1cm4gdmFsO1xuICAgICAgICAvLyB9O1xuXG4gICAgICAgIHZhciBnZXRDb2xvciA9IGZ1bmN0aW9uKHZhbCwgYnlwYXNzTWFwKSB7XG4gICAgICAgICAgICB2YXIgY29sLCB0O1xuICAgICAgICAgICAgaWYgKGJ5cGFzc01hcCA9PSBudWxsKSB7IGJ5cGFzc01hcCA9IGZhbHNlOyB9XG4gICAgICAgICAgICBpZiAoaXNOYU4odmFsKSB8fCAodmFsID09PSBudWxsKSkgeyByZXR1cm4gX25hY29sOyB9XG4gICAgICAgICAgICBpZiAoIWJ5cGFzc01hcCkge1xuICAgICAgICAgICAgICAgIGlmIChfY2xhc3NlcyAmJiAoX2NsYXNzZXMubGVuZ3RoID4gMikpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgY2xhc3NcbiAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBnZXRDbGFzcyh2YWwpO1xuICAgICAgICAgICAgICAgICAgICB0ID0gYyAvIChfY2xhc3Nlcy5sZW5ndGgtMik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfbWF4ICE9PSBfbWluKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGp1c3QgaW50ZXJwb2xhdGUgYmV0d2VlbiBtaW4vbWF4XG4gICAgICAgICAgICAgICAgICAgIHQgPSAodmFsIC0gX21pbikgLyAoX21heCAtIF9taW4pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHQgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdCA9IHZhbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFieXBhc3NNYXApIHtcbiAgICAgICAgICAgICAgICB0ID0gdG1hcCh0KTsgIC8vIGxpZ2h0bmVzcyBjb3JyZWN0aW9uXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfZ2FtbWEgIT09IDEpIHsgdCA9IHBvdyQ1KHQsIF9nYW1tYSk7IH1cblxuICAgICAgICAgICAgdCA9IF9wYWRkaW5nWzBdICsgKHQgKiAoMSAtIF9wYWRkaW5nWzBdIC0gX3BhZGRpbmdbMV0pKTtcblxuICAgICAgICAgICAgdCA9IE1hdGgubWluKDEsIE1hdGgubWF4KDAsIHQpKTtcblxuICAgICAgICAgICAgdmFyIGsgPSBNYXRoLmZsb29yKHQgKiAxMDAwMCk7XG5cbiAgICAgICAgICAgIGlmIChfdXNlQ2FjaGUgJiYgX2NvbG9yQ2FjaGVba10pIHtcbiAgICAgICAgICAgICAgICBjb2wgPSBfY29sb3JDYWNoZVtrXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUkaihfY29sb3JzKSA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgICAgICAgICAvL2ZvciBpIGluIFswLi5fcG9zLmxlbmd0aC0xXVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8X3Bvcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBfcG9zW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgPD0gcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbCA9IF9jb2xvcnNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHQgPj0gcCkgJiYgKGkgPT09IChfcG9zLmxlbmd0aC0xKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wgPSBfY29sb3JzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgPiBwICYmIHQgPCBfcG9zW2krMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ID0gKHQtcCkvKF9wb3NbaSsxXS1wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wgPSBjaHJvbWFfMS5pbnRlcnBvbGF0ZShfY29sb3JzW2ldLCBfY29sb3JzW2krMV0sIHQsIF9tb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSRqKF9jb2xvcnMpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbCA9IF9jb2xvcnModCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChfdXNlQ2FjaGUpIHsgX2NvbG9yQ2FjaGVba10gPSBjb2w7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb2w7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJlc2V0Q2FjaGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfY29sb3JDYWNoZSA9IHt9OyB9O1xuXG4gICAgICAgIHNldENvbG9ycyhjb2xvcnMpO1xuXG4gICAgICAgIC8vIHB1YmxpYyBpbnRlcmZhY2VcblxuICAgICAgICB2YXIgZiA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgIHZhciBjID0gY2hyb21hXzEoZ2V0Q29sb3IodikpO1xuICAgICAgICAgICAgaWYgKF9vdXQgJiYgY1tfb3V0XSkgeyByZXR1cm4gY1tfb3V0XSgpOyB9IGVsc2UgeyByZXR1cm4gYzsgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGYuY2xhc3NlcyA9IGZ1bmN0aW9uKGNsYXNzZXMpIHtcbiAgICAgICAgICAgIGlmIChjbGFzc2VzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSRqKGNsYXNzZXMpID09PSAnYXJyYXknKSB7XG4gICAgICAgICAgICAgICAgICAgIF9jbGFzc2VzID0gY2xhc3NlcztcbiAgICAgICAgICAgICAgICAgICAgX2RvbWFpbiA9IFtjbGFzc2VzWzBdLCBjbGFzc2VzW2NsYXNzZXMubGVuZ3RoLTFdXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGNocm9tYV8xLmFuYWx5emUoX2RvbWFpbik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc2VzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xhc3NlcyA9IFtkLm1pbiwgZC5tYXhdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NsYXNzZXMgPSBjaHJvbWFfMS5saW1pdHMoZCwgJ2UnLCBjbGFzc2VzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfY2xhc3NlcztcbiAgICAgICAgfTtcblxuXG4gICAgICAgIGYuZG9tYWluID0gZnVuY3Rpb24oZG9tYWluKSB7XG4gICAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2RvbWFpbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9taW4gPSBkb21haW5bMF07XG4gICAgICAgICAgICBfbWF4ID0gZG9tYWluW2RvbWFpbi5sZW5ndGgtMV07XG4gICAgICAgICAgICBfcG9zID0gW107XG4gICAgICAgICAgICB2YXIgayA9IF9jb2xvcnMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKChkb21haW4ubGVuZ3RoID09PSBrKSAmJiAoX21pbiAhPT0gX21heCkpIHtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgcG9zaXRpb25zXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBBcnJheS5mcm9tKGRvbWFpbik7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gbGlzdFtpXTtcblxuICAgICAgICAgICAgICAgICAgX3Bvcy5wdXNoKChkLV9taW4pIC8gKF9tYXgtX21pbikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYz0wOyBjPGs7IGMrKykge1xuICAgICAgICAgICAgICAgICAgICBfcG9zLnB1c2goYy8oay0xKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2RvbWFpbiA9IFtfbWluLCBfbWF4XTtcbiAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICB9O1xuXG4gICAgICAgIGYubW9kZSA9IGZ1bmN0aW9uKF9tKSB7XG4gICAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX21vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfbW9kZSA9IF9tO1xuICAgICAgICAgICAgcmVzZXRDYWNoZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5yYW5nZSA9IGZ1bmN0aW9uKGNvbG9ycywgX3Bvcykge1xuICAgICAgICAgICAgc2V0Q29sb3JzKGNvbG9ycywgX3Bvcyk7XG4gICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgfTtcblxuICAgICAgICBmLm91dCA9IGZ1bmN0aW9uKF9vKSB7XG4gICAgICAgICAgICBfb3V0ID0gX287XG4gICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgfTtcblxuICAgICAgICBmLnNwcmVhZCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zcHJlYWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfc3ByZWFkID0gdmFsO1xuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5jb3JyZWN0TGlnaHRuZXNzID0gZnVuY3Rpb24odikge1xuICAgICAgICAgICAgaWYgKHYgPT0gbnVsbCkgeyB2ID0gdHJ1ZTsgfVxuICAgICAgICAgICAgX2NvcnJlY3RMaWdodG5lc3MgPSB2O1xuICAgICAgICAgICAgcmVzZXRDYWNoZSgpO1xuICAgICAgICAgICAgaWYgKF9jb3JyZWN0TGlnaHRuZXNzKSB7XG4gICAgICAgICAgICAgICAgdG1hcCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIEwwID0gZ2V0Q29sb3IoMCwgdHJ1ZSkubGFiKClbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBMMSA9IGdldENvbG9yKDEsIHRydWUpLmxhYigpWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9sID0gTDAgPiBMMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIExfYWN0dWFsID0gZ2V0Q29sb3IodCwgdHJ1ZSkubGFiKClbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBMX2lkZWFsID0gTDAgKyAoKEwxIC0gTDApICogdCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBMX2RpZmYgPSBMX2FjdHVhbCAtIExfaWRlYWw7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0MCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0MSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXhfaXRlciA9IDIwO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKE1hdGguYWJzKExfZGlmZikgPiAxZS0yKSAmJiAobWF4X2l0ZXItLSA+IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvbCkgeyBMX2RpZmYgKj0gLTE7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTF9kaWZmIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0MCA9IHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgKz0gKHQxIC0gdCkgKiAwLjU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdDEgPSB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ICs9ICh0MCAtIHQpICogMC41O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMX2FjdHVhbCA9IGdldENvbG9yKHQsIHRydWUpLmxhYigpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBMX2RpZmYgPSBMX2FjdHVhbCAtIExfaWRlYWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRtYXAgPSBmdW5jdGlvbiAodCkgeyByZXR1cm4gdDsgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICB9O1xuXG4gICAgICAgIGYucGFkZGluZyA9IGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICAgIGlmIChwICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSRqKHApID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICBwID0gW3AscF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF9wYWRkaW5nID0gcDtcbiAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9wYWRkaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGYuY29sb3JzID0gZnVuY3Rpb24obnVtQ29sb3JzLCBvdXQpIHtcbiAgICAgICAgICAgIC8vIElmIG5vIGFyZ3VtZW50cyBhcmUgZ2l2ZW4sIHJldHVybiB0aGUgb3JpZ2luYWwgY29sb3JzIHRoYXQgd2VyZSBwcm92aWRlZFxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7IG91dCA9ICdoZXgnOyB9XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbG9ycy5zbGljZSgwKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1Db2xvcnMgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBbZigwLjUpXTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1Db2xvcnMgPiAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRtID0gX2RvbWFpblswXTtcbiAgICAgICAgICAgICAgICB2YXIgZGQgPSBfZG9tYWluWzFdIC0gZG07XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gX19yYW5nZV9fKDAsIG51bUNvbG9ycywgZmFsc2UpLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gZiggZG0gKyAoKGkvKG51bUNvbG9ycy0xKSkgKiBkZCkgKTsgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIHJldHVybnMgYWxsIGNvbG9ycyBiYXNlZCBvbiB0aGUgZGVmaW5lZCBjbGFzc2VzXG4gICAgICAgICAgICAgICAgY29sb3JzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHNhbXBsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoX2NsYXNzZXMgJiYgKF9jbGFzc2VzLmxlbmd0aCA+IDIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxLCBlbmQgPSBfY2xhc3Nlcy5sZW5ndGgsIGFzYyA9IDEgPD0gZW5kOyBhc2MgPyBpIDwgZW5kIDogaSA+IGVuZDsgYXNjID8gaSsrIDogaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYW1wbGVzLnB1c2goKF9jbGFzc2VzW2ktMV0rX2NsYXNzZXNbaV0pKjAuNSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzYW1wbGVzID0gX2RvbWFpbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gc2FtcGxlcy5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGYodik7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2hyb21hXzFbb3V0XSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGNbb3V0XSgpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5jYWNoZSA9IGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgIGlmIChjICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBfdXNlQ2FjaGUgPSBjO1xuICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3VzZUNhY2hlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGYuZ2FtbWEgPSBmdW5jdGlvbihnKSB7XG4gICAgICAgICAgICBpZiAoZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgX2dhbW1hID0gZztcbiAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9nYW1tYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmLm5vZGF0YSA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIGlmIChkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBfbmFjb2wgPSBjaHJvbWFfMShkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9uYWNvbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZjtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gX19yYW5nZV9fKGxlZnQsIHJpZ2h0LCBpbmNsdXNpdmUpIHtcbiAgICAgIHZhciByYW5nZSA9IFtdO1xuICAgICAgdmFyIGFzY2VuZGluZyA9IGxlZnQgPCByaWdodDtcbiAgICAgIHZhciBlbmQgPSAhaW5jbHVzaXZlID8gcmlnaHQgOiBhc2NlbmRpbmcgPyByaWdodCArIDEgOiByaWdodCAtIDE7XG4gICAgICBmb3IgKHZhciBpID0gbGVmdDsgYXNjZW5kaW5nID8gaSA8IGVuZCA6IGkgPiBlbmQ7IGFzY2VuZGluZyA/IGkrKyA6IGktLSkge1xuICAgICAgICByYW5nZS5wdXNoKGkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cblxuICAgIC8vXG4gICAgLy8gaW50ZXJwb2xhdGVzIGJldHdlZW4gYSBzZXQgb2YgY29sb3JzIHV6aW5nIGEgYmV6aWVyIHNwbGluZVxuICAgIC8vXG5cbiAgICAvLyBAcmVxdWlyZXMgdXRpbHMgbGFiXG5cblxuXG5cbiAgICB2YXIgYmV6aWVyID0gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgICAgIHZhciBhc3NpZ24sIGFzc2lnbiQxLCBhc3NpZ24kMjtcblxuICAgICAgICB2YXIgSSwgbGFiMCwgbGFiMSwgbGFiMjtcbiAgICAgICAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gbmV3IENvbG9yXzEoYyk7IH0pO1xuICAgICAgICBpZiAoY29sb3JzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgLy8gbGluZWFyIGludGVycG9sYXRpb25cbiAgICAgICAgICAgIChhc3NpZ24gPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmxhYigpOyB9KSwgbGFiMCA9IGFzc2lnblswXSwgbGFiMSA9IGFzc2lnblsxXSk7XG4gICAgICAgICAgICBJID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHZhciBsYWIgPSAoWzAsIDEsIDJdLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gbGFiMFtpXSArICh0ICogKGxhYjFbaV0gLSBsYWIwW2ldKSk7IH0pKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yXzEobGFiLCAnbGFiJyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGNvbG9ycy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgIC8vIHF1YWRyYXRpYyBiZXppZXIgaW50ZXJwb2xhdGlvblxuICAgICAgICAgICAgKGFzc2lnbiQxID0gY29sb3JzLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5sYWIoKTsgfSksIGxhYjAgPSBhc3NpZ24kMVswXSwgbGFiMSA9IGFzc2lnbiQxWzFdLCBsYWIyID0gYXNzaWduJDFbMl0pO1xuICAgICAgICAgICAgSSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFiID0gKFswLCAxLCAyXS5tYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuICgoMS10KSooMS10KSAqIGxhYjBbaV0pICsgKDIgKiAoMS10KSAqIHQgKiBsYWIxW2ldKSArICh0ICogdCAqIGxhYjJbaV0pOyB9KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcl8xKGxhYiwgJ2xhYicpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2xvcnMubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICAvLyBjdWJpYyBiZXppZXIgaW50ZXJwb2xhdGlvblxuICAgICAgICAgICAgdmFyIGxhYjM7XG4gICAgICAgICAgICAoYXNzaWduJDIgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmxhYigpOyB9KSwgbGFiMCA9IGFzc2lnbiQyWzBdLCBsYWIxID0gYXNzaWduJDJbMV0sIGxhYjIgPSBhc3NpZ24kMlsyXSwgbGFiMyA9IGFzc2lnbiQyWzNdKTtcbiAgICAgICAgICAgIEkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhYiA9IChbMCwgMSwgMl0ubWFwKGZ1bmN0aW9uIChpKSB7IHJldHVybiAoKDEtdCkqKDEtdCkqKDEtdCkgKiBsYWIwW2ldKSArICgzICogKDEtdCkgKiAoMS10KSAqIHQgKiBsYWIxW2ldKSArICgzICogKDEtdCkgKiB0ICogdCAqIGxhYjJbaV0pICsgKHQqdCp0ICogbGFiM1tpXSk7IH0pKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yXzEobGFiLCAnbGFiJyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGNvbG9ycy5sZW5ndGggPT09IDUpIHtcbiAgICAgICAgICAgIHZhciBJMCA9IGJlemllcihjb2xvcnMuc2xpY2UoMCwgMykpO1xuICAgICAgICAgICAgdmFyIEkxID0gYmV6aWVyKGNvbG9ycy5zbGljZSgyLCA1KSk7XG4gICAgICAgICAgICBJID0gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIGlmICh0IDwgMC41KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJMCh0KjIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJMSgodC0wLjUpKjIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEk7XG4gICAgfTtcblxuICAgIHZhciBiZXppZXJfMSA9IGZ1bmN0aW9uIChjb2xvcnMpIHtcbiAgICAgICAgdmFyIGYgPSBiZXppZXIoY29sb3JzKTtcbiAgICAgICAgZi5zY2FsZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNjYWxlKGYpOyB9O1xuICAgICAgICByZXR1cm4gZjtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBpbnRlcnBvbGF0ZXMgYmV0d2VlbiBhIHNldCBvZiBjb2xvcnMgdXppbmcgYSBiZXppZXIgc3BsaW5lXG4gICAgICogYmxlbmQgbW9kZSBmb3JtdWxhcyB0YWtlbiBmcm9tIGh0dHA6Ly93d3cudmVudHVyZS13YXJlLmNvbS9rZXZpbi9jb2RpbmcvbGV0cy1sZWFybi1tYXRoLXBob3Rvc2hvcC1ibGVuZC1tb2Rlcy9cbiAgICAgKi9cblxuXG5cblxuICAgIHZhciBibGVuZCA9IGZ1bmN0aW9uIChib3R0b20sIHRvcCwgbW9kZSkge1xuICAgICAgICBpZiAoIWJsZW5kW21vZGVdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gYmxlbmQgbW9kZSAnICsgbW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJsZW5kW21vZGVdKGJvdHRvbSwgdG9wKTtcbiAgICB9O1xuXG4gICAgdmFyIGJsZW5kX2YgPSBmdW5jdGlvbiAoZikgeyByZXR1cm4gZnVuY3Rpb24gKGJvdHRvbSx0b3ApIHtcbiAgICAgICAgICAgIHZhciBjMCA9IGNocm9tYV8xKHRvcCkucmdiKCk7XG4gICAgICAgICAgICB2YXIgYzEgPSBjaHJvbWFfMShib3R0b20pLnJnYigpO1xuICAgICAgICAgICAgcmV0dXJuIGNocm9tYV8xLnJnYihmKGMwLCBjMSkpO1xuICAgICAgICB9OyB9O1xuXG4gICAgdmFyIGVhY2ggPSBmdW5jdGlvbiAoZikgeyByZXR1cm4gZnVuY3Rpb24gKGMwLCBjMSkge1xuICAgICAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICAgICAgb3V0WzBdID0gZihjMFswXSwgYzFbMF0pO1xuICAgICAgICAgICAgb3V0WzFdID0gZihjMFsxXSwgYzFbMV0pO1xuICAgICAgICAgICAgb3V0WzJdID0gZihjMFsyXSwgYzFbMl0pO1xuICAgICAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgICAgfTsgfTtcblxuICAgIHZhciBub3JtYWwgPSBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYTsgfTtcbiAgICB2YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAoYSxiKSB7IHJldHVybiBhICogYiAvIDI1NTsgfTtcbiAgICB2YXIgZGFya2VuJDEgPSBmdW5jdGlvbiAoYSxiKSB7IHJldHVybiBhID4gYiA/IGIgOiBhOyB9O1xuICAgIHZhciBsaWdodGVuID0gZnVuY3Rpb24gKGEsYikgeyByZXR1cm4gYSA+IGIgPyBhIDogYjsgfTtcbiAgICB2YXIgc2NyZWVuID0gZnVuY3Rpb24gKGEsYikgeyByZXR1cm4gMjU1ICogKDEgLSAoMS1hLzI1NSkgKiAoMS1iLzI1NSkpOyB9O1xuICAgIHZhciBvdmVybGF5ID0gZnVuY3Rpb24gKGEsYikgeyByZXR1cm4gYiA8IDEyOCA/IDIgKiBhICogYiAvIDI1NSA6IDI1NSAqICgxIC0gMiAqICgxIC0gYSAvIDI1NSApICogKCAxIC0gYiAvIDI1NSApKTsgfTtcbiAgICB2YXIgYnVybiA9IGZ1bmN0aW9uIChhLGIpIHsgcmV0dXJuIDI1NSAqICgxIC0gKDEgLSBiIC8gMjU1KSAvIChhLzI1NSkpOyB9O1xuICAgIHZhciBkb2RnZSA9IGZ1bmN0aW9uIChhLGIpIHtcbiAgICAgICAgaWYgKGEgPT09IDI1NSkgeyByZXR1cm4gMjU1OyB9XG4gICAgICAgIGEgPSAyNTUgKiAoYiAvIDI1NSkgLyAoMSAtIGEgLyAyNTUpO1xuICAgICAgICByZXR1cm4gYSA+IDI1NSA/IDI1NSA6IGFcbiAgICB9O1xuXG4gICAgLy8gIyBhZGQgPSAoYSxiKSAtPlxuICAgIC8vICMgICAgIGlmIChhICsgYiA+IDI1NSkgdGhlbiAyNTUgZWxzZSBhICsgYlxuXG4gICAgYmxlbmQubm9ybWFsID0gYmxlbmRfZihlYWNoKG5vcm1hbCkpO1xuICAgIGJsZW5kLm11bHRpcGx5ID0gYmxlbmRfZihlYWNoKG11bHRpcGx5KSk7XG4gICAgYmxlbmQuc2NyZWVuID0gYmxlbmRfZihlYWNoKHNjcmVlbikpO1xuICAgIGJsZW5kLm92ZXJsYXkgPSBibGVuZF9mKGVhY2gob3ZlcmxheSkpO1xuICAgIGJsZW5kLmRhcmtlbiA9IGJsZW5kX2YoZWFjaChkYXJrZW4kMSkpO1xuICAgIGJsZW5kLmxpZ2h0ZW4gPSBibGVuZF9mKGVhY2gobGlnaHRlbikpO1xuICAgIGJsZW5kLmRvZGdlID0gYmxlbmRfZihlYWNoKGRvZGdlKSk7XG4gICAgYmxlbmQuYnVybiA9IGJsZW5kX2YoZWFjaChidXJuKSk7XG4gICAgLy8gYmxlbmQuYWRkID0gYmxlbmRfZihlYWNoKGFkZCkpO1xuXG4gICAgdmFyIGJsZW5kXzEgPSBibGVuZDtcblxuICAgIC8vIGN1YmVoZWxpeCBpbnRlcnBvbGF0aW9uXG4gICAgLy8gYmFzZWQgb24gRC5BLiBHcmVlbiBcIkEgY29sb3VyIHNjaGVtZSBmb3IgdGhlIGRpc3BsYXkgb2YgYXN0cm9ub21pY2FsIGludGVuc2l0eSBpbWFnZXNcIlxuICAgIC8vIGh0dHA6Ly9hc3Ryb24tc29jLmluL2J1bGxldGluLzExSnVuZS8yODkzOTIwMTEucGRmXG5cbiAgICB2YXIgdHlwZSRrID0gdXRpbHMudHlwZTtcbiAgICB2YXIgY2xpcF9yZ2IkMyA9IHV0aWxzLmNsaXBfcmdiO1xuICAgIHZhciBUV09QSSQyID0gdXRpbHMuVFdPUEk7XG4gICAgdmFyIHBvdyQ2ID0gTWF0aC5wb3c7XG4gICAgdmFyIHNpbiQyID0gTWF0aC5zaW47XG4gICAgdmFyIGNvcyQzID0gTWF0aC5jb3M7XG5cblxuICAgIHZhciBjdWJlaGVsaXggPSBmdW5jdGlvbihzdGFydCwgcm90YXRpb25zLCBodWUsIGdhbW1hLCBsaWdodG5lc3MpIHtcbiAgICAgICAgaWYgKCBzdGFydCA9PT0gdm9pZCAwICkgc3RhcnQ9MzAwO1xuICAgICAgICBpZiAoIHJvdGF0aW9ucyA9PT0gdm9pZCAwICkgcm90YXRpb25zPS0xLjU7XG4gICAgICAgIGlmICggaHVlID09PSB2b2lkIDAgKSBodWU9MTtcbiAgICAgICAgaWYgKCBnYW1tYSA9PT0gdm9pZCAwICkgZ2FtbWE9MTtcbiAgICAgICAgaWYgKCBsaWdodG5lc3MgPT09IHZvaWQgMCApIGxpZ2h0bmVzcz1bMCwxXTtcblxuICAgICAgICB2YXIgZGggPSAwLCBkbDtcbiAgICAgICAgaWYgKHR5cGUkayhsaWdodG5lc3MpID09PSAnYXJyYXknKSB7XG4gICAgICAgICAgICBkbCA9IGxpZ2h0bmVzc1sxXSAtIGxpZ2h0bmVzc1swXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRsID0gMDtcbiAgICAgICAgICAgIGxpZ2h0bmVzcyA9IFtsaWdodG5lc3MsIGxpZ2h0bmVzc107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZiA9IGZ1bmN0aW9uKGZyYWN0KSB7XG4gICAgICAgICAgICB2YXIgYSA9IFRXT1BJJDIgKiAoKChzdGFydCsxMjApLzM2MCkgKyAocm90YXRpb25zICogZnJhY3QpKTtcbiAgICAgICAgICAgIHZhciBsID0gcG93JDYobGlnaHRuZXNzWzBdICsgKGRsICogZnJhY3QpLCBnYW1tYSk7XG4gICAgICAgICAgICB2YXIgaCA9IGRoICE9PSAwID8gaHVlWzBdICsgKGZyYWN0ICogZGgpIDogaHVlO1xuICAgICAgICAgICAgdmFyIGFtcCA9IChoICogbCAqICgxLWwpKSAvIDI7XG4gICAgICAgICAgICB2YXIgY29zX2EgPSBjb3MkMyhhKTtcbiAgICAgICAgICAgIHZhciBzaW5fYSA9IHNpbiQyKGEpO1xuICAgICAgICAgICAgdmFyIHIgPSBsICsgKGFtcCAqICgoLTAuMTQ4NjEgKiBjb3NfYSkgKyAoMS43ODI3Nyogc2luX2EpKSk7XG4gICAgICAgICAgICB2YXIgZyA9IGwgKyAoYW1wICogKCgtMC4yOTIyNyAqIGNvc19hKSAtICgwLjkwNjQ5KiBzaW5fYSkpKTtcbiAgICAgICAgICAgIHZhciBiID0gbCArIChhbXAgKiAoKzEuOTcyOTQgKiBjb3NfYSkpO1xuICAgICAgICAgICAgcmV0dXJuIGNocm9tYV8xKGNsaXBfcmdiJDMoW3IqMjU1LGcqMjU1LGIqMjU1LDFdKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5zdGFydCA9IGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgIGlmICgocyA9PSBudWxsKSkgeyByZXR1cm4gc3RhcnQ7IH1cbiAgICAgICAgICAgIHN0YXJ0ID0gcztcbiAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICB9O1xuXG4gICAgICAgIGYucm90YXRpb25zID0gZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgaWYgKChyID09IG51bGwpKSB7IHJldHVybiByb3RhdGlvbnM7IH1cbiAgICAgICAgICAgIHJvdGF0aW9ucyA9IHI7XG4gICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgfTtcblxuICAgICAgICBmLmdhbW1hID0gZnVuY3Rpb24oZykge1xuICAgICAgICAgICAgaWYgKChnID09IG51bGwpKSB7IHJldHVybiBnYW1tYTsgfVxuICAgICAgICAgICAgZ2FtbWEgPSBnO1xuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5odWUgPSBmdW5jdGlvbihoKSB7XG4gICAgICAgICAgICBpZiAoKGggPT0gbnVsbCkpIHsgcmV0dXJuIGh1ZTsgfVxuICAgICAgICAgICAgaHVlID0gaDtcbiAgICAgICAgICAgIGlmICh0eXBlJGsoaHVlKSA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgICAgIGRoID0gaHVlWzFdIC0gaHVlWzBdO1xuICAgICAgICAgICAgICAgIGlmIChkaCA9PT0gMCkgeyBodWUgPSBodWVbMV07IH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5saWdodG5lc3MgPSBmdW5jdGlvbihoKSB7XG4gICAgICAgICAgICBpZiAoKGggPT0gbnVsbCkpIHsgcmV0dXJuIGxpZ2h0bmVzczsgfVxuICAgICAgICAgICAgaWYgKHR5cGUkayhoKSA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgICAgIGxpZ2h0bmVzcyA9IGg7XG4gICAgICAgICAgICAgICAgZGwgPSBoWzFdIC0gaFswXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGlnaHRuZXNzID0gW2gsaF07XG4gICAgICAgICAgICAgICAgZGwgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH07XG5cbiAgICAgICAgZi5zY2FsZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNocm9tYV8xLnNjYWxlKGYpOyB9O1xuXG4gICAgICAgIGYuaHVlKGh1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGY7XG4gICAgfTtcblxuICAgIHZhciBkaWdpdHMgPSAnMDEyMzQ1Njc4OWFiY2RlZic7XG5cbiAgICB2YXIgZmxvb3IkMiA9IE1hdGguZmxvb3I7XG4gICAgdmFyIHJhbmRvbSA9IE1hdGgucmFuZG9tO1xuXG4gICAgdmFyIHJhbmRvbV8xID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29kZSA9ICcjJztcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPDY7IGkrKykge1xuICAgICAgICAgICAgY29kZSArPSBkaWdpdHMuY2hhckF0KGZsb29yJDIocmFuZG9tKCkgKiAxNikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3JfMShjb2RlLCAnaGV4Jyk7XG4gICAgfTtcblxuICAgIHZhciBsb2ckMSA9IE1hdGgubG9nO1xuICAgIHZhciBwb3ckNyA9IE1hdGgucG93O1xuICAgIHZhciBmbG9vciQzID0gTWF0aC5mbG9vcjtcbiAgICB2YXIgYWJzID0gTWF0aC5hYnM7XG5cblxuICAgIHZhciBhbmFseXplID0gZnVuY3Rpb24gKGRhdGEsIGtleSkge1xuICAgICAgICBpZiAoIGtleSA9PT0gdm9pZCAwICkga2V5PW51bGw7XG5cbiAgICAgICAgdmFyIHIgPSB7XG4gICAgICAgICAgICBtaW46IE51bWJlci5NQVhfVkFMVUUsXG4gICAgICAgICAgICBtYXg6IE51bWJlci5NQVhfVkFMVUUqLTEsXG4gICAgICAgICAgICBzdW06IDAsXG4gICAgICAgICAgICB2YWx1ZXM6IFtdLFxuICAgICAgICAgICAgY291bnQ6IDBcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGUoZGF0YSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBkYXRhID0gT2JqZWN0LnZhbHVlcyhkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgaWYgKGtleSAmJiB0eXBlKHZhbCkgPT09ICdvYmplY3QnKSB7IHZhbCA9IHZhbFtrZXldOyB9XG4gICAgICAgICAgICBpZiAodmFsICE9PSB1bmRlZmluZWQgJiYgdmFsICE9PSBudWxsICYmICFpc05hTih2YWwpKSB7XG4gICAgICAgICAgICAgICAgci52YWx1ZXMucHVzaCh2YWwpO1xuICAgICAgICAgICAgICAgIHIuc3VtICs9IHZhbDtcbiAgICAgICAgICAgICAgICBpZiAodmFsIDwgci5taW4pIHsgci5taW4gPSB2YWw7IH1cbiAgICAgICAgICAgICAgICBpZiAodmFsID4gci5tYXgpIHsgci5tYXggPSB2YWw7IH1cbiAgICAgICAgICAgICAgICByLmNvdW50ICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHIuZG9tYWluID0gW3IubWluLCByLm1heF07XG5cbiAgICAgICAgci5saW1pdHMgPSBmdW5jdGlvbiAobW9kZSwgbnVtKSB7IHJldHVybiBsaW1pdHMociwgbW9kZSwgbnVtKTsgfTtcblxuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG5cbiAgICB2YXIgbGltaXRzID0gZnVuY3Rpb24gKGRhdGEsIG1vZGUsIG51bSkge1xuICAgICAgICBpZiAoIG1vZGUgPT09IHZvaWQgMCApIG1vZGU9J2VxdWFsJztcbiAgICAgICAgaWYgKCBudW0gPT09IHZvaWQgMCApIG51bT03O1xuXG4gICAgICAgIGlmICh0eXBlKGRhdGEpID09ICdhcnJheScpIHtcbiAgICAgICAgICAgIGRhdGEgPSBhbmFseXplKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtaW4gPSBkYXRhLm1pbjtcbiAgICAgICAgdmFyIG1heCA9IGRhdGEubWF4O1xuICAgICAgICB2YXIgdmFsdWVzID0gZGF0YS52YWx1ZXMuc29ydChmdW5jdGlvbiAoYSxiKSB7IHJldHVybiBhLWI7IH0pO1xuXG4gICAgICAgIGlmIChudW0gPT09IDEpIHsgcmV0dXJuIFttaW4sbWF4XTsgfVxuXG4gICAgICAgIHZhciBsaW1pdHMgPSBbXTtcblxuICAgICAgICBpZiAobW9kZS5zdWJzdHIoMCwxKSA9PT0gJ2MnKSB7IC8vIGNvbnRpbnVvdXNcbiAgICAgICAgICAgIGxpbWl0cy5wdXNoKG1pbik7XG4gICAgICAgICAgICBsaW1pdHMucHVzaChtYXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vZGUuc3Vic3RyKDAsMSkgPT09ICdlJykgeyAvLyBlcXVhbCBpbnRlcnZhbFxuICAgICAgICAgICAgbGltaXRzLnB1c2gobWluKTtcbiAgICAgICAgICAgIGZvciAodmFyIGk9MTsgaTxudW07IGkrKykge1xuICAgICAgICAgICAgICAgIGxpbWl0cy5wdXNoKG1pbisoKGkvbnVtKSoobWF4LW1pbikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpbWl0cy5wdXNoKG1heCk7XG4gICAgICAgIH1cblxuICAgICAgICBlbHNlIGlmIChtb2RlLnN1YnN0cigwLDEpID09PSAnbCcpIHsgLy8gbG9nIHNjYWxlXG4gICAgICAgICAgICBpZiAobWluIDw9IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvZ2FyaXRobWljIHNjYWxlcyBhcmUgb25seSBwb3NzaWJsZSBmb3IgdmFsdWVzID4gMCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1pbl9sb2cgPSBNYXRoLkxPRzEwRSAqIGxvZyQxKG1pbik7XG4gICAgICAgICAgICB2YXIgbWF4X2xvZyA9IE1hdGguTE9HMTBFICogbG9nJDEobWF4KTtcbiAgICAgICAgICAgIGxpbWl0cy5wdXNoKG1pbik7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDE9MTsgaSQxPG51bTsgaSQxKyspIHtcbiAgICAgICAgICAgICAgICBsaW1pdHMucHVzaChwb3ckNygxMCwgbWluX2xvZyArICgoaSQxL251bSkgKiAobWF4X2xvZyAtIG1pbl9sb2cpKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGltaXRzLnB1c2gobWF4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2UgaWYgKG1vZGUuc3Vic3RyKDAsMSkgPT09ICdxJykgeyAvLyBxdWFudGlsZSBzY2FsZVxuICAgICAgICAgICAgbGltaXRzLnB1c2gobWluKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMj0xOyBpJDI8bnVtOyBpJDIrKykge1xuICAgICAgICAgICAgICAgIHZhciBwID0gKCh2YWx1ZXMubGVuZ3RoLTEpICogaSQyKS9udW07XG4gICAgICAgICAgICAgICAgdmFyIHBiID0gZmxvb3IkMyhwKTtcbiAgICAgICAgICAgICAgICBpZiAocGIgPT09IHApIHtcbiAgICAgICAgICAgICAgICAgICAgbGltaXRzLnB1c2godmFsdWVzW3BiXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gcCA+IHBiXG4gICAgICAgICAgICAgICAgICAgIHZhciBwciA9IHAgLSBwYjtcbiAgICAgICAgICAgICAgICAgICAgbGltaXRzLnB1c2goKHZhbHVlc1twYl0qKDEtcHIpKSArICh2YWx1ZXNbcGIrMV0qcHIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaW1pdHMucHVzaChtYXgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBlbHNlIGlmIChtb2RlLnN1YnN0cigwLDEpID09PSAnaycpIHsgLy8gay1tZWFucyBjbHVzdGVyaW5nXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gYmFzZWQgb25cbiAgICAgICAgICAgIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9maWd1ZS9zb3VyY2UvYnJvd3NlL3RydW5rL2ZpZ3VlLmpzIzMzNlxuICAgICAgICAgICAgc2ltcGxpZmllZCBmb3IgMS1kIGlucHV0IHZhbHVlc1xuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBjbHVzdGVyO1xuICAgICAgICAgICAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGFzc2lnbm1lbnRzID0gbmV3IEFycmF5KG4pO1xuICAgICAgICAgICAgdmFyIGNsdXN0ZXJTaXplcyA9IG5ldyBBcnJheShudW0pO1xuICAgICAgICAgICAgdmFyIHJlcGVhdCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgbmJfaXRlcnMgPSAwO1xuICAgICAgICAgICAgdmFyIGNlbnRyb2lkcyA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIGdldCBzZWVkIHZhbHVlc1xuICAgICAgICAgICAgY2VudHJvaWRzID0gW107XG4gICAgICAgICAgICBjZW50cm9pZHMucHVzaChtaW4pO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQzPTE7IGkkMzxudW07IGkkMysrKSB7XG4gICAgICAgICAgICAgICAgY2VudHJvaWRzLnB1c2gobWluICsgKChpJDMvbnVtKSAqIChtYXgtbWluKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2VudHJvaWRzLnB1c2gobWF4KTtcblxuICAgICAgICAgICAgd2hpbGUgKHJlcGVhdCkge1xuICAgICAgICAgICAgICAgIC8vIGFzc2lnbm1lbnQgc3RlcFxuICAgICAgICAgICAgICAgIGZvciAodmFyIGo9MDsgajxudW07IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjbHVzdGVyU2l6ZXNbal0gPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDQ9MDsgaSQ0PG47IGkkNCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlc1tpJDRdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWluZGlzdCA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiZXN0ID0gKHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGokMT0wOyBqJDE8bnVtOyBqJDErKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3QgPSBhYnMoY2VudHJvaWRzW2okMV0tdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3QgPCBtaW5kaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluZGlzdCA9IGRpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVzdCA9IGokMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsdXN0ZXJTaXplc1tiZXN0XSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWdubWVudHNbaSQ0XSA9IGJlc3Q7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgY2VudHJvaWRzIHN0ZXBcbiAgICAgICAgICAgICAgICB2YXIgbmV3Q2VudHJvaWRzID0gbmV3IEFycmF5KG51bSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiQyPTA7IGokMjxudW07IGokMisrKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NlbnRyb2lkc1tqJDJdID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSQ1PTA7IGkkNTxuOyBpJDUrKykge1xuICAgICAgICAgICAgICAgICAgICBjbHVzdGVyID0gYXNzaWdubWVudHNbaSQ1XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0NlbnRyb2lkc1tjbHVzdGVyXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2VudHJvaWRzW2NsdXN0ZXJdID0gdmFsdWVzW2kkNV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdDZW50cm9pZHNbY2x1c3Rlcl0gKz0gdmFsdWVzW2kkNV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiQzPTA7IGokMzxudW07IGokMysrKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NlbnRyb2lkc1tqJDNdICo9IDEvY2x1c3RlclNpemVzW2okM107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgY29udmVyZ2VuY2VcbiAgICAgICAgICAgICAgICByZXBlYXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqJDQ9MDsgaiQ0PG51bTsgaiQ0KyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0NlbnRyb2lkc1tqJDRdICE9PSBjZW50cm9pZHNbaiQ0XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2VudHJvaWRzID0gbmV3Q2VudHJvaWRzO1xuICAgICAgICAgICAgICAgIG5iX2l0ZXJzKys7XG5cbiAgICAgICAgICAgICAgICBpZiAobmJfaXRlcnMgPiAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBmaW5pc2hlZCBrLW1lYW5zIGNsdXN0ZXJpbmdcbiAgICAgICAgICAgIC8vIHRoZSBuZXh0IHBhcnQgaXMgYm9ycm93ZWQgZnJvbSBnYWJyaWVsZmxvci5pdFxuICAgICAgICAgICAgdmFyIGtDbHVzdGVycyA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgaiQ1PTA7IGokNTxudW07IGokNSsrKSB7XG4gICAgICAgICAgICAgICAga0NsdXN0ZXJzW2okNV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkkNj0wOyBpJDY8bjsgaSQ2KyspIHtcbiAgICAgICAgICAgICAgICBjbHVzdGVyID0gYXNzaWdubWVudHNbaSQ2XTtcbiAgICAgICAgICAgICAgICBrQ2x1c3RlcnNbY2x1c3Rlcl0ucHVzaCh2YWx1ZXNbaSQ2XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdG1wS01lYW5zQnJlYWtzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBqJDY9MDsgaiQ2PG51bTsgaiQ2KyspIHtcbiAgICAgICAgICAgICAgICB0bXBLTWVhbnNCcmVha3MucHVzaChrQ2x1c3RlcnNbaiQ2XVswXSk7XG4gICAgICAgICAgICAgICAgdG1wS01lYW5zQnJlYWtzLnB1c2goa0NsdXN0ZXJzW2okNl1ba0NsdXN0ZXJzW2okNl0ubGVuZ3RoLTFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRtcEtNZWFuc0JyZWFrcyA9IHRtcEtNZWFuc0JyZWFrcy5zb3J0KGZ1bmN0aW9uIChhLGIpeyByZXR1cm4gYS1iOyB9KTtcbiAgICAgICAgICAgIGxpbWl0cy5wdXNoKHRtcEtNZWFuc0JyZWFrc1swXSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDc9MTsgaSQ3IDwgdG1wS01lYW5zQnJlYWtzLmxlbmd0aDsgaSQ3Kz0gMikge1xuICAgICAgICAgICAgICAgIHZhciB2ID0gdG1wS01lYW5zQnJlYWtzW2kkN107XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTih2KSAmJiAobGltaXRzLmluZGV4T2YodikgPT09IC0xKSkge1xuICAgICAgICAgICAgICAgICAgICBsaW1pdHMucHVzaCh2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpbWl0cztcbiAgICB9O1xuXG4gICAgdmFyIGFuYWx5emVfMSA9IHthbmFseXplOiBhbmFseXplLCBsaW1pdHM6IGxpbWl0c307XG5cbiAgICB2YXIgY29udHJhc3QgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAvLyBXQ0FHIGNvbnRyYXN0IHJhdGlvXG4gICAgICAgIC8vIHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI2NvbnRyYXN0LXJhdGlvZGVmXG4gICAgICAgIGEgPSBuZXcgQ29sb3JfMShhKTtcbiAgICAgICAgYiA9IG5ldyBDb2xvcl8xKGIpO1xuICAgICAgICB2YXIgbDEgPSBhLmx1bWluYW5jZSgpO1xuICAgICAgICB2YXIgbDIgPSBiLmx1bWluYW5jZSgpO1xuICAgICAgICByZXR1cm4gbDEgPiBsMiA/IChsMSArIDAuMDUpIC8gKGwyICsgMC4wNSkgOiAobDIgKyAwLjA1KSAvIChsMSArIDAuMDUpO1xuICAgIH07XG5cbiAgICB2YXIgc3FydCQ0ID0gTWF0aC5zcXJ0O1xuICAgIHZhciBhdGFuMiQyID0gTWF0aC5hdGFuMjtcbiAgICB2YXIgYWJzJDEgPSBNYXRoLmFicztcbiAgICB2YXIgY29zJDQgPSBNYXRoLmNvcztcbiAgICB2YXIgUEkkMiA9IE1hdGguUEk7XG5cbiAgICB2YXIgZGVsdGFFID0gZnVuY3Rpb24oYSwgYiwgTCwgQykge1xuICAgICAgICBpZiAoIEwgPT09IHZvaWQgMCApIEw9MTtcbiAgICAgICAgaWYgKCBDID09PSB2b2lkIDAgKSBDPTE7XG5cbiAgICAgICAgLy8gRGVsdGEgRSAoQ01DKVxuICAgICAgICAvLyBzZWUgaHR0cDovL3d3dy5icnVjZWxpbmRibG9vbS5jb20vaW5kZXguaHRtbD9FcW5fRGVsdGFFX0NNQy5odG1sXG4gICAgICAgIGEgPSBuZXcgQ29sb3JfMShhKTtcbiAgICAgICAgYiA9IG5ldyBDb2xvcl8xKGIpO1xuICAgICAgICB2YXIgcmVmID0gQXJyYXkuZnJvbShhLmxhYigpKTtcbiAgICAgICAgdmFyIEwxID0gcmVmWzBdO1xuICAgICAgICB2YXIgYTEgPSByZWZbMV07XG4gICAgICAgIHZhciBiMSA9IHJlZlsyXTtcbiAgICAgICAgdmFyIHJlZiQxID0gQXJyYXkuZnJvbShiLmxhYigpKTtcbiAgICAgICAgdmFyIEwyID0gcmVmJDFbMF07XG4gICAgICAgIHZhciBhMiA9IHJlZiQxWzFdO1xuICAgICAgICB2YXIgYjIgPSByZWYkMVsyXTtcbiAgICAgICAgdmFyIGMxID0gc3FydCQ0KChhMSAqIGExKSArIChiMSAqIGIxKSk7XG4gICAgICAgIHZhciBjMiA9IHNxcnQkNCgoYTIgKiBhMikgKyAoYjIgKiBiMikpO1xuICAgICAgICB2YXIgc2wgPSBMMSA8IDE2LjAgPyAwLjUxMSA6ICgwLjA0MDk3NSAqIEwxKSAvICgxLjAgKyAoMC4wMTc2NSAqIEwxKSk7XG4gICAgICAgIHZhciBzYyA9ICgoMC4wNjM4ICogYzEpIC8gKDEuMCArICgwLjAxMzEgKiBjMSkpKSArIDAuNjM4O1xuICAgICAgICB2YXIgaDEgPSBjMSA8IDAuMDAwMDAxID8gMC4wIDogKGF0YW4yJDIoYjEsIGExKSAqIDE4MC4wKSAvIFBJJDI7XG4gICAgICAgIHdoaWxlIChoMSA8IDApIHsgaDEgKz0gMzYwOyB9XG4gICAgICAgIHdoaWxlIChoMSA+PSAzNjApIHsgaDEgLT0gMzYwOyB9XG4gICAgICAgIHZhciB0ID0gKGgxID49IDE2NC4wKSAmJiAoaDEgPD0gMzQ1LjApID8gKDAuNTYgKyBhYnMkMSgwLjIgKiBjb3MkNCgoUEkkMiAqIChoMSArIDE2OC4wKSkgLyAxODAuMCkpKSA6ICgwLjM2ICsgYWJzJDEoMC40ICogY29zJDQoKFBJJDIgKiAoaDEgKyAzNS4wKSkgLyAxODAuMCkpKTtcbiAgICAgICAgdmFyIGM0ID0gYzEgKiBjMSAqIGMxICogYzE7XG4gICAgICAgIHZhciBmID0gc3FydCQ0KGM0IC8gKGM0ICsgMTkwMC4wKSk7XG4gICAgICAgIHZhciBzaCA9IHNjICogKCgoZiAqIHQpICsgMS4wKSAtIGYpO1xuICAgICAgICB2YXIgZGVsTCA9IEwxIC0gTDI7XG4gICAgICAgIHZhciBkZWxDID0gYzEgLSBjMjtcbiAgICAgICAgdmFyIGRlbEEgPSBhMSAtIGEyO1xuICAgICAgICB2YXIgZGVsQiA9IGIxIC0gYjI7XG4gICAgICAgIHZhciBkSDIgPSAoKGRlbEEgKiBkZWxBKSArIChkZWxCICogZGVsQikpIC0gKGRlbEMgKiBkZWxDKTtcbiAgICAgICAgdmFyIHYxID0gZGVsTCAvIChMICogc2wpO1xuICAgICAgICB2YXIgdjIgPSBkZWxDIC8gKEMgKiBzYyk7XG4gICAgICAgIHZhciB2MyA9IHNoO1xuICAgICAgICByZXR1cm4gc3FydCQ0KCh2MSAqIHYxKSArICh2MiAqIHYyKSArIChkSDIgLyAodjMgKiB2MykpKTtcbiAgICB9O1xuXG4gICAgLy8gc2ltcGxlIEV1Y2xpZGVhbiBkaXN0YW5jZVxuICAgIHZhciBkaXN0YW5jZSA9IGZ1bmN0aW9uKGEsIGIsIG1vZGUpIHtcbiAgICAgICAgaWYgKCBtb2RlID09PSB2b2lkIDAgKSBtb2RlPSdsYWInO1xuXG4gICAgICAgIC8vIERlbHRhIEUgKENJRSAxOTc2KVxuICAgICAgICAvLyBzZWUgaHR0cDovL3d3dy5icnVjZWxpbmRibG9vbS5jb20vaW5kZXguaHRtbD9FcXVhdGlvbnMuaHRtbFxuICAgICAgICBhID0gbmV3IENvbG9yXzEoYSk7XG4gICAgICAgIGIgPSBuZXcgQ29sb3JfMShiKTtcbiAgICAgICAgdmFyIGwxID0gYS5nZXQobW9kZSk7XG4gICAgICAgIHZhciBsMiA9IGIuZ2V0KG1vZGUpO1xuICAgICAgICB2YXIgc3VtX3NxID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBsMSkge1xuICAgICAgICAgICAgdmFyIGQgPSAobDFbaV0gfHwgMCkgLSAobDJbaV0gfHwgMCk7XG4gICAgICAgICAgICBzdW1fc3EgKz0gZCpkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoc3VtX3NxKTtcbiAgICB9O1xuXG4gICAgdmFyIHZhbGlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KCBDb2xvcl8xLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MpICkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBzb21lIHByZS1kZWZpbmVkIGNvbG9yIHNjYWxlczpcblxuXG5cblxuICAgIHZhciBzY2FsZXMgPSB7XG4gICAgXHRjb29sOiBmdW5jdGlvbiBjb29sKCkgeyByZXR1cm4gc2NhbGUoW2Nocm9tYV8xLmhzbCgxODAsMSwuOSksIGNocm9tYV8xLmhzbCgyNTAsLjcsLjQpXSkgfSxcbiAgICBcdGhvdDogZnVuY3Rpb24gaG90KCkgeyByZXR1cm4gc2NhbGUoWycjMDAwJywnI2YwMCcsJyNmZjAnLCcjZmZmJ10sIFswLC4yNSwuNzUsMV0pLm1vZGUoJ3JnYicpIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICAgIENvbG9yQnJld2VyIGNvbG9ycyBmb3IgY2hyb21hLmpzXG5cbiAgICAgICAgQ29weXJpZ2h0IChjKSAyMDAyIEN5bnRoaWEgQnJld2VyLCBNYXJrIEhhcnJvd2VyLCBhbmQgVGhlXG4gICAgICAgIFBlbm5zeWx2YW5pYSBTdGF0ZSBVbml2ZXJzaXR5LlxuXG4gICAgICAgIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gICAgICAgIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWRcbiAgICAgICAgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1JcbiAgICAgICAgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAgICAgICAgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAqL1xuXG4gICAgdmFyIGNvbG9yYnJld2VyID0ge1xuICAgICAgICAvLyBzZXF1ZW50aWFsXG4gICAgICAgIE9yUmQ6IFsnI2ZmZjdlYycsICcjZmVlOGM4JywgJyNmZGQ0OWUnLCAnI2ZkYmI4NCcsICcjZmM4ZDU5JywgJyNlZjY1NDgnLCAnI2Q3MzAxZicsICcjYjMwMDAwJywgJyM3ZjAwMDAnXSxcbiAgICAgICAgUHVCdTogWycjZmZmN2ZiJywgJyNlY2U3ZjInLCAnI2QwZDFlNicsICcjYTZiZGRiJywgJyM3NGE5Y2YnLCAnIzM2OTBjMCcsICcjMDU3MGIwJywgJyMwNDVhOGQnLCAnIzAyMzg1OCddLFxuICAgICAgICBCdVB1OiBbJyNmN2ZjZmQnLCAnI2UwZWNmNCcsICcjYmZkM2U2JywgJyM5ZWJjZGEnLCAnIzhjOTZjNicsICcjOGM2YmIxJywgJyM4ODQxOWQnLCAnIzgxMGY3YycsICcjNGQwMDRiJ10sXG4gICAgICAgIE9yYW5nZXM6IFsnI2ZmZjVlYicsICcjZmVlNmNlJywgJyNmZGQwYTInLCAnI2ZkYWU2YicsICcjZmQ4ZDNjJywgJyNmMTY5MTMnLCAnI2Q5NDgwMScsICcjYTYzNjAzJywgJyM3ZjI3MDQnXSxcbiAgICAgICAgQnVHbjogWycjZjdmY2ZkJywgJyNlNWY1ZjknLCAnI2NjZWNlNicsICcjOTlkOGM5JywgJyM2NmMyYTQnLCAnIzQxYWU3NicsICcjMjM4YjQ1JywgJyMwMDZkMmMnLCAnIzAwNDQxYiddLFxuICAgICAgICBZbE9yQnI6IFsnI2ZmZmZlNScsICcjZmZmN2JjJywgJyNmZWUzOTEnLCAnI2ZlYzQ0ZicsICcjZmU5OTI5JywgJyNlYzcwMTQnLCAnI2NjNGMwMicsICcjOTkzNDA0JywgJyM2NjI1MDYnXSxcbiAgICAgICAgWWxHbjogWycjZmZmZmU1JywgJyNmN2ZjYjknLCAnI2Q5ZjBhMycsICcjYWRkZDhlJywgJyM3OGM2NzknLCAnIzQxYWI1ZCcsICcjMjM4NDQzJywgJyMwMDY4MzcnLCAnIzAwNDUyOSddLFxuICAgICAgICBSZWRzOiBbJyNmZmY1ZjAnLCAnI2ZlZTBkMicsICcjZmNiYmExJywgJyNmYzkyNzInLCAnI2ZiNmE0YScsICcjZWYzYjJjJywgJyNjYjE4MWQnLCAnI2E1MGYxNScsICcjNjcwMDBkJ10sXG4gICAgICAgIFJkUHU6IFsnI2ZmZjdmMycsICcjZmRlMGRkJywgJyNmY2M1YzAnLCAnI2ZhOWZiNScsICcjZjc2OGExJywgJyNkZDM0OTcnLCAnI2FlMDE3ZScsICcjN2EwMTc3JywgJyM0OTAwNmEnXSxcbiAgICAgICAgR3JlZW5zOiBbJyNmN2ZjZjUnLCAnI2U1ZjVlMCcsICcjYzdlOWMwJywgJyNhMWQ5OWInLCAnIzc0YzQ3NicsICcjNDFhYjVkJywgJyMyMzhiNDUnLCAnIzAwNmQyYycsICcjMDA0NDFiJ10sXG4gICAgICAgIFlsR25CdTogWycjZmZmZmQ5JywgJyNlZGY4YjEnLCAnI2M3ZTliNCcsICcjN2ZjZGJiJywgJyM0MWI2YzQnLCAnIzFkOTFjMCcsICcjMjI1ZWE4JywgJyMyNTM0OTQnLCAnIzA4MWQ1OCddLFxuICAgICAgICBQdXJwbGVzOiBbJyNmY2ZiZmQnLCAnI2VmZWRmNScsICcjZGFkYWViJywgJyNiY2JkZGMnLCAnIzllOWFjOCcsICcjODA3ZGJhJywgJyM2YTUxYTMnLCAnIzU0Mjc4ZicsICcjM2YwMDdkJ10sXG4gICAgICAgIEduQnU6IFsnI2Y3ZmNmMCcsICcjZTBmM2RiJywgJyNjY2ViYzUnLCAnI2E4ZGRiNScsICcjN2JjY2M0JywgJyM0ZWIzZDMnLCAnIzJiOGNiZScsICcjMDg2OGFjJywgJyMwODQwODEnXSxcbiAgICAgICAgR3JleXM6IFsnI2ZmZmZmZicsICcjZjBmMGYwJywgJyNkOWQ5ZDknLCAnI2JkYmRiZCcsICcjOTY5Njk2JywgJyM3MzczNzMnLCAnIzUyNTI1MicsICcjMjUyNTI1JywgJyMwMDAwMDAnXSxcbiAgICAgICAgWWxPclJkOiBbJyNmZmZmY2MnLCAnI2ZmZWRhMCcsICcjZmVkOTc2JywgJyNmZWIyNGMnLCAnI2ZkOGQzYycsICcjZmM0ZTJhJywgJyNlMzFhMWMnLCAnI2JkMDAyNicsICcjODAwMDI2J10sXG4gICAgICAgIFB1UmQ6IFsnI2Y3ZjRmOScsICcjZTdlMWVmJywgJyNkNGI5ZGEnLCAnI2M5OTRjNycsICcjZGY2NWIwJywgJyNlNzI5OGEnLCAnI2NlMTI1NicsICcjOTgwMDQzJywgJyM2NzAwMWYnXSxcbiAgICAgICAgQmx1ZXM6IFsnI2Y3ZmJmZicsICcjZGVlYmY3JywgJyNjNmRiZWYnLCAnIzllY2FlMScsICcjNmJhZWQ2JywgJyM0MjkyYzYnLCAnIzIxNzFiNScsICcjMDg1MTljJywgJyMwODMwNmInXSxcbiAgICAgICAgUHVCdUduOiBbJyNmZmY3ZmInLCAnI2VjZTJmMCcsICcjZDBkMWU2JywgJyNhNmJkZGInLCAnIzY3YTljZicsICcjMzY5MGMwJywgJyMwMjgxOGEnLCAnIzAxNmM1OScsICcjMDE0NjM2J10sXG4gICAgICAgIFZpcmlkaXM6IFsnIzQ0MDE1NCcsICcjNDgyNzc3JywgJyMzZjRhOGEnLCAnIzMxNjc4ZScsICcjMjY4MzhmJywgJyMxZjlkOGEnLCAnIzZjY2U1YScsICcjYjZkZTJiJywgJyNmZWU4MjUnXSxcblxuICAgICAgICAvLyBkaXZlcmdpbmdcblxuICAgICAgICBTcGVjdHJhbDogWycjOWUwMTQyJywgJyNkNTNlNGYnLCAnI2Y0NmQ0MycsICcjZmRhZTYxJywgJyNmZWUwOGInLCAnI2ZmZmZiZicsICcjZTZmNTk4JywgJyNhYmRkYTQnLCAnIzY2YzJhNScsICcjMzI4OGJkJywgJyM1ZTRmYTInXSxcbiAgICAgICAgUmRZbEduOiBbJyNhNTAwMjYnLCAnI2Q3MzAyNycsICcjZjQ2ZDQzJywgJyNmZGFlNjEnLCAnI2ZlZTA4YicsICcjZmZmZmJmJywgJyNkOWVmOGInLCAnI2E2ZDk2YScsICcjNjZiZDYzJywgJyMxYTk4NTAnLCAnIzAwNjgzNyddLFxuICAgICAgICBSZEJ1OiBbJyM2NzAwMWYnLCAnI2IyMTgyYicsICcjZDY2MDRkJywgJyNmNGE1ODInLCAnI2ZkZGJjNycsICcjZjdmN2Y3JywgJyNkMWU1ZjAnLCAnIzkyYzVkZScsICcjNDM5M2MzJywgJyMyMTY2YWMnLCAnIzA1MzA2MSddLFxuICAgICAgICBQaVlHOiBbJyM4ZTAxNTInLCAnI2M1MWI3ZCcsICcjZGU3N2FlJywgJyNmMWI2ZGEnLCAnI2ZkZTBlZicsICcjZjdmN2Y3JywgJyNlNmY1ZDAnLCAnI2I4ZTE4NicsICcjN2ZiYzQxJywgJyM0ZDkyMjEnLCAnIzI3NjQxOSddLFxuICAgICAgICBQUkduOiBbJyM0MDAwNGInLCAnIzc2MmE4MycsICcjOTk3MGFiJywgJyNjMmE1Y2YnLCAnI2U3ZDRlOCcsICcjZjdmN2Y3JywgJyNkOWYwZDMnLCAnI2E2ZGJhMCcsICcjNWFhZTYxJywgJyMxYjc4MzcnLCAnIzAwNDQxYiddLFxuICAgICAgICBSZFlsQnU6IFsnI2E1MDAyNicsICcjZDczMDI3JywgJyNmNDZkNDMnLCAnI2ZkYWU2MScsICcjZmVlMDkwJywgJyNmZmZmYmYnLCAnI2UwZjNmOCcsICcjYWJkOWU5JywgJyM3NGFkZDEnLCAnIzQ1NzViNCcsICcjMzEzNjk1J10sXG4gICAgICAgIEJyQkc6IFsnIzU0MzAwNScsICcjOGM1MTBhJywgJyNiZjgxMmQnLCAnI2RmYzI3ZCcsICcjZjZlOGMzJywgJyNmNWY1ZjUnLCAnI2M3ZWFlNScsICcjODBjZGMxJywgJyMzNTk3OGYnLCAnIzAxNjY1ZScsICcjMDAzYzMwJ10sXG4gICAgICAgIFJkR3k6IFsnIzY3MDAxZicsICcjYjIxODJiJywgJyNkNjYwNGQnLCAnI2Y0YTU4MicsICcjZmRkYmM3JywgJyNmZmZmZmYnLCAnI2UwZTBlMCcsICcjYmFiYWJhJywgJyM4Nzg3ODcnLCAnIzRkNGQ0ZCcsICcjMWExYTFhJ10sXG4gICAgICAgIFB1T3I6IFsnIzdmM2IwOCcsICcjYjM1ODA2JywgJyNlMDgyMTQnLCAnI2ZkYjg2MycsICcjZmVlMGI2JywgJyNmN2Y3ZjcnLCAnI2Q4ZGFlYicsICcjYjJhYmQyJywgJyM4MDczYWMnLCAnIzU0Mjc4OCcsICcjMmQwMDRiJ10sXG5cbiAgICAgICAgLy8gcXVhbGl0YXRpdmVcblxuICAgICAgICBTZXQyOiBbJyM2NmMyYTUnLCAnI2ZjOGQ2MicsICcjOGRhMGNiJywgJyNlNzhhYzMnLCAnI2E2ZDg1NCcsICcjZmZkOTJmJywgJyNlNWM0OTQnLCAnI2IzYjNiMyddLFxuICAgICAgICBBY2NlbnQ6IFsnIzdmYzk3ZicsICcjYmVhZWQ0JywgJyNmZGMwODYnLCAnI2ZmZmY5OScsICcjMzg2Y2IwJywgJyNmMDAyN2YnLCAnI2JmNWIxNycsICcjNjY2NjY2J10sXG4gICAgICAgIFNldDE6IFsnI2U0MWExYycsICcjMzc3ZWI4JywgJyM0ZGFmNGEnLCAnIzk4NGVhMycsICcjZmY3ZjAwJywgJyNmZmZmMzMnLCAnI2E2NTYyOCcsICcjZjc4MWJmJywgJyM5OTk5OTknXSxcbiAgICAgICAgU2V0MzogWycjOGRkM2M3JywgJyNmZmZmYjMnLCAnI2JlYmFkYScsICcjZmI4MDcyJywgJyM4MGIxZDMnLCAnI2ZkYjQ2MicsICcjYjNkZTY5JywgJyNmY2NkZTUnLCAnI2Q5ZDlkOScsICcjYmM4MGJkJywgJyNjY2ViYzUnLCAnI2ZmZWQ2ZiddLFxuICAgICAgICBEYXJrMjogWycjMWI5ZTc3JywgJyNkOTVmMDInLCAnIzc1NzBiMycsICcjZTcyOThhJywgJyM2NmE2MWUnLCAnI2U2YWIwMicsICcjYTY3NjFkJywgJyM2NjY2NjYnXSxcbiAgICAgICAgUGFpcmVkOiBbJyNhNmNlZTMnLCAnIzFmNzhiNCcsICcjYjJkZjhhJywgJyMzM2EwMmMnLCAnI2ZiOWE5OScsICcjZTMxYTFjJywgJyNmZGJmNmYnLCAnI2ZmN2YwMCcsICcjY2FiMmQ2JywgJyM2YTNkOWEnLCAnI2ZmZmY5OScsICcjYjE1OTI4J10sXG4gICAgICAgIFBhc3RlbDI6IFsnI2IzZTJjZCcsICcjZmRjZGFjJywgJyNjYmQ1ZTgnLCAnI2Y0Y2FlNCcsICcjZTZmNWM5JywgJyNmZmYyYWUnLCAnI2YxZTJjYycsICcjY2NjY2NjJ10sXG4gICAgICAgIFBhc3RlbDE6IFsnI2ZiYjRhZScsICcjYjNjZGUzJywgJyNjY2ViYzUnLCAnI2RlY2JlNCcsICcjZmVkOWE2JywgJyNmZmZmY2MnLCAnI2U1ZDhiZCcsICcjZmRkYWVjJywgJyNmMmYyZjInXSxcbiAgICB9O1xuXG4gICAgLy8gYWRkIGxvd2VyY2FzZSBhbGlhc2VzIGZvciBjYXNlLWluc2Vuc2l0aXZlIG1hdGNoZXNcbiAgICBmb3IgKHZhciBpJDEgPSAwLCBsaXN0JDEgPSBPYmplY3Qua2V5cyhjb2xvcmJyZXdlcik7IGkkMSA8IGxpc3QkMS5sZW5ndGg7IGkkMSArPSAxKSB7XG4gICAgICAgIHZhciBrZXkgPSBsaXN0JDFbaSQxXTtcblxuICAgICAgICBjb2xvcmJyZXdlcltrZXkudG9Mb3dlckNhc2UoKV0gPSBjb2xvcmJyZXdlcltrZXldO1xuICAgIH1cblxuICAgIHZhciBjb2xvcmJyZXdlcl8xID0gY29sb3JicmV3ZXI7XG5cbiAgICAvLyBmZWVsIGZyZWUgdG8gY29tbWVudCBvdXQgYW55dGhpbmcgdG8gcm9sbHVwXG4gICAgLy8gYSBzbWFsbGVyIGNocm9tYS5qcyBidWlsdFxuXG4gICAgLy8gaW8gLS0+IGNvbnZlcnQgY29sb3JzXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgLy8gb3BlcmF0b3JzIC0tPiBtb2RpZnkgZXhpc3RpbmcgQ29sb3JzXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAvLyBpbnRlcnBvbGF0b3JzXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAvLyBnZW5lcmF0b3JzIC0tID4gY3JlYXRlIG5ldyBjb2xvcnNcbiAgICBjaHJvbWFfMS5hdmVyYWdlID0gYXZlcmFnZTtcbiAgICBjaHJvbWFfMS5iZXppZXIgPSBiZXppZXJfMTtcbiAgICBjaHJvbWFfMS5ibGVuZCA9IGJsZW5kXzE7XG4gICAgY2hyb21hXzEuY3ViZWhlbGl4ID0gY3ViZWhlbGl4O1xuICAgIGNocm9tYV8xLm1peCA9IGNocm9tYV8xLmludGVycG9sYXRlID0gbWl4O1xuICAgIGNocm9tYV8xLnJhbmRvbSA9IHJhbmRvbV8xO1xuICAgIGNocm9tYV8xLnNjYWxlID0gc2NhbGU7XG5cbiAgICAvLyBvdGhlciB1dGlsaXR5IG1ldGhvZHNcbiAgICBjaHJvbWFfMS5hbmFseXplID0gYW5hbHl6ZV8xLmFuYWx5emU7XG4gICAgY2hyb21hXzEuY29udHJhc3QgPSBjb250cmFzdDtcbiAgICBjaHJvbWFfMS5kZWx0YUUgPSBkZWx0YUU7XG4gICAgY2hyb21hXzEuZGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICBjaHJvbWFfMS5saW1pdHMgPSBhbmFseXplXzEubGltaXRzO1xuICAgIGNocm9tYV8xLnZhbGlkID0gdmFsaWQ7XG5cbiAgICAvLyBzY2FsZVxuICAgIGNocm9tYV8xLnNjYWxlcyA9IHNjYWxlcztcblxuICAgIC8vIGNvbG9yc1xuICAgIGNocm9tYV8xLmNvbG9ycyA9IHczY3gxMV8xO1xuICAgIGNocm9tYV8xLmJyZXdlciA9IGNvbG9yYnJld2VyXzE7XG5cbiAgICB2YXIgY2hyb21hX2pzID0gY2hyb21hXzE7XG5cbiAgICByZXR1cm4gY2hyb21hX2pzO1xuXG59KSkpO1xuIiwiaW1wb3J0IEVsZW1lbnQgZnJvbSAnQFVJL2VsZW1lbnQnO1xuaW1wb3J0IHMgZnJvbSAnLi9zdHlsZXMuc2Nzcyc7XG5pbXBvcnQgQmFyIGZyb20gJ0BQcm9qZWN0L2NvbXBvbmVudHMvYmFyJztcbmltcG9ydCB7IEF4aXMgfSBmcm9tICdAUHJvamVjdC9jb21wb25lbnRzL2Jhcic7XG5pbXBvcnQgeyBzdGF0ZU1vZHVsZSBhcyBTIH0gZnJvbSAnc3RhdGVmdWwtZGVhZCc7XG5pbXBvcnQgdGlwcHkgZnJvbSAndGlwcHkuanMnO1xuaW1wb3J0IFBTIGZyb20gJ3B1YnN1Yi1zZXR0ZXInO1xuLy9pbXBvcnQgeyBzdGF0ZU1vZHVsZSBhcyBTIH0gZnJvbSAnc3RhdGVmdWwtZGVhZCc7XG4vL2ltcG9ydCB7IEdUTVB1c2ggfSBmcm9tICdAVXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXJWaWV3IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIC8vY29udGFpbmVyXG4gICAgICAgIHZhciBiYXJWaWV3ID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIHRoaXMuYmFycyA9IFtdO1xuICAgICAgICB0aGlzLmxhYmVscyA9IFtdO1xuICAgICAgICB0aGlzLmJhckNvbnRhaW5lcnMgPSBbXTtcbiAgICAgICAgdGhpcy5wdXNoQmFycyh0aGlzLmRhdGEucHJpbWFyeSk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGRyZW4oW1xuICAgICAgICAgICAgLi4udGhpcy5iYXJzLFxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoQXhpcywgYGRpdi5heGlzLSR7dGhpcy5kYXRhLnByaW1hcnl9YCwge1xuICAgICAgICAgICAgICAgIHJlbmRlclRvU2VsZWN0b3I6IGAuanMtYmFyLXZpZXctJHt0aGlzLmRhdGEucHJpbWFyeX1gLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzOiBzLFxuICAgICAgICAgICAgICAgICAgICBwcmltYXJ5OiB0aGlzLmRhdGEucHJpbWFyeVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0pO1xuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBiYXJWaWV3OyAvLyBpZiBwcmVyZW5kZXJlZCBhbmQgbm8gbmVlZCB0byByZW5kZXIgKG5vIGRhdGEgbWlzbWF0Y2gpXG4gICAgICAgIH1cbiAgICAgICAgYmFyVmlldy5jbGFzc0xpc3QuYWRkKHMuYmFyVmlldywgJ2pzLWJhci12aWV3JywgYGpzLWJhci12aWV3LSR7dGhpcy5kYXRhLnByaW1hcnl9YCk7XG5cbiAgICAgICAgLy90aXRsZVxuICAgICAgICBiYXJWaWV3LmFwcGVuZENoaWxkKHRoaXMucmV0dXJuVGl0bGUodGhpcy5kYXRhLnByaW1hcnkpKTtcbiAgICAgICAgcmV0dXJuIGJhclZpZXc7XG4gICAgfVxuICAgIHJldHVyblRpdGxlKHByaW1hcnkpe1xuICAgICAgICB2YXIgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgICAgICB0aXRsZS50ZXh0Q29udGVudCA9IHRoaXMubW9kZWwuZmllbGRzLmZpbmQoZCA9PiBkLmtleSA9PT0gcHJpbWFyeSkudGV4dDtcbiAgICAgICAgdGl0bGUuY2xhc3NMaXN0LmFkZCgnc2VjdGlvbi10aXRsZScpO1xuICAgICAgICByZXR1cm4gdGl0bGU7XG4gICAgfVxuICAgIHB1c2hCYXJzKHByaW1hcnkpe1xuICAgICAgICB0aGlzLm1vZGVsLm5lc3RCeVtwcmltYXJ5XS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgdGhpcy5iYXJzLnB1c2godGhpcy5jcmVhdGVDb21wb25lbnQoQmFyLCBgZGl2LmJhci0ke3RoaXMuYXBwLmNsZWFuS2V5KGQua2V5KX1gLCB7ZGF0YToge2QscHJpbWFyeX0sIHJlbmRlclRvU2VsZWN0b3I6IGAuanMtYmFyLXZpZXctJHtwcmltYXJ5fWAsIHByaW1hcnl9KSlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgUFMuc2V0U3VicyhbXG4gICAgICAgICAgICBbJ2hvdmVyUHJpbWFyeUdyb3VwJywgdGhpcy5oaWdobGlnaHRCYXIuYmluZCh0aGlzKV0sXG4gICAgICAgICAgICBbJ3VuSG92ZXJQcmltYXJ5R3JvdXAnLCB0aGlzLmhpZ2hsaWdodEJhci5iaW5kKHRoaXMpXSxcbiAgICAgICAgICAgIFsndmlldycsIHRoaXMuc2hvd0JhclZpZXcuYmluZCh0aGlzKV1cbiAgICAgICAgXSk7XG4gICAgICAgIHZhciBpbm5lcldyYXBwZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLWlubmVyV3JhcHBlci0nICsgdGhpcy5kYXRhLnByaW1hcnkpO1xuICAgICAgICB0aXBweShpbm5lcldyYXBwZXJzLCB7XG4gICAgICAgICAgICBmb2xsb3dDdXJzb3I6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaW5uZXJXcmFwcGVycy5mb3JFYWNoKHdyYXBwZXIgPT4ge1xuICAgICAgICAgICAgd3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgUy5zZXRTdGF0ZSgnc2VsZWN0UHJpbWFyeUdyb3VwLm1hcCcsIHRoaXMuZGF0YXNldC5rZXkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIFMuc2V0U3RhdGUoJ2hvdmVyUHJpbWFyeUdyb3VwJywgdGhpcy5kYXRhc2V0LmtleSwgeyBmb3JjZUNoYW5nZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgd3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBTLnNldFN0YXRlKCd1bkhvdmVyUHJpbWFyeUdyb3VwJywgdGhpcy5kYXRhc2V0LmtleSwgeyBmb3JjZUNoYW5nZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgIFxuICAgIH1cbiAgICBzaG93QmFyVmlldyhtc2csZGF0YSl7XG4gICAgICAgIGlmICggZGF0YSA9PT0gdGhpcy5kYXRhLnByaW1hcnkpe1xuICAgICAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKHMuYWN0aXZlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZShzLmFjdGl2ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGlnaGxpZ2h0QmFyKG1zZyxkYXRhKXtcbiAgICAgICAgaWYgKCB0aGlzLmRhdGEucHJpbWFyeSA9PT0gUy5nZXRTdGF0ZSgndmlldycpKXtcbiAgICAgICAgICAgIHZhciBzZWxlY3RvciA9ICcuYmFyLScgKyB0aGlzLmFwcC5jbGVhbktleShkYXRhKSArICcgLmpzLWlubmVyV3JhcHBlcic7XG4gICAgICAgICAgICB2YXIgYmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgICAgICBpZiAoIG1zZyA9PT0gJ2hvdmVyUHJpbWFyeUdyb3VwJyApe1xuICAgICAgICAgICAgICAgIGJhci5jbGFzc0xpc3QuYWRkKCdob3ZlcicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBiYXIuY2xhc3NMaXN0LnJlbW92ZSgnaG92ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiYmFyVmlld1wiOlwic3JjLXZpZXdzLWJhci12aWV3LS1iYXJWaWV3XCIsXCJhY3RpdmVcIjpcInNyYy12aWV3cy1iYXItdmlldy0tYWN0aXZlXCJ9OyIsImltcG9ydCBzIGZyb20gJy4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0IEVsZW1lbnQgZnJvbSAnQFVJL2VsZW1lbnQnO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFyIGV4dGVuZHMgRWxlbWVudCB7XG5cbiAgICBwcmVyZW5kZXIoKSB7XG4gICAgICAgIHZhciBkaXYgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgaWYgKHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXY7XG4gICAgICAgIH1cbiAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQocy5iYXJDb250YWluZXIpO1xuICAgICAgICBcblxuICAgICAgICAvL2xhYmVsXG4gICAgICAgIHZhciBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgbGFiZWwuY2xhc3NMaXN0LmFkZChzLmxhYmVsLCAnanMtYmFyLWxhYmVsJyk7XG4gICAgICAgIHZhciBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICB2YXIgdGV4dCA9IHRoaXMuZGF0YS5kLmtleSB8fCAnTm90IHNwZWNpZmllZCc7XG4gICAgICAgIHRleHQgPSB0aGlzLm1vZGVsLmFiYnJldmlhdGlvbnNbdGV4dF0gfHwgdGV4dDtcbiAgICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgICAgIGxhYmVsLmFwcGVuZENoaWxkKHNwYW4pO1xuICAgICAgICB0aGlzLnBhcmVudC5sYWJlbHMucHVzaChsYWJlbCk7XG5cbiAgICAgICAgLy9pbm5lcldyYXBwZXJcbiAgICAgICAgdmFyIGlubmVyV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBpbm5lcldyYXBwZXIuY2xhc3NMaXN0LmFkZChzLmlubmVyV3JhcHBlciwgJ2pzLWlubmVyV3JhcHBlcicsICdqcy1pbm5lcldyYXBwZXItJyArIHRoaXMuZGF0YS5wcmltYXJ5KTtcbiAgICAgICAgaW5uZXJXcmFwcGVyLmRhdGFzZXQudGlwcHlDb250ZW50ID0gYDxzdHJvbmc+JHt0aGlzLmRhdGEuZC52YWx1ZXMubGVuZ3RofSBISUEke3RoaXMuZGF0YS5kLnZhbHVlcy5sZW5ndGggPiAxID8gJ3MnIDogJyd9PC9zdHJvbmc+PGJyIC8+Q2xpY2sgZm9yIGRldGFpbHNgO1xuICAgICAgICBpbm5lcldyYXBwZXIuZGF0YXNldC5rZXkgPSB0aGlzLmRhdGEuZC5rZXk7XG5cblxuICAgICAgICAvL2JhciBcbiAgICAgICAgdmFyIGJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBiYXIuY2xhc3NMaXN0LmFkZChzLmJhcik7XG4gICAgICAgIGJhci5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGVYKCR7dGhpcy5saW5lYXJTY2FsZSgpfSlgO1xuXG4gICAgICAgIC8vcGxhY2Vob2xkZXJcbiAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHBsYWNlaG9sZGVyLmNsYXNzTGlzdC5hZGQocy5wbGFjZWhvbGRlcik7XG5cbiAgICAgICAgaW5uZXJXcmFwcGVyLmFwcGVuZENoaWxkKGJhcik7XG5cbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKGlubmVyV3JhcHBlcik7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgcmV0dXJuIGRpdjtcbiAgICB9XG4gICAgbGluZWFyU2NhbGUoKSB7XG4gICAgICAgIHZhciBtYXggPSBNYXRoLm1heCguLi50aGlzLm1vZGVsLm5lc3RCeVt0aGlzLmRhdGEucHJpbWFyeV0ubWFwKGQgPT4gZC52YWx1ZXMubGVuZ3RoKSk7XG4gICAgICAgIHZhciBzY2FsZSA9IHRoaXMuZGF0YS5kLnZhbHVlcy5sZW5ndGggLyBtYXg7XG4gICAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9XG4gICAgaW5pdCgpIHtcbiAgICAgICBcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICAvKlxuICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3RoaXMucGFyZW50Lm5hbWUgPT09ICdGaWZ0eVN0YXRlVmlldycgPyB0aGlzLnBsYWNlWmVybyh0aGlzLmRhdGEuZmllbGQpICogMTAwICsgJyUnIDogMH0pIHNjYWxlWCgke3RoaXMubGluZWFyU2NhbGUodGhpcy5kYXRhLmQsIHRoaXMuZGF0YS5maWVsZCl9KWA7XG4gICAgICAgICB9KTsgICAgICAgKi9cbiAgICB9XG5cblxufVxuXG5leHBvcnQgY2xhc3MgQXhpcyBleHRlbmRzIEVsZW1lbnQge1xuXG4gICAgcHJlcmVuZGVyKCkge1xuXG4gICAgICAgIHZhciBkaXYgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgaWYgKHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXY7XG4gICAgICAgIH1cbiAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQocy5iYXJDb250YWluZXIsIHMuYXhpc0NvbnRhaW5lcik7XG4gICAgICAgIFxuXG4gICAgICAgIC8vbGFiZWxcbiAgICAgICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKHMubGFiZWwpO1xuXG4gICAgICAgIC8vaW5uZXJXcmFwcGVyXG4gICAgICAgIHZhciBpbm5lcldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgaW5uZXJXcmFwcGVyLmNsYXNzTGlzdC5hZGQocy5pbm5lcldyYXBwZXIpO1xuXG5cbiAgICAgICAgLy9iYXIgXG4gICAgICAgIHZhciBiYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgYmFyLmNsYXNzTGlzdC5hZGQocy5iYXIsIHMuYXhpc0xpbmUpXG5cbiAgICAgICAgLy9wbGFjZWhvbGRlclxuICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgcGxhY2Vob2xkZXIuY2xhc3NMaXN0LmFkZChzLnBsYWNlaG9sZGVyKTtcblxuICAgICAgICAvL21pbiBtYXJrZXIgXG4gICAgICAgIHZhciBtaW5NYXJrZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgbWluTWFya2VyLmNsYXNzTGlzdC5hZGQocy5taW5NYXJrZXIpO1xuICAgICAgICBtaW5NYXJrZXIudGV4dENvbnRlbnQgPSAnMCc7IC8vbWluIG1hcmtlciBcblxuICAgICAgICB2YXIgbWF4TWFya2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG1heE1hcmtlci5jbGFzc0xpc3QuYWRkKHMubWF4TWFya2VyKTtcbiAgICAgICAgbWF4TWFya2VyLnRleHRDb250ZW50ID0gdGhpcy5yZXR1cm5NYXgoKTtcblxuICAgICAgICBpbm5lcldyYXBwZXIuYXBwZW5kQ2hpbGQoYmFyKTtcbiAgICAgICAgaW5uZXJXcmFwcGVyLmFwcGVuZENoaWxkKG1pbk1hcmtlcik7XG4gICAgICAgIGlubmVyV3JhcHBlci5hcHBlbmRDaGlsZChtYXhNYXJrZXIpO1xuXG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChpbm5lcldyYXBwZXIpO1xuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQocGxhY2Vob2xkZXIpO1xuXG5cblxuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cbiAgICByZXR1cm5NYXgoKSB7XG4gICAgICAgIHZhciBtYXggPSBNYXRoLm1heCguLi50aGlzLm1vZGVsLm5lc3RCeVt0aGlzLmRhdGEucHJpbWFyeV0ubWFwKGQgPT4gZC52YWx1ZXMubGVuZ3RoKSk7XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgLypcbiAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt0aGlzLnBhcmVudC5uYW1lID09PSAnRmlmdHlTdGF0ZVZpZXcnID8gdGhpcy5wbGFjZVplcm8odGhpcy5kYXRhLmZpZWxkKSAqIDEwMCArICclJyA6IDB9KSBzY2FsZVgoJHt0aGlzLmxpbmVhclNjYWxlKHRoaXMuZGF0YS5kLCB0aGlzLmRhdGEuZmllbGQpfSlgO1xuICAgICAgICAgfSk7ICAgICAgICovXG4gICAgfVxuXG5cbn0iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiYmFyQ29udGFpbmVyXCI6XCJzcmMtY29tcG9uZW50cy1iYXItLWJhckNvbnRhaW5lclwiLFwibGFiZWxcIjpcInNyYy1jb21wb25lbnRzLWJhci0tbGFiZWxcIixcImlubmVyV3JhcHBlclwiOlwic3JjLWNvbXBvbmVudHMtYmFyLS1pbm5lcldyYXBwZXJcIixcImF4aXNDb250YWluZXJcIjpcInNyYy1jb21wb25lbnRzLWJhci0tYXhpc0NvbnRhaW5lclwiLFwiYmFyXCI6XCJzcmMtY29tcG9uZW50cy1iYXItLWJhclwiLFwicGxhY2Vob2xkZXJcIjpcInNyYy1jb21wb25lbnRzLWJhci0tcGxhY2Vob2xkZXJcIixcImF4aXNMaW5lXCI6XCJzcmMtY29tcG9uZW50cy1iYXItLWF4aXNMaW5lXCIsXCJtaW5NYXJrZXJcIjpcInNyYy1jb21wb25lbnRzLWJhci0tbWluTWFya2VyXCIsXCJtYXhNYXJrZXJcIjpcInNyYy1jb21wb25lbnRzLWJhci0tbWF4TWFya2VyXCJ9OyIsImltcG9ydCBFbGVtZW50IGZyb20gJ0BVSS9lbGVtZW50JztcbmltcG9ydCBzIGZyb20gJy4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0IFRoaXNEcm9wZG93biBmcm9tICdAUHJvamVjdC9jb21wb25lbnRzL2Ryb3Bkb3duJztcbmltcG9ydCBXYWZmbGUgZnJvbSAnQFByb2plY3QvY29tcG9uZW50cy93YWZmbGUnO1xuaW1wb3J0IExlZ2VuZCBmcm9tICdAUHJvamVjdC9jb21wb25lbnRzL2xlZ2VuZCc7XG5pbXBvcnQgUFMgZnJvbSAncHVic3ViLXNldHRlcic7XG4vL2ltcG9ydCB7IHN0YXRlTW9kdWxlIGFzIFMgfSBmcm9tICdzdGF0ZWZ1bC1kZWFkJztcbi8vaW1wb3J0IHsgR1RNUHVzaCB9IGZyb20gJ0BVdGlscyc7XG5cbmNvbnN0IGluaXRpYWxQcmltYXJ5ID0gJ3N0YXRlT3JUZXJyaXRvcnknO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYWZmbGVWaWV3IGV4dGVuZHMgRWxlbWVudCB7XG5cbiAgICBwcmVyZW5kZXIoKSB7XG4gICAgICAgIC8vY29udGFpbmVyXG4gICAgICAgIHZhciB2aWV3ID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIHRoaXMuZHJvcGRvd25EYXRhID0gdGhpcy5zZXREcm9wZG93bkRhdGEoaW5pdGlhbFByaW1hcnkpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnV2FmZmxlVmlldyc7XG4gICAgICAgIC8vYXN5bmMuIGRyb3Bkb3duIHdpbGwgYmUgYXBwZW5kZWQgdG8gIHJlbmRlclRvU2xlZWN0b3Igbm9kZVxuICAgICAgICAvL29ubHkgYWZ0ZXIgYHRoaXNgICh3YWZmbGUgdmlldykgaXMgcmVhZC4gdGhpcyBpcyBoYW5kbGVkIGluXG4gICAgICAgIC8vIHRoZSBjcmVhdGVDb21wb25lbnQgbWV0aG9kIGFuZCBFbGVtZW50IFxuICAgICAgICB0aGlzLmRyb3Bkb3duID0gdGhpcy5jcmVhdGVDb21wb25lbnQoVGhpc0Ryb3Bkb3duLCAnZGl2I2Ryb3Bkb3duJywge1xuICAgICAgICAgICAgcmVuZGVyVG9TZWxlY3RvcjogJy5qcy1kcm9wZG93bi1pbm5lcicsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTZWxlY3Qgc2Vjb25kYXJ5IGRpbWVuc2lvbicsXG4gICAgICAgICAgICAgICAgZGF0YTogdGhpcy5kcm9wZG93bkRhdGEuZGF0YSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnc2VsZWN0U2Vjb25kYXJ5RGltZW5zaW9uJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZHJlbihbXG4gICAgICAgICAgICB0aGlzLmRyb3Bkb3duLFxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoV2FmZmxlLCAnZGl2I3dhZmZsZScsIHtcbiAgICAgICAgICAgICAgICByZW5kZXJUb1NlbGVjdG9yOiAnLmpzLXdhZmZsZS1jb250YWluZXInLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeTogaW5pdGlhbFByaW1hcnksXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudChMZWdlbmQsICdkaXYjbGVnZW5kJywge1xuICAgICAgICAgICAgICAgIHJlbmRlclRvU2VsZWN0b3I6ICcuanMtbGVnZW5kLWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBwcmltYXJ5OiBpbml0aWFsUHJpbWFyeSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICBdKTtcbiAgICAgICAgaWYgKHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3OyAvLyBpZiBwcmVyZW5kZXJlZCBhbmQgbm8gbmVlZCB0byByZW5kZXIgKG5vIGRhdGEgbWlzbWF0Y2gpXG4gICAgICAgIH1cbiAgICAgICAgdmlldy5jbGFzc0xpc3QuYWRkKHMud2FmZmxlVmlldyk7XG5cblxuICAgICAgICAvLyBoZWFkaW5nXG4gICAgICAgIHZpZXcuYXBwZW5kQ2hpbGQodGhpcy5yZXR1cm5IZWFkaW5nKGluaXRpYWxQcmltYXJ5KSk7XG5cbiAgICAgICAgLy9kcm9wZG93biBjb250YWluZXJcbiAgICAgICAgdmlldy5hcHBlbmRDaGlsZCh0aGlzLnJldHVybkRyb3Bkb3duV3JhcHBlcihpbml0aWFsUHJpbWFyeSkpO1xuXG5cbiAgICAgICAgLy93YWZmbGUgY29udGFpbmVyXG4gICAgICAgIHZhciB3YWZmbGVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgd2FmZmxlQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2pzLXdhZmZsZS1jb250YWluZXInKTtcblxuICAgICAgICAvL2xlZ2VuZCBjb250YWluZXJcbiAgICAgICAgdmFyIGxlZ2VuZENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBsZWdlbmRDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnanMtbGVnZW5kLWNvbnRhaW5lcicpO1xuICAgICAgICB3YWZmbGVDb250YWluZXIuYXBwZW5kQ2hpbGQobGVnZW5kQ29udGFpbmVyKTtcblxuICAgICAgICB2aWV3LmFwcGVuZENoaWxkKHdhZmZsZUNvbnRhaW5lcik7XG5cbiAgICAgICAgdmFyIG5vdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgIG5vdGUuY2xhc3NMaXN0LmFkZChzLm5vdGUpO1xuICAgICAgICBub3RlLnRleHRDb250ZW50ID0gJ1BsZWFzZSBub3RlIHRoYXQgYSBzaW5nbGUgSElBIG1heSBhcHBlYXIgaW4gbXVsdGlwbGUgY2F0ZWdvcmllcy4nXG4gICAgICAgIHZpZXcuYXBwZW5kQ2hpbGQobm90ZSk7XG5cbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIHJldHVybkhlYWRpbmcocHJpbWFyeURpbWVuc2lvbil7XG4gICAgICAgIHZhciBpbnN0cnVjdCA9IHRoaXMubW9kZWwuZmllbGRzLmZpbmQoZCA9PiBkLmtleSA9PT0gcHJpbWFyeURpbWVuc2lvbikuaW5zdHJ1Y3Q7XG4gICAgICAgIHZhciBoZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcbiAgICAgICAgaGVhZGluZy50ZXh0Q29udGVudCA9IGluc3RydWN0O1xuICAgICAgICBoZWFkaW5nLmNsYXNzTGlzdC5hZGQocy5pbnN0cnVjdEhlYWRpbmcsICdqcy1pbnN0cnVjdC1oZWFkaW5nJyk7XG4gICAgICAgIHJldHVybiBoZWFkaW5nO1xuICAgIH1cbiAgICByZXR1cm5Ecm9wZG93bldyYXBwZXIoKXtcbiAgICAgICAgdmFyIGRyb3Bkb3duV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBkcm9wZG93bldyYXBwZXIuY2xhc3NMaXN0LmFkZChzLmRyb3Bkb3duV3JhcHBlciwgcy5oaWRlKTtcbiAgICAgICAgdmFyIGRyb3Bkb3duSW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICAgIGRyb3Bkb3duT3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICAgIGRyb3Bkb3duTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuXG4gICAgICAgIHRoaXMuY2hpbGRyZW5bMF0uZWwucXVlcnlTZWxlY3RvcignLmpzLWlucHV0LWRpdicpLmlkID0gYGxhYmVsLWRyb3Bkb3duLSR7dGhpcy5kcm9wZG93bkRhdGEudHlwZX0tdmFsdWVgO1xuICAgICAgICB0aGlzLmNoaWxkcmVuWzBdLmVsLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbGxlZGJ5JywgYGxhYmVsLWRyb3Bkb3duLSR7dGhpcy5kcm9wZG93bkRhdGEudHlwZX0gbGFiZWwtZHJvcGRvd24tJHt0aGlzLmRyb3Bkb3duRGF0YS50eXBlfS12YWx1ZWApO1xuICAgICAgICAvKiBUTyBETyAqL1xuICAgICAgICB0aGlzLmNoaWxkcmVuWzBdLmVsLnF1ZXJ5U2VsZWN0b3IoJ3VsJykuc2V0QXR0cmlidXRlKCdhcmlhLWNvbnRyb2xzJywgJ1RPRE9ET0RPRE8nKTtcbiAgICAgICAgZHJvcGRvd25PdXRlci5jbGFzc0xpc3QuYWRkKHMuZHJvcGRvd25PdXRlcik7XG4gICAgICAgIGRyb3Bkb3duTGFiZWwuaW5uZXJUZXh0ID0gdGhpcy5kcm9wZG93bkRhdGEubGFiZWw7XG4gICAgICAgIGRyb3Bkb3duTGFiZWwuc2V0QXR0cmlidXRlKCdpZCcsICdsYWJlbC1kcm9wZG93bi0nICsgdGhpcy5kcm9wZG93bkRhdGEudHlwZSk7XG4gICAgICAgIGRyb3Bkb3duSW5uZXIuY2xhc3NMaXN0LmFkZCgnanMtZHJvcGRvd24taW5uZXInLCBzLmRyb3Bkb3duSW5uZXIpO1xuICAgICAgICAvL2Ryb3Bkb3duSW5uZXIuYXBwZW5kQ2hpbGQoZHJvcGRvd24uZWwpO1xuICAgICAgICBkcm9wZG93bk91dGVyLmFwcGVuZENoaWxkKGRyb3Bkb3duTGFiZWwpO1xuICAgICAgICBkcm9wZG93bk91dGVyLmFwcGVuZENoaWxkKGRyb3Bkb3duSW5uZXIpO1xuICAgICAgICBkcm9wZG93bldyYXBwZXIuYXBwZW5kQ2hpbGQoZHJvcGRvd25PdXRlcik7XG4gICAgICAgIHJldHVybiBkcm9wZG93bldyYXBwZXI7XG4gICAgfVxuICAgIHNldERyb3Bkb3duRGF0YShwcmltYXJ5RGltZW5zaW9uKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbDogXCJTZWNvbmRhcnkgZGltZW5zaW9uOlwiLFxuICAgICAgICAgICAgZGF0YTogdGhpcy5tb2RlbC5maWVsZHMuZmluZChmID0+IGYua2V5ID09PSBwcmltYXJ5RGltZW5zaW9uKS5zZWNvbmRhcnlEaW1lbnNpb25zLm1hcCgoZCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IHRoaXMubW9kZWwuZmllbGRzLmZpbmQoZl8gPT4gZl8ua2V5ID09PSBkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZDogbWF0Y2gua2V5LFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogbWF0Y2guaGVhZGluZyxcbiAgICAgICAgICAgICAgICAgICAgaXNEZWZhdWx0U2VsZWN0aW9uOiBpID09PSAwID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0eXBlOiAnc2VsZWN0U2Vjb25kYXJ5RGltZW5zaW9uJ1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpbml0KCkge1xuICAgICAgICBcbiAgICAgICAgUFMuc2V0U3VicyhbXG4gICAgICAgICAgICBbJ3NlbGVjdFByaW1hcnlHcm91cCcsIHRoaXMudG9nZ2xlSGVhZGluZy5iaW5kKHRoaXMpXSxcbiAgICAgICAgICAgIFsnc2VsZWN0UHJpbWFyeUdyb3VwJywgdGhpcy50b2dnbGVEcm9wZG93bi5iaW5kKHRoaXMpXSxcbiAgICAgICAgICAgIFsnc2VsZWN0UHJpbWFyeUdyb3VwJywgdGhpcy5zY3JvbGxJZk5lY2Vzc2FyeS5iaW5kKHRoaXMpXSxcbiAgICAgICAgICAgIFsndmlldycsIHRoaXMudXBkYXRlLmJpbmQodGhpcyldLFxuICAgICAgICBdKTtcbiAgICAgICAgLyogdG8gZG8qL1xuXG4gICAgICAgIC8vc3Vic2NyaWJlIHRvIHNlY29uZGFyeSBkaW1lbnNpb24gLCBkcmlsbGRvd24sIGRldGFpbHNcbiAgICB9XG4gICAgdXBkYXRlKG1zZyxkYXRhKXtcbiAgICAgICAgLy8gaGVhZGluZ1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtaW5zdHJ1Y3QtaGVhZGluZycpLnRleHRDb250ZW50ID0gdGhpcy5yZXR1cm5IZWFkaW5nKGRhdGEpLnRleHRDb250ZW50O1xuXG4gICAgICAgIC8vZHJvcGRvd25cbiAgICAgICAgdGhpcy5kcm9wZG93bkRhdGEgPSB0aGlzLnNldERyb3Bkb3duRGF0YShkYXRhKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLmRyb3Bkb3duV3JhcHBlcikuaW5uZXJIVE1MID0gdGhpcy5yZXR1cm5Ecm9wZG93bldyYXBwZXIoZGF0YSkuaW5uZXJIVE1MO1xuICAgICAgICB0aGlzLmRyb3Bkb3duID0gdGhpcy5jcmVhdGVDb21wb25lbnQoVGhpc0Ryb3Bkb3duLCAnZGl2I2Ryb3Bkb3duJywge1xuICAgICAgICAgICAgcmVuZGVyVG9TZWxlY3RvcjogJy5qcy1kcm9wZG93bi1pbm5lcicsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTZWxlY3Qgc2Vjb25kYXJ5IGRpbWVuc2lvbicsXG4gICAgICAgICAgICAgICAgZGF0YTogdGhpcy5kcm9wZG93bkRhdGEuZGF0YSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnc2VsZWN0U2Vjb25kYXJ5RGltZW5zaW9uJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kcm9wZG93bi5pbml0KCk7XG4gICAgfVxuICAgIHNjcm9sbElmTmVjZXNzYXJ5KG1zZykge1xuICAgICAgICB2YXIgc3BsaXQgPSBtc2cuc3BsaXQoJy4nKTtcbiAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCA+IDEgJiYgc3BsaXRbMV0gPT09ICdtYXAnKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFBhZ2VJZk5lY2Vzc2FyeSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNjcm9sbFBhZ2VJZk5lY2Vzc2FyeSgpIHtcbiAgICAgICAgdmFyIG5vZGVTaG93aW5nRGV0YWlscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zaG93LWRldGFpbHMnKTtcbiAgICAgICAgdmFyIHJlY3QgPSBub2RlU2hvd2luZ0RldGFpbHMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciB0byA9IHJlY3QudG9wIC0gMTA1O1xuXG4gICAgICAgIGlmIChyZWN0LnRvcCA+IHdpbmRvdy5pbm5lckhlaWdodCAtIDEwMCkge1xuICAgICAgICAgICAgdGhpcy5zbW9vdGhTY3JvbGwoJyNwZXctYXBwJywgdG8pLnRoZW4odGhpcy5zY3JvbGxXYWZmbGVJZk5lY2Vzc2FyeSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsV2FmZmxlSWZOZWNlc3NhcnkoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzY3JvbGxXYWZmbGVJZk5lY2Vzc2FyeSgpIHtcbiAgICAgICAgdmFyIG5vZGVTaG93aW5nRGV0YWlscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zaG93LWRldGFpbHMnKTtcbiAgICAgICAgXG4gICAgICAgIHZhciB0byA9IG5vZGVTaG93aW5nRGV0YWlscy5vZmZzZXRUb3AgLSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtd2FmZmxlLWNvbnRhaW5lci1pbm5lcicpLm9mZnNldFRvcDtcbiAgICAgICAgdGhpcy5zbW9vdGhTY3JvbGwoJy5qcy13YWZmbGUtY29udGFpbmVyLWlubmVyJywgdG8pO1xuXG4gICAgfVxuICAgIHNtb290aFNjcm9sbChzZWxlY3RvciwgdG8sIGR1cmF0aW9uID0gMjAwKSB7IC8vIEhUOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDUzMjUxNDBcblxuICAgICAgICBNYXRoLmVhc2VJbk91dFF1YWQgPSBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgICAgICAgICB0IC89IGQgLyAyO1xuICAgICAgICAgICAgaWYgKHQgPCAxKSByZXR1cm4gYyAvIDIgKiB0ICogdCArIGI7XG4gICAgICAgICAgICB0LS07XG4gICAgICAgICAgICByZXR1cm4gLWMgLyAyICogKHQgKiAodCAtIDIpIC0gMSkgKyBiO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpLFxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gZWxlbWVudC5zY3JvbGxUb3AsXG4gICAgICAgICAgICAgICAgZGlmZmVyZW5jZSA9IHRvIC0gc3RhcnQsXG4gICAgICAgICAgICAgICAgY3VycmVudFRpbWUgPSAwLFxuICAgICAgICAgICAgICAgIGluY3JlbWVudCA9IDIwO1xuXG4gICAgICAgICAgICB2YXIgYW5pbWF0ZVNjcm9sbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUaW1lICs9IGluY3JlbWVudDtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gTWF0aC5lYXNlSW5PdXRRdWFkKGN1cnJlbnRUaW1lLCBzdGFydCwgZGlmZmVyZW5jZSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsVG9wID0gdmFsO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VGltZSA8IGR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoYW5pbWF0ZVNjcm9sbCwgaW5jcmVtZW50KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGluY3JlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFuaW1hdGVTY3JvbGwoKTtcbiAgICAgICAgfSk7XG5cblxuICAgICAgICAvL3QgPSBjdXJyZW50IHRpbWVcbiAgICAgICAgLy9iID0gc3RhcnQgdmFsdWVcbiAgICAgICAgLy9jID0gY2hhbmdlIGluIHZhbHVlXG4gICAgICAgIC8vZCA9IGR1cmF0aW9uXG5cblxuICAgIH1cbiAgICB0b2dnbGVIZWFkaW5nKG1zZywgZGF0YSkge1xuICAgICAgICB2YXIgaGVhZGluZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgcy5pbnN0cnVjdEhlYWRpbmcpO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgaGVhZGluZy5jbGFzc0xpc3QuYWRkKHMuaGlkZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoZWFkaW5nLmNsYXNzTGlzdC5yZW1vdmUocy5oaWRlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b2dnbGVEcm9wZG93bihtc2csIGRhdGEpIHtcbiAgICAgICAgdmFyIGRyb3Bkb3duID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLmRyb3Bkb3duV3JhcHBlcik7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICBkcm9wZG93bi5jbGFzc0xpc3QucmVtb3ZlKHMuaGlkZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkcm9wZG93bi5jbGFzc0xpc3QuYWRkKHMuaGlkZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xpY2tIYW5kbGVyKCkge1xuICAgICAgICAvKiB0byBkbyAqL1xuXG4gICAgfVxufSIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ3YWZmbGVWaWV3XCI6XCJzcmMtdmlld3Mtd2FmZmxlLXZpZXctLXdhZmZsZVZpZXdcIixcImluc3RydWN0SGVhZGluZ1wiOlwic3JjLXZpZXdzLXdhZmZsZS12aWV3LS1pbnN0cnVjdEhlYWRpbmdcIixcImhpZGVcIjpcInNyYy12aWV3cy13YWZmbGUtdmlldy0taGlkZVwiLFwiZHJvcGRvd25XcmFwcGVyXCI6XCJzcmMtdmlld3Mtd2FmZmxlLXZpZXctLWRyb3Bkb3duV3JhcHBlclwiLFwiZHJvcGRvd25PdXRlclwiOlwic3JjLXZpZXdzLXdhZmZsZS12aWV3LS1kcm9wZG93bk91dGVyXCIsXCJkcm9wZG93bklubmVyXCI6XCJzcmMtdmlld3Mtd2FmZmxlLXZpZXctLWRyb3Bkb3duSW5uZXJcIixcImxhYmVsXCI6XCJzcmMtdmlld3Mtd2FmZmxlLXZpZXctLWxhYmVsXCIsXCJzb3J0QWN0aXZlXCI6XCJzcmMtdmlld3Mtd2FmZmxlLXZpZXctLXNvcnRBY3RpdmVcIixcIm5vdGVcIjpcInNyYy12aWV3cy13YWZmbGUtdmlldy0tbm90ZVwifTsiLCJpbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCB7IERyb3Bkb3duIH0gZnJvbSAnQFVJL2lucHV0cy9pbnB1dHMuanMnO1xuaW1wb3J0IHsgc3RhdGVNb2R1bGUgYXMgUyB9IGZyb20gJ3N0YXRlZnVsLWRlYWQnO1xuLy9pbXBvcnQgeyBHVE1QdXNoIH0gZnJvbSAnQFV0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhpc0Ryb3Bkb3duIGV4dGVuZHMgRHJvcGRvd24ge1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCBvcHRpb25zKXtcbiAgICAgICAgdmFyIF9kYXRhID0gW107XG4gICAgICAgIHZhciBkcm9wZG93blR5cGUgPSBvcHRpb25zLmRhdGEudHlwZTtcbiAgICAgICAgb3B0aW9ucy5kYXRhLmRhdGEuZm9yRWFjaChkID0+IHtcbiAgICAgICAgICAgICAgICBfZGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGQuZmllbGQsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGQubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBkLmlzRGVmYXVsdFNlbGVjdGlvbiA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgb3B0aW9ucy5kYXRhID0gX2RhdGEuc29ydChmdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICAgICAgICAgIHJldHVybiBhLm5hbWUgPCBiLm5hbWUgPyAtMSA6IGEubmFtZSA+IGIubmFtZSA/IDEgOiBhLm5hbWUgPj0gYi5uYW1lID8gMCA6IE5hTjtcbiAgICAgICAgfSk7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG5cbiAgICAgICAgdGhpcy5kcm9wZG93blR5cGUgPSBkcm9wZG93blR5cGU7XG4gICAgfVxuICAgIHByZXJlbmRlcigpe1xuICAgICAgICAvL2NvbnRhaW5lclxuICAgICAgICB2YXIgZHJvcGRvd24gPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZHJvcGRvd247IC8vIGlmIHByZXJlbmRlcmVkIGFuZCBubyBuZWVkIHRvIHJlbmRlciAobm8gZGF0YSBtaXNtYXRjaClcbiAgICAgICAgfVxuICAgICAgICBkcm9wZG93bi5jbGFzc0xpc3QuYWRkKHMuZHJvcGRvd24sICdqcy1kcm9wZG93bicpO1xuICAgICAgICByZXR1cm4gZHJvcGRvd247XG4gICAgfVxuICAgIG9uQ2hhbmdlKCl7XG4gICAgICAgIFMuc2V0U3RhdGUodGhpcy5kcm9wZG93blR5cGUsIHRoaXMuc2VsZWN0ZWRPcHRpb24uZGF0YXNldC52YWx1ZSk7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgIH1cbiAgICBcbn0iLCJpbXBvcnQgeyBET01IZWxwZXJzIGFzICRkIH0gZnJvbSAnQFV0aWxzJztcbmltcG9ydCBFbGVtZW50IGZyb20gJy4vLi4vZWxlbWVudC8nO1xuaW1wb3J0IHMgZnJvbSAnLi9zdHlsZXMuc2Nzcyc7XG5cbmV4cG9ydCBjbGFzcyBUZXh0SW5wdXQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3RvciA9ICdpbnB1dCcsIG9wdGlvbnMpe1xuICAgICAgICBzdXBlcihzZWxlY3Rvciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHByZXJlbmRlcigpe1xuICAgICAgICB2YXIgaW5wdXQgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0OyBcbiAgICAgICAgfVxuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRHJvcGRvd24gZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rvciwgb3B0aW9ucyl7XG4gICAgICAgIFxuICAgICAgICB2YXIgZWwgPSBzZWxlY3Rvci5zcGxpdCgnLicpWzBdLnNwbGl0KCcjJylbMF0sXG4gICAgICAgICAgICBrbGFzcyxcbiAgICAgICAgICAgIGlkO1xuXG4gICAgICAgIGlmICggZWwgIT09ICdkaXYnICkge1xuICAgICAgICAgICAgaWYgKCBzZWxlY3Rvci5zcGxpdCgnLicpLmxlbmd0aCA+IDEgKXtcbiAgICAgICAgICAgICAgICBrbGFzcyA9IHNlbGVjdG9yLnNwbGl0KCcuJylbMF0uc3BsaXQoJyMnKVswXTsgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIHNlbGVjdG9yLnNwbGl0KCcjJykubGVuZ3RoID4gMSApe1xuICAgICAgICAgICAgICAgIGlkID0gc2VsZWN0b3Iuc3BsaXQoJyMnKVswXS5zcGxpdCgnLicpWzBdOyBcbiAgICAgICAgICAgIH0gIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBlbCA9ICdkaXYnO1xuICAgICAgICAgICAgc2VsZWN0b3IgPSBlbCArICggaWQgIT09IHVuZGVmaW5lZCA/ICcjJyArIGlkIDogJycgKSArICgga2xhc3MgIT09IHVuZGVmaW5lZCA/ICcuJyArIGtsYXNzIDogJycgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyKHNlbGVjdG9yLCBvcHRpb25zKTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ3VsJyk7XG4gICAgICAgIHRoaXMuYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcbiAgICAgICAgdGhpcy5faXNPcGVuID0gZmFsc2U7XG4gICAgfVxuICAgIHNldCBpc09wZW4oYm9vbCl7XG5cbiAgICAgICAgdGhpcy5faXNPcGVuID0gYm9vbDtcbiAgICAgICAgZnVuY3Rpb24gYm9keUNsaWNrSGFuZGxlcigpe1xuICAgICAgICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIGJvb2wgKXtcbiAgICAgICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZChzLmlzT3Blbik7XG4gICAgICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5ib2R5LlVJQ29udHJvbElzT3BlbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBib2R5Q2xpY2tIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKHMuaXNPcGVuKTtcbiAgICAgICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5ib2R5LlVJQ29udHJvbElzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYm9keUNsaWNrSGFuZGxlci5iaW5kKHRoaXMpKTsgICBcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaXNPcGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNPcGVuO1xuICAgIH1cbiAgICBzZXQgc2VsZWN0ZWRPcHRpb24oaXRlbSkge1xuICAgICAgICB0aGlzLl9zZWxlY3RlZE9wdGlvbiA9IGl0ZW07XG4gICAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5wdXQudGV4dENvbnRlbnQgPSB0aGlzLl9zZWxlY3RlZE9wdGlvbi5pbm5lclRleHQ7XG5cbiAgICAgICAgaWYgKCB0aGlzLm9uQ2hhbmdlICkge1xuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICB9IFxuICAgIH1cbiAgICBnZXQgc2VsZWN0ZWRPcHRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZE9wdGlvbjtcbiAgICB9XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIFxuICAgICAgICB2YXIgd3JhcHBlciA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVyLnNldEF0dHJpYnV0ZSgnYXJpYS1oYXNwb3B1cCcsICdsaXN0Ym94Jyk7XG4gICAgICAgIHdyYXBwZXIuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgIHdyYXBwZXIuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuICAgICAgICB2YXIgaW5wdXQgPSAkZC5jKCdkaXYuanMtaW5wdXQtZGl2Jyk7XG5cbiAgICAgICAgdmFyIG9wdGlvbnNMaXN0ID0gJGQuYygndWwnKTtcbiAgICAgICAgXG4gICAgICAgIG9wdGlvbnNMaXN0LnNldEF0dHJpYnV0ZSgnYXJpYS1yb2xlJywnbGlzdGJveCcpO1xuICAgICAgICAvL29wdGlvbnNMaXN0LnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbGxlZGJ5JywgJ2xhYmVsLWRyb3Bkb3duLScgKyB0aGlzLmRyb3Bkb3duVHlwZSApO1xuICAgICAgICB0aGlzLmRhdGEuZm9yRWFjaChlYWNoID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIG9wdGlvbiA9ICRkLmMoJ2xpJyk7XG4gICAgICAgICAgICBvcHRpb24uc2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJywgZWFjaC52YWx1ZSk7XG4gICAgICAgICAgICBvcHRpb24uc2V0QXR0cmlidXRlKCdhcmlhLXJvbGUnLCAnb3B0aW9uJyk7XG4gICAgICAgICAgICBvcHRpb24uaW5uZXJIVE1MID0gZWFjaC5uYW1lO1xuXG4gICAgICAgICAgICBvcHRpb24uaWQgPSAnZHJvcGRvd24taXRlbS0nICsgZWFjaC52YWx1ZTtcbiAgICAgICAgICAgIGlmICggZWFjaC5zZWxlY3RlZCApe1xuICAgICAgICAgICAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIG9wdGlvbi5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIGlucHV0LnRleHRDb250ZW50ID0gZWFjaC5uYW1lO1xuICAgICAgICAgICAgICAgIG9wdGlvbnNMaXN0LnNldEF0dHJpYnV0ZSgnYXJpYS1hY3RpdmVkZXNjZW5kYW50Jywgb3B0aW9uLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnNMaXN0LmFwcGVuZENoaWxkKG9wdGlvbilcbiAgICAgICAgfSk7XG4gICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoaW5wdXQpXG4gICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQob3B0aW9uc0xpc3QpXG4gICAgICAgIHdyYXBwZXIuY2xhc3NMaXN0LmFkZChzLlBDVERyb3Bkb3duKTtcbiAgICAgICAgLy93cmFwcGVyLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsJ2ZhbHNlJyk7XG4gICAgICAgIHdyYXBwZXIuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICcwJyk7XG4gICAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgXG4gICAgICAgdGhpcy5pbnB1dCA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcignLmpzLWlucHV0LWRpdicpO1xuICAgICAgIHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnbGknKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtQ2xpY2tIYW5kbGVyKGl0ZW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgfSk7IFxuICAgICAgIHRoaXMuX3NlbGVjdGVkT3B0aW9uID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCdsaS5zZWxlY3RlZCcpO1xuXG4gICAgICAgdGhpcy50b0JlU2VsZWN0ZWQgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ2xpLnNlbGVjdGVkJyk7XG4gICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xpY2tIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIGUua2V5Q29kZSA9PT0gOSApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhYkhhbmRsZXIuY2FsbCh0aGlzLGUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggWzMyLDM4LDQwXS5pbmRleE9mKGUua2V5Q29kZSkgPiAtMSApeyAvLyAzMiBzcGFjZSwgMzggdXAgYXJyb3csIDQwIGRvd24gYXJyb3dcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnQgc2Nyb2xsaW5nIG9uIHNwYWNlIGFuZCBhcnJvd1xuICAgICAgICAgICAgICAgIHRoaXMuc3BhY2VBbmRBcnJvd0hhbmRsZXIuY2FsbCh0aGlzLCBlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIFsxMywyN10uaW5kZXhPZihlLmtleUNvZGUgPiAtMSApICl7IC8vIDEzIGVudGVyLCAyNyBlc2NhcGVcbiAgICAgICAgICAgICAgICBpZiAoIHRoaXMuaXNPcGVuICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGVyQW5kRXNjYXBlSGFuZGxlci5jYWxsKHRoaXMsIGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgIFxuICAgIH1cbiAgICBpdGVtQ2xpY2tIYW5kbGVyKGl0ZW0pe1xuICAgICAgICBcbiAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJyk7XG4gICAgICAgIHRoaXMudG9CZVNlbGVjdGVkID0gaXRlbTtcbiAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgJ3RydWUnKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLnNldEF0dHJpYnV0ZSgnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgaXRlbS5pZCk7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb24gPSB0aGlzLnRvQmVTZWxlY3RlZDtcbiAgICB9XG4gICAgZW50ZXJBbmRFc2NhcGVIYW5kbGVyKGUpeyAvLyBvbmx5IGNhbGxlZCBpcyB0aGlzLmlzT3BlblxuICAgICAgICBpZiAoIGUua2V5Q29kZSA9PT0gMjcgKSB7IC8vIGVzYyBrZXlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb24uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIHRoaXMudG9CZVNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZE9wdGlvbjtcbiAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7ICAgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbiA9IHRoaXMudG9CZVNlbGVjdGVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNwYWNlQW5kQXJyb3dIYW5kbGVyKGUpe1xuICAgICAgICBpZiAoIGUua2V5Q29kZSA9PT0gMzIgKSB7IC8vIHNwYWNlXG4gICAgICAgICAgICBpZiAoICF0aGlzLmlzT3BlbiApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzT3BlbiA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGhlcmUgY2FsbCB0byBmbiB0aGF0IHNlbGVjdHMgdGhlIHRvQmVTbGVjdGVkIG9wdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFycm93IGtleXNcbiAgICAgICAgaWYgKCAhdGhpcy5pc09wZW4gKXtcbiAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBpcyBvcGVuXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gZS5rZXlDb2RlID09PSAzOCA/IHRoaXMudG9CZVNlbGVjdGVkLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgOiB0aGlzLnRvQmVTZWxlY3RlZC5uZXh0RWxlbWVudFNpYmxpbmc7IFxuICAgICAgICAgICAgaWYgKCBuZXh0ICkgeyAvLyBpZiB0aGVyZSBpcyBhbiBvcHRpb24gYmVmb3JlL2FmdGVyIHRoZSBjdXJyZW50bHkgdG9CZVNlbGVjdGVkIG9wdGlvbiwgbWFrZSB0aGF0IHRoZSB0b0JlU2VsZWN0ZWQgb3B0aW9uXG4gICAgICAgICAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvQmVTZWxlY3RlZCA9IG5leHQ7XG4gICAgICAgICAgICAgICAgdGhpcy50b0JlU2VsZWN0ZWQuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB0YWJIYW5kbGVyKGUpe1xuICAgICAgICBpZiAoIHRoaXMuaXNPcGVuICl7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xpY2tIYW5kbGVyKGUpe1xuICAgICAgICBpZiAoIHRoaXMuaXNPcGVuIHx8ICF0aGlzLmJvZHkuVUlDb250cm9sSXNPcGVuICl7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5pc09wZW4gPSAhdGhpcy5pc09wZW47XG4gICAgICAgIH1cbiAgICB9XG59IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIlBDVERyb3Bkb3duXCI6XCJzdWJtb2R1bGVzLVVJLWpzLWlucHV0cy0tUENURHJvcGRvd25cIixcImlzT3BlblwiOlwic3VibW9kdWxlcy1VSS1qcy1pbnB1dHMtLWlzT3BlblwifTsiLCJpbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudCc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCB7IHN0YXRlTW9kdWxlIGFzIFMgfSBmcm9tICdzdGF0ZWZ1bC1kZWFkJztcbmltcG9ydCBQUyBmcm9tICdwdWJzdWItc2V0dGVyJztcbmltcG9ydCB0aXBweSBmcm9tICd0aXBweS5qcyc7XG5cbi8vaW1wb3J0IHsgR1RNUHVzaCB9IGZyb20gJ0BVdGlscyc7XG5cblxuXG5cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYWZmbGUgZXh0ZW5kcyBFbGVtZW50IHtcblxuICAgIHByZXJlbmRlcigpIHtcbiAgICAgICAgLy9jb250YWluZXJcbiAgICAgICAgdmFyIHZpZXcgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1dhZmZsZSc7XG4gICAgICAgIHRoaXMubmVzdGVkRGF0YSA9IHRoaXMubW9kZWwubmVzdEJ5W3RoaXMuZGF0YS5wcmltYXJ5XTtcbiAgICAgICAgdGhpcy5zZWNvbmRhcnkgPSB0aGlzLm1vZGVsLmZpZWxkcy5maW5kKHMgPT4gcy5rZXkgPT09IHRoaXMuZGF0YS5wcmltYXJ5KS5zZWNvbmRhcnlEaW1lbnNpb25zWzBdO1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3OyAvLyBpZiBwcmVyZW5kZXJlZCBhbmQgbm8gbmVlZCB0byByZW5kZXIgKG5vIGRhdGEgbWlzbWF0Y2gpXG4gICAgICAgIH1cblxuICAgICAgICAgICAgLy9zaG93QWxsRGV0YWlsc1xuICAgICAgICB2YXIgc2hvd0FsbERldGFpbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgc2hvd0FsbERldGFpbHMuY2xhc3NMaXN0LmFkZChzLnNob3dBbGxEZXRhaWxzKTtcbiAgICAgICAgc2hvd0FsbERldGFpbHMudGV4dENvbnRlbnQgPSB0aGlzLnVwZGF0ZVNob3dBbGxEZXRhaWxzKHRoaXMuZGF0YS5wcmltYXJ5KTtcbiAgICAgICAgdmlldy5hcHBlbmRDaGlsZChzaG93QWxsRGV0YWlscyk7XG5cbiAgICAgICAgLy9jb250YWluZXJcbiAgICAgICAgdmFyIHdhZmZsZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB3YWZmbGVDb250YWluZXIuY2xhc3NMaXN0LmFkZChzLndhZmZsZUNvbnRhaW5lciwgJ2pzLXdhZmZsZS1jb250YWluZXItaW5uZXInKTtcblxuICAgICAgICB0aGlzLnJlbmRlcigpLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgICAgICAgd2FmZmxlQ29udGFpbmVyLmFwcGVuZENoaWxkKGdyb3VwKVxuICAgICAgICB9KTtcbiAgICAgICAgXG5cbiAgICAgICAgdmlldy5hcHBlbmRDaGlsZCh3YWZmbGVDb250YWluZXIpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIHJlbmRlcigpe1xuICAgICAgICAvL2dyb3Vwc1xuICAgICAgICB2YXIgZ3JvdXBzID0gW107XG4gICAgICAgIGZ1bmN0aW9uIHJldHVybk1hdGNoaW5nVmFsdWVzTGVuZ3RoKGFiKSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSB0aGlzLm1vZGVsLmZpZWxkcy5maW5kKGYgPT4gZi5rZXkgPT09IHRoaXMuc2Vjb25kYXJ5KTtcbiAgICAgICAgICAgIGlmICggbWF0Y2gub3JkZXIgKSB7IC8vIGlmIGFuIG9yZGVyIGZvciB0aGUgc2Vjb25kYXJ5IGZpZWxkcyBpcyBoYXJkIGNvZGVkXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFiW3RoaXMuc2Vjb25kYXJ5XVswXSAhPT0gJycgPyAtbWF0Y2gub3JkZXIuaW5kZXhPZihhYlt0aGlzLnNlY29uZGFyeV1bMF0pIDogLTk5OTk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5uZXN0QnlbdGhpcy5zZWNvbmRhcnldLmZpbmQoZCA9PiBkLmtleSA9PT0gYWJbdGhpcy5zZWNvbmRhcnldWzBdKS52YWx1ZXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmVzdGVkRGF0YS5mb3JFYWNoKGdyb3VwID0+IHtcbiAgICAgICAgICAgIHZhciBncm91cERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZ3JvdXBEaXYuZGF0YXNldC5ncm91cCA9IGdyb3VwLmtleTtcbiAgICAgICAgICAgIGdyb3VwRGl2LmRhdGFzZXQuY291bnQgPSBncm91cC52YWx1ZXMubGVuZ3RoO1xuICAgICAgICAgICAgZ3JvdXBEaXYuY2xhc3NMaXN0LmFkZChzLmdyb3VwRGl2LCAnanMtZ3JvdXAtJyArIHRoaXMuYXBwLmNsZWFuS2V5KGdyb3VwLmtleSkpO1xuICAgICAgICAgICAgZ3JvdXBEaXYuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgYDxoMiBjbGFzcz1cIiR7cy5ncm91cERpdkhlYWRpbmd9XCI+JHtncm91cC5rZXkgIT09ICcnID8gZ3JvdXAua2V5IDogJ1tibGFua10nfSAmbmRhc2g7IDxzcGFuIGNsYXNzPVwiJHtzLml0ZW1Db3VudH1cIj4ke2dyb3VwLnZhbHVlcy5sZW5ndGh9PC9zcGFuPjwvaDI+YCk7XG5cblxuICAgICAgICAgICAgdmFyIGl0ZW1zQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBpdGVtc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHMuaXRlbXNDb250YWluZXIpO1xuICAgICAgICAgICAgaXRlbXNDb250YWluZXIuc3R5bGUud2lkdGggPSBNYXRoLmNlaWwoTWF0aC5zcXJ0KGdyb3VwLnZhbHVlcy5sZW5ndGgpKSAqIDI4ICsgJ3B4JztcblxuICAgICAgICAgICAgLy8gbGluZSBhYm92ZSBzZXRzIHdpZHRoIG9mIGVhY2ggc28gdGhhdCBlYWNoIGlzIGFzIGNsb3NlIHRvIGEgc3F1YXJlIGFzIHBvc3NpYmxlXG4gICAgICAgICAgICBncm91cC52YWx1ZXMuc29ydCgoYSwgYikgPT4gcmV0dXJuTWF0Y2hpbmdWYWx1ZXNMZW5ndGguY2FsbCh0aGlzLCBiKSAtIHJldHVybk1hdGNoaW5nVmFsdWVzTGVuZ3RoLmNhbGwodGhpcywgYSkpO1xuICAgICAgICAgICAgZ3JvdXAudmFsdWVzLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy9pdGVtc1xuICAgICAgICAgICAgICAgIHZhciBpdGVtRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgdmFyIGNsZWFuU2Vjb25kYXJ5ID0gdGhpcy5hcHAuY2xlYW5LZXkodmFsdWVbdGhpcy5zZWNvbmRhcnldKTtcbiAgICAgICAgICAgICAgICB2YXIgbmVzdGVkID0gdGhpcy5tb2RlbC5uZXN0QnlbdGhpcy5zZWNvbmRhcnldO1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaGluZ1N0cmluZyA9IHR5cGVvZiB2YWx1ZVt0aGlzLnNlY29uZGFyeV0gPT09ICdzdHJpbmcnID8gdmFsdWVbdGhpcy5zZWNvbmRhcnldIDogdmFsdWVbdGhpcy5zZWNvbmRhcnldWzBdO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleE9mU2Vjb25kYXJ5VmFsdWUgPSBuZXN0ZWQuZmluZEluZGV4KHMgPT4gcy5rZXkgPT09IG1hdGNoaW5nU3RyaW5nKTtcbiAgICAgICAgICAgICAgICBpdGVtRGl2LmNsYXNzTGlzdC5hZGQocy5pdGVtKTtcbiAgICAgICAgICAgICAgICBpdGVtRGl2LmNsYXNzTGlzdC5hZGQoY2xlYW5TZWNvbmRhcnksIHNbdGhpcy5hcHAuY2xlYW5LZXkodmFsdWUuc3RhdHVzKV0sJ3NlY29uZGFyeS0nICsgaW5kZXhPZlNlY29uZGFyeVZhbHVlKTtcbiAgICAgICAgICAgICAgICBpdGVtRGl2LmRhdGFzZXQudGl0bGUgPSB2YWx1ZS50aXRsZTtcbiAgICAgICAgICAgICAgICBpdGVtRGl2LmRhdGFzZXQuaWQgPSB2YWx1ZS5pZDtcbiAgICAgICAgICAgICAgICAvL2l0ZW1EaXYuZGF0YXNldC50aXBweUNvbnRlbnQgPSB2YWx1ZS5UaXRsZTtcbiAgICAgICAgICAgICAgICAvL3RpcHB5KGl0ZW1EaXYpO1xuICAgICAgICAgICAgICAgIGl0ZW1zQ29udGFpbmVyLmFwcGVuZENoaWxkKGl0ZW1EaXYpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBncm91cERpdi5hcHBlbmRDaGlsZChpdGVtc0NvbnRhaW5lcik7XG5cbiAgICAgICAgICAgIGdyb3Vwcy5wdXNoKGdyb3VwRGl2KTtcblxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGdyb3VwcztcbiAgICB9XG4gICAgdXBkYXRlU2Vjb25kYXJ5KG1zZyxkYXRhKXsgLy8gVE8gRE86IGFuaW1hdGUgc2Vjb25kYXJ5IGRpbWVuc2lvbiBjaGFuZ2VzXG5cbiAgICAgICAgdmFyIG5vZGVTaG93aW5nRGV0YWlscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgcy5zaG93RGV0YWlscyk7XG4gICAgICAgIHZhciBncm91cFNob3dpbmdEZXRhaWxzID0gbm9kZVNob3dpbmdEZXRhaWxzID8gbm9kZVNob3dpbmdEZXRhaWxzLmRhdGFzZXQuZ3JvdXAgOiBudWxsO1xuXG4gICAgICAgIFxuICAgICAgICAvL2Rlc3Ryb3lcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy13YWZmbGUtY29udGFpbmVyLWlubmVyJyk7XG4gICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcblxuICAgICAgICAvL3NldCBuZXcgc2Vjb25kYXJ5XG4gICAgICAgIHRoaXMuc2Vjb25kYXJ5ID0gZGF0YTtcblxuICAgICAgICAvL3JlcmVuZGVyXG4gICAgICAgIHRoaXMucmVuZGVyKCkuZm9yRWFjaChncm91cCA9PiB7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZ3JvdXApXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICggZ3JvdXBTaG93aW5nRGV0YWlscyApe1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWdyb3VwLScgKyB0aGlzLmFwcC5jbGVhbktleShncm91cFNob3dpbmdEZXRhaWxzKSkuY2xhc3NMaXN0LmFkZChzLnNob3dEZXRhaWxzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vcmVpbml0aWFsaXplXG4gICAgICAgIHRoaXMuaW5pdEdyb3Vwc0FuZEl0ZW1zKCk7XG5cbiAgICB9XG4gICAgdXBkYXRlUHJpbWFyeShtc2csZGF0YSl7XG4gICAgICAgIHRoaXMubmVzdGVkRGF0YSA9IHRoaXMubW9kZWwubmVzdEJ5W2RhdGFdO1xuICAgICAgICB0aGlzLnNlY29uZGFyeSA9IHRoaXMubW9kZWwuZmllbGRzLmZpbmQocyA9PiBzLmtleSA9PT0gZGF0YSkuc2Vjb25kYXJ5RGltZW5zaW9uc1swXTtcblxuICAgICAgICB2YXIgd2FmZmxlQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXdhZmZsZS1jb250YWluZXItaW5uZXInKTtcbiAgICAgICAgd2FmZmxlQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuXG4gICAgICAgIHRoaXMucmVuZGVyKCkuZm9yRWFjaChncm91cCA9PiB7XG4gICAgICAgICAgICB3YWZmbGVDb250YWluZXIuYXBwZW5kQ2hpbGQoZ3JvdXApXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaW5pdEdyb3Vwc0FuZEl0ZW1zKCk7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgdGhpcy5zaG93QWxsRGV0YWlscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgcy5zaG93QWxsRGV0YWlscyk7XG4gICAgICAgIFxuICAgICAgICBQUy5zZXRTdWJzKFtcbiAgICAgICAgICAgIFsnaG92ZXJQcmltYXJ5R3JvdXAnLCB0aGlzLmhpZ2hsaWdodEdyb3VwLmJpbmQodGhpcyldLFxuICAgICAgICAgICAgWyd1bkhvdmVyUHJpbWFyeUdyb3VwJywgdGhpcy5oaWdobGlnaHRHcm91cC5iaW5kKHRoaXMpXSxcbiAgICAgICAgICAgIFsnc2VsZWN0UHJpbWFyeUdyb3VwJywgdGhpcy5zaG93R3JvdXBEZXRhaWxzLmJpbmQodGhpcyldLFxuICAgICAgICAgICAgWydzaG93QWxsRGV0YWlscycsIHRoaXMudG9nZ2xlU2hvd0FsbC5iaW5kKHRoaXMpXSxcbiAgICAgICAgICAgIFsnc2VsZWN0U2Vjb25kYXJ5RGltZW5zaW9uJywgdGhpcy51cGRhdGVTZWNvbmRhcnkuYmluZCh0aGlzKV0sXG4gICAgICAgICAgICBbJ3ZpZXcnLCB0aGlzLnVwZGF0ZVByaW1hcnkuYmluZCh0aGlzKV1cbiAgICAgICAgXSk7XG4gICAgICAgIGZ1bmN0aW9uIHNob3dBbGxEZXRhaWxzSGFuZGxlcihlKXtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgIGlmICggdGhpcy5kYXRhc2V0LmlzT24gPT09ICd0cnVlJyApe1xuICAgICAgICAgICAgICAgIFMuc2V0U3RhdGUoJ3Nob3dBbGxEZXRhaWxzJywgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5pbm5lclRleHQgPSB0aGlzLmlubmVyVGV4dC5yZXBsYWNlKCdIaWRlJywnU2hvdycpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YXNldC5pc09uID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFMuc2V0U3RhdGUoJ3Nob3dBbGxEZXRhaWxzJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5pbm5lclRleHQgPSB0aGlzLmlubmVyVGV4dC5yZXBsYWNlKCdTaG93JywnSGlkZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YXNldC5pc09uID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHMuc2hvd0FsbERldGFpbHMpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2hvd0FsbERldGFpbHNIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5pbml0R3JvdXBzQW5kSXRlbXMoKTtcbiAgICB9XG4gICAgaW5pdEdyb3Vwc0FuZEl0ZW1zKCl7XG4gICAgICAgIGZ1bmN0aW9uIGl0ZW1DbGlja0hhbmRsZXIoKXtcbiAgICAgICAgICAgIGlmICggdGhpcy5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKHMuc2hvd0RldGFpbHMpIHx8IHRoaXMucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKHMuc2hvd0FsbCkgKXtcbiAgICAgICAgICAgICAgICBTLnNldFN0YXRlKCdzZWxlY3RISUEnLCArdGhpcy5kYXRhc2V0LmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpdGVtTW91c2VlbnRlcigpe1xuICAgICAgICAgICAgaWYgKCB0aGlzLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMocy5zaG93RGV0YWlscykgfHwgdGhpcy5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMocy5zaG93QWxsKSApe1xuICAgICAgICAgICAgICAgIHRoaXMuX3RpcHB5LnNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpdGVtTW91c2VsZWF2ZSgpe1xuICAgICAgICAgICAgdGhpcy5fdGlwcHkuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFubm91bmNlTW91c2VFbnRlcigpIHtcbiAgICAgICAgICAgIC8vIFRPIERPOiBiYXNlIHRoaXMgbG9naWMgb24gc3RhdGUgcmF0aGVyIHRoYW4gb24gRE9NXG4gICAgICAgICAgICBpZiAoIXRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKHMuc2hvd0RldGFpbHMpICYmICF0aGlzLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKHMuc2hvd0FsbCkpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl90aXBweS5zaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTLnNldFN0YXRlKCdob3ZlclByaW1hcnlHcm91cCcsIHRoaXMuZGF0YXNldC5ncm91cCwgeyBmb3JjZUNoYW5nZTogdHJ1ZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFubm91bmNlTW91c2VMZWF2ZSgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jbGFzc0xpc3QuY29udGFpbnMocy5zaG93RGV0YWlscykgJiYgIXRoaXMucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMocy5zaG93QWxsRGV0YWlscykpIHtcbiAgICAgICAgICAgICAgICAvL3RoaXMuX3RpcHB5LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90aXBweS5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTLnNldFN0YXRlKCd1bkhvdmVyUHJpbWFyeUdyb3VwJywgdGhpcy5kYXRhc2V0Lmdyb3VwLCB7IGZvcmNlQ2hhbmdlOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5ncm91cERpdikuZm9yRWFjaChncm91cCA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFRpcHB5cyhncm91cCk7XG4gICAgICAgICAgICBncm91cC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgYW5ub3VuY2VNb3VzZUVudGVyKTtcbiAgICAgICAgICAgIGdyb3VwLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBhbm5vdW5jZU1vdXNlTGVhdmUpO1xuICAgICAgICAgICAgZ3JvdXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHMuaXRlbSkuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0SXRlbVRpcHB5KGl0ZW0pO1xuICAgICAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgaXRlbU1vdXNlZW50ZXIpO1xuICAgICAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgaXRlbU1vdXNlbGVhdmUpO1xuICAgICAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGl0ZW1DbGlja0hhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9nZ2xlU2hvd0FsbChtc2csZGF0YSl7XG4gICAgICAgIGlmICggZGF0YSApe1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLndhZmZsZUNvbnRhaW5lcikuY2xhc3NMaXN0LmFkZChzLnNob3dBbGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLndhZmZsZUNvbnRhaW5lcikuY2xhc3NMaXN0LnJlbW92ZShzLnNob3dBbGwpO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgdXBkYXRlU2hvd0FsbERldGFpbHMocHJpbWFyeURpbWVuc2lvbil7XG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5tb2RlbC5maWVsZHMuZmluZChmID0+IGYua2V5ID09PSBwcmltYXJ5RGltZW5zaW9uKS5oZWFkaW5nO1xuICAgICAgICByZXR1cm4gYFNob3cgZGV0YWlscyBmb3IgYWxsICR7bmFtZS50b0xvd2VyQ2FzZSgpfWA7XG4gICAgfVxuICAgIHNob3dHcm91cERldGFpbHMobXNnLCBkYXRhKXtcblxuICAgICAgICAvL2hhbmRsZSB0aGUgd2FmZmxlIGdyb3VwXG4gICAgICAgIHZhciBjdXJyZW50RGV0YWlscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgcy5zaG93RGV0YWlscyk7XG4gICAgICAgIGlmICggY3VycmVudERldGFpbHMgKXtcbiAgICAgICAgICAgIGN1cnJlbnREZXRhaWxzLmNsYXNzTGlzdC5yZW1vdmUocy5zaG93RGV0YWlscywgJ2pzLXNob3ctZGV0YWlscycpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzZWxlY3RvciA9IGAuJHtzLmdyb3VwRGl2fVtkYXRhLWdyb3VwPVwiJHtkYXRhfVwiYDtcbiAgICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZChzLnNob3dEZXRhaWxzLCAnanMtc2hvdy1kZXRhaWxzJylcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaGFuZGxlIHRoZSBzaG93QWxsRGV0YWlsc1xuICAgICAgICBpZiAoIGRhdGEgKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHMuc2hvd0FsbERldGFpbHMpLmNsYXNzTGlzdC5hZGQocy5pc1Zpc2libGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLnNob3dBbGxEZXRhaWxzKS5jbGFzc0xpc3QucmVtb3ZlKHMuaXNWaXNpYmxlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRUaXBweXMoZ3JvdXApIHtcbiAgICAgICAgdGlwcHkoZ3JvdXAsIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IGA8c3Ryb25nPiR7Z3JvdXAuZGF0YXNldC5jb3VudH0gSElBJHsrZ3JvdXAuZGF0YXNldC5jb3VudCA+IDEgPyAncycgOiAnJ308L3N0cm9uZz48YnIgLz5DbGljayBmb3IgZGV0YWlsc2AsXG4gICAgICAgICAgICB0cmlnZ2VyOiAnbWFudWFsJyxcbiAgICAgICAgICAgIG9mZnNldDogJzAsIC0xMDAnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRJdGVtVGlwcHkoaXRlbSl7XG4gICAgICAgIHRpcHB5KGl0ZW0sIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IGA8c3Ryb25nPiR7aXRlbS5kYXRhc2V0LnRpdGxlfTwvc3Ryb25nPjxiciAvPkNsaWNrIGZvciBkZXRhaWxzYCxcbiAgICAgICAgICAgIHRyaWdnZXI6ICdtYW51YWwnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBoaWdobGlnaHRHcm91cChtc2csIGRhdGEpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gYC4ke3MuZ3JvdXBEaXZ9W2RhdGEtZ3JvdXA9XCIke2RhdGF9XCJgO1xuICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKG1zZyA9PT0gJ2hvdmVyUHJpbWFyeUdyb3VwJykge1xuICAgICAgICAgICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZChzLmlzSGlnaGxpZ2h0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1zZyA9PT0gJ3VuSG92ZXJQcmltYXJ5R3JvdXAnKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKHMuaXNIaWdobGlnaHRlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xpY2tIYW5kbGVyKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgXG4gICAgICAgIFMuc2V0U3RhdGUoJ3NlbGVjdFByaW1hcnlHcm91cCcsIHRoaXMuZGF0YXNldC5ncm91cCk7XG5cbiAgICB9XG59IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIndhZmZsZUNvbnRhaW5lclwiOlwic3JjLWNvbXBvbmVudHMtd2FmZmxlLS13YWZmbGVDb250YWluZXJcIixcImdyb3VwRGl2XCI6XCJzcmMtY29tcG9uZW50cy13YWZmbGUtLWdyb3VwRGl2XCIsXCJpc0hpZ2hsaWdodGVkXCI6XCJzcmMtY29tcG9uZW50cy13YWZmbGUtLWlzSGlnaGxpZ2h0ZWRcIixcImdyb3VwRGl2SGVhZGluZ1wiOlwic3JjLWNvbXBvbmVudHMtd2FmZmxlLS1ncm91cERpdkhlYWRpbmdcIixcIml0ZW1zQ29udGFpbmVyXCI6XCJzcmMtY29tcG9uZW50cy13YWZmbGUtLWl0ZW1zQ29udGFpbmVyXCIsXCJsZWdlbmRJdGVtXCI6XCJzcmMtY29tcG9uZW50cy13YWZmbGUtLWxlZ2VuZEl0ZW1cIixcIml0ZW1cIjpcInNyYy1jb21wb25lbnRzLXdhZmZsZS0taXRlbVwiLFwiY29tcGxldGVkXCI6XCJzcmMtY29tcG9uZW50cy13YWZmbGUtLWNvbXBsZXRlZFwiLFwic2hvd0FsbFwiOlwic3JjLWNvbXBvbmVudHMtd2FmZmxlLS1zaG93QWxsXCIsXCJzaG93RGV0YWlsc1wiOlwic3JjLWNvbXBvbmVudHMtd2FmZmxlLS1zaG93RGV0YWlsc1wiLFwic2hvd0FsbERldGFpbHNcIjpcInNyYy1jb21wb25lbnRzLXdhZmZsZS0tc2hvd0FsbERldGFpbHNcIixcImlzVmlzaWJsZVwiOlwic3JjLWNvbXBvbmVudHMtd2FmZmxlLS1pc1Zpc2libGVcIn07IiwiaW1wb3J0IEVsZW1lbnQgZnJvbSAnQFVJL2VsZW1lbnQnO1xuaW1wb3J0IHMgZnJvbSAnLi9zdHlsZXMuc2Nzcyc7XG5pbXBvcnQgUFMgZnJvbSAncHVic3ViLXNldHRlcic7XG4vL2ltcG9ydCB7IHN0YXRlTW9kdWxlIGFzIFMgfSBmcm9tICdzdGF0ZWZ1bC1kZWFkJztcbi8vaW1wb3J0IHsgR1RNUHVzaCB9IGZyb20gJ0BVdGlscyc7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMZWdlbmQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBcbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgIC8vY29udGFpbmVyXG4gICAgICAgIHZhciB2aWV3ID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdMZWdlbmQnO1xuICAgICAgICBpZiAoIHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3OyAvLyBpZiBwcmVyZW5kZXJlZCBhbmQgbm8gbmVlZCB0byByZW5kZXIgKG5vIGRhdGEgbWlzbWF0Y2gpXG4gICAgICAgIH1cbiAgICAgICAgdmlldy5jbGFzc0xpc3QuYWRkKHMubGVnZW5kLCAnanMtbGVnZW5kJyk7XG4gICAgICAgIHRoaXMucmV0dXJuVXBkYXRlZEl0ZW1zKHRoaXMubW9kZWwuZmllbGRzLmZpbmQoZiA9PiBmLmtleSA9PT0gdGhpcy5kYXRhLnByaW1hcnkpLnNlY29uZGFyeURpbWVuc2lvbnNbMF0pLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICB2aWV3LmFwcGVuZENoaWxkKGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgUFMuc2V0U3VicyhbXG4gICAgICAgICAgICBbJ3NlbGVjdFByaW1hcnlHcm91cCcsIHRoaXMudG9nZ2xlTGVnZW5kLmJpbmQodGhpcyldLFxuICAgICAgICAgICAgWydzZWxlY3RTZWNvbmRhcnlEaW1lbnNpb24nLCB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpXSxcbiAgICAgICAgICAgIFsndmlldycsIHRoaXMudXBkYXRlLmJpbmQodGhpcyldXG4gICAgICAgIF0pO1xuICAgICAgICAvKiB0byBkbyovXG5cbiAgICAgICAgLy9zdWJzY3JpYmUgdG8gc2Vjb25kYXJ5IGRpbWVuc2lvbiAsIGRyaWxsZG93biwgZGV0YWlsc1xuICAgIH1cbiAgICByZXR1cm5VcGRhdGVkSXRlbXMoc2Vjb25kYXJ5RGltZW5zaW9uKXtcbiAgICAgICAgdmFyIGl0ZW1zID0gW107XG4gICAgICAgIFxuICAgICAgICAvL2xhYmVsXG4gICAgICAgIHZhciBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKHMubGVnZW5kTGFiZWwpO1xuICAgICAgICBsYWJlbC50ZXh0Q29udGVudCA9IHRoaXMubW9kZWwuZmllbGRzLmZpbmQocyA9PiBzLmtleSA9PT0gc2Vjb25kYXJ5RGltZW5zaW9uKS5oZWFkaW5nICsgJzogJztcbiAgICAgICAgaXRlbXMucHVzaChsYWJlbCk7XG4gICAgICAgIFxuICAgICAgICAvL2R5bmFtaWMgaXRlbXNcbiAgICAgICAgdGhpcy5tb2RlbC5uZXN0Qnlbc2Vjb25kYXJ5RGltZW5zaW9uXS5mb3JFYWNoKCh2YWx1ZSwgaSkgPT4ge1xuICAgICAgICAgICAgdmFyIGxlZ2VuZEdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBsZWdlbmRHcm91cC5jbGFzc0xpc3QuYWRkKHMubGVnZW5kR3JvdXApO1xuXG4gICAgICAgICAgICB2YXIgbGVnZW5kSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgbGVnZW5kSXRlbS5jbGFzc0xpc3QuYWRkKHMubGVnZW5kSXRlbSwgdGhpcy5hcHAuY2xlYW5LZXkodmFsdWUua2V5KSwgJ3NlY29uZGFyeS0nICsgaSk7XG4gICAgICAgICAgICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICBsYWJlbC50ZXh0Q29udGVudCA9IHZhbHVlLmtleSB8fCAnTm90IHNwZWNpZmllZCc7XG5cbiAgICAgICAgICAgIGxlZ2VuZEdyb3VwLmFwcGVuZENoaWxkKGxlZ2VuZEl0ZW0pO1xuICAgICAgICAgICAgbGVnZW5kR3JvdXAuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gICAgICAgICAgICBpdGVtcy5wdXNoKGxlZ2VuZEdyb3VwKTtcblxuICAgICAgICB9KTtcblxuICAgICAgICAvL2Jvb2xlYW4gaXRlbVxuICAgICAgICB2YXIgYm9vbEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgYm9vbEl0ZW0uY2xhc3NMaXN0LmFkZChzLmJvb2xJdGVtKTtcbiAgICAgICAgYm9vbEl0ZW0udGV4dENvbnRlbnQgPSAnPSBJbiBwcm9ncmVzcyc7XG4gICAgICAgIGl0ZW1zLnB1c2goYm9vbEl0ZW0pO1xuXG4gICAgICAgIHJldHVybiBpdGVtcztcblxuICAgIH1cbiAgICB1cGRhdGUobXNnLGRhdGEpe1xuICAgICAgICAvLyBkZXN0cm95XG4gICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIGlmICggbXNnID09PSAndmlldycgKXtcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLm1vZGVsLmZpZWxkcy5maW5kKGYgPT4gZi5rZXkgPT09IGRhdGEpLnNlY29uZGFyeURpbWVuc2lvbnNbMF07XG4gICAgICAgIH1cbiAgICAgICAgLy91cGRhdGVcbiAgICAgICAgdGhpcy5yZXR1cm5VcGRhdGVkSXRlbXMoZGF0YSkuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIHRoaXMuZWwuYXBwZW5kQ2hpbGQoaXRlbSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0b2dnbGVMZWdlbmQobXNnLGRhdGEpe1xuICAgICAgICBpZiAoIGRhdGEgKXtcbiAgICAgICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZChzLnNob3dMZWdlbmQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKHMuc2hvd0xlZ2VuZCk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImxlZ2VuZFwiOlwic3JjLWNvbXBvbmVudHMtbGVnZW5kLS1sZWdlbmRcIixcInNob3dMZWdlbmRcIjpcInNyYy1jb21wb25lbnRzLWxlZ2VuZC0tc2hvd0xlZ2VuZFwiLFwibGVnZW5kR3JvdXBcIjpcInNyYy1jb21wb25lbnRzLWxlZ2VuZC0tbGVnZW5kR3JvdXBcIixcImxlZ2VuZEl0ZW1cIjpcInNyYy1jb21wb25lbnRzLWxlZ2VuZC0tbGVnZW5kSXRlbVwiLFwibGVnZW5kTGFiZWxcIjpcInNyYy1jb21wb25lbnRzLWxlZ2VuZC0tbGVnZW5kTGFiZWxcIixcImJvb2xJdGVtXCI6XCJzcmMtY29tcG9uZW50cy1sZWdlbmQtLWJvb2xJdGVtXCJ9OyIsImltcG9ydCBFbGVtZW50IGZyb20gJ0BVSS9lbGVtZW50JztcbmltcG9ydCBzIGZyb20gJy4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0IHsgc3RhdGVNb2R1bGUgYXMgUyB9IGZyb20gJ3N0YXRlZnVsLWRlYWQnO1xuaW1wb3J0IFBTIGZyb20gJ3B1YnN1Yi1zZXR0ZXInO1xuLy9pbXBvcnQgeyBHVE1QdXNoIH0gZnJvbSAnQFV0aWxzJztcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERldGFpbHNWaWV3IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgXG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgICAvL2NvbnRhaW5lclxuICAgICAgICB2YXIgdmlldyA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnRGV0YWlsc1ZpZXcnO1xuICAgICAgICB0aGlzLmFkZENoaWxkcmVuKFtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KENsb3NlQnV0dG9uLCAnYnV0dG9uI2Nsb3NlLWJ1dHRvbicpXG4gICAgICAgIF0pO1xuXG4gICAgICAgIGlmICggdGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHZpZXc7IC8vIGlmIHByZXJlbmRlcmVkIGFuZCBubyBuZWVkIHRvIHJlbmRlciAobm8gZGF0YSBtaXNtYXRjaClcbiAgICAgICAgfVxuICAgICAgICB2aWV3LmNsYXNzTGlzdC5hZGQocy5kZXRhaWxzVmlldyk7XG5cblxuXG5cbiAgICAgICAgLy9jb250ZW50IGNvbnRhaW5lclxuICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHMuY29udGFpbmVyLCAnanMtZGV0YWlscy1jb250YWluZXInKTtcblxuXG4gICAgICAgIHZpZXcuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cbiAgICBnZXQgaXNPcGVuKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc09wZW47XG4gICAgfVxuICAgIHNldCBpc09wZW4oYm9vbCl7XG4gICAgICAgIHRoaXMuX2lzT3BlbiA9IGJvb2xcbiAgICAgICAgaWYgKCBib29sICl7XG4gICAgICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQocy5pc09wZW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKHMuaXNPcGVuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIFxuICAgICAgICBQUy5zZXRTdWJzKFtcbiAgICAgICAgICAgIFsnc2VsZWN0SElBJywgdGhpcy5zaG93RGV0YWlsc0hhbmRsZXIuYmluZCh0aGlzKV0sXG4gICAgICAgICAgICBbJ3NlbGVjdEhJQScsIHRoaXMudXBkYXRlLmJpbmQodGhpcyldXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja0hhbmRsZXIpXG4gICAgICAgIHRoaXMuYXBwLndvcmtlci5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hpYS10aXRsZS1saW5rJykuc2V0QXR0cmlidXRlKCdocmVmJywgZS5kYXRhWzBdKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoaWEtbGFuZ3VhZ2UnKS50ZXh0Q29udGVudCA9IGUuZGF0YVsxXTtcbiAgICAgICAgfVxuICAgICAgICAvKiB0byBkbyovXG5cbiAgICAgICAgLy9zdWJzY3JpYmUgdG8gc2Vjb25kYXJ5IGRpbWVuc2lvbiAsIGRyaWxsZG93biwgZGV0YWlsc1xuICAgIH1cbiAgICBzaG93RGV0YWlsc0hhbmRsZXIobXNnLGRhdGEpe1xuICAgICAgICBpZiAoIGRhdGEgKXtcbiAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xpY2tIYW5kbGVyKGUpe1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBcbiAgICB9XG4gICAgdXBkYXRlKG1zZywgZGF0YSl7XG4gICAgICAgIGlmICggIWRhdGEgKXtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZCA9IHRoaXMubW9kZWwuZGF0YS5maW5kKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgcmV0dXJuIGQuaWQgPT09IGRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZGF0ZSA9ICFpc05hTihwYXJzZUludChkLnB1YmxpY2F0aW9uRGF0ZSkpID8gcGFyc2VJbnQoZC5wdWJsaWNhdGlvbkRhdGUpIDogZC5wdWJsaWNhdGlvbkRhdGU7XG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IGA8aDIgY2xhc3M9XCIke3MuZGV0YWlsc0hlYWRpbmd9XCI+PGEgdGFyZ2V0PVwiX2JsYW5rXCIgaWQ9XCJoaWEtdGl0bGUtbGlua1wiPiR7ZC50aXRsZX08L2E+PC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxiPkRhdGU6PC9iPiAke2RhdGV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+JHtkLmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIke3MuY29sdW1uc1dyYXBwZXJ9XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxiPlNvdXJjZTo8L2I+ICR7ZC5hdXRob3JPclNvdXJjZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxiPkxvY2F0aW9uOjwvYj4gJHtkLnN0YXRlT3JUZXJyaXRvcnl9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48Yj5TdGF0dXM6PC9iPiAke2Quc3RhdHVzfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGI+TGFuZ3VhZ2U6PC9iPiA8c3BhbiBpZD1cImhpYS1sYW5ndWFnZVwiPjwvc3Bhbj48L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuXG4gICAgICAgIGA7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1kZXRhaWxzLWNvbnRhaW5lcicpLmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICAgICAgICB0aGlzLmFwcC53b3JrZXIucG9zdE1lc3NhZ2UoZC50aXRsZSk7XG4gICAgfVxufVxuXG5jbGFzcyBDbG9zZUJ1dHRvbiBleHRlbmRzIEVsZW1lbnQge1xuICAgIHByZXJlbmRlcigpe1xuICAgICAgICAgLy9jb250YWluZXJcbiAgICAgICAgdmFyIHZpZXcgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0Nsb3NlQnV0dG9uJztcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlldzsgLy8gaWYgcHJlcmVuZGVyZWQgYW5kIG5vIG5lZWQgdG8gcmVuZGVyIChubyBkYXRhIG1pc21hdGNoKVxuICAgICAgICB9XG4gICAgICAgIHZpZXcuY2xhc3NMaXN0LmFkZChzLmNsb3NlQnV0dG9uKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja0hhbmRsZXIsIHRydWUpO1xuICAgIH1cbiAgICBjbGlja0hhbmRsZXIoZSl7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIFMuc2V0U3RhdGUoJ3NlbGVjdEhJQScsIG51bGwpO1xuICAgIH1cblxufSIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJkZXRhaWxzVmlld1wiOlwic3JjLXZpZXdzLWRldGFpbHMtdmlldy0tZGV0YWlsc1ZpZXdcIixcImlzT3BlblwiOlwic3JjLXZpZXdzLWRldGFpbHMtdmlldy0taXNPcGVuXCIsXCJjb2x1bW5zV3JhcHBlclwiOlwic3JjLXZpZXdzLWRldGFpbHMtdmlldy0tY29sdW1uc1dyYXBwZXJcIixcImNvbnRhaW5lclwiOlwic3JjLXZpZXdzLWRldGFpbHMtdmlldy0tY29udGFpbmVyXCIsXCJjbG9zZUJ1dHRvblwiOlwic3JjLXZpZXdzLWRldGFpbHMtdmlldy0tY2xvc2VCdXR0b25cIixcImRldGFpbHNIZWFkaW5nXCI6XCJzcmMtdmlld3MtZGV0YWlscy12aWV3LS1kZXRhaWxzSGVhZGluZ1wifTsiLCJpbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudCc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCBQUyBmcm9tICdwdWJzdWItc2V0dGVyJztcbi8vaW1wb3J0IHsgc3RhdGVNb2R1bGUgYXMgUyB9IGZyb20gJ3N0YXRlZnVsLWRlYWQnO1xuLy9pbXBvcnQgeyBHVE1QdXNoIH0gZnJvbSAnQFV0aWxzJztcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hc2sgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBcbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgIC8vY29udGFpbmVyXG4gICAgICAgIHZhciB2aWV3ID0gc3VwZXIucHJlcmVuZGVyKCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdNYXNrJztcbiAgICAgICAgaWYgKCB0aGlzLnByZXJlbmRlcmVkICYmICF0aGlzLnJlcmVuZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlldzsgLy8gaWYgcHJlcmVuZGVyZWQgYW5kIG5vIG5lZWQgdG8gcmVuZGVyIChubyBkYXRhIG1pc21hdGNoKVxuICAgICAgICB9XG4gICAgICAgIC8qIHRvIGRvICovXG4gICAgICAgIFxuICAgICAgICAvLyB0aXRsZSBpZSBTZWxlY3QgYSBzdGF0ZSBvciB0ZXJyaXRvcnlcbiAgICAgICAgLy8gZHJvcGRvd25cbiAgICAgICAgLy8gbGVnZW5kXG4gICAgICAgIC8vIHNob3cgYWxsXG4gICAgICAgIC8qXG4gICAgICAgIC4uLlxuICAgICAgICAuLi5cbiAgICAgICAgLi4uXG5cbiAgICAgICAgKi9cbiAgICAgICAgdmlldy5jbGFzc0xpc3QuYWRkKHMubWFzayk7XG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIFxuICAgICAgICBQUy5zZXRTdWJzKFtcbiAgICAgICAgICAgIFsnc2VsZWN0SElBJywgdGhpcy5hY3RpdmF0ZS5iaW5kKHRoaXMpXVxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xpY2tIYW5kbGVyKTtcbiAgICAgICAgLyogdG8gZG8qL1xuXG4gICAgICAgIC8vc3Vic2NyaWJlIHRvIHNlY29uZGFyeSBkaW1lbnNpb24gLCBkcmlsbGRvd24sIGRldGFpbHNcbiAgICB9XG4gICAgYWN0aXZhdGUobXNnLCBkYXRhKXtcbiAgICAgICAgaWYgKCBkYXRhICl7XG4gICAgICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQocy5pc0FjdGl2YXRlZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUocy5pc0FjdGl2YXRlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xpY2tIYW5kbGVyKGUpe1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxufSIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJtYXNrXCI6XCJzcmMtdmlld3MtbWFzay12aWV3LS1tYXNrXCIsXCJpc0FjdGl2YXRlZFwiOlwic3JjLXZpZXdzLW1hc2stdmlldy0taXNBY3RpdmF0ZWRcIn07IiwiaW1wb3J0IFJvdXRlciBmcm9tICdAUm91dGVyJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBDVEFwcCB7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIG9wdGlvbnMpe1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIHRoaXMuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgdGhpcy52aWV3cyA9IFtdO1xuICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKG9wdGlvbiA9PiB7XG4gICAgICAgICAgICB0aGlzW29wdGlvbl0gPSBvcHRpb25zW29wdGlvbl07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbml0KHJvdXRlck9wdGlvbnMpe1xuICAgICAgICBpZiAoIHRoaXMubmVlZHNSb3V0ZXIgKXsgLy8gY29tZXMgZnJvbSBvcHRpb25zIG9iamVjdFxuICAgICAgICAgICAgdGhpcy5yb3V0ZXIgPSBuZXcgUm91dGVyKCk7XG4gICAgICAgICAgICB0aGlzLnJvdXRlci5pbml0KHJvdXRlck9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzYWJsZUhvdmVyT25Ub3VjaCgpO1xuICAgIH1cbiAgICBkaXNhYmxlSG92ZXJPblRvdWNoKCl7XG4gICAgLy8gSFQ6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zMDMwMzg5OFxuICAgICAgICB2YXIgaGFzSG92ZXJDbGFzcyA9IGZhbHNlO1xuICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgdmFyIGxhc3RUb3VjaFRpbWUgPSAwO1xuXG4gICAgICAgIGZ1bmN0aW9uIGVuYWJsZUhvdmVyKCkge1xuICAgICAgICAgICAgLy8gZmlsdGVyIGVtdWxhdGVkIGV2ZW50cyBjb21pbmcgZnJvbSB0b3VjaCBldmVudHNcbiAgICAgICAgICAgIGlmIChuZXcgRGF0ZSgpIC0gbGFzdFRvdWNoVGltZSA8IDUwMCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGhhc0hvdmVyQ2xhc3MpIHJldHVybjtcblxuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2hhcy1ob3ZlcicpO1xuICAgICAgICAgICAgaGFzSG92ZXJDbGFzcyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkaXNhYmxlSG92ZXIoKSB7XG4gICAgICAgICAgICBpZiAoIWhhc0hvdmVyQ2xhc3MpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtaG92ZXInKTtcbiAgICAgICAgICAgIGhhc0hvdmVyQ2xhc3MgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUxhc3RUb3VjaFRpbWUoKSB7XG4gICAgICAgICAgICBsYXN0VG91Y2hUaW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB1cGRhdGVMYXN0VG91Y2hUaW1lLCB0cnVlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGRpc2FibGVIb3ZlciwgdHJ1ZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGVuYWJsZUhvdmVyLCB0cnVlKTtcblxuICAgICAgICBlbmFibGVIb3ZlcigpO1xuICAgIH1cbiAgICBjcmVhdGVDb21wb25lbnQoY29tcG9uZW50LCBzZWxlY3RvciwgX29wdGlvbnMpe1xuICAgICAgICB2YXIgb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUoe1xuICAgICAgICAgICAgYXBwOiB0aGlzLmFwcCA/IHRoaXMuYXBwIDogdGhpcyxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgICBtb2RlbDogdGhpcy5tb2RlbCxcbiAgICAgICAgICAgIHBhcmVudDogdGhpcyxcbiAgICAgICAgICAgIHJlcmVuZGVyT25EYXRhTWlzbWF0Y2g6IGZhbHNlLFxuICAgICAgICAgICAgY3JlYXRlQ29tcG9uZW50OiB0aGlzLmNyZWF0ZUNvbXBvbmVudCwgLy8gc2hvdWxkIGJlIGJhY2t3YXJkIGNvbXBhdGlibGVcbiAgICAgICAgICAgIHJlbmRlclRvU2VsZWN0b3I6IHRoaXMuc2VsZWN0b3IsXG5cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICggX29wdGlvbnMgIT09IG51bGwgJiYgdHlwZW9mIF9vcHRpb25zID09PSAnb2JqZWN0JyApe1xuICAgICAgICAgICAgZm9yICggbGV0IGtleSBpbiBfb3B0aW9ucyApe1xuICAgICAgICAgICAgICAgIGlmICggX29wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSApe1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zW2tleV0gPSBfb3B0aW9uc1trZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGNvbXBvbmVudChzZWxlY3Rvciwgb3B0aW9ucyk7XG4gICAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlciB7IC8vIHRoaXMgY291bGQgYmUgaW50ZWdyYXRlZCB3aXRoIHN0YXRlZnVsIGRlYWRcbiAgICAvKlxuICAgIFJvdXRlciBvZmZlcnMgYmFzaWMgc2hhcmVkIGZ1bmN0aW9ucyBmb3IgYWxsIHJvdXRlcnMuIE1ldGhvZHMgZm9yIHVwZGF0aW5nICBoaXN0b3J5IHN0YXRlIGFuZCB1cGRhdGluZyB0aGUgaGFzaCB1cmwuIEFycmF5IG9mIHN1YnNjcmlwdGlvbnNcbiAgICB0aGF0IGFmZmVjdCB0aGUgdXJsIGlzIHBhc3NlZCBpbi4gVGhlIFB1YlN1YiBtb2R1bGUgaXMgcGFzc2VkIGluLiBzZXRIYXNoIGFuZCBkZWNvZGVIYXNoIGZ1bmN0aW9ucyBhcmUgcGFzc2VkIGluIGJjIHRoZXkgd2lsbCBiZSBkaWZmXG4gICAgZm9yIGVhY2ggYXBwLiB2aWV3cyBhcmUgcGFzc2VkIGluIHNvIHRoYXQgdGhlIHJlc29sdXRpb25zIG9mIHRoZWlyIHByb21pc2VzIGNhbiBiZSB0cmFja2VkIGFuZCBhY3RlZCB1cG9uIChpZSByb3V0ZXIgZGVjb2RlcyBvbmx5IGFmdGVyIFxuICAgIGFsbCB2aWV3cyBhcmUgcmVhZHkpXG4gICAgKi9cbiAgICBpbml0KHJvdXRlck9wdGlvbnMpe1xuICAgICAgICBcbiAgICAgICAgaWYgKCByb3V0ZXJPcHRpb25zID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHJvdXRlck9wdGlvbnMgIT09ICdvYmplY3QnICl7XG4gICAgICAgICAgICB0aHJvdyAncm91dGVyLmluaXQgbWV0aG9kIHJlcXVpcmVzIGEgY29uZmlnIG9iamVjdCBhcyBwYXJhbWV0ZXIgMSdcbiAgICAgICAgfVxuICAgICAgICBpZiAoIHR5cGVvZiByb3V0ZXJPcHRpb25zLmVuY29kZSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2Ygcm91dGVyT3B0aW9ucy5kZWNvZGUgIT09ICdmdW5jdGlvbicgfHwgIUFycmF5LmlzQXJyYXkocm91dGVyT3B0aW9ucy52aWV3cykgfHwgdHlwZW9mIHJvdXRlck9wdGlvbnMuUFMgIT09ICdvYmplY3QnICl7XG4gICAgICAgICAgICB0aHJvdyAncm91dGVyT3B0aW9ucyBvYmplY3QgbmVlZHMgZW5jb2RlLCBkZWNvZGUsIHZpZXdzLCBhbmQgUFMgcHJvcGVydGllcy4gZW5jb2RlIGFuZCBkZWNvZGUgbXVzdCBiZSBmdW5jdGlvbnM7IHZpZXdzIGlzIGFuIGFycmF5IG9mIHZpZXdzIGZyb20gdGhlIGFwcDsgUFMgbmVlZHMgdG8gYmUgdGhlIFB1YlN1YiBzZXR0ZXIuJ1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGVPYmogPSB7fTtcbiAgICAgICAgdGhpcy5oYXNoU3RhdGUgPSByb3V0ZXJPcHRpb25zLmVuY29kZTtcbiAgICAgICAgdGhpcy5kZWNvZGVIYXNoID0gcm91dGVyT3B0aW9ucy5kZWNvZGU7XG4gICAgICAgIHRoaXMudmlld1Byb21pc2VzID0gcm91dGVyT3B0aW9ucy52aWV3cy5tYXAoZWFjaCA9PiBlYWNoLmlzUmVhZHkpOyAvLyB2aWV3LmlzUmVhZHkgaXMgYSBwcm9taXNlZCByZXNvbHZlZCB0cnVlIGFmdGVyIHRoZSB2aWV3IGlzIHJlbmRlcmVkXG4gICAgICAgIHRoaXMuUFMgPSByb3V0ZXJPcHRpb25zLlBTO1xuICAgICAgICBcbiAgICAgICAgUHJvbWlzZS5hbGwodGhpcy52aWV3UHJvbWlzZXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmRlY29kZUhhc2goKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuUFMuc2V0U3Vicyhyb3V0ZXJPcHRpb25zLnN1YnNjcmlwdGlvbnMubWFwKGVhY2ggPT4geyAvLyBzdWJzY3JpcHRpb25zIHRoYXQgbWF0dGVyIGZvciByb3V0ZXIgYXJlIG1hZGUgdG8gdHJpZ2dlciBoYXNoQ2hhbmdlIG1ldGhvZCB3aGVuIHB1Ymxpc2hlZFxuICAgICAgICAgICAgdmFyIGFyciA9IFtlYWNoLCAobXNnLGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc2hDaGFuZ2UuY2FsbCh0aGlzLG1zZyxkYXRhKTtcbiAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGhhc2hDaGFuZ2UobXNnLGRhdGEpe1xuICAgICAgICB0aGlzLnNldFN0YXRlT2JqKG1zZyxkYXRhKTtcbiAgICAgICAgdGhpcy5oYXNoU3RhdGUoKTtcbiAgICAgICAgdGhpcy5yZXBsYWNlU3RhdGUoKTtcbiAgICB9XG4gICAgc2V0U3RhdGVPYmoobXNnLCBkYXRhKXtcbiAgICAgICAgdGhpcy5zdGF0ZU9ialttc2ddID0gZGF0YTtcbiAgICAgICAgXG4gICAgfVxuICAgIHJlcGxhY2VTdGF0ZSgpeyAgICBcbiAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHRoaXMuc3RhdGVPYmosJycsdGhpcy5oYXNoU3RyaW5nKVxuICAgIH1cblxufSIsImV4cG9ydCB2YXIgcHJlZml4ID0gXCIkXCI7XG5cbmZ1bmN0aW9uIE1hcCgpIHt9XG5cbk1hcC5wcm90b3R5cGUgPSBtYXAucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTWFwLFxuICBoYXM6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiAocHJlZml4ICsga2V5KSBpbiB0aGlzO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiB0aGlzW3ByZWZpeCArIGtleV07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHRoaXNbcHJlZml4ICsga2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBwcm9wZXJ0eSA9IHByZWZpeCArIGtleTtcbiAgICByZXR1cm4gcHJvcGVydHkgaW4gdGhpcyAmJiBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBrZXlzLnB1c2gocHJvcGVydHkuc2xpY2UoMSkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9LFxuICB2YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgdmFsdWVzLnB1c2godGhpc1twcm9wZXJ0eV0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0sXG4gIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGVudHJpZXMucHVzaCh7a2V5OiBwcm9wZXJ0eS5zbGljZSgxKSwgdmFsdWU6IHRoaXNbcHJvcGVydHldfSk7XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH0sXG4gIHNpemU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgKytzaXplO1xuICAgIHJldHVybiBzaXplO1xuICB9LFxuICBlbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZWFjaDogZnVuY3Rpb24oZikge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBmKHRoaXNbcHJvcGVydHldLCBwcm9wZXJ0eS5zbGljZSgxKSwgdGhpcyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1hcChvYmplY3QsIGYpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXA7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE1hcCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkgeyBtYXAuc2V0KGtleSwgdmFsdWUpOyB9KTtcblxuICAvLyBJbmRleCBhcnJheSBieSBudW1lcmljIGluZGV4IG9yIHNwZWNpZmllZCBrZXkgZnVuY3Rpb24uXG4gIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBvYmplY3QubGVuZ3RoLFxuICAgICAgICBvO1xuXG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoaSwgb2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYobyA9IG9iamVjdFtpXSwgaSwgb2JqZWN0KSwgbyk7XG4gIH1cblxuICAvLyBDb252ZXJ0IG9iamVjdCB0byBtYXAuXG4gIGVsc2UgaWYgKG9iamVjdCkgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcblxuICByZXR1cm4gbWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXA7XG4iLCJpbXBvcnQgbWFwIGZyb20gXCIuL21hcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGtleXMgPSBbXSxcbiAgICAgIHNvcnRLZXlzID0gW10sXG4gICAgICBzb3J0VmFsdWVzLFxuICAgICAgcm9sbHVwLFxuICAgICAgbmVzdDtcblxuICBmdW5jdGlvbiBhcHBseShhcnJheSwgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSB7XG4gICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSB7XG4gICAgICBpZiAoc29ydFZhbHVlcyAhPSBudWxsKSBhcnJheS5zb3J0KHNvcnRWYWx1ZXMpO1xuICAgICAgcmV0dXJuIHJvbGx1cCAhPSBudWxsID8gcm9sbHVwKGFycmF5KSA6IGFycmF5O1xuICAgIH1cblxuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGtleSA9IGtleXNbZGVwdGgrK10sXG4gICAgICAgIGtleVZhbHVlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdmFsdWVzQnlLZXkgPSBtYXAoKSxcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICByZXN1bHQgPSBjcmVhdGVSZXN1bHQoKTtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWVzID0gdmFsdWVzQnlLZXkuZ2V0KGtleVZhbHVlID0ga2V5KHZhbHVlID0gYXJyYXlbaV0pICsgXCJcIikpIHtcbiAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWx1ZXNCeUtleS5lYWNoKGZ1bmN0aW9uKHZhbHVlcywga2V5KSB7XG4gICAgICBzZXRSZXN1bHQocmVzdWx0LCBrZXksIGFwcGx5KHZhbHVlcywgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZW50cmllcyhtYXAsIGRlcHRoKSB7XG4gICAgaWYgKCsrZGVwdGggPiBrZXlzLmxlbmd0aCkgcmV0dXJuIG1hcDtcbiAgICB2YXIgYXJyYXksIHNvcnRLZXkgPSBzb3J0S2V5c1tkZXB0aCAtIDFdO1xuICAgIGlmIChyb2xsdXAgIT0gbnVsbCAmJiBkZXB0aCA+PSBrZXlzLmxlbmd0aCkgYXJyYXkgPSBtYXAuZW50cmllcygpO1xuICAgIGVsc2UgYXJyYXkgPSBbXSwgbWFwLmVhY2goZnVuY3Rpb24odiwgaykgeyBhcnJheS5wdXNoKHtrZXk6IGssIHZhbHVlczogZW50cmllcyh2LCBkZXB0aCl9KTsgfSk7XG4gICAgcmV0dXJuIHNvcnRLZXkgIT0gbnVsbCA/IGFycmF5LnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc29ydEtleShhLmtleSwgYi5rZXkpOyB9KSA6IGFycmF5O1xuICB9XG5cbiAgcmV0dXJuIG5lc3QgPSB7XG4gICAgb2JqZWN0OiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU9iamVjdCwgc2V0T2JqZWN0KTsgfSxcbiAgICBtYXA6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApOyB9LFxuICAgIGVudHJpZXM6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBlbnRyaWVzKGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCksIDApOyB9LFxuICAgIGtleTogZnVuY3Rpb24oZCkgeyBrZXlzLnB1c2goZCk7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRLZXlzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0S2V5c1trZXlzLmxlbmd0aCAtIDFdID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRWYWx1ZXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRWYWx1ZXMgPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgcm9sbHVwOiBmdW5jdGlvbihmKSB7IHJvbGx1cCA9IGY7IHJldHVybiBuZXN0OyB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdCgpIHtcbiAgcmV0dXJuIHt9O1xufVxuXG5mdW5jdGlvbiBzZXRPYmplY3Qob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1hcCgpIHtcbiAgcmV0dXJuIG1hcCgpO1xufVxuXG5mdW5jdGlvbiBzZXRNYXAobWFwLCBrZXksIHZhbHVlKSB7XG4gIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG59XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgbWFwLCBwcmVmaXh9IGZyb20gXCIuL21hcFwiO1xuXG5mdW5jdGlvbiBTZXQoKSB7fVxuXG52YXIgcHJvdG8gPSBtYXAucHJvdG90eXBlO1xuXG5TZXQucHJvdG90eXBlID0gc2V0LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNldCxcbiAgaGFzOiBwcm90by5oYXMsXG4gIGFkZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YWx1ZSArPSBcIlwiO1xuICAgIHRoaXNbcHJlZml4ICsgdmFsdWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogcHJvdG8ucmVtb3ZlLFxuICBjbGVhcjogcHJvdG8uY2xlYXIsXG4gIHZhbHVlczogcHJvdG8ua2V5cyxcbiAgc2l6ZTogcHJvdG8uc2l6ZSxcbiAgZW1wdHk6IHByb3RvLmVtcHR5LFxuICBlYWNoOiBwcm90by5lYWNoXG59O1xuXG5mdW5jdGlvbiBzZXQob2JqZWN0LCBmKSB7XG4gIHZhciBzZXQgPSBuZXcgU2V0O1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBTZXQpIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IHNldC5hZGQodmFsdWUpOyB9KTtcblxuICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpdOKAmXMgYW4gYXJyYXkuXG4gIGVsc2UgaWYgKG9iamVjdCkge1xuICAgIHZhciBpID0gLTEsIG4gPSBvYmplY3QubGVuZ3RoO1xuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChmKG9iamVjdFtpXSwgaSwgb2JqZWN0KSk7XG4gIH1cblxuICByZXR1cm4gc2V0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXApIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkga2V5cy5wdXNoKGtleSk7XG4gIHJldHVybiBrZXlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWFwKSB7XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkgdmFsdWVzLnB1c2gobWFwW2tleV0pO1xuICByZXR1cm4gdmFsdWVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWFwKSB7XG4gIHZhciBlbnRyaWVzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBtYXApIGVudHJpZXMucHVzaCh7a2V5OiBrZXksIHZhbHVlOiBtYXBba2V5XX0pO1xuICByZXR1cm4gZW50cmllcztcbn1cbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyBuZXN0fSBmcm9tIFwiLi9uZXN0XCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc2V0fSBmcm9tIFwiLi9zZXRcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBtYXB9IGZyb20gXCIuL21hcFwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGtleXN9IGZyb20gXCIuL2tleXNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyB2YWx1ZXN9IGZyb20gXCIuL3ZhbHVlc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGVudHJpZXN9IGZyb20gXCIuL2VudHJpZXNcIjtcbiJdLCJzb3VyY2VSb290IjoiIn0=